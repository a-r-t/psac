using System;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace PSACompressor
{
    public class MainForm : Form
    {
        /// <summary>
        /// folder location where PSA program started up from
        /// </summary>
		private string path;

        /// <summary>
        /// int array of size 148449
        /// array tds contains the first 32 four sets of bytes in the file as base 10 numbers, while this one contains the rest of the file
        /// appears the max size of this array matches the file size limit that PSA will not open past (about 593kb)
        /// </summary>
		private int[] alm = new int[148449];

        /// <summary>
        /// int array of size 32
        /// contains first 32 four sets of bytes of the file as base 10 numbers
        /// e.g. A2 34 B4 91 would be one set of four bytes.
        /// </summary>
		private int[] tds = new int[32];

        /// <summary>
        /// Name of moveset PAC file currently being worked with
        /// </summary>
		private string editFilePath;

        private string[] AtrEtxd = new string[185];

        private int[] EveEtid = new int[500];

        private string[] EveEtxd = new string[2000];

        private int[] ElvEtid = new int[500];

        private string[] ElvEtxd = new string[500];

        private int[] ParEtid = new int[500];

        private string[] ParEtxd = new string[500];

        private string[] ReqEtxd = new string[151];

        private string[] CharPar = new string[2000];

        /// <summary>
        /// Name of PAC moveset file
        /// Found used when selecting a PAC file to open from File > Open menu
        /// </summary>
		private string rd1;

        private string rd2;

        private string rd3;

        private string rd4;

        private string rdn;

        private float rdfr;

        private int aid;

        private int alist;

        private int sid;

        private int slist;

        private int[] asc = new int[37000];

        private int[] rnext = new int[2000];

        private int ParFW;

        private int ParFH;

        private int ChgFW;

        private int ChgFH;

        private int ExrFW;

        private int ExrFH;

        private int OvrFW;

        private int OvrFH;

        /// <summary>
        /// Contains a byte from PAC moveset file
        /// Used to read in a byte from the file stream of the PAC moveset file
        /// Seems to just be used as needed, no rhyme or reason to the variable name
        /// </summary>
		private int g;

        /// <summary>
        /// Contains a byte from PAC moveset file
        /// Used to read in a byte from the file stream of the PAC moveset file
        /// Seems to just be used as needed, no rhyme or reason to the variable name
        /// </summary>
        private int h;

        /// <summary>
        /// Contains a byte from PAC moveset file
        /// Used to read in a byte from the file stream of the PAC moveset file
        /// Seems to just be used as needed, no rhyme or reason to the variable name
        /// </summary>
        private int i;

        /// <summary>
        /// Contains a byte from PAC moveset file
        /// Used to read in a byte from the file stream of the PAC moveset file
        /// Seems to just be used as needed, no rhyme or reason to the variable name
        /// </summary>
        private int j;

        /// <summary>
        /// Contains additive number of number of datatable elements (tds[27] and number of external sub routines (tds[28])
        /// </summary>
        private int k;

        private int m;

        /// <summary>
        /// Used to convert a series of bytes to a base ten number
        /// Often containing operands g, h, i, j, and k
        /// Seems to just be used as needed, no rhyme or reason to the variable name.
        /// n = j + (i << 8) + (h << 16) + (g << 24);
        /// </summary>
		private int n;

        private int mov;

        private int rmv;

        /// <summary>
        /// Array of ints containing 512 indexes
        /// No idea whawt this stands for at the moment
        /// </summary>
		private int[] nonam = new int[512];

        /// <summary>
        /// total size of the moveset file (in kb) (I think)
        /// </summary>
		private int an1;

        private int an2;

        private int an3;

        private int an4;

        private int an5;

        /// <summary>
        /// Number special actions a moveset has (from 112 onwards)
        /// </summary>
		private int spas;

        /// <summary>
        /// Number of subactions a moveset has
        /// </summary>
		private int suba;

        /// <summary>
        /// Size of data section (in bytes I think)
        /// </summary>
        private int md;

        /// <summary>
        /// Location of Data Section
        /// </summary>
        private int dat;

        /// <summary>
        /// Number of offset entries
        /// </summary>
        private int par;

        private int rnexsize;

        private int stf;

        private int snstr;

        private int artpo;

        private int artpr;

        private int artdt;

        private int efdts;

        private byte fnt;

        private byte[] fntb = new byte[1];

        private byte[] bitf = new byte[4];

        private bool qe;

        private IContainer components = null;

        private MenuStrip MainStrip;

        private ToolStripMenuItem Filemenu;

        private ToolStripMenuItem Fopen;

        private ToolStripMenuItem Fsave;

        private ToolStripSeparator Filemenubar1;

        private ToolStripMenuItem Exitapps;

        private TabControl ModeChange;

        private TabPage CmpressMode;

        private Button CmpStart;

        private CheckBox SubaAsnameCmp;

        private CheckBox NameNoneCmp;

        /// <summary>
        /// On the Compress tab it's the giant textbox that I've never seen populated with text before
        /// To the left of the checkboxes
        /// </summary>
		private TextBox CmpText;

        private TabPage EventEditMode;

        /// <summary>
        /// Listbox contains PSA code for selected Events sub tab (e.g. Specials, Sub Actions)
        /// Events tab
        /// </summary>
		private ListBox EvList;

        /// <summary>
        /// Textbox contains description of selected PSA command
        /// Events tab
        /// </summary>
		private TextBox EvDesText;

        private TabControl EventTab;

        private TabPage EvSp;

        /// <summary>
        /// Textbox contains offset location for selected Action code block (e.g. Entry, Exit)
        /// Events > Specials tab
        /// </summary>
		private TextBox EvSpOffset;

        /// <summary>
        /// Combobox containing code blocks for selected Action (e.g. Entry, Exit)
        /// Events > Specials tab
        /// </summary>
		private ComboBox EvSpCbList;

        private Label EvSpListLabel;

        /// <summary>
        /// Combobox contains ids of all special actions (e.g. 112, 113)
        /// Events > Specials tab
        /// </summary>
		private ComboBox EvSpCbID;

        private Label EvSpIDLabel;

        private TabPage EvSuba;

        /// <summary>
        /// Textbox contains name of animation associated with selected subaction
        /// Event Sub Actions tab
        /// </summary>
		private TextBox EvSubaAnim;

        private Label EvSubaAnimLabel;

        /// <summary>
        /// Textbox contains offset location for current subaction code block
        /// Changes per subaction/per subaction code block (.e.g. Main has different offset than GFX)
        /// Events > Sub Actions tab
        /// </summary>
		private TextBox EvSubaOffset;

        /// <summary>
        /// Button opens up form for selecting subaction animation flags for selected subaction
        /// Events > Sub Actions tab
        /// </summary>
		private Button EvSubaAnimFlag;

        /// <summary>
        /// Combobox contains list of subaction code blocks (e.g. Main, GFX, SFX, Oher) for selected subaction
        /// Events > Sub Actions tab
        /// </summary>
		private ComboBox EvSubaCbList;

        private Label EvSubaListLabel;

        private Label EvSubaIDLabel;

        /// <summary>
        /// Combobox contains list of all subaction ids
        /// Events > Sub Actions tab
        /// </summary>
		private ComboBox EvSubaCbID;

        private TabPage EvRn;

        /// <summary>
        /// Textbox contains offset of currently viewed subroutine
        /// Events > Sub Routines tab
        /// </summary>
		private TextBox EvRnOffset;

        /// <summary>
        /// Button creates a new subroutine
        /// Events > Sub Routines tab
        /// </summary>
		private Button EvRnCreate;

        /// <summary>
        /// Button goes to specified subrouine in EvRnOfSele
        /// Events > Sub Routines tab
        /// </summary>
		private Button EvRnOpen;

        /// <summary>
        /// Textbox specifies which subroutine to go to
        /// Events > Sub Routines tab
        /// </summary>
		private TextBox EvRnOfSele;

        private TabPage AtrEditMode;

        private TabPage ArticleEditMode;

        private TabPage DataViewMode;

        private TextBox pacname;

        private TextBox minitxt;

        /// <summary>
        /// Button to paste selected PSA code from EvList
        /// Events tab
        /// </summary>
        private Button EvPaste;

        /// <summary>
        /// Button to copy selected PSA code from EvList
        /// Events tab
        /// </summary>
		private Button EvCopy;

        /// <summary>
        /// Button to move selected PSA code instruction downwards in order in EvList
        /// Events tab
        /// </summary>
		private Button EvDown;

        /// <summary>
        /// Button to move selected PSA code instruction upwards in order in EvList
        /// Events tab
        /// </summary>
		private Button EvUp;

        /// <summary>
        /// Button to remove selected PSA code instruction from EvList
        /// Events tab
        /// </summary>
		private Button EvRemove;

        /// <summary>
        /// Button to modify selected PSA code instruction from EvList
        /// Events tab
        /// </summary>
        private Button EvModify;

        /// <summary>
        /// Button to add new PSA code instruction to EvList
        /// Events tab
        /// </summary>
		private Button EvAdd;

        private Label EvSpOffsetLabel;

        private Label EvSubaOffsetLabel;

        private Label EvRnOfSeleLabel;

        private Label EvRnOffsetLabel;

        /// <summary>
        /// DataGridView of all attributes of a character (e.g. initial run speed, weight)
        /// Attributes tab
        /// </summary>
		private DataGridView AtrEdList;

        private TextBox AtrEdText;

        private Label AtrEdListLabel;

        private Label ArticleIDLabel;

        /// <summary>
        /// Combobox with list of all article ids
        /// Articles tab
        /// </summary>
		private ComboBox ArticleIDCb;

        private TabControl ArticleTab;

        private TabPage ArtAction;

        private TabPage ArtSuba;

        private TabPage ArtParam;

        private TabPage ArtData;

        private Button ArtActPaste;

        private Button ArtActCopy;

        private Button ArtActDown;

        private Button ArtActUp;

        private Button ArtActRemove;

        private Button ArtActModify;

        private Button ArtActAdd;

        /// <summary>
        /// Contains PSA code for selected action in selected article
        /// Articles > Actions tab
        /// </summary>
		private ListBox ArtActList;

        private TextBox ArtActText;

        private Label ArtActOffsetLabel;

        /// <summary>
        /// Offset location for selected article's action
        /// Articles > Actions tab
        /// </summary>
		private TextBox ArtActOffset;

        /// <summary>
        /// Article action code block list
        /// I've been unable to make this visible in any test moveset I tried
        /// I guess it was supposed to handle "Entry/Exit" code blocks but maybe those don't exist for articles?
        /// </summary>
		private ComboBox ArtActCbList;

        private ComboBox ArtActId;

        private Label ArtActIdLabel;

        private Label ArtSubaOffsetLabel;

        private TextBox ArtSubaAnim;

        private Label ArtSubaAnimLabel;

        /// <summary>
        /// Offset location for selected article's action's subaction
        /// Articles > Sub Actions tab
        /// </summary>
		private TextBox ArtSubaOffset;

        private Button ArtSubaAnimFlag;

        private ComboBox ArtSubaCbList;

        private Label ArtSubaListLabel;

        private Label ArtSubaIdLabel;

        private ComboBox ArtSubaId;

        private Button ArtSubaPaste;

        private Button ArtSubaCopy;

        private Button ArtSubaDown;

        private Button ArtSubaUp;

        private Button ArtSubaRemove;

        private Button ArtSubaModify;

        private Button ArtSubaAdd;

        /// <summary>
        /// Contains PSA code for selected subaction for selected action for selected article
        /// Articles > Sub Actions tab
        /// </summary>
		private ListBox ArtSubaList;

        private TextBox ArtSubaText;

        private TextBox ArtParText;

        /// <summary>
        /// DataGridView contains each article parameter name and corresponding value
        /// (e.g. Mario's fireball has parameters for intial speed, angle)
        /// Articles > Parameters tab
        /// </summary>
        private DataGridView ArtParList;

        private DataGridViewTextBoxColumn AtrParListDataLabel;

        private DataGridViewTextBoxColumn AtrParListParam;

        private Label ArtParOffsetLabel;

        /// <summary>
        /// Offset location for selected article's parameters (floating points)
        /// Articles > Parameters tab
        /// </summary>
		private TextBox ArtParOffset;

        /// <summary>
        /// Combobox for selecting which parameters to see of selected article
        /// Articles > Parameters tab
        /// </summary>
		private ComboBox ArtParCbList;

        private Label ArtParListLabel;

        /// <summary>
        /// List of offsets for each article
        /// Articles > Data Offset tab
        /// </summary>
		private ListBox ArtDataList;

        private TabControl DataTab;

        private TabPage DataOffset;

        /// <summary>
        /// List of all offsets for data tab (e.g. where bone references section is located)
        /// Data > Data Offset tab
        /// </summary>
		private ListBox DataOffsetList;

        private TabPage DataTable;

        /// <summary>
        /// Not actually sure what info this holds, it always with just "data" and then has like "status" something or other
        /// Data > Data Table tab
        /// </summary>
		private ListBox DataDTList;

        private TabPage DataExRn;

        /// <summary>
        /// List of all external subroutines
        /// Data > External Sub Routines tab
        /// </summary>
		private ListBox DataExrnList;

        private ToolStripMenuItem Settingmenu;

        private ToolStripMenuItem Settingdatasave;

        private ToolStripMenuItem Helpmenu;

        private ToolStripMenuItem AboutVersion;

        private TabPage EvOvr;

        private Label EvOvrOffsetLabel;

        /// <summary>
        /// Offset location of selected override
        /// Events > Override tab
        /// </summary>
		private TextBox EvOvrOffset;

        /// <summary>
        /// Code Block selection to see action overrides for (Entry, Exit, or Pre)
        /// Events > Override tab
        /// </summary>
		private ComboBox EvOvrCbList;

        private Label EvOvrListLabel;

        /// <summary>
        /// Combobox for all action override ids that exist based on the code block selected (Entry, Exit, or Pre)
        /// Events > Override tab
        /// </summary>
		private ComboBox EvOvrId;

        private Label EvOvrIdLabel;

        private DataGridViewTextBoxColumn AtrEdListParam;

        private DataGridViewTextBoxColumn AtrEdListAtr;

        private DataGridViewTextBoxColumn AtrEdListSSE;

        private ContextMenuStrip EvStrip;

        private ToolStripMenuItem EvNoSelect;

        private ToolStripMenuItem EvAllSelect;

        private ToolStripMenuItem EvOffsetView;

        private ToolStripMenuItem EvOpenSubRoutine;

        private ToolStripMenuItem EvRefresh;

        private ToolStripMenuItem EvCopytxt;

        private ToolStripMenuItem EvMoveOffset;

        private ToolStripMenuItem EvOffsetInterlock;

        private ContextMenuStrip AtrEdStrip;

        private ToolStripMenuItem AtrIntFloat;

        private ToolStripMenuItem AtrHexView;

        private OpenFileDialog OpenpacFile;

        private SaveFileDialog SavepacFile;

        private CheckBox SSEAtrAs;

        private ContextMenuStrip ArtParStrip;

        private ToolStripMenuItem ArtIntFloat;

        private ToolStripMenuItem ArtHexView;

        private ToolStripMenuItem OpenArtParOff;

        private ToolStripTextBox ArtParValuetxt;

        private ToolStripMenuItem ArtParAddressOpen;

        private ToolStripMenuItem ArtParOffsetOpen;

        private ToolStripComboBox ArtParOffOpenSize;

        private ContextMenuStrip DataExrnStrip;

        private ToolStripMenuItem DataExrnAdd;

        private ToolStripMenuItem DataExrnRemove;

        private ContextMenuStrip EvOvrStrip;

        private ToolStripMenuItem EvOvrEdit;

        private ToolStripMenuItem EvOvrRemove;

        private ToolStripMenuItem EvOvrUp;

        private ToolStripMenuItem EvOvrDown;

        private ContextMenuStrip AnimStrip;

        private ToolStripMenuItem AnimFlagTxtView;

        private ToolStripMenuItem DataExrnRename;

        private ToolStripMenuItem DataExrnUp;

        private ToolStripMenuItem DataExrnDown;

        private ContextMenuStrip DataDTStrip;

        private ToolStripMenuItem DataDTCopytxt;

        private ToolStripMenuItem EvSeleExrn;

        private CheckBox DelPSAData;

        private CheckBox SpAllEvCmp;

        private CheckBox SubaAllEvCmp;

        private ToolStripMenuItem EstiMinSize;

        private ToolStripMenuItem CurrentSize;

        private ToolStripMenuItem DataDTOffsetView;

        private ToolStripMenuItem DataExrnOffsetView;

        private ToolStripMenuItem DataExrnCopytxt;

        private CheckBox CmpInRn;

        /// <summary>
        /// Combobox -- Idk what this does and can't seem to get any values to populate
        /// Events > Sub Routines tab
        /// </summary>
		private ComboBox EvRnOffTrace;

        private ContextMenuStrip EvRnStrip;

        private ToolStripMenuItem EvRnGenDat;

        private ToolStripComboBox EvRnGenDatCbList;

        private ToolStripMenuItem EvRnItmCount;

        private ToolStripMenuItem EvRnSortDat;

        private ToolStripMenuItem EvRnTraceDat;

        private ToolStripMenuItem EvRnFullItemTrace;

        /// <summary>
        /// Combobox contains all previous gone to subroutines??? Not really sure
        /// Events > Sub Routines tab
        /// </summary>
		private ComboBox EvRnOffCbList;

        private CheckBox ExternalCmp;

        private CheckBox NoEventCmp;

        private ToolStripMenuItem SearchSameDataRoutine;

        private ToolStripMenuItem SearchPerfectMatchingDataRoutine;

        private TabPage ArtCompress;

        private Button ArtCmpStart;

        private CheckBox ArtCmpInRn;

        private CheckBox ArtAllEvCmp;

        private CheckBox ArtNoEventCmp;

        private CheckBox ArtEmptyCmp;

        private ToolStripMenuItem SearchSameDataNotFullRoutine;

        private CheckBox SameDataCmp;

        private CheckBox EmptyCmp;

        private ToolStripMenuItem EvListMoveF;

        private ToolStripMenuItem EvListMoveB;

        private ToolStripMenuItem EvParMoveF;

        private ToolStripMenuItem EvParMoveB;

        /// <summary>
        /// For action overrides, if Pre is selected, this butotn appears and opens up a form for external action overrides?
        /// Events > Override tab
        /// </summary>
		private Button EvPreSelExternal;

        private ContextMenuStrip EvCopyStrip;

        private ToolStripMenuItem EvCopyOffsetRn;

        private ContextMenuStrip EvPasteStrip;

        private ToolStripMenuItem EvMultiPaste;

        private CheckBox CmpRnData;

        private ToolStripMenuItem EvOvrListMoveOffset;

        private ToolStripMenuItem EvSeleParamEqualize;

        private ToolStripMenuItem EvRnCmpSameData;

        private ToolStripMenuItem Viewmenu;

        private ToolStripMenuItem ViewEvPlus;

        private ToolStripMenuItem GenUsingUnkEvDt;

        private ToolStripMenuItem GenUsingVarDt;

        private TabPage DMisc;

        private SplitContainer DMiscSplit;

        /// <summary>
        /// TreeView of all sections of Data Misc (e.g. bone references, hand bones)
        /// Data > Misc tab
        /// </summary>
		private TreeView DMiscList;

        /// <summary>
        /// Contains options for format for inserting value for a new Data Misc element in DMiscPtxt (sometimes it shows up)
        /// Has things like "Int", "HexValue"
        /// Data > Misc tab
        /// </summary>
		private ComboBox DMiscCb;

        /// <summary>
        /// After making a change to DMiscPtxt, this button commits the change
        /// Data > Misc tab
        /// </summary>
		private Button DMiscDone;

        /// <summary>
        /// Shows value that you can change for various things like hand bones, bone floats...basically anything in that Misc section
        /// Data > Misc tab
        /// </summary>
		private TextBox DMiscPtxt;

        /// <summary>
        /// ListView of all selected params in a Data Misc tree section
        /// Usually looks like: Data0 ... 0x1, Data1 ... 0x4
        /// Data > Misc tab
        /// </summary>
		private ListView DMiscParam;

        /// <summary>
        /// Offset location of selected Data Misc element
        /// Data > Misc tab
        /// </summary>
		private TextBox DMiscOffset;

        private Label DMiscOffsetLabel;

        private ToolStripSeparator Settingmenubar1;

        private ToolStripMenuItem SettingSaveImportfilename;

        private ToolStripMenuItem SettingSaveImportlocation;

        private ToolStripSeparator Viewmenubar1;

        private ToolStripMenuItem EvOvrListMoveB;

        private ToolStripMenuItem EvOvrListCount;

        private ToolStripMenuItem EvOvrListSort;

        private Label ArtOfflabel;

        private TextBox ArtOffset;

        private ToolStripMenuItem SettingReadMisc;

        private ToolStripMenuItem GenBugDatas;

        private ToolStripMenuItem SettingEvTab;

        private ToolStripMenuItem Qsave;

        private ToolStripMenuItem SettingQS;

        private ToolStripMenuItem NQS;

        private ToolStripMenuItem EQS;

        private ToolStripMenuItem OWS;

        private ToolStripMenuItem AllSameAnim;

        private ToolStripMenuItem AnimAutoSave;

        private ToolStripMenuItem EvRnCpy;

        private ToolStripMenuItem RnTraceCpy;

        /// <summary>
        /// opens/parses moveset file
        /// this method is called by OpenpacFile_FileOk (which is when you do file > open and click a moveset) after doing some setup work
        /// tds is first 32 four set of bytes as base ten numbers in file
        /// alm is the rest of the file ^
        /// j is the number of indexes used up in alm currently
        /// </summary>
		private void PacFileOpens()
        {
            // an1 is the total size of the moveset file (in kb) I believe
            an1 = j * 4;

            // not sure what the deal with this is
            // if the base ten number in tds is less than 0 or greater than j...it sets the 24th bit to -1...
            // can't get this to activate on any movesets I've tested on so ignoring for now...
            for (i = 25; i < 29; i++)
            {
                if (tds[i] < 0 || tds[i] >= an1)
                {
                    tds[24] = -1;
                    break;
                }
            }

            // Pointless
            if (CmpText.Text == null)
            {
                CmpText.Text = "";
            }
            // What who cares??? Why???? It's a textbox and you have full control over what text is put there????
            else if (CmpText.Text.Length > 88)
            {
                CmpText.Text = "";
            }

            // resets a bunch of form controls to prepare them to be loaded
            DataDTList.Items.Clear();
            DataExrnList.Items.Clear();
            ArtDataList.Items.Clear();
            DataOffsetList.Items.Clear();
            ArtParCbList.Items.Clear();
            ArtParList.Rows.Clear();
            ArtActList.Items.Clear();
            ArtSubaList.Items.Clear();
            AtrEdList.Enabled = false;
            ArtParList.Enabled = false;
            EvPreSelExternal.Visible = false;
            ArtActCbList.Visible = false;
            EvSpCbID.Items.Clear();
            EvSubaCbID.Items.Clear();
            EvOvrId.Items.Clear();
            EvSubaCbList.Items.Clear();
            ArticleIDCb.Items.Clear();
            EvDesText.Text = "";
            EvRnOffCbList.Items.Clear();
            EvRnOffTrace.Items.Clear();
            EvRnOfSele.Text = "";
            EvRnOffCbList.Text = "";
            EvRnOffTrace.Text = "";
            EvSpOffset.Text = "";
            EvSubaOffset.Text = "";
            EvRnOffset.Text = "";
            EvOvrOffset.Text = "";
            ArtActOffset.Text = "";
            ArtSubaOffset.Text = "";
            ArtParOffset.Text = "";
            EvOvrId.Text = "";
            DMiscPtxt.Visible = false;
            DMiscDone.Visible = false;
            DMiscCb.Visible = false;
            DMiscParam.Items.Clear();
            DMiscOffset.Text = "";
            EvOvrCbList.Text = "";
            EvList.Items.Clear();
            EvOvrCbList.Items.Clear();
            DMiscList.Nodes.Clear();

            // just like the above one, index 24 of tds must be pretty significant...not sure what it means though
            // none of my test movesets got this to activate...
            if (tds[26] >= 37000)
            {
                tds[24] = 0;
            }

            // seems to signifiy it's a moveset PSA???
            // triggers for all my test movesets so far
            if (tds[24] > 8192 && tds[24] < an1 + 128)
            {
                // tds[25] is size of data section
                md = tds[25] / 4;
                // tds[26] is number offset entries
                par = tds[26];
                // tds[27] is how many data table elements there are
                // tds[28] is how many external subroutines there are
                // adding them together allows for later on looping through and finding them all in one go
                k = tds[27] + tds[28];
                dat = 0;
                i = md + par + k * 2;

                // haven't gotten this to trigger on a moveset
                if (tds[24] - tds[25] - tds[26] * 4 > 8000)
                {
                    i = 0;
                }

                // triggers on all test movesets
                if (i > 2024 && i < an1 / 4)
                {
                    // triggers on all test movesets
                    if (alm[i - 1] >> 16 == 0)
                    {
                        // seems to get name of moveset, like opening FitRidley which is Lucario based returns FitLucario
                        rd3 = "";
                        j = 4; // number of bytes until name is over from the beginning of file??
                        n = 0;
                        while (n < 48)
                        {
                            if (n % 4 == 0)
                            {
                                fntb[0] = (byte)((tds[j] >> 24) & 0xFF);
                            }
                            else if (n % 4 == 1)
                            {
                                fntb[0] = (byte)((tds[j] >> 16) & 0xFF);
                            }
                            else if (n % 4 == 2)
                            {
                                fntb[0] = (byte)((tds[j] >> 8) & 0xFF);
                            }
                            else
                            {
                                fntb[0] = (byte)(tds[j] & 0xFF);
                                j++;
                            }
                            if (fntb[0] != 0)
                            {
                                rd3 += Encoding.UTF8.GetString(fntb);
                                n++;
                                continue;
                            }
                            break;
                        }
                        m = md + par - 2;
                        h = 0;

                        /*
                         * seems that this while loop is for populating:
                         * DataDTList -- list of Data Table elements in Data > Data Table tab
						 * DataExrnList -- list of external subroutines in Data > External Sub routines tab
                         */
                        while (h < k)
                        {
                            rd1 = "";
                            m += 2;
                            g = alm[m + 1];
                            if (g >= 0)
                            {
                                while (true)
                                {
                                    bool flag = true;
                                    if (g % 4 == 0)
                                    {
                                        fntb[0] = (byte)((alm[i + g / 4] >> 24) & 0xFF);
                                    }
                                    else if (g % 4 == 1)
                                    {
                                        fntb[0] = (byte)((alm[i + g / 4] >> 16) & 0xFF);
                                    }
                                    else if (g % 4 == 2)
                                    {
                                        fntb[0] = (byte)((alm[i + g / 4] >> 8) & 0xFF);
                                    }
                                    else
                                    {
                                        fntb[0] = (byte)(alm[i + g / 4] & 0xFF);
                                    }
                                    if (fntb[0] != 0)
                                    {
                                        rd1 += Encoding.UTF8.GetString(fntb);
                                        g++;
                                        continue;
                                    }
                                    break;
                                }
                                if (dat == 0)
                                {
                                    // Only happens when Fighter.pac is opened
                                    if (rd3 == "Fighter")
                                    {
                                        if (rd1 == "dataCommon")
                                        {
                                            dat = alm[m] / 4;
                                        }
                                    }
                                    // Only happens when moveset file is opened
                                    else if (rd1 == "data")
                                    {
                                        dat = alm[m] / 4;
                                    }
                                }
                                if (h < tds[27])
                                {
                                    DataDTList.Items.Add(rd1);
                                }
                                else
                                {
                                    DataExrnList.Items.Add(rd1);
                                }
                                h++;
                                continue;
                            }
                            an1 = 0;
                            break;
                        }
                        if (dat < 2024 || dat >= an1 / 4)
                        {
                            an1 = 0;
                        }
                    }
                    else
                    {
                        an1 = 0;
                    }
                }
                else
                {
                    an1 = 0;
                }
            }
            else
            {
                an1 = 0;
            }
            if (an1 != 0)
            {
                // gets size of data section - 1??
                m = tds[25] - 1;

                // This only happens for when Fighter.pac gets opened
                if (rd3 == "Fighter")
                {
                    if (dat < md)
                    {
                        for (i = 0; i < 15; i++)
                        {
                            if (alm[dat + i] < 0 && alm[dat + i] > m)
                            {
                                i = 200;
                            }
                        }
                        if (i == 15)
                        {
                            if ((alm[dat + 5] - alm[dat + 4]) / 4 != 274)
                            {
                                an1 = 0;
                            }
                            else
                            {
                                i = alm[dat + 4] / 4;
                                for (h = i + 274; i < h; i++)
                                {
                                    if (alm[i] < 0 || alm[i + 274] < 0 || alm[i] > m || alm[i + 274] > m)
                                    {
                                        an1 = 0;
                                        break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            an1 = 0;
                        }
                    }
                    else
                    {
                        an1 = 0;
                    }
                    // I believe this only happens for when Fighter.pac gets opened
                    if (an1 != 0)
                    {
                        for (i = 0; i < 274; i++)
                        {
                            EvSpCbID.Items.Add(i.ToString("X"));
                        }
                        k = md + par;
                        j = (tds[24] + 3) / 4 - k - 8;
                        rnexsize = j;
                        for (i = 0; i < j; i++)
                        {
                            rnext[i] = alm[k];
                            k++;
                        }
                        for (i = 0; i < par; i++)
                        {
                            asc[i] = alm[md + i];
                        }
                        while (i < 37000)
                        {
                            asc[i] = 16777216;
                            i++;
                        }
                        EventTab.Enabled = true;
                        DataTab.Enabled = true;
                        if (EvSp.Text != "Actions")
                        {
                            EvSp.Text = "Actions";
                            EvSuba.Text = "<null>";
                            EvOvr.Text = "<null>";
                            EvSubaAnim.Text = "";
                            EvSubaCbList.Text = "";
                            EvSubaCbID.Enabled = false;
                            EvSubaCbList.Enabled = false;
                            EvOvrId.Enabled = false;
                            EvOvrCbList.Enabled = false;
                            EvSeleExrn.Enabled = false;
                            DataExrnList.Enabled = false;
                            EvMultiPaste.Visible = false;
                            EvRnGenDatCbList.Items[3] = "Common External Sub Routines";
                        }
                        ArticleIDCb.Enabled = false;
                        ArticleTab.Enabled = false;
                        DataOffsetList.Items.Add("Unknown0   \t - 0x" + alm[dat].ToString("X"));
                        DataOffsetList.Items.Add("Unknown1   \t - 0x" + alm[dat + 1].ToString("X"));
                        DataOffsetList.Items.Add("Unknown2   \t - 0x" + alm[dat + 2].ToString("X"));
                        DataOffsetList.Items.Add("Unknown3   \t - 0x" + alm[dat + 3].ToString("X"));
                        DataOffsetList.Items.Add("ActionEntry\t - 0x" + alm[dat + 4].ToString("X"));
                        DataOffsetList.Items.Add("ActionExit   \t - 0x" + alm[dat + 5].ToString("X"));
                        DataOffsetList.Items.Add("UnknownEffectData\t - 0x" + alm[dat + 6].ToString("X"));
                        stf = 1499;
                        spas = 0;
                    }
                }
                // triggers when moveset is opened
                else
                {
                    // seems to trigger for all test movesets
                    if (dat < md)
                    {

                        // Idk what this section does, omitting it in the port for now because it doesn't seem to activate on any moveset
                        for (i = 0; i < 27; i++)
                        {
                            if (alm[dat + i] < 0 && alm[dat + i] > m)
                            {
                                i = 200;
                            }
                        }

                        // gets number of subactions and actions in moveset
                        if (i == 27)
                        {
                            suba = (alm[dat + 13] - alm[dat + 12]) / 4;
                            spas = (alm[dat + 10] - alm[dat + 9]) / 4;

                            // these both don't activate on test movesets either, omitting for now
                            if ((alm[dat + 14] - alm[dat + 13]) / 4 != suba)
                            {
                                an1 = 0;
                            }
                            if ((alm[dat + 15] - alm[dat + 14]) / 4 != suba)
                            {
                                an1 = 0;
                            }
                        }
                        else
                        {
                            an1 = 0;
                        }
                    }
                    else
                    {
                        an1 = 0;
                    }
                    if (an1 != 0)
                    {
                        // only for IceClimbers base moveset?
                        if (rd3 == "FitPopo")
                        {
                            an2 = 2;
                        }
                        // Every other moveset
                        else
                        {
                            an2 = 1;
                        }
                        i = 0;
                        fnt = 2;
                        CharPar[0] = "";

                        // reads in config files from CharSpecific folder
                        if (Directory.Exists(path + "\\CharSpecific\\") && File.Exists(path + "\\CharSpecific\\" + rd3 + ".txt"))
                        {
                            // reading it in line by line with a streamreader for some reason even though they're pretty small files
                            StreamReader streamReader = new StreamReader(path + "\\CharSpecific\\" + rd3 + ".txt", Encoding.GetEncoding("UTF-8"));
                            if ((rd1 = streamReader.ReadLine()) != null && rd1.Length >= 12)
                            {
                                rd2 = rd1.Substring(0, 10);
                                if (rd2 == "DataSize0x")
                                {
                                    rd2 = rd1.Substring(10);
                                    j = rd2.Length;
                                    fnt = 0;
                                    for (i = 0; i < j; i++)
                                    {
                                        if (!Uri.IsHexDigit(rd2[i]))
                                        {
                                            fnt = 1;
                                            break;
                                        }
                                    }
                                    if (fnt == 0)
                                    {
                                        g = Convert.ToInt32(rd2, 16);
                                        if (g % 4 == 0 && dat + g / 4 <= md && g >= 128)
                                        {
                                            CharPar[0] = rd1;
                                            i = 1;
                                            ArticleIDCb.Items.Add("No Select");
                                            if (rd3 == "FitPopo")
                                            {
                                                k = 136;
                                            }
                                            else
                                            {
                                                k = 120;
                                            }
                                            // pretty sure this entire thing is for reading in article ids
                                            while ((rd1 = streamReader.ReadLine()) != null)
                                            {
                                                if (rd1.Length >= 7)
                                                {
                                                    if (rd1[0] == 'X')
                                                    {
                                                        rd2 = rd1.Substring(1, 2);
                                                        fnt = 0;
                                                        if (Uri.IsHexDigit(rd2[0]))
                                                        {
                                                            if (!Uri.IsHexDigit(rd2[1]))
                                                            {
                                                                fnt = 1;
                                                                break;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (!SettingReadMisc.Checked)
                                                            {
                                                                fnt = 1;
                                                                break;
                                                            }
                                                            if (rd2 != "NS" && rd2 != "KV" && rd2 != "KA")
                                                            {
                                                                fnt = 1;
                                                                break;
                                                            }
                                                        }
                                                        if (fnt != 0)
                                                        {
                                                            continue;
                                                        }
                                                        rd2 = rd1.Substring(4);
                                                        n = rd2.Length;
                                                        j = 2;
                                                        while (j < n && rd2[j] == '-')
                                                        {
                                                            j += 3;
                                                        }
                                                        if (j > n)
                                                        {
                                                            fnt = 1;
                                                            break;
                                                        }
                                                        n = j + 1;
                                                        j = 0;
                                                        while (j < n && Uri.IsHexDigit(rd2[j]) && Uri.IsHexDigit(rd2[j + 1]))
                                                        {
                                                            j += 3;
                                                        }
                                                        if (j < n)
                                                        {
                                                            fnt = 1;
                                                            break;
                                                        }
                                                        rd2 = rd1.Substring(4, 2);
                                                        j = Convert.ToInt32(rd2, 16);
                                                        h = j * 4;
                                                        if (h < g)
                                                        {
                                                            if (rd1[1] == 'N')
                                                            {
                                                                if (h <= 136)
                                                                {
                                                                    fnt = 1;
                                                                    break;
                                                                }
                                                                CharPar[i] = rd1;
                                                                i++;
                                                                an2 = 2;
                                                            }
                                                            else
                                                            {
                                                                CharPar[i] = rd1;
                                                                i++;
                                                            }
                                                            continue;
                                                        }
                                                        fnt = 1;
                                                        break;
                                                    }
                                                    rd2 = rd1.Substring(0, 3);
                                                    fnt = 0;
                                                    for (j = 0; j < 3; j++)
                                                    {
                                                        if (!Uri.IsHexDigit(rd2[j]))
                                                        {
                                                            fnt = 1;
                                                            break;
                                                        }
                                                    }
                                                    if (fnt != 0)
                                                    {
                                                        break;
                                                    }
                                                    n = Convert.ToInt32(rd2, 16);
                                                    j = alm[dat + n / 4];
                                                    if (j <= 8096 || j > m)
                                                    {
                                                        n = 0;
                                                    }
                                                    if (n <= k || n >= g || n % 4 != 0)
                                                    {
                                                        break;
                                                    }
                                                    j = rd1.Length - 1;
                                                    rd2 = "";
                                                    if (rd1.Length > 7)
                                                    {
                                                        rd2 = rd1.Substring(4, 3);
                                                        if (rd2 == "Par")
                                                        {
                                                            fnt = 2;
                                                            k = rd1.Length;
                                                            CharPar[i] = rd1;
                                                            i++;
                                                            fnt = 2;
                                                        }
                                                        else
                                                        {
                                                            if (!(rd2 == "Art"))
                                                            {
                                                                fnt = 1;
                                                                break;
                                                            }
                                                            rd2 = rd1.Substring(7);
                                                            ArticleIDCb.Items.Add(rd2);
                                                            CharPar[i] = rd1;
                                                            i++;
                                                            fnt = 2;
                                                        }
                                                    }
                                                    k = n;
                                                    continue;
                                                }
                                                fnt = 1;
                                                break;
                                            }
                                            if (rd1.Length < 2)
                                            {
                                                while ((rd1 = streamReader.ReadLine()) != null && rd1.Length < 2)
                                                {
                                                }
                                            }
                                            if (rd1.Length >= 7)
                                            {
                                                CharPar[i] = "D-END";
                                                i++;
                                            }
                                            if (fnt == 1)
                                            {
                                                if (rd1.Length >= 2)
                                                {
                                                    CharPar[i] = rd1;
                                                    i++;
                                                }
                                                fnt = 0;
                                            }
                                            while ((rd1 = streamReader.ReadLine()) != null)
                                            {
                                                if (rd1.Length >= 2)
                                                {
                                                    CharPar[i] = rd1;
                                                    i++;
                                                }
                                                if (i > 1997)
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            fnt = 1;
                                        }
                                    }
                                }
                            }
                            streamReader.Close();
                        }
                        while (i < 1999 && CharPar[i] != null)
                        {
                            CharPar[i] = "";
                            i++;
                        }
                        // doesn't seem to trigger for movesets
                        if (an2 == 2)
                        {
                            for (k = 31; k < 35; k++)
                            {
                                if (alm[dat + k] > 0 && alm[dat + k] < m)
                                {
                                    k = 100;
                                }
                            }
                            if (k == 35)
                            {
                                if ((alm[dat + 32] - alm[dat + 31]) / 4 != suba)
                                {
                                    suba = 0;
                                }
                                if ((alm[dat + 33] - alm[dat + 32]) / 4 != suba)
                                {
                                    suba = 0;
                                }
                                if ((alm[dat + 34] - alm[dat + 33]) / 4 != suba)
                                {
                                    suba = 0;
                                }
                            }
                        }

                        if (suba < 462 || suba > 2048)
                        {
                            an1 = 0;
                        }
                        else if (spas < 5 || spas > 2048)
                        {
                            an1 = 0;
                        }
                        // triggers for movesets, no idea what it does
                        else
                        {

                            n = alm[dat + 9] / 4;
                            k = n + spas;
                            for (i = n; i < k; i++)
                            {
                                if (alm[i] < 0 || alm[i] >= m)
                                {
                                    an1 = 0;
                                    break;
                                }
                            }
                            n = alm[dat + 12] / 4;
                            k = n + suba * 4;
                            for (i = n; i < k; i++)
                            {
                                if (alm[i] < 0 || alm[i] >= m)
                                {
                                    an1 = 0;
                                    break;
                                }
                            }
                            if (an2 == 2)
                            {
                                n = alm[dat + 31] / 4;
                                k = n + suba * 4;
                                for (i = n; i < k; i++)
                                {
                                    if (alm[i] < 0 || alm[i] >= m)
                                    {
                                        an1 = 0;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    // triggers for movesets
                    if (an1 != 0)
                    {
                        stf = 2014 + spas * 2;
                        snstr = alm[dat + 11] / 4 + 274 + spas;
                        k = md + par;
                        j = (tds[24] + 3) / 4 - k - 8;
                        rnexsize = j;
                        for (i = 0; i < j; i++)
                        {
                            rnext[i] = alm[k];
                            k++;
                        }
                        while (i < 2000)
                        {
                            rnext[i] = 0;
                            i++;
                        }
                        for (i = 0; i < par; i++)
                        {
                            asc[i] = alm[md + i];
                        }
                        while (i < 37000)
                        {
                            asc[i] = 16777216;
                            i++;
                        }

                        // gets attributes
                        for (i = 0; i < 185; i++)
                        {
                            // gets name of attribute from config
                            rd1 = AtrEdList[0, i].Value.ToString();

                            // if attribute is an int (* in front of it)
                            if (rd1[0] == '*')
                            {
                                AtrEdList[1, i].Value = alm[i].ToString();
                                AtrEdList[2, i].Value = alm[i + 185].ToString();
                            }
                            // if attribute is a floating point
                            else
                            {
                                bitf = BitConverter.GetBytes(alm[i]);
                                rdfr = BitConverter.ToSingle(bitf, 0);
                                AtrEdList[1, i].Value = rdfr.ToString();
                                bitf = BitConverter.GetBytes(alm[i + 185]);
                                rdfr = BitConverter.ToSingle(bitf, 0);
                                AtrEdList[2, i].Value = rdfr.ToString();
                            }
                        }
                        // populates action id combobox with how many actions the moveset has
                        // starts with 274 (112 in hex), spas is number of special actions moveset has
                        for (i = 274; i < 274 + spas; i++)
                        {
                            EvSpCbID.Items.Add(i.ToString("X"));
                        }
                        for (i = 0; i < suba; i++)
                        {
                            EvSubaCbID.Items.Add(i.ToString("X"));
                        }

                        // gets a whole lot of offsets for misc stuff like bone references
                        DataOffsetList.Items.Add("SubActionFlags\t - 0x" + alm[dat].ToString("X"));
                        DataOffsetList.Items.Add("ModelVisibility\t - 0x" + alm[dat + 1].ToString("X"));
                        DataOffsetList.Items.Add("Attributes   \t - 0x" + alm[dat + 2].ToString("X"));
                        DataOffsetList.Items.Add("SSEAttributes\t - 0x" + alm[dat + 3].ToString("X"));
                        DataOffsetList.Items.Add("MiscSection   \t - 0x" + alm[dat + 4].ToString("X"));
                        DataOffsetList.Items.Add("CommonActionFlags\t - 0x" + alm[dat + 5].ToString("X"));
                        DataOffsetList.Items.Add("SpecialActionFlags\t - 0x" + alm[dat + 6].ToString("X"));
                        DataOffsetList.Items.Add("ExtraActionFlags\t - 0x" + alm[dat + 7].ToString("X"));
                        DataOffsetList.Items.Add("ActionInterrupts\t - 0x" + alm[dat + 8].ToString("X"));
                        DataOffsetList.Items.Add("EntrySpecials\t - 0x" + alm[dat + 9].ToString("X"));
                        DataOffsetList.Items.Add("ExitSpecials\t - 0x" + alm[dat + 10].ToString("X"));
                        DataOffsetList.Items.Add("ActionPre   \t - 0x" + alm[dat + 11].ToString("X"));
                        DataOffsetList.Items.Add("SubActionMain\t - 0x" + alm[dat + 12].ToString("X"));
                        DataOffsetList.Items.Add("SubActionGFX\t - 0x" + alm[dat + 13].ToString("X"));
                        DataOffsetList.Items.Add("SubActionSFX\t - 0x" + alm[dat + 14].ToString("X"));
                        DataOffsetList.Items.Add("SubActionOther\t - 0x" + alm[dat + 15].ToString("X"));
                        DataOffsetList.Items.Add("BoneFloats1\t - 0x" + alm[dat + 16].ToString("X"));
                        DataOffsetList.Items.Add("BoneFloats2\t - 0x" + alm[dat + 17].ToString("X"));
                        DataOffsetList.Items.Add("BoneReferences\t - 0x" + alm[dat + 18].ToString("X"));
                        DataOffsetList.Items.Add("HandBones\t - 0x" + alm[dat + 19].ToString("X"));
                        DataOffsetList.Items.Add("EntryActionOverride\t - 0x" + alm[dat + 20].ToString("X"));
                        DataOffsetList.Items.Add("ExitActionOverride\t - 0x" + alm[dat + 21].ToString("X"));
                        DataOffsetList.Items.Add("ExtraActionInterrupts\t - 0x" + alm[dat + 22].ToString("X"));
                        DataOffsetList.Items.Add("BoneFloats3\t - 0x" + alm[dat + 23].ToString("X"));
                        DataOffsetList.Items.Add("Unknown24\t - 0x" + alm[dat + 24].ToString("X"));
                        DataOffsetList.Items.Add("StaticArticles\t - 0x" + alm[dat + 25].ToString("X"));
                        DataOffsetList.Items.Add("EntryArticle\t - 0x" + alm[dat + 26].ToString("X"));
                        EvSubaCbList.Items.Add("Main");
                        EvSubaCbList.Items.Add("GFX");
                        EvSubaCbList.Items.Add("SFX");
                        EvSubaCbList.Items.Add("Other");
                        EvOvrCbList.Items.Add("Entry");
                        EvOvrCbList.Items.Add("Exit");
                        EvOvrCbList.Items.Add("Pre");

                        // if IceClimbers, Nana gets extra stuff!!
                        if (an2 == 2)
                        {
                            DataOffsetList.Items.Add("NanaSubActionMain\t - 0x" + alm[dat + 31].ToString("X"));
                            DataOffsetList.Items.Add("NanaSubActionGFX\t - 0x" + alm[dat + 32].ToString("X"));
                            DataOffsetList.Items.Add("NanaSubActionSFX\t - 0x" + alm[dat + 33].ToString("X"));
                            DataOffsetList.Items.Add("NanaSubActionOther\t - 0x" + alm[dat + 34].ToString("X"));
                            EvSubaCbList.Items.Add("NMain");
                            EvSubaCbList.Items.Add("NGFX");
                            EvSubaCbList.Items.Add("NSFX");
                            EvSubaCbList.Items.Add("NOther");
                        }
                        DataOffsetList.Items.Add("------------------------------");
                        DataOffsetList.Items.Add("DataFlags0\t - 0x" + alm[dat + 27].ToString("X"));
                        DataOffsetList.Items.Add("DataFlags1\t - 0x" + alm[dat + 28].ToString("X"));
                        DataOffsetList.Items.Add("DataFlags2\t - 0x" + alm[dat + 29].ToString("X"));
                        DataOffsetList.Items.Add("DataFlags3\t - 0x" + alm[dat + 30].ToString("X"));
                        EventTab.Enabled = true;
                        AtrEdList.Enabled = true;
                        DataTab.Enabled = true;
                        if (EvSp.Text != "Specials")
                        {
                            EvSp.Text = "Specials";
                            EvSuba.Text = "Sub Actions";
                            EvOvr.Text = "Override";
                            EvSubaCbID.Enabled = true;
                            EvSubaCbList.Enabled = true;
                            EvSubaCbList.Enabled = true;
                            EvOvrId.Enabled = true;
                            EvOvrCbList.Enabled = true;
                            EvSeleExrn.Enabled = true;
                            DataExrnList.Enabled = true;
                            EvMultiPaste.Visible = true;
                            EvRnGenDatCbList.Items[3] = "Extract Sub Routines (in Articles)";
                        }
                        ArticleIDCb.Enabled = true;
                        ArticleTab.Enabled = true;
                        DataTab.Enabled = true;
                        if (SettingReadMisc.Checked)
                        {
                            if (alm[dat + 1] >= 8096 && alm[dat + 1] < tds[25])
                            {
                                TreeNode treeNode = new TreeNode("ModelVisibility");
                                h = alm[dat + 1] / 4;
                                if (alm[h] >= 8096 && alm[h] < tds[25])
                                {
                                    k = alm[h] / 4;
                                    g = alm[h + 1];
                                    if (g > 0 && g < 256)
                                    {
                                        if (alm[k] >= 8096 && alm[k] < tds[25])
                                        {
                                            treeNode.Nodes.Add(new TreeNode("Hidden"));
                                            m = alm[k] / 4;
                                            for (i = 0; i < g; i++)
                                            {
                                                treeNode.Nodes[0].Nodes.Add(new TreeNode("BoneSwitch" + i));
                                                n = alm[m + i * 2 + 1];
                                                if (n > 0 && n < 256 && alm[m + i * 2] >= 8096 && alm[m + i * 2] < tds[25])
                                                {
                                                    an2 = alm[m + i * 2] / 4;
                                                    for (j = 0; j < n; j++)
                                                    {
                                                        treeNode.Nodes[0].Nodes[i].Nodes.Add(new TreeNode("BoneGroup" + j));
                                                        if (alm[an2 + j * 2] >= 8096 && alm[an2 + j * 2] < tds[25] && alm[an2 + j * 2 + 1] > 0 && alm[an2 + j * 2 + 1] < 256)
                                                        {
                                                            treeNode.Nodes[0].Nodes[i].Nodes[j].Nodes.Add(new TreeNode("List"));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (alm[k + 1] >= 8096 && alm[k + 1] < tds[25])
                                        {
                                            treeNode.Nodes.Add(new TreeNode("Visible"));
                                            m = alm[k + 1] / 4;
                                            for (i = 0; i < g; i++)
                                            {
                                                treeNode.Nodes[1].Nodes.Add(new TreeNode("BoneSwitch" + i));
                                                n = alm[m + i * 2 + 1];
                                                if (n > 0 && n < 256 && alm[m + i * 2] >= 8096 && alm[m + i * 2] < tds[25])
                                                {
                                                    an2 = alm[m + i * 2] / 4;
                                                    for (j = 0; j < n; j++)
                                                    {
                                                        treeNode.Nodes[1].Nodes[i].Nodes.Add(new TreeNode("BoneGroup" + j));
                                                        if (alm[an2 + j * 2] >= 8096 && alm[an2 + j * 2] < tds[25] && alm[an2 + j * 2 + 1] > 0 && alm[an2 + j * 2 + 1] < 256)
                                                        {
                                                            treeNode.Nodes[1].Nodes[i].Nodes[j].Nodes.Add(new TreeNode("List"));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                g = alm[h + 3];
                                if (alm[h + 2] >= 8096 && alm[h + 2] < tds[25] && g > 0 && g < 256)
                                {
                                    for (i = 0; i < g; i++)
                                    {
                                        treeNode.Nodes.Add(new TreeNode("Data" + i));
                                    }
                                }
                                DMiscList.Nodes.Add(treeNode);
                            }
                            if (alm[dat + 4] >= 8096 && alm[dat + 4] < tds[25])
                            {
                                TreeNode treeNode2 = new TreeNode("MiscSection");
                                h = alm[dat + 4] / 4;
                                k = 0;
                                if (alm[h] >= 8096 && alm[h] < tds[25])
                                {
                                    treeNode2.Nodes.Add(new TreeNode("Misc Section 1"));
                                    k++;
                                }
                                treeNode2.Nodes.Add(new TreeNode("Final Smash Aura"));
                                if (alm[h + 1] >= 8096 && alm[h + 1] < tds[25])
                                {
                                    g = alm[h + 2];
                                    if (g > 0 && g < 256)
                                    {
                                        n = alm[h + 1] / 4;
                                        for (i = 0; i < g; i++)
                                        {
                                            treeNode2.Nodes[k].Nodes.Add(new TreeNode("Data" + i));
                                        }
                                    }
                                }
                                k++;
                                treeNode2.Nodes.Add(new TreeNode("Hurt Boxes"));
                                if (alm[h + 3] >= 8096 && alm[h + 3] < tds[25])
                                {
                                    g = alm[h + 4];
                                    if (g > 0 && g < 256)
                                    {
                                        n = alm[h + 3] / 4 + 7;
                                        for (i = 0; i < g; i++)
                                        {
                                            treeNode2.Nodes[k].Nodes.Add(new TreeNode("Data" + i));
                                        }
                                    }
                                }
                                k++;
                                if (alm[h + 5] >= 8096 && alm[h + 5] < tds[25])
                                {
                                    g = alm[h + 6];
                                    if (g > 0 && g < 256)
                                    {
                                        treeNode2.Nodes.Add(new TreeNode("Ledge Grab"));
                                        for (i = 0; i < g; i++)
                                        {
                                            treeNode2.Nodes[k].Nodes.Add(new TreeNode("Ledge Grab" + i));
                                        }
                                        k++;
                                    }
                                }
                                if (alm[h + 7] >= 8096 && alm[h + 7] < tds[25])
                                {
                                    g = alm[h + 8];
                                    if (g > 0 && g < 256)
                                    {
                                        treeNode2.Nodes.Add(new TreeNode("Misc Section 2"));
                                        for (i = 0; i < g; i++)
                                        {
                                            treeNode2.Nodes[k].Nodes.Add(new TreeNode("Unknown" + i));
                                        }
                                        k++;
                                    }
                                }
                                if (alm[h + 9] >= 8096 && alm[h + 9] < tds[25])
                                {
                                    treeNode2.Nodes.Add(new TreeNode("Bone References"));
                                    k++;
                                }
                                if (alm[h + 10] >= 8096 && alm[h + 10] < tds[25])
                                {
                                    m = alm[h + 10] / 4;
                                    if (alm[m + 4] >= 8096 && alm[m + 4] < tds[25])
                                    {
                                        treeNode2.Nodes.Add(new TreeNode("Item Bones"));
                                        g = alm[m + 3];
                                        if (g > 0 && g < 256)
                                        {
                                            for (i = 0; i < g; i++)
                                            {
                                                treeNode2.Nodes[k].Nodes.Add(new TreeNode("Data" + i));
                                            }
                                        }
                                        k++;
                                    }
                                }
                                if (alm[h + 11] >= 8096 && alm[h + 11] < tds[25])
                                {
                                    n = alm[h + 11] / 4;
                                    if (alm[n] >= 8096 && alm[n] < tds[25])
                                    {
                                        treeNode2.Nodes.Add(new TreeNode("Sound Lists"));
                                        m = alm[n] / 4;
                                        g = alm[n + 1];
                                        if (g > 0 && g < 256)
                                        {
                                            for (i = 0; i < g; i++)
                                            {
                                                treeNode2.Nodes[k].Nodes.Add(new TreeNode("SoundData" + i));
                                                if (alm[m + i * 2] >= 8096 && alm[m + i * 2] < tds[25])
                                                {
                                                    treeNode2.Nodes[k].Nodes[i].Nodes.Add(new TreeNode("List"));
                                                }
                                            }
                                        }
                                        k++;
                                    }
                                }
                                if (alm[h + 12] >= 8096 && alm[h + 12] < tds[25])
                                {
                                    treeNode2.Nodes.Add(new TreeNode("Misc Section 5"));
                                    k++;
                                }
                                if (alm[h + 13] >= 8096 && alm[h + 13] < tds[25])
                                {
                                    treeNode2.Nodes.Add(new TreeNode("Multi Jump"));
                                    n = alm[h + 13] / 4;
                                    if (alm[n + 4] >= 8096 && alm[n + 4] < tds[25])
                                    {
                                        treeNode2.Nodes[k].Nodes.Add(new TreeNode("Hops"));
                                    }
                                    if (alm[n + 5] >= 8096 && alm[n + 5] < tds[25])
                                    {
                                        treeNode2.Nodes[k].Nodes.Add(new TreeNode("Unknown"));
                                    }
                                    k++;
                                }
                                if (alm[h + 14] >= 8096 && alm[h + 14] < tds[25])
                                {
                                    treeNode2.Nodes.Add(new TreeNode("Glide"));
                                    k++;
                                }
                                if (alm[h + 15] >= 8096 && alm[h + 15] < tds[25])
                                {
                                    treeNode2.Nodes.Add(new TreeNode("Crawl"));
                                    k++;
                                }
                                if (alm[h + 16] >= 8096 && alm[h + 16] < tds[25])
                                {
                                    treeNode2.Nodes.Add(new TreeNode("Collision Data"));
                                    n = alm[h + 16] / 4;
                                    if (alm[n] >= 8096 && alm[n] < tds[25])
                                    {
                                        m = alm[n] / 4;
                                        if (alm[m] >= 8096 && alm[m] < tds[25])
                                        {
                                            treeNode2.Nodes[k].Nodes.Add(new TreeNode("Data"));
                                            j = alm[m] / 4;
                                            if (alm[j + 1] >= 8096 && alm[j + 1] < tds[25] && alm[j + 2] > 0 && alm[j + 2] < 256)
                                            {
                                                treeNode2.Nodes[k].Nodes[0].Nodes.Add(new TreeNode("List"));
                                            }
                                        }
                                    }
                                    k++;
                                }
                                if (alm[h + 17] >= 8096 && alm[h + 17] < tds[25])
                                {
                                    treeNode2.Nodes.Add(new TreeNode("Tether"));
                                    k++;
                                }
                                if (alm[h + 18] >= 8096 && alm[h + 18] < tds[25])
                                {
                                    treeNode2.Nodes.Add(new TreeNode("Misc Section 12"));
                                    n = alm[h + 18] / 4;
                                    if (alm[n] >= 8096 && alm[n] < tds[25])
                                    {
                                        g = alm[n + 1];
                                        if (g > 0 && g < 256)
                                        {
                                            treeNode2.Nodes[k].Nodes.Add(new TreeNode("List"));
                                        }
                                    }
                                }
                                DMiscList.Nodes.Add(treeNode2);
                            }
                            if (alm[dat + 5] >= 1480 && alm[dat + 5] < tds[25])
                            {
                                TreeNode treeNode3 = new TreeNode("CommonActionFlags");
                                for (i = 0; i < 274; i++)
                                {
                                    treeNode3.Nodes.Add(new TreeNode("Action " + i.ToString("X")));
                                }
                                DMiscList.Nodes.Add(treeNode3);
                            }
                            if (alm[dat + 6] >= 1480 && alm[dat + 6] < tds[25])
                            {
                                TreeNode treeNode4 = new TreeNode("SpecialActionFlags");
                                for (i = 274; i < 274 + spas; i++)
                                {
                                    treeNode4.Nodes.Add(new TreeNode("Action " + i.ToString("X")));
                                }
                                DMiscList.Nodes.Add(treeNode4);
                            }
                            if (alm[dat + 7] >= 1480 && alm[dat + 7] < tds[25])
                            {
                                TreeNode treeNode5 = new TreeNode("ExtraActionFlags");
                                for (i = 0; i < 274 + spas; i++)
                                {
                                    treeNode5.Nodes.Add(new TreeNode("Action " + i.ToString("X")));
                                }
                                DMiscList.Nodes.Add(treeNode5);
                            }
                            if (alm[dat + 8] >= 8096 && alm[dat + 8] < tds[25])
                            {
                                DMiscList.Nodes.Add("ActionInterrupts");
                            }
                            if (alm[dat + 16] >= 8096 && alm[dat + 16] < tds[25])
                            {
                                TreeNode treeNode6 = new TreeNode("BoneFloats1");
                                n = alm[dat + 16] / 4;
                                for (i = 0; i < 3; i++)
                                {
                                    treeNode6.Nodes.Add(new TreeNode("Data" + i));
                                }
                                DMiscList.Nodes.Add(treeNode6);
                            }
                            if (alm[dat + 17] >= 8096 && alm[dat + 17] < tds[25])
                            {
                                TreeNode treeNode7 = new TreeNode("BoneFloats2");
                                n = alm[dat + 17] / 4;
                                if (alm[dat + 17] < alm[dat + 23] && alm[dat + 23] < tds[25])
                                {
                                    g = (alm[dat + 23] - alm[dat + 17]) / 28;
                                    if (g > 25 || g < 1)
                                    {
                                        g = 1;
                                    }
                                    for (i = 0; i < g; i++)
                                    {
                                        treeNode7.Nodes.Add(new TreeNode("Data" + i));
                                    }
                                }
                                else if (alm[dat + 17] < alm[dat + 18] && alm[dat + 18] < tds[25])
                                {
                                    g = (alm[dat + 18] - alm[dat + 17]) / 28;
                                    if (g > 25 || g < 1)
                                    {
                                        g = 1;
                                    }
                                    for (i = 0; i < g; i++)
                                    {
                                        treeNode7.Nodes.Add(new TreeNode("Data" + i));
                                    }
                                }
                                else
                                {
                                    treeNode7.Nodes.Add(new TreeNode("Data0"));
                                }
                                DMiscList.Nodes.Add(treeNode7);
                            }
                            if (alm[dat + 23] >= 8096 && alm[dat + 23] < tds[25])
                            {
                                TreeNode treeNode8 = new TreeNode("BoneFloats3");
                                n = alm[dat + 23] / 4;
                                if (alm[dat + 23] < alm[dat + 18] && alm[dat + 18] < tds[25])
                                {
                                    g = (alm[dat + 18] - alm[dat + 23]) / 28;
                                    if (g > 25 || g < 1)
                                    {
                                        g = 1;
                                    }
                                    for (i = 0; i < g; i++)
                                    {
                                        treeNode8.Nodes.Add(new TreeNode("Data" + i));
                                    }
                                }
                                else
                                {
                                    treeNode8.Nodes.Add(new TreeNode("Data0"));
                                }
                                DMiscList.Nodes.Add(treeNode8);
                            }
                            if (alm[dat + 18] >= 8096 && alm[dat + 18] < tds[25])
                            {
                                DMiscList.Nodes.Add("BoneReferences");
                            }
                            if (alm[dat + 19] >= 8096 && alm[dat + 19] < tds[25])
                            {
                                TreeNode treeNode9 = new TreeNode("HandBones");
                                n = alm[dat + 19] / 4 + 4;
                                if (alm[n + 1] >= 8096 && alm[n + 1] < tds[25])
                                {
                                    g = alm[n];
                                    if (g > 0 && g < 256)
                                    {
                                        treeNode9.Nodes.Add(new TreeNode("List"));
                                    }
                                }
                                DMiscList.Nodes.Add(treeNode9);
                            }
                            DMiscList.Nodes.Add("ExtraActionInterrupts");
                            if (alm[dat + 24] >= 8096 && alm[dat + 24] < tds[25])
                            {
                                TreeNode treeNode10 = new TreeNode("Unknown24");
                                n = alm[dat + 24] / 4;
                                if (alm[n] >= 8096 && alm[n] < tds[25] && alm[n + 1] > 0 && alm[n + 1] < 256)
                                {
                                    treeNode10.Nodes.Add(new TreeNode("List"));
                                }
                                DMiscList.Nodes.Add(treeNode10);
                            }
                            if (alm[dat + 25] >= 8096 && alm[dat + 25] < tds[25])
                            {
                                k = alm[dat + 25] / 4;
                                if (alm[k] >= 8096 && alm[k] < tds[25])
                                {
                                    h = alm[k] / 4;
                                    g = alm[k + 1];
                                    if (g > 0 && g < 21)
                                    {
                                        TreeNode treeNode11 = new TreeNode("StaticArticles");
                                        for (i = 0; i < g; i++)
                                        {
                                            treeNode11.Nodes.Add(new TreeNode("Article" + i));
                                            if (alm[h + 4] >= 8096 && alm[h + 4] < tds[25])
                                            {
                                                if (alm[h + 7] >= 8096 && alm[h + 7] < tds[25])
                                                {
                                                    treeNode11.Nodes[i].Nodes.Add(new TreeNode("SubAction GFX"));
                                                }
                                                else
                                                {
                                                    treeNode11.Nodes[i].Nodes.Add(new TreeNode("SubAction"));
                                                }
                                            }
                                            if (alm[h + 12] >= 8096 && alm[h + 12] < tds[25])
                                            {
                                                treeNode11.Nodes[i].Nodes.Add(new TreeNode("Data3"));
                                            }
                                            h += 14;
                                        }
                                        DMiscList.Nodes.Add(treeNode11);
                                    }
                                }
                            }
                            if (alm[dat + 26] >= 8096 && alm[dat + 26] < tds[25])
                            {
                                TreeNode treeNode12 = new TreeNode("EntryArticle");
                                h = alm[dat + 26] / 4;
                                if (alm[h + 4] >= 8096 && alm[h + 4] < tds[25])
                                {
                                    if (alm[h + 7] >= 8096 && alm[h + 7] < tds[25])
                                    {
                                        treeNode12.Nodes.Add(new TreeNode("SubAction GFX"));
                                    }
                                    else
                                    {
                                        treeNode12.Nodes.Add(new TreeNode("SubAction"));
                                    }
                                }
                                if (alm[h + 12] >= 8096 && alm[h + 12] < tds[25])
                                {
                                    treeNode12.Nodes.Add(new TreeNode("Data3"));
                                }
                                DMiscList.Nodes.Add(treeNode12);
                            }
                            an5 = 1;
                            if (CharPar[1] != null)
                            {
                                i = 1;
                                while (CharPar[i].Length >= 7)
                                {
                                    if (CharPar[i][0] == 'X')
                                    {
                                        if (CharPar[i][1] == 'N')
                                        {
                                            an5 = 0;
                                            break;
                                        }
                                        if (CharPar[i][1] == 'K')
                                        {
                                            an5 = 0;
                                            break;
                                        }
                                    }
                                    i++;
                                }
                            }
                            if (an5 == 0)
                            {
                                TreeNode treeNode13 = new TreeNode("ExtraDatas");
                                i = 1;
                                while (CharPar[i].Length >= 7)
                                {
                                    if (CharPar[i][0] == 'X')
                                    {
                                        if (CharPar[i][1] == 'N')
                                        {
                                            rd4 = CharPar[i].Substring(4);
                                            n = rd4.Length;
                                            an2 = dat;
                                            an3 = 0;
                                            j = 2;
                                            while (j < n && rd4[j] == '-')
                                            {
                                                j += 3;
                                            }
                                            for (k = 0; k < j; k += 3)
                                            {
                                                rd1 = rd4.Substring(k, 2);
                                                g = Convert.ToInt32(rd1, 16);
                                                an4 = alm[an2 + g];
                                                an3 = alm[an2 + g + 1];
                                                an2 = an4 / 4;
                                                if (an2 < stf || an2 >= md)
                                                {
                                                    break;
                                                }
                                            }
                                            if (k > j && an3 > 0 && an3 < 20)
                                            {
                                                rd1 = rd4.Substring(j + 1);
                                                treeNode13.Nodes.Add(new TreeNode(rd1));
                                                for (k = 0; k < an3; k++)
                                                {
                                                    treeNode13.Nodes[an5].Nodes.Add(new TreeNode("SoundData" + k));
                                                    if (alm[an2 + k * 2] >= 8096 && alm[an2 + k * 2] < tds[25])
                                                    {
                                                        treeNode13.Nodes[an5].Nodes[k].Nodes.Add(new TreeNode("List"));
                                                    }
                                                }
                                                an5++;
                                            }
                                        }
                                        else if (CharPar[i][1] == 'K')
                                        {
                                            rd4 = CharPar[i].Substring(4);
                                            n = rd4.Length;
                                            an2 = dat;
                                            j = 2;
                                            while (j < n && rd4[j] == '-')
                                            {
                                                j += 3;
                                            }
                                            for (k = 0; k < j; k += 3)
                                            {
                                                rd1 = rd4.Substring(k, 2);
                                                g = Convert.ToInt32(rd1, 16);
                                                an4 = alm[an2 + g];
                                                an2 = an4 / 4;
                                                if (an2 < stf || an2 >= md)
                                                {
                                                    break;
                                                }
                                            }
                                            if (k > j)
                                            {
                                                rd1 = rd4.Substring(j + 1);
                                                treeNode13.Nodes.Add(new TreeNode(rd1));
                                                if (CharPar[i][2] == 'V')
                                                {
                                                    for (an4 = 0; an4 < 6; an4++)
                                                    {
                                                        treeNode13.Nodes[an5].Nodes.Add(new TreeNode("ModelVisibility" + an4));
                                                        h = alm[an2 + an4] / 4;
                                                        if (alm[h] >= 8096 && alm[h] < tds[25])
                                                        {
                                                            k = alm[h] / 4;
                                                            g = alm[h + 1];
                                                            if (g > 0 && g < 256)
                                                            {
                                                                if (alm[k] >= 8096 && alm[k] < tds[25])
                                                                {
                                                                    treeNode13.Nodes[an5].Nodes[an4].Nodes.Add(new TreeNode("Hidden"));
                                                                    m = alm[k] / 4;
                                                                    for (an3 = 0; an3 < g; an3++)
                                                                    {
                                                                        treeNode13.Nodes[an5].Nodes[an4].Nodes[0].Nodes.Add(new TreeNode("BoneSwitch" + an3));
                                                                        n = alm[m + an3 * 2 + 1];
                                                                        if (n > 0 && n < 256 && alm[m + an3 * 2] >= 8096 && alm[m + an3 * 2] < tds[25])
                                                                        {
                                                                            mov = alm[m + an3 * 2] / 4;
                                                                            for (j = 0; j < n; j++)
                                                                            {
                                                                                treeNode13.Nodes[an5].Nodes[an4].Nodes[0].Nodes[an3].Nodes.Add(new TreeNode("BoneGroup" + j));
                                                                                if (alm[mov + j * 2] >= 8096 && alm[mov + j * 2] < tds[25] && alm[mov + j * 2 + 1] > 0 && alm[mov + j * 2 + 1] < 256)
                                                                                {
                                                                                    treeNode13.Nodes[an5].Nodes[an4].Nodes[0].Nodes[an3].Nodes[j].Nodes.Add(new TreeNode("List"));
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                if (alm[k + 1] >= 8096 && alm[k + 1] < tds[25])
                                                                {
                                                                    treeNode13.Nodes[an5].Nodes[an4].Nodes.Add(new TreeNode("Visible"));
                                                                    m = alm[k + 1] / 4;
                                                                    for (an3 = 0; an3 < g; an3++)
                                                                    {
                                                                        treeNode13.Nodes[an5].Nodes[an4].Nodes[1].Nodes.Add(new TreeNode("BoneSwitch" + an3));
                                                                        n = alm[m + an3 * 2 + 1];
                                                                        if (n > 0 && n < 256 && alm[m + an3 * 2] >= 8096 && alm[m + an3 * 2] < tds[25])
                                                                        {
                                                                            mov = alm[m + an3 * 2] / 4;
                                                                            for (j = 0; j < n; j++)
                                                                            {
                                                                                treeNode13.Nodes[an5].Nodes[an4].Nodes[1].Nodes[an3].Nodes.Add(new TreeNode("BoneGroup" + j));
                                                                                if (alm[mov + j * 2] >= 8096 && alm[mov + j * 2] < tds[25] && alm[mov + j * 2 + 1] > 0 && alm[mov + j * 2 + 1] < 256)
                                                                                {
                                                                                    treeNode13.Nodes[an5].Nodes[an4].Nodes[1].Nodes[an3].Nodes[j].Nodes.Add(new TreeNode("List"));
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (alm[an2] >= 8096 && alm[an2] < tds[25])
                                                {
                                                    h = alm[an2] / 4;
                                                    treeNode13.Nodes[an5].Nodes.Add(new TreeNode("ExtraData"));
                                                    if (alm[h] >= 8096 && alm[h] < tds[25])
                                                    {
                                                        k = alm[h] / 4;
                                                        if (alm[k] >= 8096 && alm[k] < tds[25])
                                                        {
                                                            h = alm[k] / 4;
                                                            if (alm[h] >= 8096 && alm[h] < tds[25])
                                                            {
                                                                k = alm[h] / 4;
                                                                if (alm[k] >= 8096 && alm[k] < tds[25])
                                                                {
                                                                    treeNode13.Nodes[an5].Nodes[0].Nodes.Add(new TreeNode("Index"));
                                                                    h = alm[k] / 4;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (alm[an2 + 3] >= 8096 && alm[an2 + 3] < tds[25])
                                                    {
                                                        treeNode13.Nodes[an5].Nodes.Add(new TreeNode("Params2"));
                                                    }
                                                }
                                                an5++;
                                            }
                                        }
                                    }
                                    i++;
                                }
                                DMiscList.Nodes.Add(treeNode13);
                            }
                            if (ArticleIDCb.Items.Count > 1)
                            {
                                TreeNode treeNode14 = new TreeNode("ArticleExtraDatas");
                                an5 = 0;
                                for (an3 = 1; an3 < ArticleIDCb.Items.Count; an3++)
                                {
                                    an2 = 0;
                                    i = 1;
                                    while (CharPar[i].Length >= 7)
                                    {
                                        rd4 = CharPar[i].Substring(4, 3);
                                        if (rd4 == "Art")
                                        {
                                            an2++;
                                            if (an2 == an3)
                                            {
                                                rd4 = CharPar[i].Substring(0, 3);
                                                g = Convert.ToInt32(rd4, 16);
                                                an4 = alm[dat + g / 4] / 4;
                                                if (alm[an4 + 3] > 8096 && alm[an4 + 3] < tds[25])
                                                {
                                                    rd4 = CharPar[i].Substring(4);
                                                    an2 = 2;
                                                    while (CharPar[an2] != null && !(CharPar[an2] == rd4))
                                                    {
                                                        an2++;
                                                    }
                                                    if (!(CharPar[an2] == rd4) || CharPar[an2 + 1].Length > 5)
                                                    {
                                                        break;
                                                    }
                                                    rd4 = CharPar[an2 + 1];
                                                    k = rd4.Length - 1;
                                                    fnt = 1;
                                                    for (h = 1; h < k; h++)
                                                    {
                                                        if (rd4[h] == '-')
                                                        {
                                                            fnt = 0;
                                                            break;
                                                        }
                                                    }
                                                    if (fnt == 0)
                                                    {
                                                        rd2 = rd4.Substring(0, h);
                                                        rd1 = rd4.Substring(h + 1);
                                                        for (k = 0; k < h; k++)
                                                        {
                                                            if (!Uri.IsHexDigit(rd2[k]))
                                                            {
                                                                fnt = 1;
                                                                break;
                                                            }
                                                        }
                                                        if (fnt == 0)
                                                        {
                                                            h = rd1.Length;
                                                            for (k = 0; k < h; k++)
                                                            {
                                                                if (!Uri.IsHexDigit(rd1[k]))
                                                                {
                                                                    fnt = 1;
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (fnt != 0)
                                                    {
                                                        break;
                                                    }
                                                    h = Convert.ToInt32(rd2, 16);
                                                    if (h <= 0)
                                                    {
                                                        break;
                                                    }
                                                    treeNode14.Nodes.Add(new TreeNode("Article" + ArticleIDCb.Items[an3].ToString()));
                                                    treeNode14.Nodes[an5].Nodes.Add(new TreeNode("ActionFlags"));
                                                    for (j = 0; j < h; j++)
                                                    {
                                                        treeNode14.Nodes[an5].Nodes[0].Nodes.Add(new TreeNode("Action " + j.ToString("X")));
                                                    }
                                                    if (alm[an4 + 9] > 8096 && alm[an4 + 9] < tds[25])
                                                    {
                                                        treeNode14.Nodes[an5].Nodes.Add(new TreeNode("ModelVisibility"));
                                                        h = alm[an4 + 9] / 4;
                                                        if (alm[h] >= 8096 && alm[h] < tds[25])
                                                        {
                                                            k = alm[h] / 4;
                                                            g = alm[h + 1];
                                                            if (g > 0 && g < 20)
                                                            {
                                                                if (alm[k] >= 8096 && alm[k] < tds[25])
                                                                {
                                                                    treeNode14.Nodes[an5].Nodes[1].Nodes.Add(new TreeNode("Hidden"));
                                                                    m = alm[k] / 4;
                                                                    for (i = 0; i < g; i++)
                                                                    {
                                                                        treeNode14.Nodes[an5].Nodes[1].Nodes[0].Nodes.Add(new TreeNode("BoneSwitch" + i));
                                                                        n = alm[m + i * 2 + 1];
                                                                        if (n > 0 && n < 256 && alm[m + i * 2] >= 8096 && alm[m + i * 2] < tds[25])
                                                                        {
                                                                            mov = alm[m + i * 2] / 4;
                                                                            for (j = 0; j < n; j++)
                                                                            {
                                                                                treeNode14.Nodes[an5].Nodes[1].Nodes[0].Nodes[i].Nodes.Add(new TreeNode("BoneGroup" + j));
                                                                                if (alm[mov + j * 2] >= 8096 && alm[mov + j * 2] < tds[25] && alm[mov + j * 2 + 1] > 0 && alm[mov + j * 2 + 1] < 256)
                                                                                {
                                                                                    treeNode14.Nodes[an5].Nodes[1].Nodes[0].Nodes[i].Nodes[j].Nodes.Add(new TreeNode("List"));
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                if (alm[h + 2] >= 8096 && alm[h + 2] < tds[25])
                                                                {
                                                                    j = alm[h + 2] - alm[h];
                                                                }
                                                                else
                                                                {
                                                                    j = h * 4 - alm[h];
                                                                }
                                                                if (j != 4 && alm[k + 1] >= 8096 && alm[k + 1] < tds[25])
                                                                {
                                                                    treeNode14.Nodes[an5].Nodes[1].Nodes.Add(new TreeNode("Visible"));
                                                                    m = alm[k + 1] / 4;
                                                                    for (i = 0; i < g; i++)
                                                                    {
                                                                        treeNode14.Nodes[an5].Nodes[1].Nodes[1].Nodes.Add(new TreeNode("BoneSwitch" + i));
                                                                        n = alm[m + i * 2 + 1];
                                                                        if (n > 0 && n < 256 && alm[m + i * 2] >= 8096 && alm[m + i * 2] < tds[25])
                                                                        {
                                                                            mov = alm[m + i * 2] / 4;
                                                                            for (j = 0; j < n; j++)
                                                                            {
                                                                                treeNode14.Nodes[an5].Nodes[1].Nodes[1].Nodes[i].Nodes.Add(new TreeNode("BoneGroup" + j));
                                                                                if (alm[mov + j * 2] >= 8096 && alm[mov + j * 2] < tds[25] && alm[mov + j * 2 + 1] > 0 && alm[mov + j * 2 + 1] < 256)
                                                                                {
                                                                                    treeNode14.Nodes[an5].Nodes[1].Nodes[1].Nodes[i].Nodes[j].Nodes.Add(new TreeNode("List"));
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (alm[h + 2] >= 8096 && alm[h + 2] < tds[25] && alm[h + 3] > 0 && alm[h + 3] < 51)
                                                        {
                                                            treeNode14.Nodes[an5].Nodes[1].Nodes.Add(new TreeNode("Data"));
                                                        }
                                                        k = 2;
                                                    }
                                                    else
                                                    {
                                                        k = 1;
                                                    }
                                                    if (alm[an4 + 10] > 8096 && alm[an4 + 10] < tds[25])
                                                    {
                                                        i = alm[an4 + 10] / 4;
                                                        if (alm[i] > 8096 && alm[i] < tds[25])
                                                        {
                                                            treeNode14.Nodes[an5].Nodes.Add(new TreeNode("CollisionData"));
                                                            treeNode14.Nodes[an5].Nodes[k].Nodes.Add(new TreeNode("Data"));
                                                            k++;
                                                        }
                                                    }
                                                    if (alm[an4 + 11] > 8096 && alm[an4 + 11] < tds[25])
                                                    {
                                                        i = alm[an4 + 11] / 4;
                                                        if (alm[i] > 8096 && alm[i] < tds[25])
                                                        {
                                                            treeNode14.Nodes[an5].Nodes.Add(new TreeNode("Data2"));
                                                            if (alm[i + 1] == 1)
                                                            {
                                                                treeNode14.Nodes[an5].Nodes[k].Nodes.Add(new TreeNode("Data"));
                                                            }
                                                            else if (alm[i + 1] == 2)
                                                            {
                                                                for (j = 0; j < 2; j++)
                                                                {
                                                                    treeNode14.Nodes[an5].Nodes[k].Nodes.Add(new TreeNode("Data" + j.ToString("X")));
                                                                }
                                                            }
                                                            k++;
                                                        }
                                                    }
                                                    an5++;
                                                }
                                                else
                                                {
                                                    if (alm[an4 + 9] <= 8096 || alm[an4 + 9] >= tds[25])
                                                    {
                                                        break;
                                                    }
                                                    treeNode14.Nodes.Add(new TreeNode("Article" + ArticleIDCb.Items[an3].ToString()));
                                                    treeNode14.Nodes[an5].Nodes.Add(new TreeNode("ModelVisibility"));
                                                    h = alm[an4 + 9] / 4;
                                                    if (alm[h] >= 8096 && alm[h] < tds[25])
                                                    {
                                                        k = alm[h] / 4;
                                                        g = alm[h + 1];
                                                        if (g > 0 && g < 20)
                                                        {
                                                            if (alm[k] >= 8096 && alm[k] < tds[25])
                                                            {
                                                                treeNode14.Nodes[an5].Nodes[0].Nodes.Add(new TreeNode("Hidden"));
                                                                m = alm[k] / 4;
                                                                for (i = 0; i < g; i++)
                                                                {
                                                                    treeNode14.Nodes[an5].Nodes[0].Nodes[0].Nodes.Add(new TreeNode("BoneSwitch" + i));
                                                                    n = alm[m + i * 2 + 1];
                                                                    if (n > 0 && n < 256 && alm[m + i * 2] >= 8096 && alm[m + i * 2] < tds[25])
                                                                    {
                                                                        mov = alm[m + i * 2] / 4;
                                                                        for (j = 0; j < n; j++)
                                                                        {
                                                                            treeNode14.Nodes[an5].Nodes[0].Nodes[0].Nodes[i].Nodes.Add(new TreeNode("BoneGroup" + j));
                                                                            if (alm[mov + j * 2] >= 8096 && alm[mov + j * 2] < tds[25] && alm[mov + j * 2 + 1] > 0 && alm[mov + j * 2 + 1] < 256)
                                                                            {
                                                                                treeNode14.Nodes[an5].Nodes[0].Nodes[0].Nodes[i].Nodes[j].Nodes.Add(new TreeNode("List"));
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            if (alm[h + 2] >= 8096 && alm[h + 2] < tds[25])
                                                            {
                                                                j = alm[h + 2] - alm[h];
                                                            }
                                                            else
                                                            {
                                                                j = h * 4 - alm[h];
                                                            }
                                                            if (j != 4 && alm[k + 1] >= 8096 && alm[k + 1] < tds[25])
                                                            {
                                                                treeNode14.Nodes[an5].Nodes[0].Nodes.Add(new TreeNode("Visible"));
                                                                m = alm[k + 1] / 4;
                                                                for (i = 0; i < g; i++)
                                                                {
                                                                    treeNode14.Nodes[an5].Nodes[0].Nodes[1].Nodes.Add(new TreeNode("BoneSwitch" + i));
                                                                    n = alm[m + i * 2 + 1];
                                                                    if (n > 0 && n < 256 && alm[m + i * 2] >= 8096 && alm[m + i * 2] < tds[25])
                                                                    {
                                                                        mov = alm[m + i * 2] / 4;
                                                                        for (j = 0; j < n; j++)
                                                                        {
                                                                            treeNode14.Nodes[an5].Nodes[0].Nodes[1].Nodes[i].Nodes.Add(new TreeNode("BoneGroup" + j));
                                                                            if (alm[mov + j * 2] >= 8096 && alm[mov + j * 2] < tds[25] && alm[mov + j * 2 + 1] > 0 && alm[mov + j * 2 + 1] < 256)
                                                                            {
                                                                                treeNode14.Nodes[an5].Nodes[0].Nodes[1].Nodes[i].Nodes[j].Nodes.Add(new TreeNode("List"));
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (alm[h + 2] >= 8096 && alm[h + 2] < tds[25] && alm[h + 3] > 0 && alm[h + 3] < 51)
                                                    {
                                                        treeNode14.Nodes[an5].Nodes[0].Nodes.Add(new TreeNode("Data"));
                                                    }
                                                    an5++;
                                                }
                                                break;
                                            }
                                        }
                                        i++;
                                    }
                                }
                                DMiscList.Nodes.Add(treeNode14);
                            }
                            DMiscList.Nodes.Add("DataFlags");
                        }
                    }
                }
            }
            if (an1 != 0)
            {
                if (tds[24] % 4 == 0)
                {
                    i = tds[24] / 4;
                }
                else
                {
                    i = (tds[24] + 3) / 4;
                }
                if (i % 8 != 0)
                {
                    j = 8 - i % 8;
                    i += j;
                }
                i -= 8;
                j = 148448;
                k = an1 / 4;
                for (efdts = k - i; k >= i; k--)
                {
                    alm[j] = alm[k];
                    j--;
                }
                pacname.Text = rd3;
                minitxt.Text = "MovesetSize=0x" + tds[24].ToString("X") + ",TotalSize=0x" + (an1 + 128).ToString("X");
                CmpStart.Enabled = true;
                Fsave.Enabled = true;
                EvList.Enabled = true;
                EvAdd.Enabled = true;
                EvModify.Enabled = true;
                EvRemove.Enabled = true;
                EvUp.Enabled = true;
                EvDown.Enabled = true;
                EvCopy.Enabled = true;
                EvPaste.Enabled = true;
                CurrentSize.Enabled = true;
                EstiMinSize.Enabled = true;
                GenUsingUnkEvDt.Enabled = true;
                GenUsingVarDt.Enabled = true;
                GenBugDatas.Enabled = true;
                aid = 0;
                alist = 0;
                sid = 0;
                slist = 0;
                EvSpCbID.SelectedIndex = 0;
                if (AnimAutoSave.Checked)
                {
                    AnimAutoSave.Checked = false;
                    if (EvSubaCbID.Items.Count > 0)
                    {
                        EvSubaCbID.SelectedIndex = 0;
                    }
                    AnimAutoSave.Checked = true;
                }
                else if (EvSubaCbID.Items.Count > 0)
                {
                    EvSubaCbID.SelectedIndex = 0;
                }
                if (ArticleIDCb.Items.Count > 0)
                {
                    ArticleIDCb.SelectedIndex = 0;
                }
                for (k = editFilePath.Length - 2; k > 0; k--)
                {
                    if (editFilePath[k] == '\\')
                    {
                        rd1 = editFilePath.Substring(k + 1);
                        Text = "PSA Compressor - " + rd1;
                        break;
                    }
                }
                if (NQS.Checked || EQS.Checked || OWS.Checked)
                {
                    if (EvSubaCbList.Items.Count >= 4)
                    {
                        qe = true;
                    }
                    else
                    {
                        qe = false;
                    }
                }
                else
                {
                    qe = false;
                }
            }
            else
            {
                EvList.Items.Clear();
                pacname.Text = "";
                minitxt.Text = "Error Reading File.";
                Text = "PSA Compressor";
                CmpStart.Enabled = false;
                Fsave.Enabled = false;
                Qsave.Enabled = false;
                EventTab.Enabled = false;
                ArticleIDCb.Enabled = false;
                ArticleTab.Enabled = false;
                DataTab.Enabled = false;
                EvList.Enabled = false;
                EvAdd.Enabled = false;
                qe = false;
                EvModify.Enabled = false;
                EvRemove.Enabled = false;
                EvUp.Enabled = false;
                EvDown.Enabled = false;
                EvCopy.Enabled = false;
                EvPaste.Enabled = false;
                CurrentSize.Enabled = false;
                EstiMinSize.Enabled = false;
                GenUsingUnkEvDt.Enabled = false;
                GenUsingVarDt.Enabled = false;
                GenBugDatas.Enabled = false;
            }
        }

        private void EventReadVR()
        {
            if (alm[n] == 1)
            {
                rd1 += $"{(decimal)alm[n + 1] / 60000m:0.0####}";
            }
            else if (alm[n] == 3)
            {
                if (alm[n + 1] == 0)
                {
                    rd1 += "false";
                }
                else if (alm[n + 1] == 1)
                {
                    rd1 += "true";
                }
                else
                {
                    rd1 = rd1 + "3x" + alm[n + 1].ToString("X");
                }
            }
            else if (alm[n] == 5)
            {
                if (((alm[n + 1] >> 28) & 0xF) > 2 || ((alm[n + 1] >> 24) & 0xF) > 2)
                {
                    rd1 = rd1 + "5x" + alm[n + 1].ToString("X");
                    return;
                }
                if (((alm[n + 1] >> 28) & 0xF) == 0)
                {
                    rd1 += "IC-";
                }
                else if (((alm[n + 1] >> 28) & 0xF) == 1)
                {
                    rd1 += "LA-";
                }
                else
                {
                    rd1 += "RA-";
                }
                if (((alm[n + 1] >> 24) & 0xF) == 0)
                {
                    rd1 += "Basic[";
                }
                else if (((alm[n + 1] >> 24) & 0xF) == 1)
                {
                    rd1 += "Float[";
                }
                else
                {
                    rd1 += "Bit[";
                }
                rd1 = rd1 + (alm[n + 1] & 0xFFFFFF) + "]";
            }
            else if (alm[n] == 6)
            {
                an1 = ((alm[n + 1] >> 16) & 0xFFFF);
                an2 = (alm[n + 1] & 0xFFFF);
                if (an1 == 32768 || an1 == 0)
                {
                    if (an1 >= 1)
                    {
                        rd1 += "Not ";
                    }
                    if (an2 < 128)
                    {
                        rd1 += ReqEtxd[an2];
                    }
                    else if (an2 >= 9999 && an2 <= 10021)
                    {
                        rd1 += ReqEtxd[an2 - 9871];
                    }
                    else
                    {
                        rd1 += an2.ToString("X");
                    }
                }
                else
                {
                    rd1 = rd1 + "6x" + alm[n + 1].ToString("X");
                }
            }
            else if (alm[n] == 2)
            {
                rd1 = rd1 + "2x" + alm[n + 1].ToString("X");
                if ((alm[n + 1] % 4 != 0 || alm[n + 1] < stf * 4 || alm[n + 1] >= tds[25]) && alm[n + 1] != -1)
                {
                    rd1 += "??";
                }
            }
            else
            {
                rd1 = rd1 + alm[n].ToString("X") + "x" + alm[n + 1].ToString("X");
            }
        }

        private void EveListstring()
        {
            if (alm[j] == -86052851)
            {
                rd1 = "ERROR DATA(FADEF00D)";
                return;
            }
            if (alm[j + 1] < 0 || alm[j + 1] >= tds[25])
            {
                rd1 = "ERROR DATA(" + alm[j].ToString("X8") + ")";
                return;
            }
            n = alm[j];
            an5 = ((n >> 16) & 0xFFFF);
            if (an5 == 5 || an5 == 13 || an5 == 14 || an5 == 15 || an5 == 17 || an5 == 18 || an5 == 19)
            {
                mov--;
            }
            rd1 = "";
            if (mov > 0)
            {
                for (i = 0; i < mov; i++)
                {
                    rd1 += "    ";
                }
            }
            if (an5 == 4 || an5 == 10 || an5 == 13 || an5 == 14 || an5 == 16 || an5 == 17 || an5 == 18)
            {
                mov++;
            }
            i = 0;
            while (EveEtid[i] != 0 && n != EveEtid[i])
            {
                i++;
                if (i >= 500)
                {
                    i = 0;
                    break;
                }
            }
            if (n == EveEtid[i])
            {
                rd2 = EveEtxd[i * 4 + 1];
            }
            else if (ViewEvPlus.Checked)
            {
                i = 0;
                m = 16777216;
                k = (n | 0xFFFF) - 65535;
                while (EveEtid[i] != 0)
                {
                    if (EveEtid[i] >= k && EveEtid[i] < n)
                    {
                        k = EveEtid[i] + 1;
                        m = i;
                    }
                    i++;
                    if (i >= 500)
                    {
                        break;
                    }
                }
                if (m < 16777216)
                {
                    rd2 = EveEtxd[m * 4 + 1] + "(+" + (n - EveEtid[m]).ToString("X") + ")";
                }
                else
                {
                    rd2 = n.ToString("X8");
                }
            }
            else
            {
                rd2 = n.ToString("X8");
            }
            g = 0;
            while (ElvEtid[g] != 0 && n != ElvEtid[g])
            {
                g++;
            }
            if (n != ElvEtid[g])
            {
                g = 65535;
                if (ViewEvPlus.Checked)
                {
                    m = 0;
                    g = 65535;
                    k = (n | 0xFFFF) - 65280;
                    while (ElvEtid[m] != 0)
                    {
                        if (ElvEtid[m] > k && ElvEtid[m] < n)
                        {
                            k = ElvEtid[m];
                            g = m;
                        }
                        m++;
                        if (m >= 500)
                        {
                            break;
                        }
                    }
                }
            }
            rd1 += rd2;
            if (n == 459008)
            {
                n = alm[j + 1] / 4;
                rd1 += ": ";
                EventReadVR();
                if (alm[n] == 2)
                {
                    n = alm[j + 1] + 4;
                    for (i = 0; i < tds[28]; i++)
                    {
                        g = rnext[(tds[27] + i) * 2];
                        if (g >= 8096 && g < tds[25])
                        {
                            if (n == g)
                            {
                                rd1 = rd1 + ":External=" + DataExrnList.Items[i].ToString();
                                break;
                            }
                            an5 = 0;
                            while (an5 < 100)
                            {
                                k = g / 4;
                                g = alm[k];
                                if (g >= 8096 && g < tds[25])
                                {
                                    if (n == g)
                                    {
                                        rd1 = rd1 + ":External=" + DataExrnList.Items[i].ToString();
                                        break;
                                    }
                                    an5++;
                                    continue;
                                }
                                break;
                            }
                            if (n == g)
                            {
                                break;
                            }
                        }
                    }
                }
                rd1 += ",";
                return;
            }
            if (n == 218104320)
            {
                n = alm[j + 1] / 4;
                rd1 += ": ";
                EventReadVR();
                n += 2;
                rd1 += ", ";
                EventReadVR();
                if (alm[n] == 2)
                {
                    n = alm[j + 1] + 12;
                    for (i = 0; i < tds[28]; i++)
                    {
                        g = rnext[(tds[27] + i) * 2];
                        if (g >= 8096 && g < tds[25])
                        {
                            if (n == g)
                            {
                                rd1 = rd1 + ":External=" + DataExrnList.Items[i].ToString();
                                break;
                            }
                            an5 = 0;
                            while (an5 < 100)
                            {
                                k = g / 4;
                                g = alm[k];
                                if (g >= 8096 && g < tds[25])
                                {
                                    if (n == g)
                                    {
                                        rd1 = rd1 + ":External=" + DataExrnList.Items[i].ToString();
                                        break;
                                    }
                                    an5++;
                                    continue;
                                }
                                break;
                            }
                            if (n == g)
                            {
                                break;
                            }
                        }
                    }
                }
                rd1 += ",";
                return;
            }
            k = ((n >> 8) & 0xFF);
            if (k == 0)
            {
                rd1 += ":";
            }
            else if (g < 65535)
            {
                rd3 = ElvEtxd[g];
                rd2 = ElvEtxd[g].Substring(2);
                if (rd3[0] == '0')
                {
                    rd3 = rd3.Substring(1, 1);
                }
                else
                {
                    rd1 += ":";
                }
                if (rd3[0] == '1')
                {
                    n = alm[j + 1] / 4;
                    rd1 += " ";
                    fnt = 0;
                    m = 0;
                    for (i = 0; i < rd2.Length; i++)
                    {
                        if (rd2[i] == '\\')
                        {
                            if (i <= rd2.Length)
                            {
                                i++;
                                if (rd2[i] == '\\')
                                {
                                    rd1 += "\\";
                                }
                                else
                                {
                                    if (m > k)
                                    {
                                        break;
                                    }
                                    if (rd2[i] == 'H')
                                    {
                                        if (alm[n] != 0)
                                        {
                                            rd1 = rd1 + alm[n].ToString("X") + "x";
                                        }
                                        if (fnt >= 4)
                                        {
                                            rd1 += (alm[n + 1] & 0xFFFF).ToString("X");
                                            fnt = 0;
                                            n += 2;
                                        }
                                        else
                                        {
                                            rd1 += ((alm[n + 1] >> 16) & 0xFFFF).ToString("X");
                                            fnt += 4;
                                            m++;
                                        }
                                    }
                                    else if (alm[n] != 0)
                                    {
                                        EventReadVR();
                                        n += 2;
                                        m++;
                                    }
                                    else
                                    {
                                        if (rd2[i] == 'C')
                                        {
                                            if (alm[n + 1] == 0)
                                            {
                                                rd1 += "<";
                                            }
                                            else if (alm[n + 1] == 1)
                                            {
                                                rd1 += "<=";
                                            }
                                            else if (alm[n + 1] == 2)
                                            {
                                                rd1 += "==";
                                            }
                                            else if (alm[n + 1] == 3)
                                            {
                                                rd1 += "!=";
                                            }
                                            else if (alm[n + 1] == 4)
                                            {
                                                rd1 += ">=";
                                            }
                                            else if (alm[n + 1] == 5)
                                            {
                                                rd1 += ">";
                                            }
                                            else
                                            {
                                                rd1 = rd1 + "0x" + alm[n + 1].ToString("X");
                                            }
                                        }
                                        else if (rd2[i] == 'D')
                                        {
                                            rd1 += alm[n + 1];
                                        }
                                        else
                                        {
                                            rd1 += alm[n + 1].ToString("X");
                                        }
                                        n += 2;
                                        m++;
                                    }
                                }
                            }
                        }
                        else
                        {
                            rd1 += rd2.Substring(i, 1);
                        }
                    }
                    k = ((alm[j] >> 8) & 0xFF) - ((ElvEtid[g] >> 8) & 0xFF);
                    if (k > 0)
                    {
                        rd1 += ",";
                        while (k > 0)
                        {
                            rd1 += " ";
                            EventReadVR();
                            rd1 += ",";
                            n += 2;
                            k--;
                        }
                    }
                }
                else if (rd3[0] == 'C')
                {
                    n = alm[j + 1] / 4;
                    rd1 += " ";
                    m = n;
                    for (i = 0; i < rd2.Length; i++)
                    {
                        if (rd2[i] == '\\')
                        {
                            if (i <= rd2.Length)
                            {
                                i++;
                                if (rd2[i] == '\\')
                                {
                                    rd1 += "\\";
                                }
                                else if (i + 2 < rd2.Length)
                                {
                                    if (rd2[i] == 'H' && i + 5 < rd2.Length)
                                    {
                                        rd4 = rd2.Substring(i + 1, 4);
                                        if (int.TryParse(rd4, out an5))
                                        {
                                            an4 = int.Parse(rd4.Substring(0, 2));
                                            if (an4 <= k)
                                            {
                                                if (rd4[2] == '0' && rd4[3] == '4')
                                                {
                                                    if (alm[n + an4 * 2] != 0)
                                                    {
                                                        rd1 = rd1 + alm[n + an4 * 2].ToString("X") + "x";
                                                    }
                                                    rd1 += ((alm[n + 1 + an4 * 2] >> 16) & 0xFFFF).ToString("X");
                                                }
                                                else if (rd4[2] == '4' && rd4[3] == '8')
                                                {
                                                    if (alm[n + an4 * 2] != 0)
                                                    {
                                                        rd1 = rd1 + alm[n + an4 * 2].ToString("X") + "x";
                                                    }
                                                    rd1 += (alm[n + 1 + an4 * 2] & 0xFFFF).ToString("X");
                                                }
                                                else if (rd4[2] == '0' && rd4[3] == '2')
                                                {
                                                    if (alm[n + an4 * 2] != 0)
                                                    {
                                                        rd1 = rd1 + alm[n + an4 * 2].ToString("X") + "x";
                                                    }
                                                    rd1 += ((alm[n + 1 + an4 * 2] >> 24) & 0xFF).ToString("X");
                                                }
                                                else if (rd4[2] == '2' && rd4[3] == '4')
                                                {
                                                    if (alm[n + an4 * 2] != 0)
                                                    {
                                                        rd1 = rd1 + alm[n + an4 * 2].ToString("X") + "x";
                                                    }
                                                    rd1 += ((alm[n + 1 + an4 * 2] >> 16) & 0xFF).ToString("X");
                                                }
                                                else if (rd4[2] == '4' && rd4[3] == '6')
                                                {
                                                    if (alm[n + an4 * 2] != 0)
                                                    {
                                                        rd1 = rd1 + alm[n + an4 * 2].ToString("X") + "x";
                                                    }
                                                    rd1 += ((alm[n + 1 + an4 * 2] >> 8) & 0xFF).ToString("X");
                                                }
                                                else if (rd4[2] == '6' && rd4[3] == '8')
                                                {
                                                    if (alm[n + an4 * 2] != 0)
                                                    {
                                                        rd1 = rd1 + alm[n + an4 * 2].ToString("X") + "x";
                                                    }
                                                    rd1 += (alm[n + 1 + an4 * 2] & 0xFF).ToString("X");
                                                }
                                            }
                                            i += 4;
                                        }
                                    }
                                    else
                                    {
                                        rd4 = rd2.Substring(i + 1, 2);
                                        if (int.TryParse(rd4, out an4))
                                        {
                                            if (an4 <= k)
                                            {
                                                if (alm[n + an4 * 2] == 0)
                                                {
                                                    if (rd2[i] == 'C')
                                                    {
                                                        if (alm[n + 1 + an4 * 2] == 0)
                                                        {
                                                            rd1 += "<";
                                                        }
                                                        else if (alm[n + 1 + an4 * 2] == 1)
                                                        {
                                                            rd1 += "<=";
                                                        }
                                                        else if (alm[n + 1 + an4 * 2] == 2)
                                                        {
                                                            rd1 += "==";
                                                        }
                                                        else if (alm[n + 1 + an4 * 2] == 3)
                                                        {
                                                            rd1 += "!=";
                                                        }
                                                        else if (alm[n + 1 + an4 * 2] == 4)
                                                        {
                                                            rd1 += ">=";
                                                        }
                                                        else if (alm[n + 1 + an4 * 2] == 5)
                                                        {
                                                            rd1 += ">";
                                                        }
                                                        else
                                                        {
                                                            rd1 = rd1 + "0x" + alm[n + 1 + an4 * 2].ToString("X");
                                                        }
                                                    }
                                                    else if (rd2[i] == 'D')
                                                    {
                                                        rd1 += alm[n + 1 + an4 * 2];
                                                    }
                                                    else
                                                    {
                                                        rd1 += alm[n + 1 + an4 * 2].ToString("X");
                                                    }
                                                }
                                                else
                                                {
                                                    n += an4 * 2;
                                                    EventReadVR();
                                                    n = m;
                                                }
                                            }
                                            i += 2;
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            rd1 += rd2.Substring(i, 1);
                        }
                    }
                    k = ((alm[j] >> 8) & 0xFF) - ((ElvEtid[g] >> 8) & 0xFF);
                    if (k > 0)
                    {
                        n = m + ((ElvEtid[g] >> 8) & 0xFF) * 2;
                        rd1 += ",";
                        while (k > 0)
                        {
                            rd1 += " ";
                            EventReadVR();
                            rd1 += ",";
                            n += 2;
                            k--;
                        }
                    }
                }
                else
                {
                    if (rd3[0] != 'V')
                    {
                        return;
                    }
                    n = alm[j + 1] / 4;
                    an5 = 0;
                    i = 9;
                    m = 0;
                    g = rd2.Length - 1;
                    while (m < k)
                    {
                        rd1 += " ";
                        if (alm[n] == 0)
                        {
                            rd3 = alm[n + 1].ToString("X8");
                            while (i < g)
                            {
                                if (rd2[i] == '\r')
                                {
                                    if (rd2[i + 1] == '\n')
                                    {
                                        rd4 = rd2.Substring(an5, 8);
                                        if (rd3 == rd4)
                                        {
                                            rd1 += rd2.Substring(an5 + 9, i - an5 - 9);
                                            an5 = i + 2;
                                            i += 11;
                                            m++;
                                            break;
                                        }
                                        if (rd4 == "XDefault")
                                        {
                                            rd3 = rd2.Substring(an5 + 9, i - an5 - 9);
                                            an5 = rd3.Length - 1;
                                            for (an4 = 0; an4 < an5; an4++)
                                            {
                                                if (rd3[an4] == '\\')
                                                {
                                                    an4++;
                                                    if (rd3[an4] == '\\')
                                                    {
                                                        rd1 += "\\";
                                                    }
                                                    else if (rd3[an4] == 'D')
                                                    {
                                                        rd1 += alm[n + 1];
                                                    }
                                                    else
                                                    {
                                                        rd1 += alm[n + 1].ToString("X");
                                                    }
                                                }
                                                else
                                                {
                                                    rd1 += rd3.Substring(an4, 1);
                                                }
                                            }
                                            if (an4 == an5)
                                            {
                                                rd1 += rd3.Substring(an4, 1);
                                            }
                                            an5 = i + 2;
                                            i += 11;
                                            m++;
                                            break;
                                        }
                                        an5 = i + 2;
                                        i += 11;
                                    }
                                    else
                                    {
                                        i += 2;
                                    }
                                }
                                else
                                {
                                    i++;
                                }
                            }
                            if (m >= k)
                            {
                                break;
                            }
                            if (rd4 != "XDefault")
                            {
                                while (i < g)
                                {
                                    if (rd2[i] == '\r')
                                    {
                                        if (rd2[i + 1] == '\n')
                                        {
                                            if (rd2.Substring(an5, 8) == "XDefault")
                                            {
                                                an5 = i + 2;
                                                i += 11;
                                                break;
                                            }
                                            an5 = i + 2;
                                            i += 11;
                                        }
                                        else
                                        {
                                            i += 2;
                                        }
                                    }
                                    else
                                    {
                                        i++;
                                    }
                                }
                            }
                        }
                        else
                        {
                            m++;
                            EventReadVR();
                            if (m >= k)
                            {
                                break;
                            }
                            while (i < g)
                            {
                                if (rd2[i] == '\r')
                                {
                                    if (rd2[i + 1] == '\n')
                                    {
                                        if (rd2.Substring(an5, 8) == "XDefault")
                                        {
                                            an5 = i + 2;
                                            i += 11;
                                            break;
                                        }
                                        an5 = i + 2;
                                        i += 11;
                                    }
                                    else
                                    {
                                        i += 2;
                                    }
                                }
                                else
                                {
                                    i++;
                                }
                            }
                        }
                        n += 2;
                        if (i >= g)
                        {
                            break;
                        }
                    }
                    if (m < k)
                    {
                        n = alm[j + 1] / 4 + m * 2;
                        rd1 += ",";
                        while (m < k)
                        {
                            rd1 += " ";
                            EventReadVR();
                            rd1 += ",";
                            n += 2;
                            k--;
                        }
                    }
                }
            }
            else if (alm[j + 1] != 0)
            {
                rd1 += ":";
                for (n = alm[j + 1] / 4; k > 0; k--)
                {
                    rd1 += " ";
                    EventReadVR();
                    rd1 += ",";
                    n += 2;
                }
            }
        }

        private void Delasc()
        {
            mov = 0;
            while (true)
            {
                if (mov < par)
                {
                    if (asc[mov] == rmv)
                    {
                        break;
                    }
                    mov++;
                    continue;
                }
                return;
            }
            asc[mov] = 16777216;
            tds[26]--;
        }

        private void Fixam()
        {
            n = dat;
            if (alm[md - 2] == -86110838)
            {
                i = md - 3;
            }
            else
            {
                i = md - 1;
            }
            while (i >= n && alm[i] == -86052851)
            {
                i--;
            }
            for (j = i; i <= md - 1; i++)
            {
                m = alm[i];
                if (m != -86052851)
                {
                    alm[j] = m;
                    j++;
                }
            }
            tds[25] = j * 4;
            par = tds[26];
            Array.Sort(asc);
            for (i = 0; i < par; i++)
            {
                alm[j] = asc[i];
                j++;
            }
            m = (tds[24] - 32) / 4;
            n = tds[24] % 4;
            if (n == 0)
            {
                n = 4;
            }
            else
            {
                m++;
            }
            for (i = 0; i < rnexsize; i++)
            {
                alm[j] = rnext[i];
                j++;
            }
            tds[24] = j * 4 + n + 28;
            tds[17] = tds[24];
            md = tds[25] / 4;
            n = (tds[24] + 3) / 4;
            if (n % 8 != 0)
            {
                j = 8 - n % 8;
                n += j;
            }
            n += efdts - 8;
            if (n > 139264)
            {
                minitxt.Text = "Notice: Current data size is over 544KB.";
            }
        }

        private void QSG()
        {
            j = rd2.Length - 4;
            i = 1;
            if (j > 0)
            {
                rd1 = rd2.Substring(j);
                if (rd1 == ".pac")
                {
                    rd1 = rd3 + rd2.Substring(0, j) + "(";
                    if (j < 5 || rd2[j - 1] != ')' || rd2[j - 2] == '(')
                    {
                        return;
                    }
                    if (rd2[j - 3] == '(')
                    {
                        rd4 = rd2.Substring(0, j - 2);
                        rd2 = rd2.Substring(0, j - 1);
                        j = 10;
                    }
                    else if (rd2[j - 4] == '(')
                    {
                        rd4 = rd2.Substring(0, j - 3);
                        rd2 = rd2.Substring(0, j - 1);
                        j = 100;
                    }
                    else if (rd2[j - 5] == '(')
                    {
                        rd4 = rd2.Substring(0, j - 4);
                        rd2 = rd2.Substring(0, j - 1);
                        j = 1000;
                    }
                    else
                    {
                        j = 0;
                    }
                    for (i = 0; i < j; i++)
                    {
                        if (rd2 == rd4 + i)
                        {
                            rd1 = rd3 + rd4;
                            break;
                        }
                    }
                    i++;
                    if (i == j + 1)
                    {
                        i = 1;
                    }
                }
                else
                {
                    rd1 = rd3 + pacname.Text + "(";
                }
            }
            else
            {
                rd1 = rd3 + pacname.Text + "(";
            }
        }

        private void QS()
        {
            Fsave.Enabled = false;
            Fopen.Enabled = false;
            Qsave.Enabled = false;
            if (tds[24] % 4 == 0)
            {
                n = tds[24] / 4;
            }
            else
            {
                n = (tds[24] + 3) / 4;
            }
            n -= 8;
            FileStream fileStream = new FileStream(rd1, FileMode.Create, FileAccess.Write);
            for (i = 0; i < 32; i++)
            {
                fnt = (byte)((tds[i] >> 24) & 0xFF);
                fileStream.WriteByte(fnt);
                fnt = (byte)((tds[i] >> 16) & 0xFF);
                fileStream.WriteByte(fnt);
                fnt = (byte)((tds[i] >> 8) & 0xFF);
                fileStream.WriteByte(fnt);
                fnt = (byte)(tds[i] & 0xFF);
                fileStream.WriteByte(fnt);
            }
            for (i = 0; i < n; i++)
            {
                fnt = (byte)((alm[i] >> 24) & 0xFF);
                fileStream.WriteByte(fnt);
                fnt = (byte)((alm[i] >> 16) & 0xFF);
                fileStream.WriteByte(fnt);
                fnt = (byte)((alm[i] >> 8) & 0xFF);
                fileStream.WriteByte(fnt);
                fnt = (byte)(alm[i] & 0xFF);
                fileStream.WriteByte(fnt);
            }
            if (n % 8 != 0)
            {
                j = 8 - n % 8;
                fnt = 0;
                for (i = 0; i < j; i++)
                {
                    fileStream.WriteByte(fnt);
                    fileStream.WriteByte(fnt);
                    fileStream.WriteByte(fnt);
                    fileStream.WriteByte(fnt);
                }
            }
            for (i = 148448 - efdts; i < 148448; i++)
            {
                fnt = (byte)((alm[i] >> 24) & 0xFF);
                fileStream.WriteByte(fnt);
                fnt = (byte)((alm[i] >> 16) & 0xFF);
                fileStream.WriteByte(fnt);
                fnt = (byte)((alm[i] >> 8) & 0xFF);
                fileStream.WriteByte(fnt);
                fnt = (byte)(alm[i] & 0xFF);
                fileStream.WriteByte(fnt);
            }
            fileStream.Close();
            Fsave.Enabled = true;
            Fopen.Enabled = true;
            minitxt.Text = "Save Finished.";
        }

        private void ParamsModify()
        {
            for (i = stf; i < md; i++)
            {
                if (alm[i] == -86052851)
                {
                    for (an1 = i + 1; an1 < i + m; an1++)
                    {
                        if (alm[an1] != -86052851)
                        {
                            i = an1;
                            break;
                        }
                    }
                    if (i + m == an1)
                    {
                        break;
                    }
                }
            }
            if (i >= md)
            {
                i = md;
                if (alm[md - 2] == -86110838)
                {
                    alm[md + m - 2] = alm[md - 2];
                    alm[md + m - 1] = alm[md - 1];
                    i -= 2;
                }
                md += m;
            }
            for (an1 = 0; an1 < m; an1 += 2)
            {
                if (nonam[an1] == 2 && nonam[an1 + 1] > 0)
                {
                    asc[par] = (i + an1) * 4 + 4;
                    par++;
                    tds[26]++;
                }
                alm[i + an1] = nonam[an1];
                alm[i + an1 + 1] = nonam[an1 + 1];
            }
        }

        private void EventAdd()
        {
            if (h == 0)
            {
                for (j = stf; j < md; j++)
                {
                    if (alm[j] == -86052851)
                    {
                        for (i = j + 1; i <= j + 3; i++)
                        {
                            if (alm[i] != -86052851)
                            {
                                j = i;
                                break;
                            }
                        }
                        if (i == j + 4)
                        {
                            break;
                        }
                    }
                }
                if (j >= md)
                {
                    j = md;
                    if (alm[md - 2] == -86110838)
                    {
                        alm[md + 2] = alm[md - 2];
                        alm[md + 3] = alm[md - 1];
                        j -= 2;
                    }
                    md += 4;
                }
                alm[j] = 131072;
                alm[j + 1] = 0;
                alm[j + 2] = 0;
                alm[j + 3] = 0;
                return;
            }
            j = h / 4;
            if (alm[j] == -86052851)
            {
                g = 0;
            }
            k = 0;
            if (j + g * 2 + 5 > md)
            {
                if (alm[md - 2] == -86110838)
                {
                    alm[md] = alm[md - 2];
                    alm[md + 1] = alm[md - 1];
                    alm[j + g * 2 + 2] = -86052851;
                    alm[j + g * 2 + 3] = -86052851;
                    md += 2;
                    k = 1;
                }
                else if (j + g * 2 + 3 > md)
                {
                    alm[j + g * 2 + 2] = -86052851;
                    alm[j + g * 2 + 3] = -86052851;
                    md += 2;
                    k = 1;
                }
            }
            if (alm[j + g * 2 + 2] == -86052851 && alm[j + g * 2 + 3] == -86052851)
            {
                alm[j + g * 2] = 131072;
                alm[j + g * 2 + 1] = 0;
                alm[j + g * 2 + 2] = 0;
                alm[j + g * 2 + 3] = 0;
                return;
            }
            k = g * 2 + 4;
            for (j = stf; j < md; j++)
            {
                if (alm[j] == -86052851)
                {
                    for (i = j + 1; i < j + k; i++)
                    {
                        if (alm[i] != -86052851)
                        {
                            j = i;
                            break;
                        }
                    }
                    if (i == j + k)
                    {
                        break;
                    }
                }
            }
            if (j >= md)
            {
                j = md;
                if (alm[md - 2] == -86110838)
                {
                    j -= 2;
                    alm[md + k - 2] = -86110838;
                    alm[md + k - 1] = alm[md - 1];
                }
                md += k;
            }
            k = g * 2;
            g = h / 4;
            for (n = 0; n < k; n += 2)
            {
                if (((alm[g + n] >> 8) & 0xFF) != 0)
                {
                    rmv = (g + n) * 4 + 4;
                    for (mov = 0; mov < par; mov++)
                    {
                        if (asc[mov] == rmv)
                        {
                            asc[mov] = (j + n) * 4 + 4;
                            break;
                        }
                    }
                }
                alm[j + n] = alm[g + n];
                alm[g + n] = -86052851;
                alm[j + n + 1] = alm[g + n + 1];
                alm[g + n + 1] = -86052851;
            }
            alm[j + n] = 131072;
            alm[g + n] = -86052851;
            n++;
            alm[j + n] = 0;
            alm[g + n] = -86052851;
            alm[j + n + 1] = 0;
            alm[j + n + 2] = 0;
            k = 5;
        }

        private void EventModify()
        {
            k = ((alm[j] >> 8) & 0xFF) * 2;
            n = alm[j + 1] / 4;
            g = alm[j];
            h = alm[j + 1];
            for (i = 0; i < k; i++)
            {
                nonam[i] = alm[n + i];
            }
            using (EvParForm evParForm = new EvParForm())
            {
                evParForm.eid = g;
                evParForm.eof = h;
                evParForm.epw = ParFW;
                evParForm.eph = ParFH;
                evParForm.ecw = ChgFW;
                evParForm.ech = ChgFH;
                evParForm.epm = nonam;
                evParForm.epEveTx = EveEtxd;
                evParForm.epParTx = ParEtxd;
                evParForm.epReqTx = ReqEtxd;
                evParForm.epEveid = EveEtid;
                evParForm.epParid = ParEtid;
                evParForm.ShowDialog(this);
                g = evParForm.eid;
                h = evParForm.eof;
                ParFW = evParForm.epw;
                ParFH = evParForm.eph;
                ChgFW = evParForm.ecw;
                ChgFH = evParForm.ech;
                nonam = evParForm.epm;
            }
            if (h != -1)
            {
                return;
            }
            if (k == 0)
            {
                m = ((g >> 8) & 0xFF) * 2;
                if (m == 0)
                {
                    alm[j] = g;
                    return;
                }
                ParamsModify();
                alm[j + 1] = i * 4;
                asc[par] = j * 4 + 4;
                par++;
                tds[26]++;
                alm[j] = g;
                Fixam();
                return;
            }
            fnt = 0;
            for (i = 0; i < k; i += 2)
            {
                if (alm[n + i] == 2)
                {
                    rmv = (n + i) * 4 + 4;
                    fnt = 1;
                    Delasc();
                    if (mov >= par)
                    {
                        if (i == 0)
                        {
                            for (mov = 0; mov < tds[28]; mov++)
                            {
                                i = rnext[(tds[27] + mov) * 2];
                                if (i >= 8096 && i < tds[25])
                                {
                                    if (rmv == i)
                                    {
                                        rmv = alm[j + 1] / 4 + 1;
                                        if (alm[rmv] >= 8096 && alm[rmv] < tds[25])
                                        {
                                            if (alm[rmv] % 4 == 0)
                                            {
                                                rnext[(tds[27] + mov) * 2] = alm[rmv];
                                            }
                                            else
                                            {
                                                rnext[(tds[27] + mov) * 2] = -1;
                                            }
                                        }
                                        else
                                        {
                                            rnext[(tds[27] + mov) * 2] = -1;
                                        }
                                        rmv = 0;
                                        break;
                                    }
                                    if (i >= 8096 && i < tds[25])
                                    {
                                        for (an1 = 0; an1 < 100; an1++)
                                        {
                                            m = i / 4;
                                            i = alm[m];
                                            if (i < 8096 || i >= tds[25])
                                            {
                                                break;
                                            }
                                            if (rmv == i)
                                            {
                                                rmv = alm[j + 1] / 4 + 1;
                                                if (alm[rmv] >= 8096 && alm[rmv] < tds[25])
                                                {
                                                    if (alm[rmv] % 4 == 0)
                                                    {
                                                        alm[m] = alm[rmv];
                                                    }
                                                    else
                                                    {
                                                        alm[m] = -1;
                                                    }
                                                }
                                                else
                                                {
                                                    alm[m] = -1;
                                                }
                                                rmv = 0;
                                                break;
                                            }
                                        }
                                        if (rmv == 0)
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                            i = 0;
                        }
                        else if (k == 4 && i == 2)
                        {
                            for (mov = 0; mov < tds[28]; mov++)
                            {
                                i = rnext[(tds[27] + mov) * 2];
                                if (i >= 8096 && i < tds[25])
                                {
                                    if (rmv == i)
                                    {
                                        rmv = alm[j + 1] / 4 + 3;
                                        if (alm[rmv] >= 8096 && alm[rmv] < tds[25])
                                        {
                                            if (alm[rmv] % 4 == 0)
                                            {
                                                rnext[(tds[27] + mov) * 2] = alm[rmv];
                                            }
                                            else
                                            {
                                                rnext[(tds[27] + mov) * 2] = -1;
                                            }
                                        }
                                        else
                                        {
                                            rnext[(tds[27] + mov) * 2] = -1;
                                        }
                                        rmv = 0;
                                        break;
                                    }
                                    if (i >= 8096 && i < tds[25])
                                    {
                                        for (an1 = 0; an1 < 100; an1++)
                                        {
                                            m = i / 4;
                                            i = alm[m];
                                            if (i < 8096 || i >= tds[25])
                                            {
                                                break;
                                            }
                                            if (rmv == i)
                                            {
                                                rmv = alm[j + 1] / 4 + 3;
                                                if (alm[rmv] >= 8096 && alm[rmv] < tds[25])
                                                {
                                                    if (alm[rmv] % 4 == 0)
                                                    {
                                                        alm[m] = alm[rmv];
                                                    }
                                                    else
                                                    {
                                                        alm[m] = -1;
                                                    }
                                                }
                                                else
                                                {
                                                    alm[m] = -1;
                                                }
                                                rmv = 0;
                                                break;
                                            }
                                        }
                                        if (rmv == 0)
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                            i = 2;
                        }
                    }
                }
                alm[n + i] = -86052851;
                alm[n + i + 1] = -86052851;
            }
            m = ((g >> 8) & 0xFF) * 2;
            if (m == 0)
            {
                alm[j] = g;
                alm[j + 1] = 0;
                rmv = j * 4 + 4;
                Delasc();
                fnt = 1;
                Fixam();
                return;
            }
            if (m > k)
            {
                i = k;
                while (i < m && alm[n + i] == -86052851)
                {
                    i++;
                }
                if (n + k + 5 > md)
                {
                    if (alm[md - 2] == -86110838)
                    {
                        alm[md + (m - k) - 2] = alm[md - 2];
                        alm[md + (m - k) - 1] = alm[md - 1];
                        md += m - k;
                        i = m;
                        fnt = 1;
                    }
                    else if (n + k + 3 > md)
                    {
                        md += m - k;
                        i = m;
                        fnt = 1;
                    }
                }
                if (i < m)
                {
                    for (n = stf; n < md; n++)
                    {
                        if (alm[n] == -86052851)
                        {
                            for (i = n + 1; i < n + m; i++)
                            {
                                if (alm[i] != -86052851)
                                {
                                    n = i;
                                    break;
                                }
                            }
                            if (n + m == i)
                            {
                                break;
                            }
                        }
                    }
                    if (n >= md)
                    {
                        n = md;
                        fnt = 1;
                        if (alm[md - 2] == -86110838)
                        {
                            alm[md + m - 2] = alm[md - 2];
                            alm[md + m - 1] = alm[md - 1];
                            n -= 2;
                        }
                        md += m;
                    }
                    alm[j + 1] = n * 4;
                }
            }
            alm[j] = g;
            for (i = 0; i < m; i += 2)
            {
                if (nonam[i] == 2 && nonam[i + 1] > 0)
                {
                    an2 = (n + i) * 4 + 4;
                    asc[par] = an2;
                    fnt = 1;
                    par++;
                    tds[26]++;
                }
                alm[n + i] = nonam[i];
                alm[n + i + 1] = nonam[i + 1];
            }
            if (fnt == 1)
            {
                Fixam();
            }
        }

        private void RemoveAllEv()
        {
            i = j + g * 2;
            if (alm[i - 2] == -86052851)
            {
                if (alm[i - 1] == -86052851)
                {
                    g--;
                }
            }
            else
            {
                alm[i] = -86052851;
                alm[i + 1] = -86052851;
            }
            for (i = 0; i < g; i++)
            {
                k = ((alm[j + i * 2] >> 8) & 0xFF);
                if (k != 0)
                {
                    m = alm[j + i * 2 + 1] / 4;
                    n = k * 2;
                    if (m >= stf && m < md)
                    {
                        rmv = (j + i * 2) * 4 + 4;
                        Delasc();
                        for (k = 0; k < n; k += 2)
                        {
                            if (alm[m + k] == 2)
                            {
                                rmv = (m + k) * 4 + 4;
                                Delasc();
                                if (mov >= par)
                                {
                                    if (k == 0)
                                    {
                                        for (mov = 0; mov < tds[28]; mov++)
                                        {
                                            k = rnext[(tds[27] + mov) * 2];
                                            if (k >= 8096 && k < tds[25])
                                            {
                                                if (rmv == k)
                                                {
                                                    if (alm[m + 1] >= 8096 && alm[m + 1] < tds[25])
                                                    {
                                                        if (alm[m + 1] % 4 == 0)
                                                        {
                                                            rnext[(tds[27] + mov) * 2] = alm[m + 1];
                                                        }
                                                        else
                                                        {
                                                            rnext[(tds[27] + mov) * 2] = -1;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        rnext[(tds[27] + mov) * 2] = -1;
                                                    }
                                                    break;
                                                }
                                                if (k >= 8096 && k < tds[25])
                                                {
                                                    nonam[0] = 0;
                                                    while (nonam[0] < 100)
                                                    {
                                                        n = k / 4;
                                                        k = alm[n];
                                                        if (k < 8096 || k >= tds[25])
                                                        {
                                                            break;
                                                        }
                                                        if (rmv == k)
                                                        {
                                                            if (alm[m + 1] >= 8096 && alm[m + 1] < tds[25])
                                                            {
                                                                if (alm[m + 1] % 4 == 0)
                                                                {
                                                                    alm[n] = alm[m + 1];
                                                                }
                                                                else
                                                                {
                                                                    alm[n] = -1;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                alm[n] = -1;
                                                            }
                                                            break;
                                                        }
                                                        nonam[0]++;
                                                    }
                                                    if (rmv == k)
                                                    {
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        k = 0;
                                        n = ((alm[j + i * 2] >> 8) & 0xFF) * 2;
                                    }
                                    else if (n == 4 && k == 2)
                                    {
                                        for (mov = 0; mov < tds[28]; mov++)
                                        {
                                            k = rnext[(tds[27] + mov) * 2];
                                            if (k >= 8096 && k < tds[25])
                                            {
                                                if (rmv == k)
                                                {
                                                    if (alm[m + 3] >= 8096 && alm[m + 3] < tds[25])
                                                    {
                                                        if (alm[m + 3] % 4 == 0)
                                                        {
                                                            rnext[(tds[27] + mov) * 2] = alm[m + 3];
                                                        }
                                                        else
                                                        {
                                                            rnext[(tds[27] + mov) * 2] = -1;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        rnext[(tds[27] + mov) * 2] = -1;
                                                    }
                                                    break;
                                                }
                                                if (k >= 8096 && k < tds[25])
                                                {
                                                    nonam[0] = 0;
                                                    while (nonam[0] < 100)
                                                    {
                                                        n = k / 4;
                                                        k = alm[n];
                                                        if (k < 8096 || k >= tds[25])
                                                        {
                                                            break;
                                                        }
                                                        if (rmv == k)
                                                        {
                                                            if (alm[m + 3] >= 8096 && alm[m + 3] < tds[25])
                                                            {
                                                                if (alm[m + 3] % 4 == 0)
                                                                {
                                                                    alm[n] = alm[m + 3];
                                                                }
                                                                else
                                                                {
                                                                    alm[n] = -1;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                alm[n] = -1;
                                                            }
                                                            break;
                                                        }
                                                        nonam[0]++;
                                                    }
                                                    if (rmv == k)
                                                    {
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        k = 2;
                                        n = 4;
                                    }
                                }
                            }
                            alm[m + k] = -86052851;
                            alm[m + k + 1] = -86052851;
                        }
                    }
                }
                alm[j + i * 2] = -86052851;
                alm[j + i * 2 + 1] = -86052851;
            }
        }

        private void RemoveSeleEv()
        {
            k = ((alm[j + i * 2] >> 8) & 0xFF);
            if (k != 0)
            {
                m = alm[j + i * 2 + 1] / 4;
                n = k * 2;
                if (m >= stf && m < md)
                {
                    rmv = (j + i * 2) * 4 + 4;
                    Delasc();
                    for (k = 0; k < n; k += 2)
                    {
                        if (alm[m + k] == 2)
                        {
                            rmv = (m + k) * 4 + 4;
                            Delasc();
                            if (mov >= par)
                            {
                                if (k == 0)
                                {
                                    for (mov = 0; mov < tds[28]; mov++)
                                    {
                                        k = rnext[(tds[27] + mov) * 2];
                                        if (k >= 8096 && k < tds[25])
                                        {
                                            if (rmv == k)
                                            {
                                                if (alm[m + 1] >= 8096 && alm[m + 1] < tds[25])
                                                {
                                                    if (alm[m + 1] % 4 == 0)
                                                    {
                                                        rnext[(tds[27] + mov) * 2] = alm[m + 1];
                                                    }
                                                    else
                                                    {
                                                        rnext[(tds[27] + mov) * 2] = -1;
                                                    }
                                                }
                                                else
                                                {
                                                    rnext[(tds[27] + mov) * 2] = -1;
                                                }
                                                break;
                                            }
                                            if (k >= 8096 && k < tds[25])
                                            {
                                                nonam[0] = 0;
                                                while (nonam[0] < 100)
                                                {
                                                    n = k / 4;
                                                    k = alm[n];
                                                    if (k < 8096 || k >= tds[25])
                                                    {
                                                        break;
                                                    }
                                                    if (rmv == k)
                                                    {
                                                        if (alm[m + 1] >= 8096 && alm[m + 1] < tds[25])
                                                        {
                                                            if (alm[m + 1] % 4 == 0)
                                                            {
                                                                alm[n] = alm[m + 1];
                                                            }
                                                            else
                                                            {
                                                                alm[n] = -1;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            alm[n] = -1;
                                                        }
                                                        break;
                                                    }
                                                    nonam[0]++;
                                                }
                                                if (rmv == k)
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    k = 0;
                                    n = ((alm[j + i * 2] >> 8) & 0xFF) * 2;
                                }
                                else if (n == 4 && k == 2)
                                {
                                    for (mov = 0; mov < tds[28]; mov++)
                                    {
                                        k = rnext[(tds[27] + mov) * 2];
                                        if (k >= 8096 && k < tds[25])
                                        {
                                            if (rmv == k)
                                            {
                                                if (alm[m + 3] >= 8096 && alm[m + 3] < tds[25])
                                                {
                                                    if (alm[m + 3] % 4 == 0)
                                                    {
                                                        rnext[(tds[27] + mov) * 2] = alm[m + 3];
                                                    }
                                                    else
                                                    {
                                                        rnext[(tds[27] + mov) * 2] = -1;
                                                    }
                                                }
                                                else
                                                {
                                                    rnext[(tds[27] + mov) * 2] = -1;
                                                }
                                                break;
                                            }
                                            if (k >= 8096 && k < tds[25])
                                            {
                                                nonam[0] = 0;
                                                while (nonam[0] < 100)
                                                {
                                                    n = k / 4;
                                                    k = alm[n];
                                                    if (k < 8096 || k >= tds[25])
                                                    {
                                                        break;
                                                    }
                                                    if (rmv == k)
                                                    {
                                                        if (alm[m + 3] >= 8096 && alm[m + 3] < tds[25])
                                                        {
                                                            if (alm[m + 3] % 4 == 0)
                                                            {
                                                                alm[n] = alm[m + 3];
                                                            }
                                                            else
                                                            {
                                                                alm[n] = -1;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            alm[n] = -1;
                                                        }
                                                        break;
                                                    }
                                                    nonam[0]++;
                                                }
                                                if (rmv == k)
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    k = 2;
                                    n = 4;
                                }
                            }
                        }
                        alm[m + k] = -86052851;
                        alm[m + k + 1] = -86052851;
                    }
                }
            }
            m = i;
            while (alm[j + m * 2 + 2] != 0)
            {
                if (((alm[j + m * 2 + 2] >> 8) & 0xFF) != 0)
                {
                    rmv = (j + m * 2) * 4 + 12;
                    for (mov = 0; mov < par; mov++)
                    {
                        if (asc[mov] == rmv)
                        {
                            asc[mov] -= 8;
                            break;
                        }
                    }
                }
                alm[j + m * 2] = alm[j + m * 2 + 2];
                alm[j + m * 2 + 1] = alm[j + m * 2 + 3];
                m++;
            }
            alm[j + m * 2] = 0;
            alm[j + m * 2 + 1] = 0;
            alm[j + m * 2 + 2] = -86052851;
            alm[j + m * 2 + 3] = -86052851;
        }

        private void SeleEvUp()
        {
            if (((alm[j + i * 2] >> 8) & 0xFF) == 0)
            {
                if (((alm[j + i * 2 - 2] >> 8) & 0xFF) != 0)
                {
                    rmv = (j + i * 2 - 1) * 4;
                    for (mov = 0; mov < par; mov++)
                    {
                        if (asc[mov] == rmv)
                        {
                            asc[mov] += 8;
                            alm[mov + md] += 8;
                            break;
                        }
                    }
                }
            }
            else if (((alm[j + i * 2 - 2] >> 8) & 0xFF) == 0)
            {
                rmv = (j + i * 2) * 4 + 4;
                for (mov = 0; mov < par; mov++)
                {
                    if (asc[mov] == rmv)
                    {
                        asc[mov] -= 8;
                        alm[mov + md] -= 8;
                        break;
                    }
                }
            }
            h = alm[j + i * 2];
            alm[j + i * 2] = alm[j + i * 2 - 2];
            alm[j + i * 2 - 2] = h;
            h = alm[j + i * 2 + 1];
            alm[j + i * 2 + 1] = alm[j + i * 2 - 1];
            alm[j + i * 2 - 1] = h;
        }

        private void SeleEvDown()
        {
            if (((alm[j + i * 2] >> 8) & 0xFF) == 0)
            {
                if (((alm[j + i * 2 + 2] >> 8) & 0xFF) != 0)
                {
                    rmv = (j + i * 2) * 4 + 12;
                    for (mov = 0; mov < par; mov++)
                    {
                        if (asc[mov] == rmv)
                        {
                            asc[mov] -= 8;
                            alm[mov + md] -= 8;
                            break;
                        }
                    }
                }
            }
            else if (((alm[j + i * 2 + 2] >> 8) & 0xFF) == 0)
            {
                rmv = (j + i * 2) * 4 + 4;
                for (mov = 0; mov < par; mov++)
                {
                    if (asc[mov] == rmv)
                    {
                        asc[mov] += 8;
                        alm[mov + md] += 8;
                        break;
                    }
                }
            }
            h = alm[j + i * 2];
            alm[j + i * 2] = alm[j + i * 2 + 2];
            alm[j + i * 2 + 2] = h;
            h = alm[j + i * 2 + 1];
            alm[j + i * 2 + 1] = alm[j + i * 2 + 3];
            alm[j + i * 2 + 3] = h;
        }

        private void EventPaste()
        {
            rd3 = rd1;
            mov = 0;
            while (mov < 500)
            {
                rd2 = rd1.Substring(2, 8);
                if ((rd2 == "00070100" || rd2 == "00090100") && EvSubaCbID.Items.Count > 0)
                {
                    if (rd1.Length >= 22)
                    {
                        n = Convert.ToInt32(rd2, 16);
                        rd2 = rd1.Substring(11, 11);
                        if (rd2[0] == 'S')
                        {
                            if (Uri.IsHexDigit(rd2[7]))
                            {
                                if (Uri.IsHexDigit(rd2[8]))
                                {
                                    if (Uri.IsHexDigit(rd2[9]))
                                    {
                                        nonam[mov] = n;
                                        mov++;
                                        if (rd1.Length <= 32)
                                        {
                                            break;
                                        }
                                        rd1 = rd1.Substring(22);
                                    }
                                    else
                                    {
                                        mov = 1024;
                                    }
                                }
                                else
                                {
                                    mov = 1024;
                                }
                            }
                            else
                            {
                                mov = 1024;
                            }
                        }
                        else if (Uri.IsHexDigit(rd2[0]))
                        {
                            for (j = 2; j < 10; j++)
                            {
                                if (!Uri.IsHexDigit(rd2[j]))
                                {
                                    mov = 1024;
                                    break;
                                }
                            }
                            if (mov < 501)
                            {
                                nonam[mov] = n;
                                mov++;
                                if (rd1.Length <= 32)
                                {
                                    break;
                                }
                                rd1 = rd1.Substring(22);
                            }
                        }
                        else
                        {
                            mov = 1024;
                        }
                    }
                    else
                    {
                        mov = 1024;
                    }
                    continue;
                }
                for (i = 0; i < 8; i++)
                {
                    if (!Uri.IsHexDigit(rd2[i]))
                    {
                        i = 20;
                    }
                }
                if (i == 8)
                {
                    n = Convert.ToInt32(rd2, 16);
                    k = ((n >> 8) & 0xFF) + 1;
                    if (rd1.Length >= k * 11)
                    {
                        for (i = 1; i < k; i++)
                        {
                            rd2 = rd1.Substring(i * 11, 11);
                            if (Uri.IsHexDigit(rd2[0]))
                            {
                                for (j = 2; j < 10; j++)
                                {
                                    if (!Uri.IsHexDigit(rd2[j]))
                                    {
                                        j = 4096;
                                    }
                                }
                                if (j > 10)
                                {
                                    i = 4096;
                                }
                            }
                            else
                            {
                                i = 4096;
                            }
                        }
                        if (i == k)
                        {
                            nonam[mov] = n;
                            mov++;
                            if (rd1.Length <= k * 11 + 10)
                            {
                                break;
                            }
                            rd1 = rd1.Substring(k * 11);
                        }
                        else
                        {
                            mov = 1024;
                        }
                    }
                    else
                    {
                        mov = 1024;
                    }
                }
                else
                {
                    mov = 1024;
                }
            }
            if (mov < 501)
            {
                rd1 = rd3;
                if (h == 0)
                {
                    n = mov * 2 + 2;
                    for (j = stf; j < md; j++)
                    {
                        if (alm[j] == -86052851)
                        {
                            for (i = j + 1; i < j + n; i++)
                            {
                                if (alm[i] != -86052851)
                                {
                                    j = i;
                                    break;
                                }
                            }
                            if (i == j + n)
                            {
                                break;
                            }
                        }
                    }
                    if (j >= md)
                    {
                        j = md;
                        md += n;
                    }
                    an4 = j;
                }
                else
                {
                    fnt = 0;
                    j = h / 4;
                    if (alm[j] == -86052851)
                    {
                        g = 0;
                    }
                    an4 = j + g * 2;
                    if (an4 + 5 > md)
                    {
                        if (alm[md - 2] == -86110838)
                        {
                            alm[md + mov * 2 - 2] = alm[md - 2];
                            alm[md + mov * 2 - 1] = alm[md - 1];
                            fnt = 1;
                        }
                        else if (an4 + 3 > md)
                        {
                            fnt = 1;
                        }
                    }
                    if (fnt == 0)
                    {
                        m = an4 + mov * 2 + 1;
                        for (i = an4 + 2; i < m; i++)
                        {
                            if (alm[i] != -86052851)
                            {
                                i = m + 8;
                            }
                        }
                        if (i != m)
                        {
                            n = (g + mov) * 2 + 2;
                            for (j = stf; j < md; j++)
                            {
                                if (alm[j] == -86052851)
                                {
                                    for (i = j + 1; i < j + n; i++)
                                    {
                                        if (alm[i] != -86052851)
                                        {
                                            j = i;
                                            break;
                                        }
                                    }
                                    if (i == j + n)
                                    {
                                        break;
                                    }
                                }
                            }
                            if (j >= md)
                            {
                                j = md;
                                if (alm[md - 2] == -86110838)
                                {
                                    alm[md + n - 2] = alm[md - 2];
                                    alm[md + n - 1] = alm[md - 1];
                                    j -= 2;
                                }
                                md += n;
                            }
                            k = g * 2;
                            m = h / 4;
                            for (n = 0; n < k; n += 2)
                            {
                                if (((alm[m + n] >> 8) & 0xFF) != 0)
                                {
                                    rmv = (m + n) * 4 + 4;
                                    for (i = 0; i < par; i++)
                                    {
                                        if (asc[i] == rmv)
                                        {
                                            asc[i] = (j + n) * 4 + 4;
                                            break;
                                        }
                                    }
                                }
                                alm[j + n] = alm[m + n];
                                alm[m + n] = -86052851;
                                alm[j + n + 1] = alm[m + n + 1];
                                alm[m + n + 1] = -86052851;
                            }
                            alm[j + n] = 0;
                            alm[m + n] = -86052851;
                            alm[j + n + 1] = 0;
                            alm[m + n + 1] = -86052851;
                            an4 = j + g * 2;
                            fnt = 2;
                        }
                    }
                    else
                    {
                        md += mov * 2;
                    }
                }
                for (i = 0; i < mov; i++)
                {
                    alm[an4 + i * 2] = nonam[i];
                }
                alm[an4 + i * 2] = 0;
                alm[an4 + i * 2 + 1] = 0;
                for (k = 0; k < mov; k++)
                {
                    an1 = alm[an4 + k * 2];
                    n = ((an1 >> 8) & 0xFF);
                    if (n == 0)
                    {
                        alm[an4 + k * 2 + 1] = 0;
                        if (rd1.Length > 11)
                        {
                            rd1 = rd1.Substring(11);
                        }
                    }
                    else
                    {
                        asc[par] = (an4 + k * 2) * 4 + 4;
                        tds[26]++;
                        par++;
                        an2 = 0;
                        m = n * 2;
                        if (an1 == 459008 || an1 == 590080)
                        {
                            rd2 = rd1.Substring(11, 11);
                            if (rd2[0] == 'S')
                            {
                                rd4 = rd2.Substring(7, 3);
                                an1 = Convert.ToInt32(rd4, 16);
                                if (rd2[1] == 'p')
                                {
                                    if (an1 >= 274 && an1 < 274 + spas)
                                    {
                                        if (rd2[5] != 'x')
                                        {
                                            an2 = alm[dat + 9] / 4;
                                        }
                                        else
                                        {
                                            an2 = alm[dat + 10] / 4;
                                        }
                                        an1 -= 274;
                                        if (alm[an2 + an1] >= 8096 && alm[an2 + an1] < tds[25])
                                        {
                                            nonam[0] = 2;
                                            nonam[1] = alm[an2 + an1];
                                        }
                                        else
                                        {
                                            nonam[0] = 0;
                                            nonam[1] = 0;
                                        }
                                    }
                                    else
                                    {
                                        nonam[0] = 0;
                                        nonam[1] = 0;
                                    }
                                }
                                else if (rd2[1] == 'E')
                                {
                                    if (an1 < tds[28])
                                    {
                                        n = rnext[(tds[27] + an1) * 2] / 4;
                                        an2 = 0;
                                        while (an2 < 100 && n >= stf && n < md)
                                        {
                                            an1 = n;
                                            n = alm[an1] / 4;
                                            an2++;
                                        }
                                        if (an2 < 100)
                                        {
                                            if (minitxt.Text == "Unused External Sub Routine data has occurred.")
                                            {
                                                minitxt.Text = "";
                                            }
                                            nonam[0] = 2;
                                            nonam[1] = -1;
                                            m = stf;
                                            while (m < md && (alm[m] != -86052851 || alm[m + 1] != -86052851))
                                            {
                                                m++;
                                            }
                                            if (an2 == 0)
                                            {
                                                rnext[(tds[27] + an1) * 2] = m * 4 + 4;
                                            }
                                            else
                                            {
                                                alm[an1] = m * 4 + 4;
                                            }
                                        }
                                        else
                                        {
                                            nonam[0] = 0;
                                            nonam[1] = 0;
                                        }
                                        m = 2;
                                        n = 1;
                                    }
                                    else
                                    {
                                        nonam[0] = 0;
                                        nonam[1] = 0;
                                    }
                                }
                                else if (rd2[1] == 'O')
                                {
                                    nonam[0] = 0;
                                    nonam[1] = 0;
                                    if (rd2[5] == 'n')
                                    {
                                        if (alm[dat + 20] >= 8096 && alm[dat + 20] < tds[25])
                                        {
                                            an2 = alm[dat + 20] / 4;
                                            while (an2 < md && alm[an2] >= 0)
                                            {
                                                if (alm[an2] == an1)
                                                {
                                                    if (alm[an2 + 1] >= 8096 && alm[an2 + 1] < tds[25])
                                                    {
                                                        nonam[0] = 2;
                                                        nonam[1] = alm[an2 + 1];
                                                    }
                                                    break;
                                                }
                                                an2 += 2;
                                            }
                                        }
                                    }
                                    else if (rd2[5] == 'x')
                                    {
                                        if (alm[dat + 21] >= 8096 && alm[dat + 21] < tds[25])
                                        {
                                            an2 = alm[dat + 21] / 4;
                                            while (an2 < md && alm[an2] >= 0)
                                            {
                                                if (alm[an2] == an1)
                                                {
                                                    if (alm[an2 + 1] >= 8096 && alm[an2 + 1] < tds[25])
                                                    {
                                                        nonam[0] = 2;
                                                        nonam[1] = alm[an2 + 1];
                                                    }
                                                    break;
                                                }
                                                an2 += 2;
                                            }
                                        }
                                    }
                                    else if (an1 >= 0 && an1 < 274 + spas)
                                    {
                                        an2 = alm[dat + 11] / 4;
                                        if (alm[an2 + an1] >= 8096 && alm[an2 + an1] < tds[25])
                                        {
                                            nonam[0] = 2;
                                            nonam[1] = alm[an2 + an1];
                                        }
                                    }
                                }
                                else if (an1 < suba)
                                {
                                    if (rd2[4] == 'N' && EvSubaCbList.Items.Count == 8)
                                    {
                                        if (rd2[5] == 'M')
                                        {
                                            an2 = alm[dat + 31] / 4;
                                        }
                                        else if (rd2[5] == 'G')
                                        {
                                            an2 = alm[dat + 32] / 4;
                                        }
                                        else if (rd2[5] == 'S')
                                        {
                                            an2 = alm[dat + 33] / 4;
                                        }
                                        else
                                        {
                                            an2 = alm[dat + 34] / 4;
                                        }
                                    }
                                    else if (rd2[5] == 'M')
                                    {
                                        an2 = alm[dat + 12] / 4;
                                    }
                                    else if (rd2[5] == 'G')
                                    {
                                        an2 = alm[dat + 13] / 4;
                                    }
                                    else if (rd2[5] == 'S')
                                    {
                                        an2 = alm[dat + 14] / 4;
                                    }
                                    else
                                    {
                                        an2 = alm[dat + 15] / 4;
                                    }
                                    if (alm[an2 + an1] >= 8096 && alm[an2 + an1] < tds[25])
                                    {
                                        nonam[0] = 2;
                                        nonam[1] = alm[an2 + an1];
                                    }
                                    else
                                    {
                                        nonam[0] = 0;
                                        nonam[1] = 0;
                                    }
                                }
                                else
                                {
                                    nonam[0] = 0;
                                    nonam[1] = 0;
                                }
                            }
                            else
                            {
                                rd4 = rd2.Substring(0, 1);
                                nonam[0] = Convert.ToInt32(rd4, 16);
                                rd4 = rd2.Substring(2, 8);
                                nonam[1] = Convert.ToInt32(rd4, 16);
                            }
                            an1 = 2;
                            an2 = 2;
                        }
                        else
                        {
                            for (an1 = 1; an1 <= n; an1++)
                            {
                                rd2 = rd1.Substring(an1 * 11, 11);
                                rd4 = rd2.Substring(0, 1);
                                nonam[an2] = Convert.ToInt32(rd4, 16);
                                rd4 = rd2.Substring(2, 8);
                                an2++;
                                nonam[an2] = Convert.ToInt32(rd4, 16);
                                an2++;
                            }
                        }
                        if (rd1.Length > an1 * 11)
                        {
                            rd1 = rd1.Substring(an1 * 11);
                        }
                        ParamsModify();
                        alm[an4 + k * 2 + 1] = i * 4;
                    }
                }
            }
            else
            {
                minitxt.Text = "Cannot Paste.";
            }
        }

        private void SameAnimRename()
        {
            an2 = alm[h];
            alm[h] = 16777216;
            i = stf;
            while (i < md && alm[i] != an2)
            {
                i++;
            }
            if (i != md)
            {
                return;
            }
            i = an2 / 4;
            an2 = alm[dat] / 4;
            if (i >= snstr && i < an2)
            {
                while ((alm[i] & 0xFF) > 13)
                {
                    alm[i] = 0;
                    i++;
                }
                alm[i] = 0;
            }
            else
            {
                while ((alm[i] & 0xFF) > 15)
                {
                    alm[i] = -86052851;
                    i++;
                }
                alm[i] = -86052851;
            }
        }

        private void SubaRename()
        {
            n = alm[k + 1];
            i = n / 4;
            an2 = alm[dat] / 4;
            if (rd1 == "<null>")
            {
                if (n == 0)
                {
                    return;
                }
                alm[k] = 0;
                alm[k + 1] = 0;
                rmv = k * 4 + 4;
                Delasc();
                h = stf;
                while (h < md && alm[h] != n)
                {
                    h++;
                }
                if (h == md)
                {
                    if (i >= snstr && i < an2)
                    {
                        while ((alm[i] & 0xFF) > 13)
                        {
                            alm[i] = 0;
                            i++;
                        }
                        alm[i] = 0;
                    }
                    else
                    {
                        while ((alm[i] & 0xFF) > 15)
                        {
                            alm[i] = -86052851;
                            i++;
                        }
                        alm[i] = -86052851;
                    }
                }
                Fixam();
                return;
            }
            byte[] bytes = Encoding.UTF8.GetBytes(rd1);
            m = rd1.Length;
            if (m != bytes.Length)
            {
                minitxt.Text = "Found Typing Error.";
                return;
            }
            an1 = m / 4;
            for (g = 0; g < m; g++)
            {
                if (g % 4 == 0)
                {
                    nonam[g / 4] = bytes[g] * 16777216;
                }
                else if (g % 4 == 1)
                {
                    nonam[g / 4] += bytes[g] * 65536;
                }
                else if (g % 4 == 2)
                {
                    nonam[g / 4] += bytes[g] * 256;
                }
                else
                {
                    nonam[g / 4] += bytes[g];
                }
            }
            if (m % 4 == 0)
            {
                nonam[an1] = 0;
            }
            an1++;
            for (g = snstr; g < an2; g++)
            {
                if (alm[g] == nonam[0] && (alm[g - 1] & 0xFF) < 15)
                {
                    for (h = 1; h < an1; h++)
                    {
                        if (alm[g + h] != nonam[h])
                        {
                            g += h;
                            break;
                        }
                    }
                    if (an1 == h)
                    {
                        if (g != i)
                        {
                            alm[k + 1] = g * 4;
                        }
                        break;
                    }
                }
            }
            if (n == 0)
            {
                asc[par] = k * 4 + 4;
                par++;
                tds[26]++;
            }
            else
            {
                if (g >= an2)
                {
                    alm[k + 1] = 0;
                }
                if (ModeChange.SelectedIndex == 1 && AllSameAnim.Checked)
                {
                    nonam[41] = an2 + suba * 2;
                    nonam[42] = g;
                    g = 20;
                    i -= 20;
                    while ((alm[g + i] & 0xFF) > 13)
                    {
                        nonam[g] = alm[i + g];
                        g++;
                        if (g > 38)
                        {
                            break;
                        }
                    }
                    i += g;
                    if (((alm[i] >> 24) & 0xFF) == 0)
                    {
                        nonam[g] = 0;
                        nonam[43] = 14610445;
                    }
                    else if (((alm[i] >> 16) & 0xFF) == 0)
                    {
                        h = (alm[i] & 0xFFFF);
                        nonam[g] = alm[i] - h;
                        nonam[43] = nonam[g] + 61453;
                    }
                    else if (((alm[i] >> 8) & 0xFF) == 0)
                    {
                        h = (alm[i] & 0xFF);
                        nonam[g] = alm[i] - h;
                        nonam[43] = nonam[g] + 13;
                    }
                    else
                    {
                        nonam[g] = alm[i];
                        nonam[43] = alm[i];
                    }
                    if (g == 20)
                    {
                        for (h = an2 + 1; h < nonam[41]; h += 2)
                        {
                            if (alm[h] == n)
                            {
                                alm[h] = 16777216;
                            }
                            else if (alm[h] >= 8096 && alm[h] < tds[25])
                            {
                                an2 = alm[h] / 4;
                                if (nonam[20] == alm[an2] || nonam[43] == alm[an2])
                                {
                                    SameAnimRename();
                                }
                            }
                        }
                    }
                    else
                    {
                        for (h = an2 + 1; h < nonam[41]; h += 2)
                        {
                            if (alm[h] == n)
                            {
                                alm[h] = 16777216;
                            }
                            else if (alm[h] >= 8096 && alm[h] < tds[25])
                            {
                                an2 = alm[h] / 4;
                                if (nonam[20] == alm[an2])
                                {
                                    an2 -= 20;
                                    i = 21;
                                    while (i < g && nonam[i] == alm[an2 + i])
                                    {
                                        i++;
                                    }
                                    if (i == g && (nonam[i] == alm[an2 + i] || nonam[43] == alm[an2 + i]))
                                    {
                                        SameAnimRename();
                                    }
                                }
                            }
                        }
                    }
                    an2 = alm[dat] / 4;
                    g = nonam[42];
                    if (g < an2)
                    {
                        if (alm[g] == 0)
                        {
                            for (i = 0; i < an1; i++)
                            {
                                alm[g + i] = nonam[i];
                            }
                        }
                        i = an2 + suba * 2;
                        for (h = an2 + 1; h < i; h += 2)
                        {
                            if (alm[h] == 16777216)
                            {
                                alm[h] = g * 4;
                            }
                        }
                    }
                    i = n / 4;
                }
                h = stf;
                while (h < md && alm[h] != n)
                {
                    h++;
                }
                if (h == md)
                {
                    if (i >= snstr && i < an2)
                    {
                        while ((alm[i] & 0xFF) > 13)
                        {
                            alm[i] = 0;
                            i++;
                        }
                        alm[i] = 0;
                    }
                    else
                    {
                        while ((alm[i] & 0xFF) > 15)
                        {
                            alm[i] = -86052851;
                            i++;
                        }
                        alm[i] = -86052851;
                    }
                }
            }
            if (g >= an2)
            {
                for (g = snstr; g < an2; g++)
                {
                    if ((alm[g] == 0 || alm[g] == -86052851) && (alm[g - 1] & 0xFF) < 15)
                    {
                        for (h = 1; h < an1; h++)
                        {
                            if (alm[g + h] != 0 && alm[g + h] != -86052851)
                            {
                                g += h;
                                break;
                            }
                        }
                        if (h == an1 && h < an2)
                        {
                            for (h = 0; h < an1; h++)
                            {
                                alm[g + h] = nonam[h];
                            }
                            alm[k + 1] = g * 4;
                            if (ModeChange.SelectedIndex != 1 || !AllSameAnim.Checked)
                            {
                                break;
                            }
                            i = an2 + suba * 2;
                            for (h = an2 + 1; h < i; h += 2)
                            {
                                if (alm[h] == 16777216)
                                {
                                    alm[h] = g * 4;
                                }
                            }
                            break;
                        }
                    }
                }
                if (g >= an2)
                {
                    for (g = stf; g < snstr; g++)
                    {
                        if (alm[g] == -86052851)
                        {
                            for (h = 1; h < an1; h++)
                            {
                                if (alm[g + h] != -86052851)
                                {
                                    g += h;
                                    break;
                                }
                            }
                            if (an1 == h)
                            {
                                for (h = 0; h < an1; h++)
                                {
                                    alm[g + h] = nonam[h];
                                }
                                alm[k + 1] = g * 4;
                                if (ModeChange.SelectedIndex != 1 || !AllSameAnim.Checked)
                                {
                                    break;
                                }
                                i = an2 + suba * 2;
                                for (h = an2 + 1; h < i; h += 2)
                                {
                                    if (alm[h] == 16777216)
                                    {
                                        alm[h] = g * 4;
                                    }
                                }
                                break;
                            }
                        }
                        else if (alm[g] == nonam[0])
                        {
                            for (h = 1; h < an1; h++)
                            {
                                if (alm[g + h] != nonam[h])
                                {
                                    g += h;
                                    break;
                                }
                            }
                            if (an1 == h)
                            {
                                alm[k + 1] = g * 4;
                                if (ModeChange.SelectedIndex != 1 || !AllSameAnim.Checked)
                                {
                                    break;
                                }
                                i = an2 + suba * 2;
                                for (h = an2 + 1; h < i; h += 2)
                                {
                                    if (alm[h] == 16777216)
                                    {
                                        alm[h] = g * 4;
                                    }
                                }
                                break;
                            }
                        }
                    }
                    if (g >= snstr)
                    {
                        for (g = alm[dat] / 4 + suba * 2; g < md; g++)
                        {
                            if (alm[g] == -86052851)
                            {
                                for (h = 1; h < an1; h++)
                                {
                                    if (alm[g + h] != -86052851)
                                    {
                                        g += h;
                                        break;
                                    }
                                }
                                if (an1 == h)
                                {
                                    for (h = 0; h < an1; h++)
                                    {
                                        alm[g + h] = nonam[h];
                                    }
                                    alm[k + 1] = g * 4;
                                    if (ModeChange.SelectedIndex != 1 || !AllSameAnim.Checked)
                                    {
                                        break;
                                    }
                                    i = an2 + suba * 2;
                                    for (h = an2 + 1; h < i; h += 2)
                                    {
                                        if (alm[h] == 16777216)
                                        {
                                            alm[h] = g * 4;
                                        }
                                    }
                                    break;
                                }
                            }
                            else if (alm[g] == nonam[0] && (alm[g - 1] & 0xFF) < 15)
                            {
                                for (h = 1; h < an1; h++)
                                {
                                    if (alm[g + h] != nonam[h])
                                    {
                                        g += h;
                                        break;
                                    }
                                }
                                if (an1 == h)
                                {
                                    alm[k + 1] = g * 4;
                                    if (ModeChange.SelectedIndex != 1 || !AllSameAnim.Checked)
                                    {
                                        break;
                                    }
                                    i = an2 + suba * 2;
                                    for (h = an2 + 1; h < i; h += 2)
                                    {
                                        if (alm[h] == 16777216)
                                        {
                                            alm[h] = g * 4;
                                        }
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            if (g >= md)
            {
                g = md;
                alm[k + 1] = g * 4;
                md += an1;
                for (h = 0; h < an1; h++)
                {
                    alm[g + h] = nonam[h];
                }
                if (ModeChange.SelectedIndex == 1 && AllSameAnim.Checked)
                {
                    i = an2 + suba * 2;
                    for (h = an2 + 1; h < i; h += 2)
                    {
                        if (alm[h] == 16777216)
                        {
                            alm[h] = g * 4;
                        }
                    }
                }
                Fixam();
            }
            else if (n == 0)
            {
                Fixam();
            }
        }

        private void AllEnableChange()
        {
            if (!ModeChange.Enabled)
            {
                EstiMinSize.Enabled = false;
                CurrentSize.Enabled = false;
                Qsave.Enabled = false;
                Fopen.Enabled = false;
                Fsave.Enabled = false;
                Settingdatasave.Enabled = false;
                AllowDrop = false;
                return;
            }
            EstiMinSize.Enabled = true;
            CurrentSize.Enabled = true;
            Fopen.Enabled = true;
            Fsave.Enabled = true;
            Settingdatasave.Enabled = true;
            AllowDrop = true;
            if (qe)
            {
                Qsave.Enabled = true;
            }
        }

        private void GenTrace()
        {
            if (EvSubaCbList.Items.Count < 4)
            {
                for (j = 0; j < tds[27]; j++)
                {
                    if (g == rnext[j * 2])
                    {
                        rd1 = rd1 + " - " + DataDTList.Items[j].ToString();
                        break;
                    }
                }
                k = alm[dat + 4] / 4;
                m = k + 548;
                if (j == tds[27])
                {
                    j = k;
                    while (true)
                    {
                        if (j < m)
                        {
                            if (alm[j] == g)
                            {
                                break;
                            }
                            j++;
                            continue;
                        }
                        return;
                    }
                    if (j < k + 274)
                    {
                        rd1 = rd1 + " Action Entry " + (j - k).ToString("X");
                    }
                    else
                    {
                        rd1 = rd1 + " Action Exit " + (j - k - 274).ToString("X");
                    }
                    return;
                }
                j = k;
                while (true)
                {
                    if (j < m)
                    {
                        if (alm[j] == g)
                        {
                            break;
                        }
                        j++;
                        continue;
                    }
                    return;
                }
                if (j < k + 274)
                {
                    rd1 = rd1 + " (Action Entry " + (j - k).ToString("X") + ")";
                }
                else
                {
                    rd1 = rd1 + " (Action Exit " + (j - k - 274).ToString("X") + ")";
                }
                return;
            }
            k = alm[dat + 9] / 4;
            m = k + spas * 2;
            for (j = k; j < m; j++)
            {
                if (alm[j] == g)
                {
                    if (j < k + spas)
                    {
                        rd1 = rd1 + " Action Entry " + (j - k + 274).ToString("X");
                    }
                    else
                    {
                        rd1 = rd1 + " Action Exit " + (j - k - spas + 274).ToString("X");
                    }
                    break;
                }
            }
            if (j != m)
            {
                return;
            }
            k = alm[dat + 12] / 4;
            m = k + suba * 4;
            for (j = k; j < m; j++)
            {
                if (alm[j] == g)
                {
                    if (j < k + suba)
                    {
                        rd1 = rd1 + " Sub Action Main " + (j - k).ToString("X");
                    }
                    else if (j < k + suba * 2)
                    {
                        rd1 = rd1 + " Sub Action GFX " + (j - k - suba).ToString("X");
                    }
                    else if (j < k + suba * 3)
                    {
                        rd1 = rd1 + " Sub Action SFX " + (j - k - suba * 2).ToString("X");
                    }
                    else
                    {
                        rd1 = rd1 + " Sub Action Other " + (j - k - suba * 3).ToString("X");
                    }
                    break;
                }
            }
            if (j != m)
            {
                return;
            }
            if (alm[dat + 20] >= 8096 && alm[dat + 20] < tds[25])
            {
                k = alm[dat + 20] / 4;
                j = k;
                while (j < md && alm[j] >= 0)
                {
                    if (alm[j + 1] == g)
                    {
                        m = (j - k) / 2;
                        string text = rd1;
                        rd1 = text + " Action Override Entry " + alm[j].ToString("X") + "(No." + m + ")";
                        k = 0;
                        break;
                    }
                    j += 2;
                }
            }
            if (k <= 0)
            {
                return;
            }
            if (alm[dat + 21] >= 8096 && alm[dat + 21] < tds[25])
            {
                k = alm[dat + 21] / 4;
                j = k;
                while (j < md && alm[j] >= 0)
                {
                    if (alm[j + 1] == g)
                    {
                        m = (j - k) / 2;
                        string text = rd1;
                        rd1 = text + " Action Override Exit " + alm[j].ToString("X") + "(No." + m + ")";
                        k = 0;
                        break;
                    }
                    j += 2;
                }
            }
            if (k <= 0)
            {
                return;
            }
            if (EvSubaCbList.Items.Count == 8)
            {
                k = alm[dat + 31] / 4;
                m = k + suba * 4;
                for (j = k; j < m; j++)
                {
                    if (alm[j] == g)
                    {
                        if (j < k + suba)
                        {
                            rd1 = rd1 + " Sub Action NMain " + (j - k).ToString("X");
                        }
                        else if (j < k + suba * 2)
                        {
                            rd1 = rd1 + " Sub Action NGFX " + (j - k - suba).ToString("X");
                        }
                        else if (j < k + suba * 3)
                        {
                            rd1 = rd1 + " Sub Action NSFX " + (j - k - suba * 2).ToString("X");
                        }
                        else
                        {
                            rd1 = rd1 + " Sub Action NOther " + (j - k - suba * 3).ToString("X");
                        }
                        k = 0;
                        break;
                    }
                }
            }
            if (k <= 0)
            {
                return;
            }
            if (alm[dat + 11] >= 8096 && alm[dat + 11] < tds[25])
            {
                k = alm[dat + 11] / 4;
                m = k + 274 + spas;
                for (j = k; j < m; j++)
                {
                    if (alm[j] == g)
                    {
                        rd1 = rd1 + " Action Pre " + (j - k).ToString("X");
                        k = 0;
                        break;
                    }
                }
            }
            if (k > 0 && alm[dat + 22] >= 8096 && alm[dat + 22] < tds[25])
            {
                k = alm[dat + 22] / 4 + 2;
                if (alm[k] == g)
                {
                    rd1 += " Extra Action Interrupts";
                }
            }
        }

        private void GenTraceS()
        {
            GenTrace();
            if (rd1.Length >= 9)
            {
                return;
            }
            j = g / 4;
            if (alm[j - 2] <= 65535)
            {
                return;
            }
            k = ((alm[j - 2] >> 8) & 0xFF) * 2;
            if (k == 0)
            {
                if (alm[j - 1] == 0)
                {
                    rd1 += " (Incomplete)";
                }
            }
            else if (alm[j - 1] >= 8096 && alm[j - 1] < tds[25])
            {
                j = alm[j - 1] / 4;
                m = 0;
                while (m < k && alm[j + m] >= 0 && alm[j + m] < 7)
                {
                    m += 2;
                }
                if (m == k)
                {
                    rd1 += " (Incomplete)";
                }
            }
        }

        private void ArtParView()
        {
            ArtParOffset.Text = "0x" + (artpo * 4).ToString("X");
            if (h == 0)
            {
                k = artpo * 4;
                m = k + 3;
                n = k + 1023;
                if (n > tds[25])
                {
                    n = tds[25];
                }
                for (j = stf; j < md; j++)
                {
                    if (alm[j] > m && alm[j] < n)
                    {
                        rmv = j * 4;
                        for (mov = 0; mov < par; mov++)
                        {
                            if (asc[mov] == rmv)
                            {
                                n = alm[j];
                                break;
                            }
                        }
                    }
                }
                h = (n - k) / 4;
                if (h > 1)
                {
                    for (j = 1; j < h; j++)
                    {
                        if (alm[artpo + j] == -86052851)
                        {
                            h = j;
                            break;
                        }
                    }
                }
            }
            fnt = 1;
            if (i > 0)
            {
                i++;
                while (CharPar[i] != null)
                {
                    if (CharPar[i] == rd1)
                    {
                        i += 2;
                        if (i + h * 2 >= 1999 || CharPar[i + h * 2 - 1] == null)
                        {
                            break;
                        }
                        for (j = 0; j < h; j++)
                        {
                            artpr = i;
                            fnt = 0;
                            rd1 = CharPar[i + j * 2];
                            if (ArtHexView.Checked)
                            {
                                ArtParList.Rows.Add(rd1, alm[artpo + j].ToString("X"));
                            }
                            else if (rd1[0] == '*')
                            {
                                ArtParList.Rows.Add(rd1, alm[artpo + j].ToString());
                            }
                            else if (rd1[0] == 'F' || rd1[0] == 'O')
                            {
                                ArtParList.Rows.Add(rd1, alm[artpo + j].ToString("X"));
                            }
                            else
                            {
                                bitf = BitConverter.GetBytes(alm[artpo + j]);
                                rdfr = BitConverter.ToSingle(bitf, 0);
                                ArtParList.Rows.Add(rd1, rdfr.ToString());
                            }
                        }
                        break;
                    }
                    i++;
                }
            }
            else if (i < -1)
            {
                fnt = 0;
                artpr = 0;
                if (i == -2)
                {
                    for (j = 0; j < h; j++)
                    {
                        rd1 = "*0x" + (j * 4).ToString("X");
                        if (ArtHexView.Checked)
                        {
                            ArtParList.Rows.Add(rd1, alm[artpo + j].ToString("X"));
                        }
                        else
                        {
                            ArtParList.Rows.Add(rd1, alm[artpo + j].ToString());
                        }
                    }
                }
                else
                {
                    for (j = 0; j < h; j++)
                    {
                        rd1 = "0x" + (j * 4).ToString("X");
                        if (ArtHexView.Checked)
                        {
                            ArtParList.Rows.Add(rd1, alm[artpo + j].ToString("X"));
                        }
                        else
                        {
                            bitf = BitConverter.GetBytes(alm[artpo + j]);
                            rdfr = BitConverter.ToSingle(bitf, 0);
                            ArtParList.Rows.Add(rd1, rdfr.ToString());
                        }
                    }
                }
            }
            if (fnt == 1)
            {
                artpr = 0;
                for (i = 0; i < h; i++)
                {
                    j = alm[artpo + i];
                    if (j > 268435455 || j < -268435455)
                    {
                        rd1 = "0x" + (i * 4).ToString("X");
                    }
                    else
                    {
                        rd1 = "*0x" + (i * 4).ToString("X");
                    }
                    if (ArtHexView.Checked)
                    {
                        ArtParList.Rows.Add(rd1, j.ToString("X"));
                    }
                    else if (rd1[0] == '*')
                    {
                        ArtParList.Rows.Add(rd1, j.ToString());
                    }
                    else
                    {
                        bitf = BitConverter.GetBytes(j);
                        rdfr = BitConverter.ToSingle(bitf, 0);
                        ArtParList.Rows.Add(rd1, rdfr.ToString());
                    }
                }
            }
            if (h > 4)
            {
                ArtParList.ScrollBars = ScrollBars.None;
                ArtParList.ScrollBars = ScrollBars.Vertical;
            }
        }

        private void DelEmptyData()
        {
            for (i = k; i < g; i++)
            {
                if (alm[i] >= 8096 && alm[i] < tds[25])
                {
                    j = alm[i] / 4;
                    if ((alm[j] == 0 || alm[j] == -86052851) && (alm[j + 1] == 0 || alm[j + 1] == -86052851))
                    {
                        alm[j] = -86052851;
                        alm[j + 1] = -86052851;
                        j = alm[i];
                        alm[i] = 0;
                        rmv = i * 4;
                        Delasc();
                        for (m = stf; m < h; m++)
                        {
                            if (alm[m] == 2 && alm[m + 1] == j)
                            {
                                n = m * 4;
                                rmv = n + 4;
                                Delasc();
                                if (mov < par)
                                {
                                    alm[m] = -86052851;
                                    alm[m + 1] = -86052851;
                                    for (m = stf; m < h; m++)
                                    {
                                        if ((alm[m] == 459008 || alm[m] == 590080) && alm[m + 1] == n)
                                        {
                                            if (m < h)
                                            {
                                                alm[m] = 131072;
                                                alm[m + 1] = 0;
                                            }
                                            rmv = m * 4 + 4;
                                            Delasc();
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        private void SubRnMinCmp()
        {
            h = j;
            while (h < md && alm[h] != 0)
            {
                if ((alm[h] == 459008 || alm[h] == 590080) && alm[h + 1] >= 8096 && alm[h + 1] < tds[25] && alm[h + 1] % 4 == 0)
                {
                    n = alm[h + 1] / 4;
                    if (alm[n] == 2 && alm[n + 1] != -1)
                    {
                        if (alm[n + 1] % 4 != 0 || alm[n + 1] < 8096 || alm[n + 1] >= tds[25])
                        {
                            rmv = alm[h + 1] + 4;
                            Delasc();
                            alm[n] = -86052851;
                            alm[n + 1] = -86052851;
                            rmv = h * 4 + 4;
                            Delasc();
                            alm[h] = 131072;
                            alm[h + 1] = 0;
                        }
                        else
                        {
                            if (alm[h] == 459008)
                            {
                                for (an1 = 0; an1 < tds[28]; an1++)
                                {
                                    m = rnext[(tds[27] + an1) * 2];
                                    if (m >= 8096 && m < tds[25])
                                    {
                                        if (n == m)
                                        {
                                            break;
                                        }
                                        if (m >= 8096 && m < tds[25])
                                        {
                                            an5 = 0;
                                            while (an5 < 100)
                                            {
                                                k = m / 4;
                                                m = alm[k];
                                                if (m >= 8096 && m < tds[25])
                                                {
                                                    if (n == m)
                                                    {
                                                        an1 = 16777216;
                                                    }
                                                    an5++;
                                                    continue;
                                                }
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                an1 = 0;
                            }
                            if (an1 < 16777216)
                            {
                                m = alm[n + 1] / 4;
                                if (alm[m] == 0 || alm[m] == -86052851)
                                {
                                    rmv = alm[h + 1] + 4;
                                    Delasc();
                                    rmv = h * 4 + 4;
                                    Delasc();
                                    k = alm[n + 1];
                                    alm[n] = -86052851;
                                    alm[n + 1] = -86052851;
                                    alm[h] = 131072;
                                    alm[h + 1] = 0;
                                    if (alm[m] == 0 && alm[m - 2] < 65536)
                                    {
                                        for (an1 = stf; an1 < md; an1++)
                                        {
                                            if (alm[an1] == k)
                                            {
                                                rmv = an1 * 4;
                                                mov = 0;
                                                while (mov < par && asc[mov] != rmv)
                                                {
                                                    mov++;
                                                }
                                                if (mov < par)
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                        if (an1 >= md)
                                        {
                                            alm[m] = -86052851;
                                            alm[m + 1] = -86052851;
                                        }
                                    }
                                }
                                else if (alm[m + 2] == 0)
                                {
                                    an1 = alm[m];
                                    k = ((an1 >> 8) & 0xFF);
                                    if (k == 0)
                                    {
                                        k = alm[n + 1];
                                        rmv = alm[h + 1] + 4;
                                        Delasc();
                                        alm[n] = -86052851;
                                        alm[n + 1] = -86052851;
                                        rmv = h * 4 + 4;
                                        Delasc();
                                        alm[h] = an1;
                                        alm[h + 1] = 0;
                                        if (alm[m - 2] < 65536)
                                        {
                                            for (an1 = stf; an1 < md; an1++)
                                            {
                                                if (alm[an1] == k)
                                                {
                                                    rmv = an1 * 4;
                                                    mov = 0;
                                                    while (mov < par && asc[mov] != rmv)
                                                    {
                                                        mov++;
                                                    }
                                                    if (mov < par)
                                                    {
                                                        break;
                                                    }
                                                }
                                            }
                                            if (an1 >= md)
                                            {
                                                alm[m] = -86052851;
                                                alm[m + 1] = -86052851;
                                                alm[m + 2] = -86052851;
                                                alm[m + 3] = -86052851;
                                            }
                                        }
                                    }
                                    else if (k == 1 && alm[m + 1] >= 8096 && alm[m + 1] < tds[25])
                                    {
                                        k = alm[n + 1];
                                        alm[h] = an1;
                                        an1 = alm[m + 1] / 4;
                                        if (alm[an1] == 2)
                                        {
                                            alm[n + 1] = alm[an1 + 1];
                                        }
                                        else
                                        {
                                            alm[n] = alm[an1];
                                            alm[n + 1] = alm[an1 + 1];
                                            rmv = alm[h + 1] + 4;
                                            Delasc();
                                        }
                                        if (alm[m - 2] < 65536)
                                        {
                                            for (an1 = stf; an1 < md; an1++)
                                            {
                                                if (alm[an1] == k)
                                                {
                                                    rmv = an1 * 4;
                                                    mov = 0;
                                                    while (mov < par && asc[mov] != rmv)
                                                    {
                                                        mov++;
                                                    }
                                                    if (mov < par)
                                                    {
                                                        break;
                                                    }
                                                }
                                            }
                                            if (an1 >= md)
                                            {
                                                k = alm[m + 1] / 4;
                                                if (alm[k] == 2)
                                                {
                                                    rmv = alm[m + 1] + 4;
                                                    Delasc();
                                                }
                                                rmv = m * 4 + 4;
                                                Delasc();
                                                alm[k] = -86052851;
                                                alm[k + 1] = -86052851;
                                                alm[m] = -86052851;
                                                alm[m + 1] = -86052851;
                                                alm[m + 2] = -86052851;
                                                alm[m + 3] = -86052851;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                h += 2;
            }
        }

        private void ListMoveF()
        {
            an5 = 0;
            n = g + 2;
            for (j = stf; j < k; j++)
            {
                if (alm[j] == -86052851)
                {
                    for (m = j + 1; m < j + n; m++)
                    {
                        if (alm[m] != -86052851)
                        {
                            j = m;
                            break;
                        }
                    }
                    if (m == j + n)
                    {
                        an5 = 1;
                        for (n = 0; n < g; n += 2)
                        {
                            if (((alm[k + n] >> 8) & 0xFF) != 0)
                            {
                                rmv = (k + n) * 4 + 4;
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == rmv)
                                    {
                                        asc[mov] = (j + n) * 4 + 4;
                                        break;
                                    }
                                }
                            }
                            alm[j + n] = alm[k + n];
                            alm[k + n] = -86052851;
                            alm[j + n + 1] = alm[k + n + 1];
                            alm[k + n + 1] = -86052851;
                        }
                        alm[j + n] = 0;
                        alm[k + n] = -86052851;
                        alm[j + n + 1] = 0;
                        alm[k + n + 1] = -86052851;
                        break;
                    }
                }
            }
            if (j <= k || alm[k - 1] != -86052851)
            {
                return;
            }
            for (j = k - 2; j > 808; j--)
            {
                if (alm[j] != -86052851)
                {
                    j++;
                    break;
                }
            }
            an5 = 1;
            for (n = 0; n < g; n += 2)
            {
                if (((alm[k + n] >> 8) & 0xFF) != 0)
                {
                    rmv = (k + n) * 4 + 4;
                    for (mov = 0; mov < par; mov++)
                    {
                        if (asc[mov] == rmv)
                        {
                            asc[mov] = (j + n) * 4 + 4;
                            break;
                        }
                    }
                }
                alm[j + n] = alm[k + n];
                alm[k + n] = -86052851;
                alm[j + n + 1] = alm[k + n + 1];
                alm[k + n + 1] = -86052851;
            }
            alm[j + n] = 0;
            alm[k + n] = -86052851;
            alm[j + n + 1] = 0;
            alm[k + n + 1] = -86052851;
        }

        private void ListMoveB()
        {
            n = g + 2;
            for (j = k; j < md; j++)
            {
                if (alm[j] == -86052851)
                {
                    for (m = j + 1; m < j + n; m++)
                    {
                        if (alm[m] != -86052851)
                        {
                            j = m;
                            break;
                        }
                    }
                    if (m == j + n)
                    {
                        break;
                    }
                }
            }
            if (j >= md)
            {
                j = md;
                if (alm[md - 2] == -86110838)
                {
                    j -= 2;
                    alm[md + g] = -86110838;
                    alm[md + g + 1] = alm[md - 1];
                }
                md += n;
            }
            for (n = 0; n < g; n += 2)
            {
                if (((alm[k + n] >> 8) & 0xFF) != 0)
                {
                    rmv = (k + n) * 4 + 4;
                    for (mov = 0; mov < par; mov++)
                    {
                        if (asc[mov] == rmv)
                        {
                            asc[mov] = (j + n) * 4 + 4;
                            break;
                        }
                    }
                }
                alm[j + n] = alm[k + n];
                alm[k + n] = -86052851;
                alm[j + n + 1] = alm[k + n + 1];
                alm[k + n + 1] = -86052851;
            }
            alm[j + n] = 0;
            alm[k + n] = -86052851;
            alm[j + n + 1] = 0;
            alm[k + n + 1] = -86052851;
        }

        private void ParMoveF()
        {
            n = j + i * 2;
            m = ((alm[n] >> 8) & 0xFF) * 2;
            if (m == 0)
            {
                return;
            }
            h = alm[n + 1] / 4;
            if (h < 808 || h >= md)
            {
                return;
            }
            for (an1 = stf; an1 < h; an1++)
            {
                if (alm[an1] == -86052851)
                {
                    for (an2 = an1 + 1; an2 < an1 + m; an2++)
                    {
                        if (alm[an2] != -86052851)
                        {
                            an1 = an2;
                            break;
                        }
                    }
                    if (an2 == an1 + m)
                    {
                        alm[n + 1] = an1 * 4;
                        an5++;
                        if (alm[n] == 459008)
                        {
                            if (alm[h] == 2)
                            {
                                rmv = h * 4 + 4;
                                for (an2 = 0; an2 < tds[28]; an2++)
                                {
                                    an4 = rnext[(tds[27] + an2) * 2];
                                    if (an4 >= 8096 && an4 < tds[25])
                                    {
                                        if (rmv == an4)
                                        {
                                            m = (tds[27] + an2) * 2;
                                            rnext[m] = an1 * 4 + 4;
                                            break;
                                        }
                                        an3 = 0;
                                        while (an3 < 100)
                                        {
                                            m = an4 / 4;
                                            an4 = alm[m];
                                            if (an4 >= 8096 && an4 < tds[25])
                                            {
                                                if (rmv == an4)
                                                {
                                                    alm[m] = an1 * 4 + 4;
                                                    break;
                                                }
                                                an3++;
                                                continue;
                                            }
                                            break;
                                        }
                                        if (rmv == an4)
                                        {
                                            break;
                                        }
                                    }
                                }
                                if (an2 >= tds[28])
                                {
                                    for (mov = 0; mov < par; mov++)
                                    {
                                        if (asc[mov] == rmv)
                                        {
                                            asc[mov] = an1 * 4 + 4;
                                            break;
                                        }
                                    }
                                }
                            }
                            alm[an1] = alm[h];
                            alm[h] = -86052851;
                            alm[an1 + 1] = alm[h + 1];
                            alm[h + 1] = -86052851;
                            break;
                        }
                        if (alm[n] == 218104320)
                        {
                            if (alm[h] == 2)
                            {
                                rmv = h * 4 + 4;
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == rmv)
                                    {
                                        asc[mov] = an1 * 4 + 4;
                                        break;
                                    }
                                }
                            }
                            alm[an1] = alm[h];
                            alm[h] = -86052851;
                            alm[an1 + 1] = alm[h + 1];
                            alm[h + 1] = -86052851;
                            if (alm[h + 2] == 2)
                            {
                                rmv = h * 4 + 12;
                                for (an2 = 0; an2 < tds[28]; an2++)
                                {
                                    an4 = rnext[(tds[27] + an2) * 2];
                                    if (an4 >= 8096 && an4 < tds[25])
                                    {
                                        if (rmv == an4)
                                        {
                                            m = (tds[27] + an2) * 2;
                                            rnext[m] = an1 * 4 + 12;
                                            break;
                                        }
                                        an3 = 0;
                                        while (an3 < 100)
                                        {
                                            m = an4 / 4;
                                            an4 = alm[m];
                                            if (an4 >= 8096 && an4 < tds[25])
                                            {
                                                if (rmv == an4)
                                                {
                                                    alm[m] = an1 * 4 + 12;
                                                    break;
                                                }
                                                an3++;
                                                continue;
                                            }
                                            break;
                                        }
                                        if (rmv == an4)
                                        {
                                            break;
                                        }
                                    }
                                }
                                if (an2 >= tds[28])
                                {
                                    for (mov = 0; mov < par; mov++)
                                    {
                                        if (asc[mov] == rmv)
                                        {
                                            asc[mov] = an1 * 4 + 12;
                                            break;
                                        }
                                    }
                                }
                            }
                            alm[an1 + 2] = alm[h + 2];
                            alm[h + 2] = -86052851;
                            alm[an1 + 3] = alm[h + 3];
                            alm[h + 3] = -86052851;
                            break;
                        }
                        for (an2 = 0; an2 < m; an2 += 2)
                        {
                            if (alm[h + an2] == 2)
                            {
                                rmv = (h + an2) * 4 + 4;
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == rmv)
                                    {
                                        asc[mov] = (an1 + an2) * 4 + 4;
                                        break;
                                    }
                                }
                                if (mov == par && alm[h + an2 + 1] < 0)
                                {
                                    for (an3 = 0; an3 < tds[28]; an3++)
                                    {
                                        if (rmv == rnext[(tds[27] + an3) * 2])
                                        {
                                            an4 = (tds[27] + an3) * 2;
                                            rnext[an4] = (an1 + an2) * 4 + 4;
                                            break;
                                        }
                                    }
                                }
                            }
                            alm[an1 + an2] = alm[h + an2];
                            alm[h + an2] = -86052851;
                            alm[an1 + an2 + 1] = alm[h + an2 + 1];
                            alm[h + an2 + 1] = -86052851;
                        }
                        break;
                    }
                }
            }
            if (an1 <= h || alm[h - 1] != -86052851)
            {
                return;
            }
            for (an1 = h - 2; an1 > stf; an1--)
            {
                if (alm[an1] != -86052851)
                {
                    an1++;
                    break;
                }
            }
            alm[n + 1] = an1 * 4;
            an5++;
            if (alm[n] == 459008)
            {
                if (alm[h] == 2)
                {
                    rmv = h * 4 + 4;
                    for (an2 = 0; an2 < tds[28]; an2++)
                    {
                        an4 = rnext[(tds[27] + an2) * 2];
                        if (an4 >= 8096 && an4 < tds[25])
                        {
                            if (rmv == an4)
                            {
                                m = (tds[27] + an2) * 2;
                                rnext[m] = an1 * 4 + 4;
                                break;
                            }
                            an3 = 0;
                            while (an3 < 100)
                            {
                                m = an4 / 4;
                                an4 = alm[m];
                                if (an4 >= 8096 && an4 < tds[25])
                                {
                                    if (rmv == an4)
                                    {
                                        alm[m] = an1 * 4 + 4;
                                        break;
                                    }
                                    an3++;
                                    continue;
                                }
                                break;
                            }
                            if (rmv == an4)
                            {
                                break;
                            }
                        }
                    }
                    if (an2 >= tds[28])
                    {
                        for (mov = 0; mov < par; mov++)
                        {
                            if (asc[mov] == rmv)
                            {
                                asc[mov] = an1 * 4 + 4;
                                break;
                            }
                        }
                    }
                }
                alm[an1] = alm[h];
                alm[h] = -86052851;
                alm[an1 + 1] = alm[h + 1];
                alm[h + 1] = -86052851;
                return;
            }
            if (alm[n] == 218104320)
            {
                if (alm[h] == 2)
                {
                    rmv = h * 4 + 4;
                    for (mov = 0; mov < par; mov++)
                    {
                        if (asc[mov] == rmv)
                        {
                            asc[mov] = an1 * 4 + 4;
                            break;
                        }
                    }
                }
                alm[an1] = alm[h];
                alm[h] = -86052851;
                alm[an1 + 1] = alm[h + 1];
                alm[h + 1] = -86052851;
                if (alm[h + 2] == 2)
                {
                    rmv = h * 4 + 12;
                    for (an2 = 0; an2 < tds[28]; an2++)
                    {
                        an4 = rnext[(tds[27] + an2) * 2];
                        if (an4 >= 8096 && an4 < tds[25])
                        {
                            if (rmv == an4)
                            {
                                m = (tds[27] + an2) * 2;
                                rnext[m] = an1 * 4 + 12;
                                break;
                            }
                            an3 = 0;
                            while (an3 < 100)
                            {
                                m = an4 / 4;
                                an4 = alm[m];
                                if (an4 >= 8096 && an4 < tds[25])
                                {
                                    if (rmv == an4)
                                    {
                                        alm[m] = an1 * 4 + 12;
                                        break;
                                    }
                                    an3++;
                                    continue;
                                }
                                break;
                            }
                            if (rmv == an4)
                            {
                                break;
                            }
                        }
                    }
                    if (an2 >= tds[28])
                    {
                        for (mov = 0; mov < par; mov++)
                        {
                            if (asc[mov] == rmv)
                            {
                                asc[mov] = an1 * 4 + 12;
                                break;
                            }
                        }
                    }
                }
                alm[an1 + 2] = alm[h + 2];
                alm[h + 2] = -86052851;
                alm[an1 + 3] = alm[h + 3];
                alm[h + 3] = -86052851;
                return;
            }
            for (an2 = 0; an2 < m; an2 += 2)
            {
                if (alm[h + an2] == 2)
                {
                    rmv = (h + an2) * 4 + 4;
                    for (mov = 0; mov < par; mov++)
                    {
                        if (asc[mov] == rmv)
                        {
                            asc[mov] = (an1 + an2) * 4 + 4;
                            break;
                        }
                    }
                    if (mov == par && alm[h + an2 + 1] < 0)
                    {
                        for (an3 = 0; an3 < tds[28]; an3++)
                        {
                            if (rmv == rnext[(tds[27] + an3) * 2])
                            {
                                an4 = (tds[27] + an3) * 2;
                                rnext[an4] = (an1 + an2) * 4 + 4;
                                break;
                            }
                        }
                    }
                }
                alm[an1 + an2] = alm[h + an2];
                alm[h + an2] = -86052851;
                alm[an1 + an2 + 1] = alm[h + an2 + 1];
                alm[h + an2 + 1] = -86052851;
            }
        }

        private void ParMoveB()
        {
            n = j + i * 2;
            m = ((alm[n] >> 8) & 0xFF) * 2;
            if (m == 0)
            {
                return;
            }
            h = alm[n + 1] / 4;
            if (h < 808 || h >= md)
            {
                return;
            }
            for (an1 = h; an1 < md; an1++)
            {
                if (alm[an1] == -86052851)
                {
                    for (an2 = an1 + 1; an2 < an1 + m; an2++)
                    {
                        if (alm[an2] != -86052851)
                        {
                            an1 = an2;
                            break;
                        }
                    }
                    if (an2 == an1 + m)
                    {
                        alm[n + 1] = an1 * 4;
                        an5++;
                        if (alm[n] == 459008)
                        {
                            if (alm[h] == 2)
                            {
                                rmv = h * 4 + 4;
                                for (an2 = 0; an2 < tds[28]; an2++)
                                {
                                    an4 = rnext[(tds[27] + an2) * 2];
                                    if (an4 >= 8096 && an4 < tds[25])
                                    {
                                        if (rmv == an4)
                                        {
                                            m = (tds[27] + an2) * 2;
                                            rnext[m] = an1 * 4 + 4;
                                            break;
                                        }
                                        an3 = 0;
                                        while (an3 < 100)
                                        {
                                            m = an4 / 4;
                                            an4 = alm[m];
                                            if (an4 >= 8096 && an4 < tds[25])
                                            {
                                                if (rmv == an4)
                                                {
                                                    alm[m] = an1 * 4 + 4;
                                                    break;
                                                }
                                                an3++;
                                                continue;
                                            }
                                            break;
                                        }
                                        if (rmv == an4)
                                        {
                                            break;
                                        }
                                    }
                                }
                                if (an2 >= tds[28])
                                {
                                    for (mov = 0; mov < par; mov++)
                                    {
                                        if (asc[mov] == rmv)
                                        {
                                            asc[mov] = an1 * 4 + 4;
                                            break;
                                        }
                                    }
                                }
                            }
                            alm[an1] = alm[h];
                            alm[h] = -86052851;
                            alm[an1 + 1] = alm[h + 1];
                            alm[h + 1] = -86052851;
                            break;
                        }
                        if (alm[n] == 218104320)
                        {
                            if (alm[h] == 2)
                            {
                                rmv = h * 4 + 4;
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == rmv)
                                    {
                                        asc[mov] = an1 * 4 + 4;
                                        break;
                                    }
                                }
                            }
                            alm[an1] = alm[h];
                            alm[h] = -86052851;
                            alm[an1 + 1] = alm[h + 1];
                            alm[h + 1] = -86052851;
                            if (alm[h + 2] == 2)
                            {
                                rmv = h * 4 + 12;
                                for (an2 = 0; an2 < tds[28]; an2++)
                                {
                                    an4 = rnext[(tds[27] + an2) * 2];
                                    if (an4 >= 8096 && an4 < tds[25])
                                    {
                                        if (rmv == an4)
                                        {
                                            m = (tds[27] + an2) * 2;
                                            rnext[m] = an1 * 4 + 12;
                                            break;
                                        }
                                        an3 = 0;
                                        while (an3 < 100)
                                        {
                                            m = an4 / 4;
                                            an4 = alm[m];
                                            if (an4 >= 8096 && an4 < tds[25])
                                            {
                                                if (rmv == an4)
                                                {
                                                    alm[m] = an1 * 4 + 12;
                                                    break;
                                                }
                                                an3++;
                                                continue;
                                            }
                                            break;
                                        }
                                        if (rmv == an4)
                                        {
                                            break;
                                        }
                                    }
                                }
                                if (an2 >= tds[28])
                                {
                                    for (mov = 0; mov < par; mov++)
                                    {
                                        if (asc[mov] == rmv)
                                        {
                                            asc[mov] = an1 * 4 + 12;
                                            break;
                                        }
                                    }
                                }
                            }
                            alm[an1 + 2] = alm[h + 2];
                            alm[h + 2] = -86052851;
                            alm[an1 + 3] = alm[h + 3];
                            alm[h + 3] = -86052851;
                            break;
                        }
                        for (an2 = 0; an2 < m; an2 += 2)
                        {
                            if (alm[h + an2] == 2)
                            {
                                rmv = (h + an2) * 4 + 4;
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == rmv)
                                    {
                                        asc[mov] = (an1 + an2) * 4 + 4;
                                        break;
                                    }
                                }
                                if (mov == par && alm[h + an2 + 1] < 0)
                                {
                                    for (an3 = 0; an3 < tds[28]; an3++)
                                    {
                                        if (rmv == rnext[(tds[27] + an3) * 2])
                                        {
                                            an4 = (tds[27] + an3) * 2;
                                            rnext[an4] = (an1 + an2) * 4 + 4;
                                            break;
                                        }
                                    }
                                }
                            }
                            alm[an1 + an2] = alm[h + an2];
                            alm[h + an2] = -86052851;
                            alm[an1 + an2 + 1] = alm[h + an2 + 1];
                            alm[h + an2 + 1] = -86052851;
                        }
                        break;
                    }
                }
            }
            if (an1 < md)
            {
                return;
            }
            an1 = md;
            if (alm[md - 2] == -86110838)
            {
                an1 -= 2;
                alm[md + m - 2] = -86110838;
                alm[md + m - 1] = alm[md - 1];
            }
            alm[n + 1] = an1 * 4;
            an5++;
            md += m;
            if (alm[n] == 459008)
            {
                if (alm[h] == 2)
                {
                    rmv = h * 4 + 4;
                    for (an2 = 0; an2 < tds[28]; an2++)
                    {
                        an4 = rnext[(tds[27] + an2) * 2];
                        if (an4 >= 8096 && an4 < tds[25])
                        {
                            if (rmv == an4)
                            {
                                m = (tds[27] + an2) * 2;
                                rnext[m] = an1 * 4 + 4;
                                break;
                            }
                            an3 = 0;
                            while (an3 < 100)
                            {
                                m = an4 / 4;
                                an4 = alm[m];
                                if (an4 >= 8096 && an4 < tds[25])
                                {
                                    if (rmv == an4)
                                    {
                                        alm[m] = an1 * 4 + 4;
                                        break;
                                    }
                                    an3++;
                                    continue;
                                }
                                break;
                            }
                            if (rmv == an4)
                            {
                                break;
                            }
                        }
                    }
                    if (an2 >= tds[28])
                    {
                        for (mov = 0; mov < par; mov++)
                        {
                            if (asc[mov] == rmv)
                            {
                                asc[mov] = an1 * 4 + 4;
                                break;
                            }
                        }
                    }
                }
                alm[an1] = alm[h];
                alm[h] = -86052851;
                alm[an1 + 1] = alm[h + 1];
                alm[h + 1] = -86052851;
                return;
            }
            if (alm[n] == 218104320)
            {
                if (alm[h] == 2)
                {
                    rmv = h * 4 + 4;
                    for (mov = 0; mov < par; mov++)
                    {
                        if (asc[mov] == rmv)
                        {
                            asc[mov] = an1 * 4 + 4;
                            break;
                        }
                    }
                }
                alm[an1] = alm[h];
                alm[h] = -86052851;
                alm[an1 + 1] = alm[h + 1];
                alm[h + 1] = -86052851;
                if (alm[h + 2] == 2)
                {
                    rmv = h * 4 + 12;
                    for (an2 = 0; an2 < tds[28]; an2++)
                    {
                        an4 = rnext[(tds[27] + an2) * 2];
                        if (an4 >= 8096 && an4 < tds[25])
                        {
                            if (rmv == an4)
                            {
                                m = (tds[27] + an2) * 2;
                                rnext[m] = an1 * 4 + 12;
                                break;
                            }
                            an3 = 0;
                            while (an3 < 100)
                            {
                                m = an4 / 4;
                                an4 = alm[m];
                                if (an4 >= 8096 && an4 < tds[25])
                                {
                                    if (rmv == an4)
                                    {
                                        alm[m] = an1 * 4 + 12;
                                        break;
                                    }
                                    an3++;
                                    continue;
                                }
                                break;
                            }
                            if (rmv == an4)
                            {
                                break;
                            }
                        }
                    }
                    if (an2 >= tds[28])
                    {
                        for (mov = 0; mov < par; mov++)
                        {
                            if (asc[mov] == rmv)
                            {
                                asc[mov] = an1 * 4 + 12;
                                break;
                            }
                        }
                    }
                }
                alm[an1 + 2] = alm[h + 2];
                alm[h + 2] = -86052851;
                alm[an1 + 3] = alm[h + 3];
                alm[h + 3] = -86052851;
                return;
            }
            for (an2 = 0; an2 < m; an2 += 2)
            {
                if (alm[h + an2] == 2)
                {
                    rmv = (h + an2) * 4 + 4;
                    for (mov = 0; mov < par; mov++)
                    {
                        if (asc[mov] == rmv)
                        {
                            asc[mov] = (an1 + an2) * 4 + 4;
                            break;
                        }
                    }
                    if (mov == par && alm[h + an2 + 1] < 0)
                    {
                        for (an3 = 0; an3 < tds[28]; an3++)
                        {
                            if (rmv == rnext[(tds[27] + an3) * 2])
                            {
                                an4 = (tds[27] + an3) * 2;
                                rnext[an4] = (an1 + an2) * 4 + 4;
                                break;
                            }
                        }
                    }
                }
                alm[an1 + an2] = alm[h + an2];
                alm[h + an2] = -86052851;
                alm[an1 + an2 + 1] = alm[h + an2 + 1];
                alm[h + an2 + 1] = -86052851;
            }
        }

        private void MoveOffsetData()
        {
            an5 = 0;
            for (n = 0; n < g; n += 2)
            {
                m = ((alm[k + n] >> 8) & 0xFF) * 2;
                if (m != 0)
                {
                    j = alm[k + n + 1] / 4;
                    if (j >= 808 && j < md)
                    {
                        for (an1 = stf; an1 < j; an1++)
                        {
                            if (alm[an1] == -86052851)
                            {
                                for (an2 = an1 + 1; an2 < an1 + m; an2++)
                                {
                                    if (alm[an2] != -86052851)
                                    {
                                        an1 = an2;
                                        break;
                                    }
                                }
                                if (an2 == an1 + m)
                                {
                                    alm[k + n + 1] = an1 * 4;
                                    an5++;
                                    if (alm[k + n] == 459008)
                                    {
                                        if (alm[j] == 2)
                                        {
                                            rmv = j * 4 + 4;
                                            for (an2 = 0; an2 < tds[28]; an2++)
                                            {
                                                an4 = rnext[(tds[27] + an2) * 2];
                                                if (an4 >= 8096 && an4 < tds[25])
                                                {
                                                    if (rmv == an4)
                                                    {
                                                        m = (tds[27] + an2) * 2;
                                                        rnext[m] = an1 * 4 + 4;
                                                        break;
                                                    }
                                                    an3 = 0;
                                                    while (an3 < 100)
                                                    {
                                                        m = an4 / 4;
                                                        an4 = alm[m];
                                                        if (an4 >= 8096 && an4 < tds[25])
                                                        {
                                                            if (rmv == an4)
                                                            {
                                                                alm[m] = an1 * 4 + 4;
                                                                break;
                                                            }
                                                            an3++;
                                                            continue;
                                                        }
                                                        break;
                                                    }
                                                    if (rmv == an4)
                                                    {
                                                        break;
                                                    }
                                                }
                                            }
                                            if (an2 >= tds[28])
                                            {
                                                for (mov = 0; mov < par; mov++)
                                                {
                                                    if (asc[mov] == rmv)
                                                    {
                                                        asc[mov] = an1 * 4 + 4;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        alm[an1] = alm[j];
                                        alm[j] = -86052851;
                                        alm[an1 + 1] = alm[j + 1];
                                        alm[j + 1] = -86052851;
                                        break;
                                    }
                                    if (alm[k + n] == 218104320)
                                    {
                                        if (alm[j] == 2)
                                        {
                                            rmv = j * 4 + 4;
                                            for (mov = 0; mov < par; mov++)
                                            {
                                                if (asc[mov] == rmv)
                                                {
                                                    asc[mov] = an1 * 4 + 4;
                                                    break;
                                                }
                                            }
                                        }
                                        alm[an1] = alm[j];
                                        alm[j] = -86052851;
                                        alm[an1 + 1] = alm[j + 1];
                                        alm[j + 1] = -86052851;
                                        if (alm[j + 2] == 2)
                                        {
                                            rmv = j * 4 + 12;
                                            for (an2 = 0; an2 < tds[28]; an2++)
                                            {
                                                an4 = rnext[(tds[27] + an2) * 2];
                                                if (an4 >= 8096 && an4 < tds[25])
                                                {
                                                    if (rmv == an4)
                                                    {
                                                        m = (tds[27] + an2) * 2;
                                                        rnext[m] = an1 * 4 + 12;
                                                        break;
                                                    }
                                                    an3 = 0;
                                                    while (an3 < 100)
                                                    {
                                                        m = an4 / 4;
                                                        an4 = alm[m];
                                                        if (an4 >= 8096 && an4 < tds[25])
                                                        {
                                                            if (rmv == an4)
                                                            {
                                                                alm[m] = an1 * 4 + 12;
                                                                break;
                                                            }
                                                            an3++;
                                                            continue;
                                                        }
                                                        break;
                                                    }
                                                    if (rmv == an4)
                                                    {
                                                        break;
                                                    }
                                                }
                                            }
                                            if (an2 >= tds[28])
                                            {
                                                for (mov = 0; mov < par; mov++)
                                                {
                                                    if (asc[mov] == rmv)
                                                    {
                                                        asc[mov] = an1 * 4 + 12;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        alm[an1 + 2] = alm[j + 2];
                                        alm[j + 2] = -86052851;
                                        alm[an1 + 3] = alm[j + 3];
                                        alm[j + 3] = -86052851;
                                        break;
                                    }
                                    for (an2 = 0; an2 < m; an2 += 2)
                                    {
                                        if (alm[j + an2] == 2)
                                        {
                                            rmv = (j + an2) * 4 + 4;
                                            for (mov = 0; mov < par; mov++)
                                            {
                                                if (asc[mov] == rmv)
                                                {
                                                    asc[mov] = (an1 + an2) * 4 + 4;
                                                    break;
                                                }
                                            }
                                            if (mov == par && alm[j + an2 + 1] < 0)
                                            {
                                                for (an3 = 0; an3 < tds[28]; an3++)
                                                {
                                                    if (rmv == rnext[(tds[27] + an3) * 2])
                                                    {
                                                        an4 = (tds[27] + an3) * 2;
                                                        rnext[an4] = (an1 + an2) * 4 + 4;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        alm[an1 + an2] = alm[j + an2];
                                        alm[j + an2] = -86052851;
                                        alm[an1 + an2 + 1] = alm[j + an2 + 1];
                                        alm[j + an2 + 1] = -86052851;
                                    }
                                    break;
                                }
                            }
                        }
                        if (an1 > j && alm[j - 1] == -86052851)
                        {
                            for (an1 = j - 2; an1 > stf; an1--)
                            {
                                if (alm[an1] != -86052851)
                                {
                                    an1++;
                                    break;
                                }
                            }
                            alm[k + n + 1] = an1 * 4;
                            an5++;
                            if (alm[k + n] == 459008)
                            {
                                if (alm[j] == 2)
                                {
                                    rmv = j * 4 + 4;
                                    for (an2 = 0; an2 < tds[28]; an2++)
                                    {
                                        an4 = rnext[(tds[27] + an2) * 2];
                                        if (an4 >= 8096 && an4 < tds[25])
                                        {
                                            if (rmv == an4)
                                            {
                                                m = (tds[27] + an2) * 2;
                                                rnext[m] = an1 * 4 + 4;
                                                break;
                                            }
                                            an3 = 0;
                                            while (an3 < 100)
                                            {
                                                m = an4 / 4;
                                                an4 = alm[m];
                                                if (an4 >= 8096 && an4 < tds[25])
                                                {
                                                    if (rmv == an4)
                                                    {
                                                        alm[m] = an1 * 4 + 4;
                                                        break;
                                                    }
                                                    an3++;
                                                    continue;
                                                }
                                                break;
                                            }
                                            if (rmv == an4)
                                            {
                                                break;
                                            }
                                        }
                                    }
                                    if (an2 >= tds[28])
                                    {
                                        for (mov = 0; mov < par; mov++)
                                        {
                                            if (asc[mov] == rmv)
                                            {
                                                asc[mov] = an1 * 4 + 4;
                                                break;
                                            }
                                        }
                                    }
                                }
                                alm[an1] = alm[j];
                                alm[j] = -86052851;
                                alm[an1 + 1] = alm[j + 1];
                                alm[j + 1] = -86052851;
                            }
                            else if (alm[k + n] == 218104320)
                            {
                                if (alm[j] == 2)
                                {
                                    rmv = j * 4 + 4;
                                    for (mov = 0; mov < par; mov++)
                                    {
                                        if (asc[mov] == rmv)
                                        {
                                            asc[mov] = an1 * 4 + 4;
                                            break;
                                        }
                                    }
                                }
                                alm[an1] = alm[j];
                                alm[j] = -86052851;
                                alm[an1 + 1] = alm[j + 1];
                                alm[j + 1] = -86052851;
                                if (alm[j + 2] == 2)
                                {
                                    rmv = j * 4 + 12;
                                    for (an2 = 0; an2 < tds[28]; an2++)
                                    {
                                        an4 = rnext[(tds[27] + an2) * 2];
                                        if (an4 >= 8096 && an4 < tds[25])
                                        {
                                            if (rmv == an4)
                                            {
                                                m = (tds[27] + an2) * 2;
                                                rnext[m] = an1 * 4 + 12;
                                                break;
                                            }
                                            an3 = 0;
                                            while (an3 < 100)
                                            {
                                                m = an4 / 4;
                                                an4 = alm[m];
                                                if (an4 >= 8096 && an4 < tds[25])
                                                {
                                                    if (rmv == an4)
                                                    {
                                                        alm[m] = an1 * 4 + 12;
                                                        break;
                                                    }
                                                    an3++;
                                                    continue;
                                                }
                                                break;
                                            }
                                            if (rmv == an4)
                                            {
                                                break;
                                            }
                                        }
                                    }
                                    if (an2 >= tds[28])
                                    {
                                        for (mov = 0; mov < par; mov++)
                                        {
                                            if (asc[mov] == rmv)
                                            {
                                                asc[mov] = an1 * 4 + 12;
                                                break;
                                            }
                                        }
                                    }
                                }
                                alm[an1 + 2] = alm[j + 2];
                                alm[j + 2] = -86052851;
                                alm[an1 + 3] = alm[j + 3];
                                alm[j + 3] = -86052851;
                            }
                            else
                            {
                                for (an2 = 0; an2 < m; an2 += 2)
                                {
                                    if (alm[j + an2] == 2)
                                    {
                                        rmv = (j + an2) * 4 + 4;
                                        for (mov = 0; mov < par; mov++)
                                        {
                                            if (asc[mov] == rmv)
                                            {
                                                asc[mov] = (an1 + an2) * 4 + 4;
                                                break;
                                            }
                                        }
                                        if (mov == par && alm[j + an2 + 1] < 0)
                                        {
                                            for (an3 = 0; an3 < tds[28]; an3++)
                                            {
                                                if (rmv == rnext[(tds[27] + an3) * 2])
                                                {
                                                    an4 = (tds[27] + an3) * 2;
                                                    rnext[an4] = (an1 + an2) * 4 + 4;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    alm[an1 + an2] = alm[j + an2];
                                    alm[j + an2] = -86052851;
                                    alm[an1 + an2 + 1] = alm[j + an2 + 1];
                                    alm[j + an2 + 1] = -86052851;
                                }
                            }
                        }
                    }
                }
            }
            n = g + 2;
            for (j = stf; j < k; j++)
            {
                if (alm[j] == -86052851)
                {
                    for (m = j + 1; m < j + n; m++)
                    {
                        if (alm[m] != -86052851)
                        {
                            j = m;
                            break;
                        }
                    }
                    if (m == j + n)
                    {
                        an5++;
                        for (n = 0; n < g; n += 2)
                        {
                            if (((alm[k + n] >> 8) & 0xFF) != 0)
                            {
                                rmv = (k + n) * 4 + 4;
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == rmv)
                                    {
                                        asc[mov] = (j + n) * 4 + 4;
                                        break;
                                    }
                                }
                            }
                            alm[j + n] = alm[k + n];
                            alm[k + n] = -86052851;
                            alm[j + n + 1] = alm[k + n + 1];
                            alm[k + n + 1] = -86052851;
                        }
                        alm[j + n] = 0;
                        alm[k + n] = -86052851;
                        alm[j + n + 1] = 0;
                        alm[k + n + 1] = -86052851;
                        break;
                    }
                }
            }
            if (j <= k || alm[k - 1] != -86052851)
            {
                return;
            }
            for (j = k - 2; j > stf; j--)
            {
                if (alm[j] != -86052851)
                {
                    j++;
                    break;
                }
            }
            an5++;
            for (n = 0; n < g; n += 2)
            {
                if (((alm[k + n] >> 8) & 0xFF) != 0)
                {
                    rmv = (k + n) * 4 + 4;
                    for (mov = 0; mov < par; mov++)
                    {
                        if (asc[mov] == rmv)
                        {
                            asc[mov] = (j + n) * 4 + 4;
                            break;
                        }
                    }
                }
                alm[j + n] = alm[k + n];
                alm[k + n] = -86052851;
                alm[j + n + 1] = alm[k + n + 1];
                alm[k + n + 1] = -86052851;
            }
            alm[j + n] = 0;
            alm[k + n] = -86052851;
            alm[j + n + 1] = 0;
            alm[k + n + 1] = -86052851;
        }

        private void MltPasteData()
        {
            if (alm[m + h] == 0)
            {
                for (an2 = stf; an2 < md; an2++)
                {
                    if (alm[an2] == -86052851)
                    {
                        if (alm[an2 + 1] == -86052851)
                        {
                            break;
                        }
                        an2++;
                    }
                }
                if (an2 >= md)
                {
                    an2 = md;
                    if (alm[md - 2] == -86110838)
                    {
                        alm[md] = alm[md - 2];
                        alm[md + 1] = alm[md - 1];
                        an2 -= 2;
                    }
                    md += 2;
                }
                alm[an2] = 2;
                alm[an2 + 1] = nonam[0];
                asc[par] = an2 * 4 + 4;
                for (j = stf; j < md; j++)
                {
                    if (alm[j] == -86052851)
                    {
                        if (alm[j + 1] == -86052851)
                        {
                            if (alm[j + 2] == -86052851)
                            {
                                if (alm[j + 3] == -86052851)
                                {
                                    break;
                                }
                                j += 3;
                            }
                            else
                            {
                                j += 2;
                            }
                        }
                        else
                        {
                            j++;
                        }
                    }
                }
                if (j >= md)
                {
                    j = md;
                    if (alm[md - 2] == -86110838)
                    {
                        alm[md + 2] = alm[md - 2];
                        alm[md + 3] = alm[md - 1];
                        j -= 2;
                    }
                    md += 4;
                }
                alm[j] = 459008;
                alm[j + 1] = an2 * 4;
                asc[par + 1] = j * 4 + 4;
                alm[j + 2] = 0;
                alm[j + 3] = 0;
                alm[m + h] = j * 4;
                asc[par + 2] = (m + h) * 4;
                tds[26] += 3;
                par += 3;
                return;
            }
            j = alm[m + h] / 4;
            if (j < stf || j >= md)
            {
                return;
            }
            if (alm[j] == 0 || alm[j] == -86052851)
            {
                g = 0;
            }
            else
            {
                an2 = j;
                while (alm[an2] != 0 && an2 < md)
                {
                    an2 += 2;
                }
                g = an2 - j;
            }
            if (j + g + 5 > md)
            {
                if (alm[md - 2] == -86110838)
                {
                    alm[md] = alm[md - 2];
                    alm[md + 1] = alm[md - 1];
                    alm[j + g + 2] = -86052851;
                    alm[j + g + 3] = -86052851;
                    md += 2;
                }
                else if (j + g + 3 > md)
                {
                    alm[j + g + 2] = -86052851;
                    alm[j + g + 3] = -86052851;
                    md += 2;
                }
            }
            for (an2 = stf; an2 < md; an2++)
            {
                if (alm[an2] == -86052851)
                {
                    if (alm[an2 + 1] == -86052851)
                    {
                        break;
                    }
                    an2++;
                }
            }
            if (an2 >= md)
            {
                an2 = md;
                if (alm[md - 2] == -86110838)
                {
                    alm[md] = alm[md - 2];
                    alm[md + 1] = alm[md - 1];
                    an2 -= 2;
                }
                md += 2;
            }
            alm[an2] = 2;
            alm[an2 + 1] = nonam[0];
            asc[par] = an2 * 4 + 4;
            if (alm[j + g + 2] == -86052851 && alm[j + g + 3] == -86052851)
            {
                alm[j + g + 2] = 0;
                alm[j + g + 3] = 0;
                if (g > 0)
                {
                    for (n = g - 2; n >= 0; n -= 2)
                    {
                        if (((alm[j + n] >> 8) & 0xFF) != 0)
                        {
                            rmv = (j + n) * 4 + 4;
                            for (mov = 0; mov < par; mov++)
                            {
                                if (asc[mov] == rmv)
                                {
                                    asc[mov] += 8;
                                    break;
                                }
                            }
                        }
                        alm[j + n + 2] = alm[j + n];
                        alm[j + n + 3] = alm[j + n + 1];
                    }
                }
                alm[j] = 459008;
                alm[j + 1] = an2 * 4;
                asc[par + 1] = j * 4 + 4;
            }
            else
            {
                an4 = g + 4;
                for (k = stf; k < md; k++)
                {
                    if (alm[k] == -86052851)
                    {
                        for (n = k + 1; n < k + an4; n++)
                        {
                            if (alm[n] != -86052851)
                            {
                                k = n;
                                break;
                            }
                        }
                        if (n == k + an4)
                        {
                            break;
                        }
                    }
                }
                if (k >= md)
                {
                    k = md;
                    if (alm[md - 2] == -86110838)
                    {
                        k -= 2;
                        alm[md + an4 - 2] = -86110838;
                        alm[md + an4 - 1] = alm[md - 1];
                    }
                    md += an4;
                }
                if (g > 0)
                {
                    for (n = 0; n < g; n += 2)
                    {
                        if (((alm[j + n] >> 8) & 0xFF) != 0)
                        {
                            rmv = (j + n) * 4 + 4;
                            for (mov = 0; mov < par; mov++)
                            {
                                if (asc[mov] == rmv)
                                {
                                    asc[mov] = (k + n) * 4 + 12;
                                    break;
                                }
                            }
                        }
                        alm[k + n + 2] = alm[j + n];
                        alm[j + n] = -86052851;
                        alm[k + n + 3] = alm[j + n + 1];
                        alm[j + n + 1] = -86052851;
                    }
                    alm[k + n + 2] = 0;
                    alm[k + n + 3] = 0;
                    alm[j + n] = -86052851;
                    alm[j + n + 1] = -86052851;
                }
                else
                {
                    alm[j] = -86052851;
                    alm[j + 1] = -86052851;
                    alm[k + 2] = 0;
                    alm[k + 3] = 0;
                }
                alm[k] = 459008;
                alm[k + 1] = an2 * 4;
                asc[par + 1] = k * 4 + 4;
                alm[m + h] = k * 4;
                if (EvOffsetInterlock.Checked)
                {
                    an2 = j * 4;
                    an4 = an2 + g * 4;
                    g = k * 4;
                    for (j = stf; j < md; j++)
                    {
                        if (alm[j] >= an2 && alm[j] <= an4)
                        {
                            n = j * 4;
                            for (mov = 0; mov < par; mov++)
                            {
                                if (asc[mov] == n)
                                {
                                    if (alm[j] == an2)
                                    {
                                        alm[j] = g;
                                        break;
                                    }
                                    k = alm[j] - an2 + 8;
                                    if (k % 8 == 0)
                                    {
                                        alm[j] = g + k;
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            tds[26] += 2;
            par += 2;
        }

        private void MltPsTop()
        {
            an1 = g * 2;
            an2 = mov * 2;
            m = mov * 8 + 4;
            an4 = j + an1;
            for (i = j; i < an4; i += 2)
            {
                if (((alm[i] >> 8) & 0xFF) != 0)
                {
                    rmv = i * 4 + 4;
                    for (mov = 0; mov < par; mov++)
                    {
                        if (asc[mov] == rmv)
                        {
                            asc[mov] = i * 4 + m;
                            break;
                        }
                    }
                }
            }
            m = -(g * 8) + 4;
            an4 += an2;
            while (i < an4)
            {
                if (((alm[i] >> 8) & 0xFF) != 0)
                {
                    rmv = i * 4 + 4;
                    for (mov = 0; mov < par; mov++)
                    {
                        if (asc[mov] == rmv)
                        {
                            asc[mov] = i * 4 + m;
                            break;
                        }
                    }
                }
                i += 2;
            }
            if (an2 <= 512)
            {
                n = j + an1;
                for (i = 0; i < an2; i++)
                {
                    nonam[i] = alm[n + i];
                }
                for (i = j + an1 - 1; i >= j; i--)
                {
                    alm[i + an2] = alm[i];
                }
                for (i = 0; i < an2; i++)
                {
                    alm[j + i] = nonam[i];
                }
                return;
            }
            n = j + an1;
            for (i = 0; i < 512; i++)
            {
                nonam[i] = alm[n + i];
            }
            for (i = j + an1 - 1; i >= j; i--)
            {
                alm[i + an2] = alm[i];
            }
            for (i = j; i < 512; i++)
            {
                alm[j + i] = nonam[i];
            }
            m = j + 512;
            an2 -= 512;
            n = m + an1;
            for (i = 0; i < an2; i++)
            {
                nonam[i] = alm[n + i];
            }
            for (i = m + an1 - 1; i >= m; i--)
            {
                alm[i + an2] = alm[i];
            }
            for (i = 0; i < an2; i++)
            {
                alm[m + i] = nonam[i];
            }
        }

        private void ScanRnInRn()
        {
            k = ((alm[nonam[an3]] >> 8) & 0xFF);
            if (k == 1)
            {
                if (alm[nonam[an3] + 1] >= 8096 && alm[nonam[an3] + 1] < tds[25])
                {
                    m = alm[nonam[an3] + 1] / 4;
                    if (alm[m] == 2)
                    {
                        if (alm[nonam[an3]] != 459008)
                        {
                            return;
                        }
                        if (alm[m + 1] >= 8096 && alm[m + 1] < tds[25])
                        {
                            rmv = alm[nonam[an3] + 1] + 4;
                            for (an2 = 0; an2 < tds[28]; an2++)
                            {
                                an4 = rnext[(tds[27] + an2) * 2];
                                if (an4 >= 8096 && an4 < tds[25])
                                {
                                    if (rmv == an4)
                                    {
                                        break;
                                    }
                                    if (an4 >= 8096 && an4 < tds[25])
                                    {
                                        nonam[1] = 0;
                                        while (nonam[1] < 100)
                                        {
                                            an5 = an4 / 4;
                                            an4 = alm[an5];
                                            if (an4 < 8096 || an4 >= tds[25] || rmv == an4)
                                            {
                                                break;
                                            }
                                            nonam[1]++;
                                        }
                                        if (rmv == an4)
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                            if (an2 < tds[28])
                            {
                                k = 0;
                            }
                        }
                        else
                        {
                            k = 0;
                            if (alm[m + 1] != -1)
                            {
                                string text = rd1;
                                rd1 = text + " " + alm[m + 1].ToString("X") + "(" + (nonam[an3] * 4).ToString("X") + "),";
                            }
                        }
                    }
                    else
                    {
                        k = 0;
                    }
                }
                else
                {
                    k = 0;
                }
            }
            else
            {
                if (alm[nonam[an3]] != 218104320 || alm[nonam[an3] + 1] < 8096 || alm[nonam[an3] + 1] >= tds[25])
                {
                    return;
                }
                m = alm[nonam[an3] + 1] / 4 + 2;
                if (alm[m] != 2)
                {
                    return;
                }
                if (alm[m + 1] >= 8096 && alm[m + 1] < tds[25])
                {
                    rmv = alm[nonam[an3] + 1] + 12;
                    for (an2 = 0; an2 < tds[28]; an2++)
                    {
                        an4 = rnext[(tds[27] + an2) * 2];
                        if (an4 >= 8096 && an4 < tds[25])
                        {
                            if (rmv == an4)
                            {
                                break;
                            }
                            if (an4 >= 8096 && an4 < tds[25])
                            {
                                nonam[1] = 0;
                                while (nonam[1] < 100)
                                {
                                    an5 = an4 / 4;
                                    an4 = alm[an5];
                                    if (an4 < 8096 || an4 >= tds[25] || rmv == an4)
                                    {
                                        break;
                                    }
                                    nonam[1]++;
                                }
                                if (rmv == an4)
                                {
                                    break;
                                }
                            }
                        }
                    }
                    if (an2 == tds[28])
                    {
                        k = 1;
                    }
                }
                else
                {
                    k = 0;
                    if (alm[m + 1] != -1)
                    {
                        string text = rd1;
                        rd1 = text + " " + alm[m + 1].ToString("X") + "(" + (nonam[an3] * 4).ToString("X") + "),";
                    }
                }
            }
        }

        private void ScanRn()
        {
            while (j < md && alm[j] != 0)
            {
                k = ((alm[j] >> 8) & 0xFF);
                if (k == 1)
                {
                    if (alm[j + 1] >= 8096 && alm[j + 1] < tds[25])
                    {
                        m = alm[j + 1] / 4;
                        if (alm[m] == 2)
                        {
                            if (alm[j] == 459008)
                            {
                                if (alm[m + 1] >= 8096 && alm[m + 1] < tds[25])
                                {
                                    rmv = alm[j + 1] + 4;
                                    for (an2 = 0; an2 < tds[28]; an2++)
                                    {
                                        an4 = rnext[(tds[27] + an2) * 2];
                                        if (an4 >= 8096 && an4 < tds[25])
                                        {
                                            if (rmv == an4)
                                            {
                                                break;
                                            }
                                            if (an4 >= 8096 && an4 < tds[25])
                                            {
                                                nonam[1] = 0;
                                                while (nonam[1] < 100)
                                                {
                                                    an5 = an4 / 4;
                                                    an4 = alm[an5];
                                                    if (an4 < 8096 || an4 >= tds[25] || rmv == an4)
                                                    {
                                                        break;
                                                    }
                                                    nonam[1]++;
                                                }
                                                if (rmv == an4)
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    if (an2 < tds[28])
                                    {
                                        k = 0;
                                    }
                                }
                                else
                                {
                                    k = 0;
                                    if (alm[m + 1] != -1)
                                    {
                                        string text = rd1;
                                        rd1 = text + " " + alm[m + 1].ToString("X") + "(" + (j * 4).ToString("X") + "),";
                                    }
                                }
                            }
                        }
                        else
                        {
                            k = 0;
                        }
                    }
                    else
                    {
                        k = 0;
                    }
                }
                else if (alm[j] == 218104320 && alm[j + 1] >= 8096 && alm[j + 1] < tds[25])
                {
                    m = alm[j + 1] / 4 + 2;
                    if (alm[m] == 2)
                    {
                        if (alm[m + 1] >= 8096 && alm[m + 1] < tds[25])
                        {
                            rmv = alm[j + 1] + 12;
                            for (an2 = 0; an2 < tds[28]; an2++)
                            {
                                an4 = rnext[(tds[27] + an2) * 2];
                                if (an4 >= 8096 && an4 < tds[25])
                                {
                                    if (rmv == an4)
                                    {
                                        break;
                                    }
                                    if (an4 >= 8096 && an4 < tds[25])
                                    {
                                        nonam[1] = 0;
                                        while (nonam[1] < 100)
                                        {
                                            an5 = an4 / 4;
                                            an4 = alm[an5];
                                            if (an4 < 8096 || an4 >= tds[25] || rmv == an4)
                                            {
                                                break;
                                            }
                                            nonam[1]++;
                                        }
                                    }
                                }
                            }
                            if (an2 == tds[28])
                            {
                                k = 1;
                            }
                        }
                        else
                        {
                            k = 0;
                            if (alm[m + 1] != -1)
                            {
                                string text = rd1;
                                rd1 = text + " " + alm[m + 1].ToString("X") + "(" + (j * 4).ToString("X") + "),";
                            }
                        }
                    }
                }
                if (k == 1)
                {
                    n = alm[m + 1];
                    if (alm[i] != n)
                    {
                        if (n % 4 == 0 && n >= 8096 && n < tds[25])
                        {
                            for (an2 = 10; an2 < 512; an2++)
                            {
                                if (n == nonam[an2])
                                {
                                    an2 = 1048575;
                                }
                                else if (nonam[an2] == 0)
                                {
                                    nonam[an2] = n;
                                    break;
                                }
                            }
                            if (an2 < 512)
                            {
                                an3 = 0;
                                nonam[an3] = n / 4;
                                while (nonam[an3] < md && alm[nonam[an3]] != 0)
                                {
                                    ScanRnInRn();
                                    if (k == 1)
                                    {
                                        n = alm[m + 1];
                                        if (alm[i] != n)
                                        {
                                            if (n % 4 == 0 && n >= 8096 && n < tds[25])
                                            {
                                                for (an2 = 10; an2 < 512; an2++)
                                                {
                                                    if (n == nonam[an2])
                                                    {
                                                        an2 = 1048575;
                                                    }
                                                    else if (nonam[an2] == 0)
                                                    {
                                                        nonam[an2] = n;
                                                        break;
                                                    }
                                                }
                                                if (an2 < 512)
                                                {
                                                    an3 = 2;
                                                    nonam[an3] = n / 4;
                                                    while (nonam[an3] < md && alm[nonam[an3]] != 0)
                                                    {
                                                        ScanRnInRn();
                                                        if (k == 1)
                                                        {
                                                            n = alm[m + 1];
                                                            if (alm[i] != n)
                                                            {
                                                                if (n % 4 == 0 && n >= 8096 && n < tds[25])
                                                                {
                                                                    for (an2 = 10; an2 < 512; an2++)
                                                                    {
                                                                        if (n == nonam[an2])
                                                                        {
                                                                            an2 = 1048575;
                                                                        }
                                                                        else if (nonam[an2] == 0)
                                                                        {
                                                                            nonam[an2] = n;
                                                                            break;
                                                                        }
                                                                    }
                                                                    if (an2 < 512)
                                                                    {
                                                                        an3 = 3;
                                                                        nonam[an3] = n / 4;
                                                                        while (nonam[an3] < md && alm[nonam[an3]] != 0)
                                                                        {
                                                                            ScanRnInRn();
                                                                            if (k == 1)
                                                                            {
                                                                                n = alm[m + 1];
                                                                                if (alm[i] != n)
                                                                                {
                                                                                    if (n % 4 == 0 && n >= 8096 && n < tds[25])
                                                                                    {
                                                                                        for (an2 = 10; an2 < 512; an2++)
                                                                                        {
                                                                                            if (n == nonam[an2])
                                                                                            {
                                                                                                an2 = 1048575;
                                                                                            }
                                                                                            else if (nonam[an2] == 0)
                                                                                            {
                                                                                                nonam[an2] = n;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        if (an2 < 512)
                                                                                        {
                                                                                            an3 = 4;
                                                                                            nonam[an3] = n / 4;
                                                                                            while (nonam[an3] < md && alm[nonam[an3]] != 0)
                                                                                            {
                                                                                                ScanRnInRn();
                                                                                                if (k == 1)
                                                                                                {
                                                                                                    n = alm[m + 1];
                                                                                                    if (alm[i] != n)
                                                                                                    {
                                                                                                        if (n % 4 == 0 && n >= 8096 && n < tds[25])
                                                                                                        {
                                                                                                            for (an2 = 10; an2 < 512; an2++)
                                                                                                            {
                                                                                                                if (n == nonam[an2])
                                                                                                                {
                                                                                                                    an2 = 1048575;
                                                                                                                }
                                                                                                                else if (nonam[an2] == 0)
                                                                                                                {
                                                                                                                    nonam[an2] = n;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            if (an2 < 512)
                                                                                                            {
                                                                                                                an3 = 5;
                                                                                                                nonam[an3] = n / 4;
                                                                                                                while (nonam[an3] < md && alm[nonam[an3]] != 0)
                                                                                                                {
                                                                                                                    ScanRnInRn();
                                                                                                                    if (k == 1)
                                                                                                                    {
                                                                                                                        n = alm[m + 1];
                                                                                                                        if (alm[i] != n)
                                                                                                                        {
                                                                                                                            if (n % 4 == 0 && n >= 8096 && n < tds[25])
                                                                                                                            {
                                                                                                                                for (an2 = 10; an2 < 512; an2++)
                                                                                                                                {
                                                                                                                                    if (n == nonam[an2])
                                                                                                                                    {
                                                                                                                                        an2 = 1048575;
                                                                                                                                    }
                                                                                                                                    else if (nonam[an2] == 0)
                                                                                                                                    {
                                                                                                                                        nonam[an2] = n;
                                                                                                                                        break;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                if (an2 < 512)
                                                                                                                                {
                                                                                                                                    an3 = 6;
                                                                                                                                    nonam[an3] = n / 4;
                                                                                                                                    while (nonam[an3] < md && alm[nonam[an3]] != 0)
                                                                                                                                    {
                                                                                                                                        ScanRnInRn();
                                                                                                                                        if (k == 1)
                                                                                                                                        {
                                                                                                                                            n = alm[m + 1];
                                                                                                                                            if (alm[i] != n)
                                                                                                                                            {
                                                                                                                                                if (n % 4 == 0 && n >= 8096 && n < tds[25])
                                                                                                                                                {
                                                                                                                                                    for (an2 = 10; an2 < 512; an2++)
                                                                                                                                                    {
                                                                                                                                                        if (n == nonam[an2])
                                                                                                                                                        {
                                                                                                                                                            an2 = 1048575;
                                                                                                                                                        }
                                                                                                                                                        else if (nonam[an2] == 0)
                                                                                                                                                        {
                                                                                                                                                            nonam[an2] = n;
                                                                                                                                                            break;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    if (an2 < 512)
                                                                                                                                                    {
                                                                                                                                                        an3 = 7;
                                                                                                                                                        nonam[an3] = n / 4;
                                                                                                                                                        while (nonam[an3] < md && alm[nonam[an3]] != 0)
                                                                                                                                                        {
                                                                                                                                                            ScanRnInRn();
                                                                                                                                                            if (k == 1)
                                                                                                                                                            {
                                                                                                                                                                n = alm[m + 1];
                                                                                                                                                                if (alm[i] != n)
                                                                                                                                                                {
                                                                                                                                                                    if (n % 4 == 0 && n >= 8096 && n < tds[25])
                                                                                                                                                                    {
                                                                                                                                                                        for (an2 = 10; an2 < 512; an2++)
                                                                                                                                                                        {
                                                                                                                                                                            if (n == nonam[an2])
                                                                                                                                                                            {
                                                                                                                                                                                an2 = 1048575;
                                                                                                                                                                            }
                                                                                                                                                                            else if (nonam[an2] == 0)
                                                                                                                                                                            {
                                                                                                                                                                                nonam[an2] = n;
                                                                                                                                                                                break;
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        if (an2 < 512)
                                                                                                                                                                        {
                                                                                                                                                                            an3 = 8;
                                                                                                                                                                            nonam[an3] = n / 4;
                                                                                                                                                                            while (nonam[an3] < md && alm[nonam[an3]] != 0)
                                                                                                                                                                            {
                                                                                                                                                                                ScanRnInRn();
                                                                                                                                                                                if (k == 1)
                                                                                                                                                                                {
                                                                                                                                                                                    n = alm[m + 1];
                                                                                                                                                                                    if (alm[i] != n)
                                                                                                                                                                                    {
                                                                                                                                                                                        if (n % 4 == 0 && n >= 8096 && n < tds[25])
                                                                                                                                                                                        {
                                                                                                                                                                                            for (an2 = 10; an2 < 512; an2++)
                                                                                                                                                                                            {
                                                                                                                                                                                                if (n == nonam[an2])
                                                                                                                                                                                                {
                                                                                                                                                                                                    an2 = 1048575;
                                                                                                                                                                                                }
                                                                                                                                                                                                else if (nonam[an2] == 0)
                                                                                                                                                                                                {
                                                                                                                                                                                                    nonam[an2] = n;
                                                                                                                                                                                                    break;
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                            if (an2 < 512)
                                                                                                                                                                                            {
                                                                                                                                                                                                an3 = 9;
                                                                                                                                                                                                nonam[an3] = n / 4;
                                                                                                                                                                                                while (nonam[an3] < md && alm[nonam[an3]] != 0)
                                                                                                                                                                                                {
                                                                                                                                                                                                    ScanRnInRn();
                                                                                                                                                                                                    if (k == 1)
                                                                                                                                                                                                    {
                                                                                                                                                                                                        n = alm[m + 1];
                                                                                                                                                                                                        if (alm[i] != n)
                                                                                                                                                                                                        {
                                                                                                                                                                                                            if (n % 4 == 0 && n >= 8096 && n < tds[25])
                                                                                                                                                                                                            {
                                                                                                                                                                                                                for (an2 = 10; an2 < 512; an2++)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    if (n == nonam[an2])
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        an2 = 1048575;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    else if (nonam[an2] == 0)
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        nonam[an2] = n;
                                                                                                                                                                                                                        break;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                            else
                                                                                                                                                                                                            {
                                                                                                                                                                                                                string text = rd1;
                                                                                                                                                                                                                rd1 = text + " " + n.ToString("X") + "(" + (nonam[an3] * 4).ToString("X") + "),";
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                    nonam[an3] += 2;
                                                                                                                                                                                                }
                                                                                                                                                                                                an3 = 8;
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        else
                                                                                                                                                                                        {
                                                                                                                                                                                            string text = rd1;
                                                                                                                                                                                            rd1 = text + " " + n.ToString("X") + "(" + (nonam[3] * 4).ToString("X") + "),";
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                                nonam[an3] += 2;
                                                                                                                                                                            }
                                                                                                                                                                            an3 = 7;
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    else
                                                                                                                                                                    {
                                                                                                                                                                        string text = rd1;
                                                                                                                                                                        rd1 = text + " " + n.ToString("X") + "(" + (nonam[3] * 4).ToString("X") + "),";
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            nonam[an3] += 2;
                                                                                                                                                        }
                                                                                                                                                        an3 = 6;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                {
                                                                                                                                                    string text = rd1;
                                                                                                                                                    rd1 = text + " " + n.ToString("X") + "(" + (nonam[3] * 4).ToString("X") + "),";
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        nonam[an3] += 2;
                                                                                                                                    }
                                                                                                                                    an3 = 5;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                string text = rd1;
                                                                                                                                rd1 = text + " " + n.ToString("X") + "(" + (nonam[3] * 4).ToString("X") + "),";
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    nonam[an3] += 2;
                                                                                                                }
                                                                                                                an3 = 4;
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            string text = rd1;
                                                                                                            rd1 = text + " " + n.ToString("X") + "(" + (nonam[3] * 4).ToString("X") + "),";
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                nonam[an3] += 2;
                                                                                            }
                                                                                            an3 = 3;
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        string text = rd1;
                                                                                        rd1 = text + " " + n.ToString("X") + "(" + (nonam[3] * 4).ToString("X") + "),";
                                                                                    }
                                                                                }
                                                                            }
                                                                            nonam[an3] += 2;
                                                                        }
                                                                        an3 = 2;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    string text = rd1;
                                                                    rd1 = text + " " + n.ToString("X") + "(" + (nonam[3] * 4).ToString("X") + "),";
                                                                }
                                                            }
                                                        }
                                                        nonam[an3] += 2;
                                                    }
                                                    an3 = 0;
                                                }
                                            }
                                            else
                                            {
                                                string text = rd1;
                                                rd1 = text + " " + n.ToString("X") + "(" + (nonam[3] * 4).ToString("X") + "),";
                                            }
                                        }
                                    }
                                    nonam[an3] += 2;
                                }
                            }
                        }
                        else
                        {
                            string text = rd1;
                            rd1 = text + " " + n.ToString("X") + "(" + (j * 4).ToString("X") + "),";
                        }
                    }
                }
                j += 2;
            }
        }

        private void CmpMoveOffsetData()
        {
            h = j;
            while (h < md && alm[h] != 0)
            {
                k = ((alm[h] >> 8) & 0xFF) * 2;
                if (k != 0 && alm[h + 1] >= 8096 && alm[h + 1] < tds[25])
                {
                    m = alm[h + 1] / 4;
                    if (nonam[0] < m)
                    {
                        for (n = nonam[0]; n < m; n++)
                        {
                            if (alm[n] == -86052851)
                            {
                                for (an1 = n + 1; an1 < n + k; an1++)
                                {
                                    if (alm[an1] != -86052851)
                                    {
                                        n = an1;
                                        break;
                                    }
                                }
                                if (an1 == n + k)
                                {
                                    if (alm[h] == 459008)
                                    {
                                        if (alm[m] == 2)
                                        {
                                            rmv = alm[h + 1] + 4;
                                            for (an2 = 0; an2 < tds[28]; an2++)
                                            {
                                                an4 = rnext[(tds[27] + an2) * 2];
                                                if (an4 >= 8096 && an4 < tds[25])
                                                {
                                                    if (rmv == an4)
                                                    {
                                                        rnext[(tds[27] + an2) * 2] = n * 4 + 4;
                                                        break;
                                                    }
                                                    if (an4 >= 8096 && an4 < tds[25])
                                                    {
                                                        nonam[1] = 0;
                                                        while (nonam[1] < 100)
                                                        {
                                                            an5 = an4 / 4;
                                                            an4 = alm[an5];
                                                            if (an4 >= 8096 && an4 < tds[25])
                                                            {
                                                                if (rmv == an4)
                                                                {
                                                                    alm[an5] = n * 4 + 4;
                                                                    break;
                                                                }
                                                                nonam[1]++;
                                                                continue;
                                                            }
                                                            break;
                                                        }
                                                        if (rmv == an4)
                                                        {
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                            if (an2 >= tds[28])
                                            {
                                                for (mov = 0; mov < par; mov++)
                                                {
                                                    if (asc[mov] == rmv)
                                                    {
                                                        asc[mov] = n * 4 + 4;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        alm[n] = alm[m];
                                        alm[m] = -86052851;
                                        alm[n + 1] = alm[m + 1];
                                        alm[m + 1] = -86052851;
                                    }
                                    else if (alm[h] == 218104320)
                                    {
                                        if (alm[m] == 2)
                                        {
                                            rmv = m * 4 + 4;
                                            for (mov = 0; mov < par; mov++)
                                            {
                                                if (asc[mov] == rmv)
                                                {
                                                    asc[mov] = n * 4 + 4;
                                                    break;
                                                }
                                            }
                                        }
                                        if (alm[m + 2] == 2)
                                        {
                                            rmv = alm[h + 1] + 12;
                                            for (an2 = 0; an2 < tds[28]; an2++)
                                            {
                                                an4 = rnext[(tds[27] + an2) * 2];
                                                if (an4 >= 8096 && an4 < tds[25])
                                                {
                                                    if (rmv == an4)
                                                    {
                                                        rnext[(tds[27] + an2) * 2] = n * 4 + 12;
                                                        break;
                                                    }
                                                    if (an4 >= 8096 && an4 < tds[25])
                                                    {
                                                        nonam[1] = 0;
                                                        while (nonam[1] < 100)
                                                        {
                                                            an5 = an4 / 4;
                                                            an4 = alm[an5];
                                                            if (an4 >= 8096 && an4 < tds[25])
                                                            {
                                                                if (rmv == an4)
                                                                {
                                                                    alm[an5] = n * 4 + 12;
                                                                    break;
                                                                }
                                                                nonam[1]++;
                                                                continue;
                                                            }
                                                            break;
                                                        }
                                                        if (rmv == an4)
                                                        {
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                            if (an2 >= tds[28])
                                            {
                                                for (mov = 0; mov < par; mov++)
                                                {
                                                    if (asc[mov] == rmv)
                                                    {
                                                        asc[mov] = n * 4 + 12;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        alm[n] = alm[m];
                                        alm[m] = -86052851;
                                        alm[n + 1] = alm[m + 1];
                                        alm[m + 1] = -86052851;
                                        alm[n + 2] = alm[m + 2];
                                        alm[m + 2] = -86052851;
                                        alm[n + 3] = alm[m + 3];
                                        alm[m + 3] = -86052851;
                                    }
                                    else
                                    {
                                        for (an2 = 0; an2 < k; an2 += 2)
                                        {
                                            if (alm[m + an2] == 2)
                                            {
                                                rmv = (m + an2) * 4 + 4;
                                                for (mov = 0; mov < par; mov++)
                                                {
                                                    if (asc[mov] == rmv)
                                                    {
                                                        asc[mov] = (n + an2) * 4 + 4;
                                                        break;
                                                    }
                                                }
                                            }
                                            alm[n + an2] = alm[m + an2];
                                            alm[m + an2] = -86052851;
                                            alm[n + an2 + 1] = alm[m + an2 + 1];
                                            alm[m + an2 + 1] = -86052851;
                                        }
                                    }
                                    alm[h + 1] = n * 4;
                                    break;
                                }
                            }
                        }
                    }
                }
                h += 2;
            }
            n = h - j + 2;
            for (an1 = nonam[0]; an1 < j; an1++)
            {
                if (alm[an1] == -86052851)
                {
                    for (m = an1 + 1; m < an1 + n; m++)
                    {
                        if (alm[m] != -86052851)
                        {
                            an1 = m;
                            break;
                        }
                    }
                    if (m == an1 + n)
                    {
                        an2 = n - 2;
                        an4 = alm[i];
                        k = an1 * 4;
                        alm[i] = k;
                        for (n = 0; n < an2; n += 2)
                        {
                            if (((alm[j + n] >> 8) & 0xFF) != 0)
                            {
                                rmv = (j + n) * 4 + 4;
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == rmv)
                                    {
                                        asc[mov] = (an1 + n) * 4 + 4;
                                        break;
                                    }
                                }
                            }
                            alm[an1 + n] = alm[j + n];
                            alm[j + n] = -86052851;
                            alm[an1 + n + 1] = alm[j + n + 1];
                            alm[j + n + 1] = -86052851;
                        }
                        alm[an1 + n] = 0;
                        alm[j + n] = -86052851;
                        alm[an1 + n + 1] = 0;
                        alm[j + n + 1] = -86052851;
                        h = an4 + an2 * 4;
                        for (an5 = stf; an5 < md; an5++)
                        {
                            if (alm[an5] >= an4 && alm[an5] <= h)
                            {
                                n = an5 * 4;
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == n)
                                    {
                                        if (alm[an5] == an4)
                                        {
                                            alm[an5] = k;
                                            break;
                                        }
                                        m = alm[an5] - an4;
                                        if (m % 8 == 0)
                                        {
                                            alm[an5] = k + m;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                        break;
                    }
                }
            }
            if (an1 <= j || alm[j - 1] != -86052851)
            {
                return;
            }
            for (an1 = j - 2; an1 > stf; an1--)
            {
                if (alm[an1] != -86052851)
                {
                    an1++;
                    break;
                }
            }
            an2 = n - 2;
            an4 = alm[i];
            k = an1 * 4;
            alm[i] = k;
            for (n = 0; n < an2; n += 2)
            {
                if (((alm[j + n] >> 8) & 0xFF) != 0)
                {
                    rmv = (j + n) * 4 + 4;
                    for (mov = 0; mov < par; mov++)
                    {
                        if (asc[mov] == rmv)
                        {
                            asc[mov] = (an1 + n) * 4 + 4;
                            break;
                        }
                    }
                }
                alm[an1 + n] = alm[j + n];
                alm[j + n] = -86052851;
                alm[an1 + n + 1] = alm[j + n + 1];
                alm[j + n + 1] = -86052851;
            }
            alm[an1 + n] = 0;
            alm[j + n] = -86052851;
            alm[an1 + n + 1] = 0;
            alm[j + n + 1] = -86052851;
            h = an4 + an2 * 4;
            for (an1 = stf; an1 < md; an1++)
            {
                if (alm[an1] >= an4 && alm[an1] <= h)
                {
                    n = an1 * 4;
                    for (mov = 0; mov < par; mov++)
                    {
                        if (asc[mov] == n)
                        {
                            if (alm[an1] == an4)
                            {
                                alm[an1] = k;
                                break;
                            }
                            m = alm[an1] - an4;
                            if (m % 8 == 0)
                            {
                                alm[an1] = k + m;
                            }
                            break;
                        }
                    }
                }
            }
        }

        private void DelILData()
        {
            n = i * 4;
            g = 0;
            while (true)
            {
                if (g < par)
                {
                    if (asc[g] == n)
                    {
                        break;
                    }
                    g++;
                    continue;
                }
                return;
            }
            alm[i] = 0;
            asc[g] = 16777216;
            tds[26]--;
            if (alm[i - 1] != 2)
            {
                return;
            }
            alm[i - 1] = 0;
            n -= 4;
            m = 2025;
            while (true)
            {
                if (m < md)
                {
                    if (alm[m] == n)
                    {
                        break;
                    }
                    m++;
                    continue;
                }
                return;
            }
            if (alm[m - 1] == 459008 || alm[m - 1] == 590080)
            {
                alm[m - 1] = 131072;
                alm[m] = 0;
                alm[i] = -86052851;
                alm[i - 1] = -86052851;
                rmv = m * 4;
                Delasc();
            }
        }

        private void PartSearchS()
        {
            mov = 0;
            k = 9;
            while (true)
            {
                bool flag = true;
                an2 = ((alm[j + mov] >> 8) & 0xFF);
                if (an2 > 0)
                {
                    if (alm[j + mov + 1] < 8096 || alm[j + mov + 1] >= tds[25])
                    {
                        k = 0;
                        break;
                    }
                    an3 = alm[j + mov + 1] / 4;
                    if (rd2[k] != 'E')
                    {
                        an2 *= 11;
                        for (h = 11; h <= an2; h += 11)
                        {
                            if (rd2[k + h] == 'E')
                            {
                                h = 65536;
                            }
                        }
                        if (h < 65536)
                        {
                            k = 0;
                            break;
                        }
                        an1 = 0;
                        while (an1 < an2 && rd2[k + an1] != 'E')
                        {
                            if (alm[an3] >= 0 && alm[an3] < 16)
                            {
                                if (rd2[k + an1] != 'X')
                                {
                                    rd3 = alm[an3].ToString("X");
                                    if (rd3[0] != rd2[k + an1])
                                    {
                                        an1 = 65536;
                                    }
                                }
                                if (an1 < an2)
                                {
                                    an1 += 2;
                                    if (rd2.Substring(k + an1, 8) != "XXXXXXXX")
                                    {
                                        rd3 = alm[an3 + 1].ToString("X8");
                                        if (rd2[k + an1 - 1] == '>' || rd2[k + an1 - 1] == '<')
                                        {
                                            for (h = 1; h < 7; h++)
                                            {
                                                if (rd2[k + an1 + h] == 'X')
                                                {
                                                    rd3 = rd3.Substring(0, h) + "0" + rd3.Substring(h + 1);
                                                }
                                            }
                                            if (rd2[k + an1 + 7] == 'X')
                                            {
                                                rd3 = rd3.Substring(0, 7) + "0";
                                            }
                                            if (rd2[k + an1] == 'X')
                                            {
                                                rd3 = rd3.Substring(1);
                                            }
                                            rmv = Convert.ToInt32(rd3, 16);
                                            rd3 = rd2.Substring(k + an1, 8);
                                            for (h = 1; h < 7; h++)
                                            {
                                                if (rd3[h] == 'X')
                                                {
                                                    rd3 = rd3.Substring(0, h) + "0" + rd3.Substring(h + 1);
                                                }
                                            }
                                            if (rd3[7] == 'X')
                                            {
                                                rd3 = rd3.Substring(0, 7) + "0";
                                            }
                                            if (rd3[0] == 'X')
                                            {
                                                rd3 = rd3.Substring(1);
                                            }
                                            h = Convert.ToInt32(rd3, 16);
                                            if (rd2[k + an1 - 1] == '>')
                                            {
                                                if (rmv < h)
                                                {
                                                    an1 = 65536;
                                                }
                                            }
                                            else if (rmv > h)
                                            {
                                                an1 = 65536;
                                            }
                                        }
                                        else
                                        {
                                            for (h = 0; h < 8; h++)
                                            {
                                                if (rd2[k + an1 + h] != 'X' && rd2[k + an1 + h] != rd3[h])
                                                {
                                                    h = 65536;
                                                }
                                            }
                                            if (h != 8)
                                            {
                                                an1 = 65536;
                                            }
                                        }
                                    }
                                    an3 += 2;
                                }
                            }
                            else
                            {
                                an1 = 65536;
                            }
                            an1 += 9;
                        }
                        if (an1 >= 65536)
                        {
                            k = 0;
                            break;
                        }
                        k += an1;
                    }
                }
                else if (rd2[k] != 'E')
                {
                    k = 0;
                    break;
                }
                if (k >= n)
                {
                    break;
                }
                mov += 2;
                rd3 = alm[j + mov].ToString("X8");
                if (alm[j + mov] > 255 || alm[j + mov] < -2)
                {
                    k += 2;
                    for (h = 0; h < 8; h++)
                    {
                        if (rd2[k + h] != 'X' && rd2[k + h] != rd3[h])
                        {
                            h = 65536;
                        }
                    }
                    if (h != 8)
                    {
                        k = 0;
                        break;
                    }
                }
                k += 9;
            }
            if (k != n)
            {
                return;
            }
            if (an4 < 500)
            {
                nonam[an4] = j;
                an4++;
            }
            for (an1 = j; an1 >= stf; an1 -= 2)
            {
                if (alm[an1 - 2] > 65535)
                {
                    k = ((alm[an1 - 2] >> 8) & 0xFF) * 2;
                    if (k == 0)
                    {
                        if (alm[an1 - 1] != 0)
                        {
                            break;
                        }
                    }
                    else
                    {
                        if (alm[an1 - 1] < 8096 || alm[an1 - 1] >= tds[25])
                        {
                            break;
                        }
                        h = alm[an1 - 1] / 4;
                        an2 = 0;
                        while (an2 < k && alm[h + an2] >= 0 && alm[h + an2] < 7)
                        {
                            an2 += 2;
                        }
                        if (an2 < k)
                        {
                            break;
                        }
                    }
                }
                else
                {
                    if (alm[an1 - 2] >= 0 || alm[an1 - 2] == -86052851)
                    {
                        break;
                    }
                    k = 0;
                    an2 = alm[an1 - 2];
                    while (EveEtid[k] != 0 && an2 != EveEtid[k])
                    {
                        k++;
                        if (k >= 500)
                        {
                            k = 0;
                            break;
                        }
                    }
                    if (an2 == EveEtid[k])
                    {
                        k = -1;
                    }
                    else if (ViewEvPlus.Checked)
                    {
                        k = 0;
                        h = (an2 | 0xFFFF) - 65535;
                        while (EveEtid[k] != 0)
                        {
                            if (EveEtid[k] >= h && EveEtid[k] < an2)
                            {
                                k = -1;
                                break;
                            }
                            k++;
                            if (k >= 500)
                            {
                                break;
                            }
                        }
                    }
                    if (k != -1)
                    {
                        break;
                    }
                    k = ((alm[an1 - 2] >> 8) & 0xFF) * 2;
                    if (k == 0)
                    {
                        if (alm[an1 - 1] != 0)
                        {
                            break;
                        }
                    }
                    else
                    {
                        if (alm[an1 - 1] < 8096 || alm[an1 - 1] >= tds[25])
                        {
                            break;
                        }
                        h = alm[an1 - 1] / 4;
                        an2 = 0;
                        while (an2 < k && alm[h + an2] >= 0 && alm[h + an2] < 7)
                        {
                            an2 += 2;
                        }
                        if (an2 < k)
                        {
                            break;
                        }
                    }
                }
            }
            EvRnOffCbList.Items.Add("0x" + (an1 * 4).ToString("X"));
            j += an5 + 1;
        }

        private void PReplacePar()
        {
            rd3 = alm[j + i].ToString("X8");
            fnt = 0;
            if (rd2[n] != 'X' && rd2[n] != rd3[0])
            {
                rd3 = rd2.Substring(n, 1) + rd3.Substring(1);
                fnt = 1;
            }
            for (k = 1; k < 7; k++)
            {
                if (rd2[n + k] != 'X' && rd2[n + k] != rd3[k])
                {
                    rd3 = rd3.Substring(0, k) + rd2.Substring(n + k, 1) + rd3.Substring(k + 1);
                    fnt = 1;
                }
            }
            if (rd2[n + 7] != 'X' && rd2[n + 7] != rd3[7])
            {
                rd3 = rd3.Substring(0, 7) + rd2.Substring(n + 7, 1);
                fnt = 1;
            }
            an4 = alm[j + i + 1] / 4;
            n += 9;
            if (fnt == 1)
            {
                an5 = Convert.ToInt32(rd3, 16);
                k = ((alm[j + i] >> 8) & 0xFF) * 2;
                g = ((an5 >> 8) & 0xFF) * 2;
            }
            else
            {
                an5 = alm[j + i];
                k = ((an5 >> 8) & 0xFF) * 2;
                g = k;
            }
            if (k == g)
            {
                m = 0;
                while (m < k && rd2[n] != 'E')
                {
                    rd3 = alm[an4 + m].ToString("X") + "-" + alm[an4 + m + 1].ToString("X8") + ",";
                    if (rd3[1] != '-')
                    {
                        break;
                    }
                    if (rd2[n] != 'X' && rd2[n] != rd3[0])
                    {
                        alm[an4 + m] = Convert.ToInt32(rd2.Substring(n, 1), 16);
                        if (rd3[0] == '2')
                        {
                            rmv = (an4 + m) * 4 + 4;
                            Delasc();
                        }
                        else if (rd2[n] == '2')
                        {
                            asc[par] = (an4 + m) * 4 + 4;
                            par++;
                            tds[26]++;
                        }
                    }
                    if (rd2[n + 1] == '+')
                    {
                        if (alm[an4 + m] < 2)
                        {
                            mov = Convert.ToInt32(rd2.Substring(n + 2, 8), 16);
                            alm[an4 + m + 1] += mov;
                        }
                    }
                    else if (rd2[n + 1] == '*')
                    {
                        if (alm[an4 + m] < 2)
                        {
                            mov = 4;
                            while (mov < 9 && rd2[n + mov] != '.')
                            {
                                mov++;
                            }
                            if (mov < 9)
                            {
                                rdfr = float.Parse(rd2.Substring(n + 3, 7));
                            }
                            else
                            {
                                if (Uri.IsHexDigit(rd2[n + 2]))
                                {
                                    mov = Convert.ToInt32(rd2.Substring(n + 2, 8), 16);
                                }
                                else
                                {
                                    mov = Convert.ToInt32(rd2.Substring(n + 3, 7), 16);
                                }
                                rdfr = (float)mov / 60000f;
                            }
                            rmv = alm[an4 + m + 1];
                            if (alm[an4 + m] == 0 && (rd2[n + 2] == 'H' || rd2[n + 2] == '>' || rd2[n + 2] == '<'))
                            {
                                if (rdfr > 0f)
                                {
                                    mov = ((rmv >> 16) & 0xFFFF);
                                    if (rd2[n + 2] != '>')
                                    {
                                        if ((float)mov * rdfr >= 65535f)
                                        {
                                            mov = 65535;
                                        }
                                        else
                                        {
                                            mov = (int)((double)((float)mov * rdfr) + 0.5);
                                        }
                                    }
                                    rmv &= 65535;
                                    if (rd2[n + 2] != '<')
                                    {
                                        if ((float)rmv * rdfr >= 65535f)
                                        {
                                            rmv = 65535;
                                        }
                                        else
                                        {
                                            rmv = (int)((double)((float)rmv * rdfr) + 0.5);
                                        }
                                    }
                                    mov = (mov << 16) + rmv;
                                }
                                else
                                {
                                    mov = 0;
                                }
                                rdfr = 1f;
                            }
                            else if (rdfr > 1f || rdfr < -1f)
                            {
                                if ((float)rmv * rdfr > 2.14748365E+09f)
                                {
                                    mov = int.MaxValue;
                                    rdfr = 1f;
                                }
                                else if ((float)rmv * rdfr < -2.14748365E+09f)
                                {
                                    mov = -2147483647;
                                    rdfr = 1f;
                                }
                            }
                            if (rdfr != 1f)
                            {
                                if (rd2[n + 2] == '+')
                                {
                                    mov = (int)Math.Ceiling((float)rmv * rdfr);
                                }
                                else if (rd2[n + 2] == '-')
                                {
                                    mov = (int)((float)rmv * rdfr);
                                }
                                else if (rd2[n + 2] == 'M')
                                {
                                    mov = (int)((double)((float)rmv * rdfr) + 0.1);
                                }
                                else if (rd2[n + 2] == 'P')
                                {
                                    mov = (int)((double)((float)rmv * rdfr) + 0.9);
                                }
                                else
                                {
                                    mov = (int)((double)((float)rmv * rdfr) + 0.5);
                                }
                            }
                            alm[an4 + m + 1] = mov;
                        }
                    }
                    else
                    {
                        fnt = 0;
                        for (mov = 2; mov < 10; mov++)
                        {
                            if (rd2[n + mov] != 'X' && rd2[n + mov] != rd3[mov])
                            {
                                rd3 = rd3.Substring(0, mov) + rd2.Substring(n + mov, 1) + rd3.Substring(mov + 1);
                                fnt = 1;
                            }
                        }
                        if (fnt == 1)
                        {
                            alm[an4 + m + 1] = Convert.ToInt32(rd3.Substring(2, 8), 16);
                        }
                    }
                    n += 11;
                    m += 2;
                }
            }
            else
            {
                if (k > 0)
                {
                    if (g > 0)
                    {
                        rd4 = "";
                        if (k < g)
                        {
                            mov = k;
                        }
                        else
                        {
                            mov = g;
                        }
                        for (m = 0; m < mov; m += 2)
                        {
                            if (alm[an4 + m] > 15 || alm[an4 + m] < 0)
                            {
                                rd4 = rd4 + "0-" + alm[an4 + m + 1].ToString("X8") + ",";
                            }
                            else
                            {
                                string text = rd4;
                                rd4 = text + alm[an4 + m].ToString("X") + "-" + alm[an4 + m + 1].ToString("X8") + ",";
                            }
                        }
                    }
                    else
                    {
                        alm[j + i + 1] = 0;
                        rmv = (j + i) * 4 + 4;
                        Delasc();
                    }
                    for (m = 0; m < k; m += 2)
                    {
                        if (alm[an4 + m] == 2)
                        {
                            rmv = (an4 + m) * 4 + 4;
                            Delasc();
                        }
                        alm[an4 + m] = -86052851;
                        alm[an4 + m + 1] = -86052851;
                    }
                }
                if (g > 0)
                {
                    if (k == 0)
                    {
                        asc[par] = (j + i) * 4 + 4;
                        par++;
                        tds[26]++;
                    }
                    rd3 = "";
                    rmv = g / 2 * 11;
                    k = k / 2 * 11;
                    for (m = 0; m < rmv; m += 11)
                    {
                        if (rd2[n] == 'E')
                        {
                            while (m < rmv)
                            {
                                if (k > m)
                                {
                                    rd3 += rd4.Substring(m, 11);
                                }
                                else
                                {
                                    rd3 += "0-00000000,";
                                }
                                m += 11;
                            }
                            break;
                        }
                        if (rd2[n] == 'X')
                        {
                            if (k > m)
                            {
                                rd3 += rd4.Substring(m, 2);
                            }
                            else
                            {
                                rd3 += "0-";
                            }
                        }
                        else
                        {
                            rd3 += rd2.Substring(n, 2);
                        }
                        if (k > m)
                        {
                            if (rd2[n + 1] == '+')
                            {
                                mov = Convert.ToInt32(rd4.Substring(m + 2, 8), 16);
                                if (rd4[m] == '0' || rd4[m] == '1')
                                {
                                    an4 = Convert.ToInt32(rd2.Substring(n + 2, 8), 16);
                                    mov += an4;
                                }
                                rd3 += mov.ToString("X8");
                            }
                            else if (rd2[n + 1] == '*')
                            {
                                if (k > m)
                                {
                                    if (rd4[m] == '0' || rd4[m] == '1')
                                    {
                                        mov = 4;
                                        while (mov < 9 && rd2[n + mov] != '.')
                                        {
                                            mov++;
                                        }
                                        if (mov < 9)
                                        {
                                            rdfr = float.Parse(rd2.Substring(n + 3, 7));
                                        }
                                        else
                                        {
                                            if (Uri.IsHexDigit(rd2[n + 2]))
                                            {
                                                mov = Convert.ToInt32(rd2.Substring(n + 2, 8), 16);
                                            }
                                            else
                                            {
                                                mov = Convert.ToInt32(rd2.Substring(n + 3, 7), 16);
                                            }
                                            rdfr = (float)mov / 60000f;
                                        }
                                        rmv = Convert.ToInt32(rd4.Substring(m + 2, 8), 16);
                                        if (rd4[m] == '0' && (rd2[n + 2] == 'H' || rd2[n + 2] == '>' || rd2[n + 2] == '<'))
                                        {
                                            if (rdfr > 0f)
                                            {
                                                mov = ((rmv >> 16) & 0xFFFF);
                                                if (rd2[n + 2] != '>')
                                                {
                                                    if ((float)mov * rdfr >= 65535f)
                                                    {
                                                        mov = 65535;
                                                    }
                                                    else
                                                    {
                                                        mov = (int)((double)((float)mov * rdfr) + 0.5);
                                                    }
                                                }
                                                rmv &= 65535;
                                                if (rd2[n + 2] != '<')
                                                {
                                                    if ((float)rmv * rdfr >= 65535f)
                                                    {
                                                        rmv = 65535;
                                                    }
                                                    else
                                                    {
                                                        rmv = (int)((double)((float)rmv * rdfr) + 0.5);
                                                    }
                                                }
                                                mov = (mov << 16) + rmv;
                                            }
                                            else
                                            {
                                                mov = 0;
                                            }
                                            rdfr = 1f;
                                        }
                                        else if (rdfr > 1f || rdfr < -1f)
                                        {
                                            if ((float)rmv * rdfr > 2.14748365E+09f)
                                            {
                                                mov = int.MaxValue;
                                                rdfr = 1f;
                                            }
                                            else if ((float)rmv * rdfr < -2.14748365E+09f)
                                            {
                                                mov = -2147483647;
                                                rdfr = 1f;
                                            }
                                        }
                                        if (rdfr != 1f)
                                        {
                                            if (rd2[n + 2] == '+')
                                            {
                                                mov = (int)Math.Ceiling((float)rmv * rdfr);
                                            }
                                            else if (rd2[n + 2] == '-')
                                            {
                                                mov = (int)((float)rmv * rdfr);
                                            }
                                            else if (rd2[n + 2] == 'M')
                                            {
                                                mov = (int)((double)((float)rmv * rdfr) + 0.1);
                                            }
                                            else if (rd2[n + 2] == 'P')
                                            {
                                                mov = (int)((double)((float)rmv * rdfr) + 0.9);
                                            }
                                            else
                                            {
                                                mov = (int)((double)((float)rmv * rdfr) + 0.5);
                                            }
                                        }
                                        rd3 += mov.ToString("X8");
                                        rmv = g / 2 * 11;
                                    }
                                    else
                                    {
                                        rd3 += rd4.Substring(m + 2, 8);
                                    }
                                }
                                else
                                {
                                    rd3 += "00000000";
                                }
                            }
                            else
                            {
                                for (mov = 2; mov < 10; mov++)
                                {
                                    if (rd2[n + mov] == 'X')
                                    {
                                        rd3 += rd4.Substring(m + mov, 1);
                                    }
                                    else
                                    {
                                        rd3 += rd2.Substring(n + mov, 1);
                                    }
                                }
                            }
                        }
                        else if (rd2[n + 1] == '*')
                        {
                            rd3 += "00000000";
                        }
                        else
                        {
                            for (mov = 2; mov < 10; mov++)
                            {
                                if (rd2[n + mov] == 'X')
                                {
                                    rd3 += "0";
                                }
                                else
                                {
                                    rd3 += rd2.Substring(n + mov, 1);
                                }
                            }
                        }
                        rd3 += ",";
                        n += 11;
                    }
                    k = 0;
                    for (m = stf; m < md; m++)
                    {
                        if (alm[m] == -86052851)
                        {
                            for (mov = m + 1; mov < m + g; mov++)
                            {
                                if (alm[mov] != -86052851)
                                {
                                    m = mov;
                                    break;
                                }
                            }
                            if (m + g == mov)
                            {
                                for (mov = 0; mov < g; mov += 2)
                                {
                                    if (rd3[k] == '2')
                                    {
                                        asc[par] = (m + mov) * 4 + 4;
                                        par++;
                                        tds[26]++;
                                    }
                                    alm[m + mov] = Convert.ToInt32(rd3.Substring(k, 1), 16);
                                    alm[m + mov + 1] = Convert.ToInt32(rd3.Substring(k + 2, 8), 16);
                                    k += 11;
                                }
                                break;
                            }
                        }
                    }
                    if (m >= md)
                    {
                        if (alm[md - 2] == -86110838)
                        {
                            alm[md + g - 2] = alm[md - 2];
                            alm[md + g - 1] = alm[md - 1];
                            m = md - 2;
                        }
                        else if (m > md)
                        {
                            mov = 1;
                            while (true)
                            {
                                bool flag = true;
                                if (alm[md - mov] != -86052851)
                                {
                                    break;
                                }
                                mov++;
                            }
                            mov--;
                            md -= mov;
                            m = md;
                        }
                        for (mov = 0; mov < g; mov += 2)
                        {
                            if (rd3[k] == '2')
                            {
                                asc[par] = (m + mov) * 4 + 4;
                                par++;
                                tds[26]++;
                            }
                            alm[m + mov] = Convert.ToInt32(rd3.Substring(k, 1), 16);
                            alm[m + mov + 1] = Convert.ToInt32(rd3.Substring(k + 2, 8), 16);
                            k += 11;
                        }
                        md += g;
                    }
                    alm[j + i + 1] = m * 4;
                }
            }
            alm[j + i] = an5;
            if (rd2[n] != 'E')
            {
                do
                {
                    bool flag = true;
                    n += 11;
                }
                while (rd2[n] != 'E');
            }
            n += 2;
        }

        private void PReplace()
        {
            if (rd2 == "")
            {
                j = nonam[h];
                g = j + an3;
                if (alm[g] == 0)
                {
                    g = an1;
                    RemoveAllEv();
                    an5 = j * 4;
                    k = an5 + g * 8;
                    for (i = stf; i < md; i++)
                    {
                        if (alm[i] >= an5 && alm[i] <= k)
                        {
                            DelILData();
                        }
                    }
                    rd3 = "0x" + (j * 4).ToString("X");
                    if (rd3 != EvRnOffCbList.Items[h].ToString())
                    {
                        alm[j] = 0;
                        alm[j + 1] = 0;
                    }
                    return;
                }
                i = g + 2;
                while (i < md && alm[i] != 0)
                {
                    i += 2;
                }
                g = (i - j) / 2;
                for (i = an1 - 1; i >= 0; i--)
                {
                    RemoveSeleEv();
                }
                k = j * 4 + g * 8;
                an5 = k - an1 * 8;
                for (i = stf; i < md; i++)
                {
                    if (alm[i] >= an5 && alm[i] <= k)
                    {
                        DelILData();
                    }
                }
                return;
            }
            j = nonam[h];
            if (an1 == an3)
            {
                n = 2;
                for (i = 0; i < an3; i += 2)
                {
                    PReplacePar();
                }
                return;
            }
            if (an1 < an3)
            {
                an4 = an1 / 2;
                for (i = an3 / 2 - 1; i >= an4; i--)
                {
                    RemoveSeleEv();
                }
            }
            else
            {
                i = j + an3;
                while (i < md && alm[i] != 0)
                {
                    i += 2;
                }
                an4 = i - j;
                k = i + (an1 - an3) + 2;
                m = i + 2;
                while (m < k && alm[m] == -86052851)
                {
                    m++;
                }
                if (m < k)
                {
                    rd3 = EvRnOffCbList.Items[h].ToString();
                    k = Convert.ToInt32(rd3.Substring(2), 16);
                    m = k / 4;
                    g = i - m;
                    j -= m;
                    an5 = g + (an1 - an3) + 2;
                    for (k = stf; k < md; k++)
                    {
                        if (alm[k] == -86052851)
                        {
                            for (mov = k + 1; mov < k + an5; mov++)
                            {
                                if (alm[mov] != -86052851)
                                {
                                    k = mov;
                                    break;
                                }
                            }
                            if (k + an5 == mov)
                            {
                                break;
                            }
                        }
                    }
                    if (k >= md)
                    {
                        k = md;
                        if (alm[md - 2] == -86110838)
                        {
                            k -= 2;
                            alm[md + g] = -86110838;
                            alm[md + g + 1] = alm[md - 1];
                        }
                        md += an5;
                    }
                    for (i = 0; i < g; i += 2)
                    {
                        if (((alm[m + i] >> 8) & 0xFF) > 0)
                        {
                            rmv = (m + i) * 4 + 4;
                            for (mov = 0; mov < par; mov++)
                            {
                                if (asc[mov] == rmv)
                                {
                                    asc[mov] = (k + i) * 4 + 4;
                                    break;
                                }
                            }
                        }
                        alm[k + i] = alm[m + i];
                        alm[m + i] = -86052851;
                        alm[k + i + 1] = alm[m + i + 1];
                        alm[m + i + 1] = -86052851;
                    }
                    alm[k + i] = 0;
                    alm[m + i] = -86052851;
                    alm[k + i + 1] = 0;
                    alm[m + i + 1] = -86052851;
                    j += k;
                    nonam[h] = k;
                    EvRnOffCbList.Items[h] = "0x" + (k * 4).ToString("X");
                    i = h + 1;
                    while (i < nonam[509])
                    {
                        rd4 = EvRnOffCbList.Items[i].ToString();
                        if (rd3 == rd4)
                        {
                            EvRnOffCbList.Items[i] = "0x" + (k * 4).ToString("X");
                            i++;
                            continue;
                        }
                        break;
                    }
                    an5 = m * 4;
                    rmv = an5 + g * 4;
                    g = k * 4;
                    for (i = stf; i < md; i++)
                    {
                        if (alm[i] >= an5 && alm[i] <= rmv)
                        {
                            n = i * 4;
                            for (mov = 0; mov < par; mov++)
                            {
                                if (asc[mov] == n)
                                {
                                    if (alm[i] == an5)
                                    {
                                        alm[i] = g;
                                        break;
                                    }
                                    n = alm[i] - an5;
                                    if (n % 8 == 0)
                                    {
                                        alm[i] = g + n;
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    m = k;
                }
                k = an1 - an3;
                an5 = k * 4;
                if (alm[j + an3] != 0)
                {
                    for (i = an4 - 2; i >= an3; i -= 2)
                    {
                        if (((alm[j + i] >> 8) & 0xFF) > 0)
                        {
                            rmv = (j + i) * 4 + 4;
                            for (mov = 0; mov < par; mov++)
                            {
                                if (asc[mov] == rmv)
                                {
                                    asc[mov] += an5;
                                    break;
                                }
                            }
                        }
                        alm[j + i + k] = alm[j + i];
                        alm[j + i + k + 1] = alm[j + i + 1];
                    }
                }
                an5 = j + an1;
                i = an5 + (an4 - an3);
                alm[i] = 0;
                alm[i + 1] = 0;
                for (i = j + an3; i < an5; i += 2)
                {
                    alm[i] = 131072;
                    alm[i + 1] = 0;
                }
            }
            n = 2;
            for (i = 0; i < an1; i += 2)
            {
                PReplacePar();
            }
        }

        private void DelNoEventData()
        {
            m = 0;
            h = j;
            while (h < md && alm[h] != 0)
            {
                if ((alm[h] == 459008 || alm[h] == 590080) && alm[h + 1] >= 8096 && alm[h + 1] < tds[25] && alm[h + 1] % 4 == 0)
                {
                    n = alm[h + 1] / 4;
                    if (alm[n] == 2 && (alm[n + 1] % 4 != 0 || alm[n + 1] < 8096 || alm[n + 1] >= tds[25]) && alm[n + 1] != -1)
                    {
                        rmv = alm[h + 1] + 4;
                        Delasc();
                        alm[n] = -86052851;
                        alm[n + 1] = -86052851;
                        rmv = h * 4 + 4;
                        Delasc();
                        alm[h] = 131072;
                        alm[h + 1] = 0;
                    }
                }
                if (alm[h] == 131072)
                {
                    m++;
                }
                h += 2;
            }
            n = (h - j) / 2;
            if (n == m)
            {
                for (m = j; m < h; m += 2)
                {
                    alm[m] = -86052851;
                    alm[m + 1] = -86052851;
                }
                alm[m] = -86052851;
                alm[m + 1] = -86052851;
                alm[i] = 0;
                rmv = i * 4;
                Delasc();
                m = j * 4;
                n = h * 4;
                for (h = stf; h < md; h++)
                {
                    if (alm[h] >= m && alm[h] <= n)
                    {
                        an1 = h * 4;
                        for (mov = 0; mov < par; mov++)
                        {
                            if (asc[mov] == an1)
                            {
                                alm[h] = 0;
                                rmv = h * 4;
                                Delasc();
                                if (alm[h - 1] != 2)
                                {
                                    break;
                                }
                                an1 -= 4;
                                for (k = stf; k < md; k++)
                                {
                                    if ((alm[k] == 459008 || alm[k] == 590080) && alm[k + 1] == an1)
                                    {
                                        if (k < md)
                                        {
                                            alm[h - 1] = -86052851;
                                            alm[h] = -86052851;
                                            alm[k] = 131072;
                                            alm[k + 1] = 0;
                                        }
                                        rmv = k * 4 + 4;
                                        Delasc();
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                    }
                }
                return;
            }
            for (m = j; m < h; m += 2)
            {
                if (alm[m] != 65792 && alm[m] != 131072 && alm[m] != 131328)
                {
                    m = 1048575;
                    break;
                }
            }
            if (m != 1048575)
            {
                for (m = j; m < h; m += 2)
                {
                    if (alm[m] != 131072 && alm[m + 1] >= 8096 && alm[m + 1] < tds[25] && alm[m + 1] % 4 == 0)
                    {
                        rmv = m * 4 + 4;
                        Delasc();
                        n = alm[m + 1] / 4;
                        alm[n] = -86052851;
                        alm[n + 1] = -86052851;
                    }
                    alm[m] = -86052851;
                    alm[m + 1] = -86052851;
                }
                alm[m] = -86052851;
                alm[m + 1] = -86052851;
                alm[i] = 0;
                rmv = i * 4;
                Delasc();
                m = j * 4;
                n = h * 4;
                for (h = stf; h < md; h++)
                {
                    if (alm[h] >= m && alm[h] <= n)
                    {
                        an1 = h * 4;
                        for (mov = 0; mov < par; mov++)
                        {
                            if (asc[mov] == an1)
                            {
                                alm[h] = 0;
                                rmv = h * 4;
                                Delasc();
                                if (alm[h - 1] != 2)
                                {
                                    break;
                                }
                                an1 -= 4;
                                for (k = stf; k < md; k++)
                                {
                                    if ((alm[k] == 459008 || alm[k] == 590080) && alm[k + 1] == an1)
                                    {
                                        if (k < md)
                                        {
                                            alm[h - 1] = -86052851;
                                            alm[h] = -86052851;
                                            alm[k] = 131072;
                                            alm[k + 1] = 0;
                                        }
                                        rmv = k * 4 + 4;
                                        Delasc();
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                    }
                }
                return;
            }
            if (alm[j] == 131328)
            {
                if (alm[j + 2] == 65792)
                {
                    m = alm[j + 1] / 4 + 1;
                    n = alm[j + 3] / 4 + 1;
                    if (m >= stf && m < md && n >= stf && n < md && alm[m - 1] == 1 && alm[n - 1] == 1)
                    {
                        if (alm[m] < 0)
                        {
                            alm[m - 1] = -86052851;
                            alm[m] = -86052851;
                            alm[j] = 131072;
                            alm[j + 1] = 0;
                            rmv = j * 4 + 4;
                            Delasc();
                        }
                        else
                        {
                            if (alm[n] > 0)
                            {
                                alm[m] += alm[n];
                            }
                            alm[n - 1] = -86052851;
                            alm[n] = -86052851;
                            alm[j + 2] = 131072;
                            alm[j + 3] = 0;
                            rmv = j * 4 + 12;
                            Delasc();
                        }
                    }
                }
                else if (alm[j + 2] == 131328)
                {
                    m = alm[j + 1] / 4 + 1;
                    n = alm[j + 3] / 4 + 1;
                    if (m >= stf && m < md && n >= stf && n < md && alm[m - 1] == 1 && alm[n - 1] == 1)
                    {
                        if (alm[m] < 0)
                        {
                            alm[m - 1] = -86052851;
                            alm[m] = -86052851;
                            alm[j] = 131072;
                            alm[j + 1] = 0;
                            rmv = j * 4 + 4;
                            Delasc();
                        }
                        else
                        {
                            if (alm[m] < alm[n])
                            {
                                alm[m] = alm[n];
                            }
                            alm[n - 1] = -86052851;
                            alm[n] = -86052851;
                            alm[j + 2] = 131072;
                            alm[j + 3] = 0;
                            rmv = j * 4 + 12;
                            Delasc();
                        }
                    }
                }
            }
            else if (alm[j] == 65792 && alm[j + 2] == 65792)
            {
                m = alm[j + 1] / 4 + 1;
                n = alm[j + 3] / 4 + 1;
                if (m >= stf && m < md && n >= stf && n < md && alm[m - 1] == 1 && alm[n - 1] == 1)
                {
                    if (alm[m] < 0)
                    {
                        alm[m - 1] = -86052851;
                        alm[m] = -86052851;
                        alm[j] = 131072;
                        alm[j + 1] = 0;
                        rmv = j * 4 + 4;
                        Delasc();
                    }
                    else
                    {
                        if (alm[n] > 0)
                        {
                            alm[m] += alm[n];
                        }
                        alm[n - 1] = -86052851;
                        alm[n] = -86052851;
                        alm[j + 2] = 131072;
                        alm[j + 3] = 0;
                        rmv = j * 4 + 12;
                        Delasc();
                    }
                }
            }
            for (k = j + 2; k < h; k += 2)
            {
                if (alm[k] == 131328)
                {
                    if (alm[k + 2] == 131328)
                    {
                        m = alm[k + 1] / 4 + 1;
                        n = alm[k + 3] / 4 + 1;
                        if (m >= stf && m < md && n >= stf && n < md && alm[m - 1] == 1 && alm[n - 1] == 1)
                        {
                            if (alm[m] < 0)
                            {
                                alm[m - 1] = -86052851;
                                alm[m] = -86052851;
                                alm[k] = 131072;
                                alm[k + 1] = 0;
                                rmv = k * 4 + 4;
                                Delasc();
                            }
                            else
                            {
                                if (alm[m] < alm[n])
                                {
                                    alm[m] = alm[n];
                                }
                                alm[n - 1] = -86052851;
                                alm[n] = -86052851;
                                alm[k + 2] = 131072;
                                alm[k + 3] = 0;
                                rmv = k * 4 + 12;
                                Delasc();
                            }
                            k += 2;
                        }
                    }
                }
                else if (alm[k] == 65792 && alm[k + 2] == 65792)
                {
                    m = alm[k + 1] / 4 + 1;
                    n = alm[k + 3] / 4 + 1;
                    if (m >= stf && m < md && n >= stf && n < md && alm[m - 1] == 1 && alm[n - 1] == 1)
                    {
                        if (alm[m] < 0)
                        {
                            alm[m - 1] = -86052851;
                            alm[m] = -86052851;
                            alm[k] = 131072;
                            alm[k + 1] = 0;
                            rmv = k * 4 + 4;
                            Delasc();
                        }
                        else
                        {
                            if (alm[n] > 0)
                            {
                                alm[m] += alm[n];
                            }
                            alm[n - 1] = -86052851;
                            alm[n] = -86052851;
                            alm[k + 2] = 131072;
                            alm[k + 3] = 0;
                            rmv = k * 4 + 12;
                            Delasc();
                        }
                        k += 2;
                    }
                }
            }
            if (alm[h - 2] == 65792 || alm[h - 2] == 131328)
            {
                m = alm[h - 1] / 4;
                if (m >= stf && m < md)
                {
                    alm[m] = -86052851;
                    alm[m + 1] = -86052851;
                    alm[h - 2] = 131072;
                    alm[h - 1] = 0;
                    rmv = h * 4 - 4;
                    Delasc();
                    k = 1048575;
                }
            }
            else
            {
                for (k = j; k < h; k += 2)
                {
                    if (alm[k] == 131072)
                    {
                        k = 1048575;
                        break;
                    }
                }
            }
            if (k != 1048575)
            {
                return;
            }
            m = j * 4 + 8;
            n = h * 4;
            an1 = 0;
            for (k = stf; k < md; k++)
            {
                if (alm[k] >= m && alm[k] <= n)
                {
                    an1 = k * 4;
                    for (mov = 0; mov < par; mov++)
                    {
                        if (asc[mov] == an1)
                        {
                            an1 = 1048575;
                            break;
                        }
                    }
                    if (an1 == 1048575)
                    {
                        break;
                    }
                }
            }
            if (an1 == 1048575)
            {
                return;
            }
            k = j;
            while (k < h)
            {
                if (alm[k] == 131072)
                {
                    for (m = k; m < h; m += 2)
                    {
                        if (((alm[m + 2] >> 8) & 0xFF) != 0)
                        {
                            rmv = m * 4 + 12;
                            for (mov = 0; mov < par; mov++)
                            {
                                if (asc[mov] == rmv)
                                {
                                    asc[mov] -= 8;
                                    break;
                                }
                            }
                        }
                        alm[m] = alm[m + 2];
                        alm[m + 1] = alm[m + 3];
                    }
                    alm[h] = -86052851;
                    alm[h + 1] = -86052851;
                    h -= 2;
                    alm[h] = 0;
                    alm[h + 1] = 0;
                }
                else
                {
                    k += 2;
                }
            }
        }

        private void CmpInRnDelmov()
        {
            i = alm[dat + 12] / 4;
            for (g = i + suba * 4; i < g; i++)
            {
                if (alm[i] >= 8096 && alm[i] < tds[25])
                {
                    for (j = 10; j < h; j++)
                    {
                        if (nonam[j] == alm[i])
                        {
                            nonam[j] = 0;
                            break;
                        }
                    }
                }
            }
            if (EvSubaCbList.Items.Count == 8)
            {
                i = alm[dat + 31] / 4;
                for (g = i + suba * 4; i < g; i++)
                {
                    if (alm[i] >= 8096 && alm[i] < tds[25])
                    {
                        for (j = 10; j < h; j++)
                        {
                            if (nonam[j] == alm[i])
                            {
                                nonam[j] = 0;
                                break;
                            }
                        }
                    }
                }
            }
            i = alm[dat + 9] / 4;
            for (g = i + spas * 2; i < g; i++)
            {
                if (alm[i] >= 8096 && alm[i] < tds[25])
                {
                    for (j = 10; j < h; j++)
                    {
                        if (nonam[j] == alm[i])
                        {
                            nonam[j] = 0;
                            break;
                        }
                    }
                }
            }
            Array.Sort(nonam);
            m = 10;
            while (m < 512 && nonam[m] == 0)
            {
                m++;
            }
            if (ModeChange.SelectedIndex == 0 && rd1 != "")
            {
                TextBox cmpText = CmpText;
                cmpText.Text = cmpText.Text + "Found Error :" + rd1;
            }
            rd1 = "";
            for (g = m; g < 512; g++)
            {
                if (nonam[g] != 0)
                {
                    i = nonam[g] / 4;
                    if (alm[i] > 65535)
                    {
                        j = i;
                        while (j >= stf && alm[j - 2] > 65535)
                        {
                            k = ((alm[j - 2] >> 8) & 0xFF) * 2;
                            if (k == 0)
                            {
                                if (alm[j - 1] != 0)
                                {
                                    break;
                                }
                            }
                            else
                            {
                                if (alm[j - 1] < 8096 || alm[j - 1] >= tds[25])
                                {
                                    break;
                                }
                                h = alm[j - 1] / 4;
                                n = 0;
                                while (n < k && alm[h + n] >= 0 && alm[h + n] < 7)
                                {
                                    n += 2;
                                }
                                if (n < k)
                                {
                                    break;
                                }
                            }
                            j -= 2;
                        }
                        if (j != i)
                        {
                            i = j * 4;
                            k = alm[dat + 9] / 4;
                            n = k + spas * 2;
                            for (h = k; h < n; h++)
                            {
                                if (alm[h] == i)
                                {
                                    k = 0;
                                    break;
                                }
                            }
                            if (k != 0)
                            {
                                k = alm[dat + 12] / 4;
                                n = k + suba * 4;
                                for (h = k; h < n; h++)
                                {
                                    if (alm[h] == i)
                                    {
                                        k = 0;
                                        break;
                                    }
                                }
                                if (k != 0 && EvSubaCbList.Items.Count == 8)
                                {
                                    k = alm[dat + 31] / 4;
                                    n = k + suba * 4;
                                    for (h = k; h < n; h++)
                                    {
                                        if (alm[h] == i)
                                        {
                                            k = 0;
                                            break;
                                        }
                                    }
                                }
                            }
                            if (k == 0)
                            {
                                rd1 = rd1 + nonam[g].ToString("X") + "\r\n";
                                nonam[g] = 0;
                            }
                            else
                            {
                                nonam[g] = i;
                                for (k = m; k < g; k++)
                                {
                                    if (i == nonam[k])
                                    {
                                        nonam[g] = 0;
                                        rd1 = rd1 + nonam[g].ToString("X") + "\r\n";
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        rd1 = rd1 + nonam[g].ToString("X") + "\r\n";
                        nonam[g] = 0;
                    }
                }
            }
            if (ModeChange.SelectedIndex == 0 && rd1 != "")
            {
                TextBox cmpText2 = CmpText;
                cmpText2.Text = cmpText2.Text + "\r\nCannot Move Offset: \r\n" + rd1 + "\r\n";
            }
            for (i = stf; i < md; i++)
            {
                if (alm[i] == -86052851)
                {
                    if (alm[i + 1] == -86052851)
                    {
                        nonam[0] = i;
                        break;
                    }
                    i++;
                }
            }
            rd1 = "";
            for (i = m; i < 512; i++)
            {
                if (nonam[i] != 0)
                {
                    j = nonam[i] / 4;
                    h = j;
                    while (h < md && alm[h] != 0)
                    {
                        k = ((alm[h] >> 8) & 0xFF) * 2;
                        if (k != 0 && alm[h + 1] >= 8096 && alm[h + 1] < tds[25])
                        {
                            m = alm[h + 1] / 4;
                            if (nonam[0] < m)
                            {
                                for (n = nonam[0]; n < m; n++)
                                {
                                    if (alm[n] == -86052851)
                                    {
                                        for (an1 = n + 1; an1 < n + k; an1++)
                                        {
                                            if (alm[an1] != -86052851)
                                            {
                                                n = an1;
                                                break;
                                            }
                                        }
                                        if (an1 == n + k)
                                        {
                                            if (alm[h] == 459008)
                                            {
                                                if (alm[m] == 2)
                                                {
                                                    rmv = alm[h + 1] + 4;
                                                    for (an2 = 0; an2 < tds[28]; an2++)
                                                    {
                                                        an4 = rnext[(tds[27] + an2) * 2];
                                                        if (an4 >= 8096 && an4 < tds[25])
                                                        {
                                                            if (rmv == an4)
                                                            {
                                                                rnext[(tds[27] + an2) * 2] = n * 4 + 4;
                                                                break;
                                                            }
                                                            if (an4 >= 8096 && an4 < tds[25])
                                                            {
                                                                nonam[1] = 0;
                                                                while (nonam[1] < 100)
                                                                {
                                                                    an5 = an4 / 4;
                                                                    an4 = alm[an5];
                                                                    if (an4 >= 8096 && an4 < tds[25])
                                                                    {
                                                                        if (rmv == an4)
                                                                        {
                                                                            alm[an5] = n * 4 + 4;
                                                                            break;
                                                                        }
                                                                        nonam[1]++;
                                                                        continue;
                                                                    }
                                                                    break;
                                                                }
                                                                if (rmv == an4)
                                                                {
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (an2 >= tds[28])
                                                    {
                                                        for (mov = 0; mov < par; mov++)
                                                        {
                                                            if (asc[mov] == rmv)
                                                            {
                                                                asc[mov] = n * 4 + 4;
                                                                break;
                                                            }
                                                        }
                                                    }
                                                }
                                                alm[n] = alm[m];
                                                alm[m] = -86052851;
                                                alm[n + 1] = alm[m + 1];
                                                alm[m + 1] = -86052851;
                                            }
                                            else if (alm[h] == 218104320)
                                            {
                                                if (alm[m] == 2)
                                                {
                                                    rmv = m * 4 + 4;
                                                    for (mov = 0; mov < par; mov++)
                                                    {
                                                        if (asc[mov] == rmv)
                                                        {
                                                            asc[mov] = n * 4 + 4;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (alm[m + 2] == 2)
                                                {
                                                    rmv = alm[h + 1] + 12;
                                                    for (an2 = 0; an2 < tds[28]; an2++)
                                                    {
                                                        an4 = rnext[(tds[27] + an2) * 2];
                                                        if (an4 >= 8096 && an4 < tds[25])
                                                        {
                                                            if (rmv == an4)
                                                            {
                                                                rnext[(tds[27] + an2) * 2] = n * 4 + 12;
                                                                break;
                                                            }
                                                            if (an4 >= 8096 && an4 < tds[25])
                                                            {
                                                                nonam[1] = 0;
                                                                while (nonam[1] < 100)
                                                                {
                                                                    an5 = an4 / 4;
                                                                    an4 = alm[an5];
                                                                    if (an4 >= 8096 && an4 < tds[25])
                                                                    {
                                                                        if (rmv == an4)
                                                                        {
                                                                            alm[an5] = n * 4 + 12;
                                                                            break;
                                                                        }
                                                                        nonam[1]++;
                                                                        continue;
                                                                    }
                                                                    break;
                                                                }
                                                                if (rmv == an4)
                                                                {
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (an2 >= tds[28])
                                                    {
                                                        for (mov = 0; mov < par; mov++)
                                                        {
                                                            if (asc[mov] == rmv)
                                                            {
                                                                asc[mov] = n * 4 + 12;
                                                                break;
                                                            }
                                                        }
                                                    }
                                                }
                                                alm[n] = alm[m];
                                                alm[m] = -86052851;
                                                alm[n + 1] = alm[m + 1];
                                                alm[m + 1] = -86052851;
                                                alm[n + 2] = alm[m + 2];
                                                alm[m + 2] = -86052851;
                                                alm[n + 3] = alm[m + 3];
                                                alm[m + 3] = -86052851;
                                            }
                                            else
                                            {
                                                for (an2 = 0; an2 < k; an2 += 2)
                                                {
                                                    if (alm[m + an2] == 2)
                                                    {
                                                        rmv = (m + an2) * 4 + 4;
                                                        for (mov = 0; mov < par; mov++)
                                                        {
                                                            if (asc[mov] == rmv)
                                                            {
                                                                asc[mov] = (n + an2) * 4 + 4;
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    alm[n + an2] = alm[m + an2];
                                                    alm[m + an2] = -86052851;
                                                    alm[n + an2 + 1] = alm[m + an2 + 1];
                                                    alm[m + an2 + 1] = -86052851;
                                                }
                                            }
                                            alm[h + 1] = n * 4;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        h += 2;
                    }
                    n = h - j + 2;
                    for (an1 = nonam[0]; an1 < j; an1++)
                    {
                        if (alm[an1] == -86052851)
                        {
                            for (m = an1 + 1; m < an1 + n; m++)
                            {
                                if (alm[m] != -86052851)
                                {
                                    an1 = m;
                                    break;
                                }
                            }
                            if (m == an1 + n)
                            {
                                an2 = n - 2;
                                an4 = nonam[i];
                                k = an1 * 4;
                                for (n = 0; n < an2; n += 2)
                                {
                                    if (((alm[j + n] >> 8) & 0xFF) != 0)
                                    {
                                        rmv = (j + n) * 4 + 4;
                                        for (mov = 0; mov < par; mov++)
                                        {
                                            if (asc[mov] == rmv)
                                            {
                                                asc[mov] = (an1 + n) * 4 + 4;
                                                break;
                                            }
                                        }
                                    }
                                    alm[an1 + n] = alm[j + n];
                                    alm[j + n] = -86052851;
                                    alm[an1 + n + 1] = alm[j + n + 1];
                                    alm[j + n + 1] = -86052851;
                                }
                                alm[an1 + n] = 0;
                                alm[j + n] = -86052851;
                                alm[an1 + n + 1] = 0;
                                alm[j + n + 1] = -86052851;
                                h = an4 + an2 * 4;
                                for (an5 = stf; an5 < md; an5++)
                                {
                                    if (alm[an5] >= an4 && alm[an5] <= h)
                                    {
                                        n = an5 * 4;
                                        for (mov = 0; mov < par; mov++)
                                        {
                                            if (asc[mov] == n)
                                            {
                                                if (alm[an5] == an4)
                                                {
                                                    alm[an5] = k;
                                                    break;
                                                }
                                                m = alm[an5] - an4;
                                                if (m % 8 == 0)
                                                {
                                                    alm[an5] = k + m;
                                                }
                                                break;
                                            }
                                        }
                                    }
                                }
                                break;
                            }
                        }
                    }
                    if (an1 > j && alm[j - 1] == -86052851)
                    {
                        for (an1 = j - 2; an1 > stf; an1--)
                        {
                            if (alm[an1] != -86052851)
                            {
                                an1++;
                                break;
                            }
                        }
                        an2 = n - 2;
                        an4 = nonam[i];
                        k = an1 * 4;
                        for (n = 0; n < an2; n += 2)
                        {
                            if (((alm[j + n] >> 8) & 0xFF) != 0)
                            {
                                rmv = (j + n) * 4 + 4;
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == rmv)
                                    {
                                        asc[mov] = (an1 + n) * 4 + 4;
                                        break;
                                    }
                                }
                            }
                            alm[an1 + n] = alm[j + n];
                            alm[j + n] = -86052851;
                            alm[an1 + n + 1] = alm[j + n + 1];
                            alm[j + n + 1] = -86052851;
                        }
                        alm[an1 + n] = 0;
                        alm[j + n] = -86052851;
                        alm[an1 + n + 1] = 0;
                        alm[j + n + 1] = -86052851;
                        h = an4 + an2 * 4;
                        for (an1 = stf; an1 < md; an1++)
                        {
                            if (alm[an1] >= an4 && alm[an1] <= h)
                            {
                                n = an1 * 4;
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == n)
                                    {
                                        if (alm[an1] == an4)
                                        {
                                            alm[an1] = k;
                                            break;
                                        }
                                        m = alm[an1] - an4;
                                        if (m % 8 == 0)
                                        {
                                            alm[an1] = k + m;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        private void CmpSameDtRn()
        {
            n = 0;
            h = j;
            while (true)
            {
                if (h < md && alm[h] > 65535)
                {
                    if (((alm[h] >> 8) & 0xFF) > 0)
                    {
                        n++;
                    }
                    if (n > 1)
                    {
                        break;
                    }
                    h += 2;
                    continue;
                }
                return;
            }
            an1 = 0;
            if (((alm[j] >> 8) & 0xFF) > 0 && (alm[j + 1] < 8096 || alm[j + 1] >= tds[25] || alm[j + 1] % 4 != 0))
            {
                an1 = 1048575;
            }
            if (an1 != 0)
            {
                return;
            }
            while (an1 < 501)
            {
                nonam[an1] = alm[j + an1 * 2];
                if (nonam[an1] == 0)
                {
                    break;
                }
                if (((nonam[an1] >> 8) & 0xFF) > 0)
                {
                    an2 = alm[j + an1 * 2 + 1];
                    if (an2 < 8096 || an2 >= tds[25] || an2 % 4 != 0)
                    {
                        an1 = 1048575;
                    }
                    else if (nonam[an1] == 459008)
                    {
                        an3 = an2 / 4;
                        if (alm[an3] == 2 && alm[an3 + 1] == -1)
                        {
                            an1 = 1048575;
                        }
                    }
                    else if (nonam[an1] == 218104320)
                    {
                        an3 = an2 / 4 + 2;
                        if (alm[an3] == 2 && alm[an3 + 1] == -1)
                        {
                            an1 = 1048575;
                        }
                    }
                }
                an1++;
            }
            if (an1 >= 501)
            {
                return;
            }
            for (an2 = stf; an2 < md; an2++)
            {
                if (alm[an2] == nonam[0])
                {
                    if (an2 == j)
                    {
                        an2 += an1 * 2;
                    }
                    else
                    {
                        for (h = 1; h < an1; h++)
                        {
                            if (nonam[h] != alm[an2 + h * 2])
                            {
                                h = 16777216;
                            }
                        }
                        if (h == an1)
                        {
                            for (h = 0; h < an1; h++)
                            {
                                if (((nonam[h] >> 8) & 0xFF) != 0)
                                {
                                    k = ((nonam[h] >> 8) & 0xFF) * 2;
                                    n = alm[an2 + h * 2 + 1];
                                    if (n >= 8096 && n < tds[25] && n % 4 == 0)
                                    {
                                        rd1 = "";
                                        m = n / 4;
                                        for (n = 0; n < k; n++)
                                        {
                                            rd1 += alm[m + n].ToString("X8");
                                        }
                                        n = alm[j + h * 2 + 1];
                                        rd2 = "";
                                        m = n / 4;
                                        for (n = 0; n < k; n++)
                                        {
                                            rd2 += alm[m + n].ToString("X8");
                                        }
                                        if (rd1 != rd2)
                                        {
                                            h = 16777216;
                                        }
                                    }
                                    else
                                    {
                                        h = 16777216;
                                    }
                                }
                            }
                            if (h == an1)
                            {
                                an3 = an2;
                                m = an2;
                                while (m >= stf && alm[m - 2] > 65535)
                                {
                                    k = ((alm[m - 2] >> 8) & 0xFF) * 2;
                                    if (k == 0)
                                    {
                                        if (alm[m - 1] != 0)
                                        {
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        if (alm[m - 1] < 8096 || alm[m - 1] >= tds[25])
                                        {
                                            break;
                                        }
                                        h = alm[m - 1] / 4;
                                        n = 0;
                                        while (n < k && alm[h + n] >= 0 && alm[h + n] < 7)
                                        {
                                            n += 2;
                                        }
                                        if (n < k)
                                        {
                                            break;
                                        }
                                    }
                                    m -= 2;
                                }
                                n = m * 4;
                                while (an2 < md && alm[an2] != 0)
                                {
                                    an2 += 2;
                                }
                                k = alm[dat + 9] / 4;
                                for (m = k + spas * 2; k < m; k++)
                                {
                                    if (alm[k] == n)
                                    {
                                        n = 0;
                                        break;
                                    }
                                }
                                if (n != 0)
                                {
                                    k = alm[dat + 12] / 4;
                                    for (m = k + suba * 4; k < m; k++)
                                    {
                                        if (alm[k] == n)
                                        {
                                            n = 0;
                                            break;
                                        }
                                    }
                                    if (n != 0)
                                    {
                                        if (EvSubaCbList.Items.Count == 8)
                                        {
                                            k = alm[dat + 31] / 4;
                                            for (m = k + suba * 4; k < m; k++)
                                            {
                                                if (alm[k] == n)
                                                {
                                                    n = 0;
                                                    break;
                                                }
                                            }
                                        }
                                        if (n != 0)
                                        {
                                            if (alm[dat + 20] >= 8096 && alm[dat + 20] < tds[25])
                                            {
                                                m = alm[dat + 20] / 4;
                                                while (m < md && alm[m] >= 0)
                                                {
                                                    if (alm[m + 1] == n)
                                                    {
                                                        n = 0;
                                                        break;
                                                    }
                                                    m += 2;
                                                }
                                            }
                                            if (n != 0 && alm[dat + 21] >= 8096 && alm[dat + 21] < tds[25])
                                            {
                                                m = alm[dat + 21] / 4;
                                                while (m < md && alm[m] >= 0)
                                                {
                                                    if (alm[m + 1] == n)
                                                    {
                                                        n = 0;
                                                        break;
                                                    }
                                                    m += 2;
                                                }
                                            }
                                        }
                                    }
                                }
                                if (n == 0)
                                {
                                    an4 = 1048575;
                                    an5 = 1048575;
                                    m = an3 + an1 * 2;
                                    if (((alm[an3] >> 8) & 0xFF) > 0)
                                    {
                                        rmv = an3 * 4 + 4;
                                        for (mov = 0; mov < par; mov++)
                                        {
                                            if (asc[mov] == rmv)
                                            {
                                                an4 = mov;
                                                break;
                                            }
                                        }
                                        nonam[510] = ((alm[an3] >> 8) & 0xFF) * 2;
                                        k = alm[an3 + 1] / 4;
                                        for (h = 0; h < nonam[510]; h += 2)
                                        {
                                            if (alm[k + h] == 2)
                                            {
                                                rmv = (k + h) * 4 + 4;
                                                Delasc();
                                            }
                                            alm[k + h] = -86052851;
                                            alm[k + h + 1] = -86052851;
                                        }
                                    }
                                    for (n = an3 + 2; n < m; n += 2)
                                    {
                                        if (((alm[n] >> 8) & 0xFF) > 0)
                                        {
                                            rmv = n * 4 + 4;
                                            if (an5 != 1048575)
                                            {
                                                Delasc();
                                            }
                                            else
                                            {
                                                for (mov = 0; mov < par; mov++)
                                                {
                                                    if (asc[mov] == rmv)
                                                    {
                                                        if (an4 == 1048575)
                                                        {
                                                            an4 = mov;
                                                        }
                                                        else
                                                        {
                                                            an5 = mov;
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                            nonam[510] = ((alm[n] >> 8) & 0xFF) * 2;
                                            k = alm[n + 1] / 4;
                                            for (h = 0; h < nonam[510]; h += 2)
                                            {
                                                if (alm[k + h] == 2)
                                                {
                                                    rmv = (k + h) * 4 + 4;
                                                    Delasc();
                                                }
                                                alm[k + h] = -86052851;
                                                alm[k + h + 1] = -86052851;
                                            }
                                        }
                                    }
                                    if (alm[m] == 0)
                                    {
                                        alm[an3 + 2] = 0;
                                        alm[an3 + 3] = 0;
                                        if (an3 + 4 < m)
                                        {
                                            for (n = an3 + 4; n < m; n++)
                                            {
                                                alm[n] = -86052851;
                                            }
                                        }
                                        alm[m] = -86052851;
                                        alm[m + 1] = -86052851;
                                    }
                                    else
                                    {
                                        n = an3 + 2;
                                        while (n < md && alm[m] != 0)
                                        {
                                            if (((alm[m] >> 8) & 0xFF) > 0)
                                            {
                                                rmv = m * 4 + 4;
                                                for (mov = 0; mov < par; mov++)
                                                {
                                                    if (asc[mov] == rmv)
                                                    {
                                                        asc[mov] = n * 4 + 4;
                                                        break;
                                                    }
                                                }
                                            }
                                            alm[n] = alm[m];
                                            alm[n + 1] = alm[m + 1];
                                            m += 2;
                                            n += 2;
                                        }
                                        alm[n] = 0;
                                        alm[n + 1] = 0;
                                        n += 2;
                                        m += 2;
                                        while (n < m)
                                        {
                                            alm[n] = -86052851;
                                            n++;
                                        }
                                    }
                                    alm[an3] = 459008;
                                    if (an4 != 1048575)
                                    {
                                        asc[an4] = an3 * 4 + 4;
                                    }
                                    else
                                    {
                                        asc[par] = an3 * 4 + 4;
                                        par++;
                                        tds[26]++;
                                    }
                                    for (n = stf; n < md; n++)
                                    {
                                        if (alm[n] == -86052851)
                                        {
                                            if (alm[n + 1] == -86052851)
                                            {
                                                alm[an3 + 1] = n * 4;
                                                alm[n] = 2;
                                                alm[n + 1] = alm[i];
                                                if (an5 != 1048575)
                                                {
                                                    asc[an5] = n * 4 + 4;
                                                    break;
                                                }
                                                asc[par] = n * 4 + 4;
                                                par++;
                                                tds[26]++;
                                                break;
                                            }
                                            n++;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (an1 < 4)
            {
                return;
            }
            an3 = j + an1 * 2;
            for (k = j; k < an3; k += 2)
            {
                n = alm[k] >> 16;
                if (n == 4 || n == 5 || n == 7 || (n > 9 && n < 20))
                {
                    k = 1048575;
                    break;
                }
            }
            if (k != 1048575)
            {
                fnt = 0;
                for (k = j; k < an3; k += 2)
                {
                    if (alm[k] == 131328 && fnt < 250)
                    {
                        m = alm[k + 1] / 4;
                        if (alm[m] != 1)
                        {
                            break;
                        }
                        n = 0;
                        for (h = j; h < k; h += 2)
                        {
                            if (alm[h] == 65792)
                            {
                                m = alm[h + 1] / 4;
                                if (alm[m] != 1 || alm[m + 1] < 0)
                                {
                                    k = 1048575;
                                    break;
                                }
                                n += alm[m + 1];
                            }
                        }
                        if (k == 1048575)
                        {
                            break;
                        }
                        m = alm[k + 1] / 4 + 1;
                        if (n >= alm[m])
                        {
                            break;
                        }
                        nonam[250 + fnt] = alm[m];
                        alm[m] -= n;
                        alm[k] = 65792;
                        nonam[fnt] = k;
                        fnt++;
                    }
                }
            }
            else
            {
                fnt = 0;
            }
            an2 = an3 - 6;
            for (k = j; k < an2; k += 2)
            {
                if (((alm[k] >> 8) & 0xFF) > 0 && alm[k] == alm[k + 4] && alm[k + 2] == alm[k + 6])
                {
                    h = ((alm[k] >> 8) & 0xFF) * 2;
                    rd1 = "";
                    m = alm[k + 1] / 4;
                    for (n = 0; n < h; n++)
                    {
                        rd1 += alm[m + n].ToString("X8");
                    }
                    rd2 = "";
                    m = alm[k + 5] / 4;
                    for (n = 0; n < h; n++)
                    {
                        rd2 += alm[m + n].ToString("X8");
                    }
                    if (rd1 == rd2)
                    {
                        n = alm[k] >> 16;
                        if (n != 4 && n != 5 && (n < 10 || n > 19))
                        {
                            n = alm[k + 2] >> 16;
                            if (n != 4 && n != 5 && (n < 10 || n > 19) && ((alm[k + 2] >> 8) & 0xFF) > 0)
                            {
                                an5 = ((alm[k + 2] >> 8) & 0xFF) * 2;
                                rd3 = "";
                                m = alm[k + 3] / 4;
                                for (n = 0; n < an5; n++)
                                {
                                    rd3 += alm[m + n].ToString("X8");
                                }
                                rd2 = "";
                                m = alm[k + 7] / 4;
                                for (n = 0; n < an5; n++)
                                {
                                    rd2 += alm[m + n].ToString("X8");
                                }
                                if (rd3 == rd2)
                                {
                                    an4 = k + 10;
                                    fnt = 0;
                                    while (an4 < an3 && alm[k] == alm[an4 - 2] && alm[k + 2] == alm[an4])
                                    {
                                        rd2 = "";
                                        m = alm[an4 - 1] / 4;
                                        for (n = 0; n < h; n++)
                                        {
                                            rd2 += alm[m + n].ToString("X8");
                                        }
                                        if (rd1 == rd2)
                                        {
                                            rd2 = "";
                                            m = alm[an4 + 1] / 4;
                                            for (n = 0; n < an5; n++)
                                            {
                                                rd2 += alm[m + n].ToString("X8");
                                            }
                                            if (rd3 == rd2)
                                            {
                                                an4 += 4;
                                                continue;
                                            }
                                            break;
                                        }
                                        break;
                                    }
                                    m = alm[k + 5] / 4;
                                    for (n = 0; n < h; n += 2)
                                    {
                                        if (alm[m + n] == 2)
                                        {
                                            rmv = (m + n) * 4 + 4;
                                            Delasc();
                                        }
                                        alm[m + n] = -86052851;
                                        alm[m + n + 1] = -86052851;
                                    }
                                    m = alm[k + 7] / 4;
                                    rmv = k * 4 + 28;
                                    Delasc();
                                    for (n = 0; n < an5; n += 2)
                                    {
                                        if (alm[m + n] == 2)
                                        {
                                            rmv = (m + n) * 4 + 4;
                                            Delasc();
                                        }
                                        alm[m + n] = -86052851;
                                        alm[m + n + 1] = -86052851;
                                    }
                                    alm[k + 4] = alm[k + 2];
                                    alm[k + 5] = alm[k + 3];
                                    alm[k + 2] = alm[k];
                                    alm[k + 3] = alm[k + 1];
                                    for (n = stf; n < md; n++)
                                    {
                                        if (alm[n] == -86052851)
                                        {
                                            if (alm[n + 1] == -86052851)
                                            {
                                                alm[k] = 262400;
                                                alm[k + 1] = n * 4;
                                                alm[n] = 0;
                                                alm[n + 1] = (an4 - k - 2) / 4;
                                                break;
                                            }
                                            n++;
                                        }
                                    }
                                    alm[k + 6] = 327680;
                                    alm[k + 7] = 0;
                                    if (alm[n + 1] > 2)
                                    {
                                        nonam[0] = alm[n + 1];
                                        if (alm[k + 2] == alm[k + 4] && rd1 == rd3)
                                        {
                                            alm[n + 1] += nonam[0];
                                            m = alm[k + 5] / 4;
                                            for (an5 = 0; an5 < h; an5 += 2)
                                            {
                                                if (alm[m + an5] == 2)
                                                {
                                                    rmv = (m + an5) * 4 + 4;
                                                    Delasc();
                                                }
                                                alm[m + an5] = -86052851;
                                                alm[m + an5 + 1] = -86052851;
                                            }
                                            alm[k + 4] = 327680;
                                            alm[k + 5] = 0;
                                            alm[k + 6] = 131072;
                                            alm[k + 7] = 0;
                                            rmv = k * 4 + 20;
                                            Delasc();
                                            if (alm[k + 2] == alm[an4 - 2])
                                            {
                                                rd2 = "";
                                                m = alm[an4 - 1] / 4;
                                                for (an5 = 0; an5 < h; an5++)
                                                {
                                                    rd2 += alm[m + an5].ToString("X8");
                                                }
                                                if (rd1 == rd2)
                                                {
                                                    alm[n + 1]++;
                                                    for (an5 = 0; an5 < h; an5 += 2)
                                                    {
                                                        if (alm[m + an5] == 2)
                                                        {
                                                            rmv = (m + an5) * 4 + 4;
                                                            Delasc();
                                                        }
                                                        alm[m + an5] = -86052851;
                                                        alm[m + an5 + 1] = -86052851;
                                                    }
                                                    alm[an4 - 2] = 131072;
                                                    alm[an4 - 1] = 0;
                                                    rmv = an4 * 4 - 4;
                                                    Delasc();
                                                }
                                            }
                                            an5 = h;
                                        }
                                        for (an4 = 2; an4 < nonam[0]; an4++)
                                        {
                                            m = alm[k + an4 * 4 + 1] / 4;
                                            for (n = 0; n < h; n += 2)
                                            {
                                                if (alm[m + n] == 2)
                                                {
                                                    rmv = (m + n) * 4 + 4;
                                                    Delasc();
                                                }
                                                alm[m + n] = -86052851;
                                                alm[m + n + 1] = -86052851;
                                            }
                                            alm[k + an4 * 4] = 131072;
                                            alm[k + an4 * 4 + 1] = 0;
                                            rmv = k * 4 + an4 * 16 + 4;
                                            Delasc();
                                            m = alm[k + an4 * 4 + 3] / 4;
                                            for (n = 0; n < an5; n += 2)
                                            {
                                                if (alm[m + n] == 2)
                                                {
                                                    rmv = (m + n) * 4 + 4;
                                                    Delasc();
                                                }
                                                alm[m + n] = -86052851;
                                                alm[m + n + 1] = -86052851;
                                            }
                                            alm[k + an4 * 4 + 2] = 131072;
                                            alm[k + an4 * 4 + 3] = 0;
                                            rmv = k * 4 + an4 * 16 + 12;
                                            Delasc();
                                        }
                                        if (alm[k + 6] == 131072)
                                        {
                                            k -= 2;
                                        }
                                        n = k + 8;
                                        while (n < an3)
                                        {
                                            if (alm[n] == 131072)
                                            {
                                                for (m = n; m < an3; m += 2)
                                                {
                                                    if (((alm[m + 2] >> 8) & 0xFF) != 0)
                                                    {
                                                        rmv = m * 4 + 12;
                                                        for (mov = 0; mov < par; mov++)
                                                        {
                                                            if (asc[mov] == rmv)
                                                            {
                                                                asc[mov] -= 8;
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    alm[m] = alm[m + 2];
                                                    alm[m + 1] = alm[m + 3];
                                                }
                                                alm[an3] = -86052851;
                                                alm[an3 + 1] = -86052851;
                                                an3 -= 2;
                                                alm[an3] = 0;
                                                alm[an3 + 1] = 0;
                                            }
                                            else
                                            {
                                                n += 2;
                                            }
                                        }
                                        an2 = an3 - 6;
                                        k += 6;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (fnt > 0)
            {
                for (k = 0; k < fnt; k++)
                {
                    n = nonam[k];
                    alm[n] = 131328;
                    m = alm[n + 1] / 4 + 1;
                    alm[m] = nonam[250 + k];
                }
            }
        }

        private void GenUsingDt()
        {
            string text = "";
            this.i = 10;
            while (this.i < 512)
            {
                nonam[this.i] = 0;
                this.i++;
            }
            if (EvSubaCbList.Items.Count < 4)
            {
                this.i = alm[dat + 4] / 4;
                g = this.i + 274;
                an1 = this.i;
                while (this.i < g)
                {
                    if (alm[this.i] >= 5996 && alm[this.i] < tds[25])
                    {
                        j = alm[this.i] / 4;
                        if (alm[j] != 0 && alm[j] != -86052851)
                        {
                            text = text + "K" + (this.i - an1).ToString("X3") + alm[this.i].ToString("X5");
                            ScanRn();
                        }
                    }
                    this.i++;
                }
                this.i = alm[dat + 5] / 4;
                g = this.i + 274;
                an1 = this.i;
                while (this.i < g)
                {
                    if (alm[this.i] >= 5996 && alm[this.i] < tds[25])
                    {
                        j = alm[this.i] / 4;
                        if (alm[j] != 0 && alm[j] != -86052851)
                        {
                            text = text + "L" + (this.i - an1).ToString("X3") + alm[this.i].ToString("X5");
                            ScanRn();
                        }
                    }
                    this.i++;
                }
                if (tds[27] > 1)
                {
                    this.i = 0;
                    while (this.i < tds[27])
                    {
                        rd4 = DataDTList.Items[this.i].ToString();
                        if (rd4 != "dataCommon" && rd4 != "itemSwingData" && rd4 != "patternPowerMul")
                        {
                            h = rnext[this.i * 2];
                            if (h >= 5996 && h < tds[25])
                            {
                                text = text + "V" + this.i.ToString("X3") + h.ToString("X5");
                                j = h / 4;
                                ScanRn();
                            }
                        }
                        this.i++;
                    }
                }
            }
            else
            {
                this.i = alm[dat + 9] / 4;
                g = this.i + spas;
                an1 = this.i;
                while (this.i < g)
                {
                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                    {
                        j = alm[this.i] / 4;
                        if (alm[j] != 0 && alm[j] != -86052851)
                        {
                            text = text + "K" + (this.i - an1 + 274).ToString("X3") + alm[this.i].ToString("X5");
                            ScanRn();
                        }
                    }
                    this.i++;
                }
                this.i = alm[dat + 10] / 4;
                g = this.i + spas;
                an1 = this.i;
                while (this.i < g)
                {
                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                    {
                        j = alm[this.i] / 4;
                        if (alm[j] != 0 && alm[j] != -86052851)
                        {
                            text = text + "L" + (this.i - an1 + 274).ToString("X3") + alm[this.i].ToString("X5");
                            ScanRn();
                        }
                    }
                    this.i++;
                }
                this.i = alm[dat + 12] / 4;
                g = this.i + suba;
                an1 = this.i;
                while (this.i < g)
                {
                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                    {
                        j = alm[this.i] / 4;
                        if (alm[j] != 0 && alm[j] != -86052851)
                        {
                            text = text + "M" + (this.i - an1).ToString("X3") + alm[this.i].ToString("X5");
                            ScanRn();
                        }
                    }
                    this.i++;
                }
                this.i = alm[dat + 13] / 4;
                g = this.i + suba;
                an1 = this.i;
                while (this.i < g)
                {
                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                    {
                        j = alm[this.i] / 4;
                        if (alm[j] != 0 && alm[j] != -86052851)
                        {
                            text = text + "N" + (this.i - an1).ToString("X3") + alm[this.i].ToString("X5");
                            ScanRn();
                        }
                    }
                    this.i++;
                }
                this.i = alm[dat + 14] / 4;
                g = this.i + suba;
                an1 = this.i;
                while (this.i < g)
                {
                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                    {
                        j = alm[this.i] / 4;
                        if (alm[j] != 0 && alm[j] != -86052851)
                        {
                            text = text + "O" + (this.i - an1).ToString("X3") + alm[this.i].ToString("X5");
                            ScanRn();
                        }
                    }
                    this.i++;
                }
                this.i = alm[dat + 15] / 4;
                g = this.i + suba;
                an1 = this.i;
                while (this.i < g)
                {
                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                    {
                        j = alm[this.i] / 4;
                        if (alm[j] != 0 && alm[j] != -86052851)
                        {
                            text = text + "P" + (this.i - an1).ToString("X3") + alm[this.i].ToString("X5");
                            ScanRn();
                        }
                    }
                    this.i++;
                }
                if (EvSubaCbList.Items.Count == 8)
                {
                    this.i = alm[dat + 31] / 4;
                    g = this.i + suba;
                    an1 = this.i;
                    while (this.i < g)
                    {
                        if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                        {
                            j = alm[this.i] / 4;
                            if (alm[j] != 0 && alm[j] != -86052851)
                            {
                                text = text + "Q" + (this.i - an1).ToString("X3") + alm[this.i].ToString("X5");
                                ScanRn();
                            }
                        }
                        this.i++;
                    }
                    this.i = alm[dat + 32] / 4;
                    g = this.i + suba;
                    an1 = this.i;
                    while (this.i < g)
                    {
                        if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                        {
                            j = alm[this.i] / 4;
                            if (alm[j] != 0 && alm[j] != -86052851)
                            {
                                text = text + "R" + (this.i - an1).ToString("X3") + alm[this.i].ToString("X5");
                                ScanRn();
                            }
                        }
                        this.i++;
                    }
                    this.i = alm[dat + 33] / 4;
                    g = this.i + suba;
                    an1 = this.i;
                    while (this.i < g)
                    {
                        if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                        {
                            j = alm[this.i] / 4;
                            if (alm[j] != 0 && alm[j] != -86052851)
                            {
                                text = text + "S" + (this.i - an1).ToString("X3") + alm[this.i].ToString("X5");
                                ScanRn();
                            }
                        }
                        this.i++;
                    }
                    this.i = alm[dat + 34] / 4;
                    g = this.i + suba;
                    an1 = this.i;
                    while (this.i < g)
                    {
                        if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                        {
                            j = alm[this.i] / 4;
                            if (alm[j] != 0 && alm[j] != -86052851)
                            {
                                text = text + "T" + (this.i - an1).ToString("X3") + alm[this.i].ToString("X5");
                                ScanRn();
                            }
                        }
                        this.i++;
                    }
                }
                if (alm[dat + 20] >= 8096 && alm[dat + 20] < tds[25])
                {
                    this.i = alm[dat + 20] / 4 + 1;
                    an1 = this.i;
                    while (this.i < md && alm[this.i - 1] >= 0)
                    {
                        if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                        {
                            j = alm[this.i] / 4;
                            if (alm[j] != 0 && alm[j] != -86052851)
                            {
                                text = text + "V" + (this.i - an1).ToString("X3") + alm[this.i].ToString("X5");
                                ScanRn();
                            }
                        }
                        this.i += 2;
                    }
                }
                if (alm[dat + 21] >= 8096 && alm[dat + 21] < tds[25])
                {
                    this.i = alm[dat + 21] / 4 + 1;
                    an1 = this.i;
                    while (this.i < md && alm[this.i - 1] >= 0)
                    {
                        if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                        {
                            j = alm[this.i] / 4;
                            if (alm[j] != 0 && alm[j] != -86052851)
                            {
                                text = text + "W" + (this.i - an1).ToString("X3") + alm[this.i].ToString("X5");
                                ScanRn();
                            }
                        }
                        this.i += 2;
                    }
                }
                this.i = alm[dat + 11] / 4;
                g = this.i + 274 + spas;
                an1 = this.i;
                while (this.i < g)
                {
                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                    {
                        m = this.i * 4;
                        for (h = 0; h < tds[28]; h++)
                        {
                            j = rnext[(tds[27] + h) * 2];
                            if (j >= 8096 && j < tds[25])
                            {
                                if (m == j)
                                {
                                    break;
                                }
                                if (j >= 8096 && j < tds[25])
                                {
                                    for (an5 = 0; an5 < 100; an5++)
                                    {
                                        k = j / 4;
                                        j = alm[k];
                                        if (j < 8096 || j >= tds[25] || m == j)
                                        {
                                            break;
                                        }
                                    }
                                    if (m == j)
                                    {
                                        break;
                                    }
                                }
                            }
                        }
                        if (m != j)
                        {
                            j = alm[this.i] / 4;
                            if (alm[j] != 0 && alm[j] != -86052851)
                            {
                                text = text + "X" + (this.i - an1).ToString("X3") + alm[this.i].ToString("X5");
                                ScanRn();
                            }
                        }
                    }
                    this.i++;
                }
                if (ArticleIDCb.Items.Count > 1)
                {
                    for (int i = 1; i < ArticleIDCb.Items.Count; i++)
                    {
                        an1 = 0;
                        this.i = 1;
                        while (CharPar[this.i].Length >= 7)
                        {
                            rd4 = CharPar[this.i].Substring(4, 3);
                            if (rd4 == "Art")
                            {
                                an1++;
                                if (an1 == i)
                                {
                                    rd4 = CharPar[this.i].Substring(4);
                                    an1 = 2;
                                    while (CharPar[an1] != null && !(CharPar[an1] == rd4))
                                    {
                                        an1++;
                                    }
                                    if (!(CharPar[an1] == rd4))
                                    {
                                        break;
                                    }
                                    rd4 = CharPar[this.i].Substring(0, 3);
                                    g = Convert.ToInt32(rd4, 16);
                                    int num = alm[dat + g / 4] / 4;
                                    if (CharPar[an1 + 1].Length > 5)
                                    {
                                        break;
                                    }
                                    rd4 = CharPar[an1 + 1];
                                    k = rd4.Length - 1;
                                    fnt = 1;
                                    for (h = 1; h < k; h++)
                                    {
                                        if (rd4[h] == '-')
                                        {
                                            fnt = 0;
                                            break;
                                        }
                                    }
                                    if (fnt == 0)
                                    {
                                        rd2 = rd4.Substring(0, h);
                                        rd3 = rd4.Substring(h + 1);
                                        for (k = 0; k < h; k++)
                                        {
                                            if (!Uri.IsHexDigit(rd2[k]))
                                            {
                                                fnt = 1;
                                                break;
                                            }
                                        }
                                        if (fnt == 0)
                                        {
                                            h = rd3.Length;
                                            for (k = 0; k < h; k++)
                                            {
                                                if (!Uri.IsHexDigit(rd3[k]))
                                                {
                                                    fnt = 1;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    if (fnt != 0)
                                    {
                                        break;
                                    }
                                    h = Convert.ToInt32(rd2, 16);
                                    if (h > 0)
                                    {
                                        if (alm[num + 5] > 8096 && alm[num + 5] < tds[25])
                                        {
                                            this.i = alm[num + 5] / 4;
                                            g = this.i + h;
                                            int num2 = this.i;
                                            while (this.i < g)
                                            {
                                                if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                                {
                                                    j = alm[this.i] / 4;
                                                    if (alm[j] != 0 && alm[j] != -86052851)
                                                    {
                                                        string text2 = text;
                                                        text = text2 + (i - 1).ToString("X") + "K" + (this.i - num2).ToString("X2") + alm[this.i].ToString("X5");
                                                        ScanRn();
                                                    }
                                                }
                                                this.i++;
                                            }
                                        }
                                        if (CharPar[an1 + 2] == "034 ActionExit")
                                        {
                                            this.i = alm[num + 13] / 4;
                                            g = this.i + h;
                                            int num2 = this.i;
                                            while (this.i < g)
                                            {
                                                if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                                {
                                                    j = alm[this.i] / 4;
                                                    if (alm[j] != 0 && alm[j] != -86052851)
                                                    {
                                                        string text2 = text;
                                                        text = text2 + (i - 1).ToString("X") + "L" + (this.i - num2).ToString("X2") + alm[this.i].ToString("X5");
                                                        ScanRn();
                                                    }
                                                }
                                                this.i++;
                                            }
                                        }
                                    }
                                    h = Convert.ToInt32(rd3, 16);
                                    if (h <= 0 || alm[num + 4] <= 8096 || alm[num + 4] >= tds[25])
                                    {
                                        break;
                                    }
                                    if (alm[num + 6] > 8096 && alm[num + 6] < tds[25])
                                    {
                                        this.i = alm[num + 6] / 4;
                                        g = this.i + h;
                                        int num2 = this.i;
                                        while (this.i < g)
                                        {
                                            if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                            {
                                                j = alm[this.i] / 4;
                                                if (alm[j] != 0 && alm[j] != -86052851)
                                                {
                                                    string text2 = text;
                                                    text = text2 + (i - 1).ToString("X") + "M" + (this.i - num2).ToString("X2") + alm[this.i].ToString("X5");
                                                    ScanRn();
                                                }
                                            }
                                            this.i++;
                                        }
                                    }
                                    if (alm[num + 7] > 8096 && alm[num + 7] < tds[25])
                                    {
                                        this.i = alm[num + 7] / 4;
                                        g = this.i + h;
                                        int num2 = this.i;
                                        while (this.i < g)
                                        {
                                            if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                            {
                                                j = alm[this.i] / 4;
                                                if (alm[j] != 0 && alm[j] != -86052851)
                                                {
                                                    string text2 = text;
                                                    text = text2 + (i - 1).ToString("X") + "N" + (this.i - num2).ToString("X2") + alm[this.i].ToString("X5");
                                                    ScanRn();
                                                }
                                            }
                                            this.i++;
                                        }
                                    }
                                    if (alm[num + 8] > 8096 && alm[num + 8] < tds[25])
                                    {
                                        this.i = alm[num + 8] / 4;
                                        g = this.i + h;
                                        int num2 = this.i;
                                        while (this.i < g)
                                        {
                                            if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                            {
                                                j = alm[this.i] / 4;
                                                if (alm[j] != 0 && alm[j] != -86052851)
                                                {
                                                    string text2 = text;
                                                    text = text2 + (i - 1).ToString("X") + "O" + (this.i - num2).ToString("X2") + alm[this.i].ToString("X5");
                                                    ScanRn();
                                                }
                                            }
                                            this.i++;
                                        }
                                    }
                                    an1 += 2;
                                    while (CharPar[an1] != null && CharPar[an1].Length >= 4)
                                    {
                                        rd2 = CharPar[an1].Substring(0, 3);
                                        fnt = 0;
                                        for (g = 0; g < 3; g++)
                                        {
                                            if (!Uri.IsHexDigit(rd2[g]))
                                            {
                                                fnt = 1;
                                                break;
                                            }
                                        }
                                        if (fnt != 0)
                                        {
                                            break;
                                        }
                                        n = Convert.ToInt32(rd2, 16);
                                        g = alm[num + n / 4];
                                        if (g <= 8096 || g > tds[25])
                                        {
                                            n = 0;
                                        }
                                        if (n % 4 != 0)
                                        {
                                            break;
                                        }
                                        g = CharPar[an1].Length - 1;
                                        fnt = 1;
                                        if (CharPar[an1].Length >= 15)
                                        {
                                            rd4 = CharPar[an1].Substring(4, 10);
                                            if (rd4 == "SubAction ")
                                            {
                                                this.i = alm[num + n / 4] / 4;
                                                g = this.i + h;
                                                int num2 = this.i;
                                                while (this.i < g)
                                                {
                                                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                                    {
                                                        j = alm[this.i] / 4;
                                                        if (alm[j] != 0 && alm[j] != -86052851)
                                                        {
                                                            string text2 = text;
                                                            text = text2 + (i - 1).ToString("X") + "V" + (this.i - num2).ToString("X2") + alm[this.i].ToString("X5");
                                                            ScanRn();
                                                        }
                                                    }
                                                    this.i++;
                                                }
                                            }
                                        }
                                        an1++;
                                    }
                                    break;
                                }
                            }
                            this.i++;
                        }
                    }
                }
                if (alm[dat + 22] >= 8096 && alm[dat + 22] < tds[25])
                {
                    k = alm[dat + 22] / 4 + 2;
                    if (alm[k] >= 8096 && alm[k] < tds[25])
                    {
                        j = alm[k] / 4;
                        if (alm[j] != 0 && alm[j] != -86052851)
                        {
                            text = text + "Y000" + alm[k].ToString("X5");
                            ScanRn();
                        }
                    }
                }
            }
            this.i = 0;
            while (this.i < 10)
            {
                nonam[this.i] = 0;
                this.i++;
            }
            Array.Sort(nonam);
            while (this.i < 512)
            {
                if (nonam[this.i] != 0)
                {
                    j = nonam[this.i] / 4;
                    if (alm[j] != 0 && alm[j] != -86052851)
                    {
                        text = text + "Z000" + nonam[this.i].ToString("X5");
                    }
                }
                this.i++;
            }
            k = text.Length;
            if (k >= 9)
            {
                rd2 = text.Substring(0, 9);
                this.i = 9;
                while (this.i < k)
                {
                    rd1 = text.Substring(this.i + 4, 5);
                    j = 0;
                    while (j < this.i && !(rd1 == text.Substring(j + 4, 5)))
                    {
                        j += 9;
                    }
                    if (j == this.i)
                    {
                        rd2 += text.Substring(this.i, 9);
                    }
                    this.i += 9;
                }
            }
            else
            {
                rd2 = "";
            }
        }

        private void GenUsingDtCommon()
        {
            if (rd2[0] == 'K')
            {
                rd3 = "Action Entry ";
                if (rd2[1] == '0')
                {
                    if (rd2[2] == '0')
                    {
                        rd3 += rd2.Substring(3, 1);
                    }
                    else
                    {
                        rd3 += rd2.Substring(2, 2);
                    }
                }
                else
                {
                    rd3 += rd2.Substring(1, 3);
                }
            }
            else if (rd2[0] == 'L')
            {
                rd3 = "Action Exit ";
                if (rd2[1] == '0')
                {
                    if (rd2[2] == '0')
                    {
                        rd3 += rd2.Substring(3, 1);
                    }
                    else
                    {
                        rd3 += rd2.Substring(2, 2);
                    }
                }
                else
                {
                    rd3 += rd2.Substring(1, 3);
                }
            }
            else if (rd2[0] == 'V')
            {
                rd3 = rd2.Substring(1, 3);
                g = Convert.ToInt32(rd3, 16);
                rd3 = "Sub Routine External " + DataDTList.Items[g].ToString();
            }
            else
            {
                rd3 = "Sub Routine";
            }
            if (rd2[4] == '0')
            {
                rd3 = rd3 + " - Offset:" + rd2.Substring(5);
            }
            else
            {
                rd3 = rd3 + " - Offset:" + rd2.Substring(4);
            }
        }

        private void GenUsingDtNF()
        {
            if (rd2[0] == 'K')
            {
                rd3 = "Special Entry " + rd2.Substring(1, 3);
            }
            else if (rd2[0] == 'L')
            {
                rd3 = "Special Exit " + rd2.Substring(1, 3);
            }
            else if (rd2[0] == 'M')
            {
                rd3 = "SubAction Main ";
                if (rd2[1] == '0')
                {
                    if (rd2[2] == '0')
                    {
                        rd3 += rd2.Substring(3, 1);
                    }
                    else
                    {
                        rd3 += rd2.Substring(2, 2);
                    }
                }
                else
                {
                    rd3 += rd2.Substring(1, 3);
                }
            }
            else if (rd2[0] == 'N')
            {
                rd3 = "SubAction GFX ";
                if (rd2[1] == '0')
                {
                    if (rd2[2] == '0')
                    {
                        rd3 += rd2.Substring(3, 1);
                    }
                    else
                    {
                        rd3 += rd2.Substring(2, 2);
                    }
                }
                else
                {
                    rd3 += rd2.Substring(1, 3);
                }
            }
            else if (rd2[0] == 'O')
            {
                rd3 = "SubAction SFX ";
                if (rd2[1] == '0')
                {
                    if (rd2[2] == '0')
                    {
                        rd3 += rd2.Substring(3, 1);
                    }
                    else
                    {
                        rd3 += rd2.Substring(2, 2);
                    }
                }
                else
                {
                    rd3 += rd2.Substring(1, 3);
                }
            }
            else if (rd2[0] == 'P')
            {
                rd3 = "SubAction Other ";
                if (rd2[1] == '0')
                {
                    if (rd2[2] == '0')
                    {
                        rd3 += rd2.Substring(3, 1);
                    }
                    else
                    {
                        rd3 += rd2.Substring(2, 2);
                    }
                }
                else
                {
                    rd3 += rd2.Substring(1, 3);
                }
            }
            else if (rd2[0] == 'Q')
            {
                rd3 = "SubAction NMain ";
                if (rd2[1] == '0')
                {
                    if (rd2[2] == '0')
                    {
                        rd3 += rd2.Substring(3, 1);
                    }
                    else
                    {
                        rd3 += rd2.Substring(2, 2);
                    }
                }
                else
                {
                    rd3 += rd2.Substring(1, 3);
                }
            }
            else if (rd2[0] == 'R')
            {
                rd3 = "SubAction NGFX ";
                if (rd2[1] == '0')
                {
                    if (rd2[2] == '0')
                    {
                        rd3 += rd2.Substring(3, 1);
                    }
                    else
                    {
                        rd3 += rd2.Substring(2, 2);
                    }
                }
                else
                {
                    rd3 += rd2.Substring(1, 3);
                }
            }
            else if (rd2[0] == 'S')
            {
                rd3 = "SubAction NSFX ";
                if (rd2[1] == '0')
                {
                    if (rd2[2] == '0')
                    {
                        rd3 += rd2.Substring(3, 1);
                    }
                    else
                    {
                        rd3 += rd2.Substring(2, 2);
                    }
                }
                else
                {
                    rd3 += rd2.Substring(1, 3);
                }
            }
            else if (rd2[0] == 'T')
            {
                rd3 = "SubAction NOther ";
                if (rd2[1] == '0')
                {
                    if (rd2[2] == '0')
                    {
                        rd3 += rd2.Substring(3, 1);
                    }
                    else
                    {
                        rd3 += rd2.Substring(2, 2);
                    }
                }
                else
                {
                    rd3 += rd2.Substring(1, 3);
                }
            }
            else if (rd2[0] == 'V')
            {
                rd3 = rd2.Substring(1, 3);
                g = Convert.ToInt32(rd3, 16);
                n = alm[dat + 20] / 4;
                rd3 = "Override Entry " + alm[n + g].ToString("X") + " (No." + g / 2 + ")";
            }
            else if (rd2[0] == 'W')
            {
                rd3 = rd2.Substring(1, 3);
                g = Convert.ToInt32(rd3, 16);
                n = alm[dat + 21] / 4;
                rd3 = "Override Exit " + alm[n + g].ToString("X") + " (No." + g / 2 + ")";
            }
            else if (rd2[0] == 'X')
            {
                rd3 = "ActionPre ";
                if (rd2[1] == '0')
                {
                    if (rd2[2] == '0')
                    {
                        rd3 += rd2.Substring(3, 1);
                    }
                    else
                    {
                        rd3 += rd2.Substring(2, 2);
                    }
                }
                else
                {
                    rd3 += rd2.Substring(1, 3);
                }
            }
            else if (rd2[0] == 'Y')
            {
                rd3 = "ExtraActionInterrupt";
            }
            else if (Uri.IsHexDigit(rd2[0]))
            {
                rd3 = rd2.Substring(0, 1);
                g = Convert.ToInt32(rd3, 16);
                if (rd2[1] == 'K')
                {
                    rd3 = "Article" + ArticleIDCb.Items[g + 1].ToString() + " Action";
                }
                else if (rd2[1] == 'M')
                {
                    rd3 = "Article" + ArticleIDCb.Items[g + 1].ToString() + " Sub Action Main";
                }
                else if (rd2[1] == 'N')
                {
                    rd3 = "Article" + ArticleIDCb.Items[g + 1].ToString() + " Sub Action GFX";
                }
                else if (rd2[1] == 'O')
                {
                    rd3 = "Article" + ArticleIDCb.Items[g + 1].ToString() + " Sub Action SFX";
                }
                else if (rd2[1] == 'L')
                {
                    rd3 = "Article" + ArticleIDCb.Items[g + 1].ToString() + " Action Exit";
                }
                else
                {
                    an1 = 0;
                    rd3 = rd2.Substring(4);
                    j = Convert.ToInt32(rd3, 16);
                    rd3 = rd2.Substring(2, 2);
                    an4 = Convert.ToInt32(rd3, 16);
                    an5 = 1;
                    while (CharPar[an5].Length >= 7)
                    {
                        rd3 = CharPar[an5].Substring(4, 3);
                        if (rd3 == "Art")
                        {
                            an1++;
                            if (an1 == g + 1)
                            {
                                rd3 = CharPar[an5].Substring(4);
                                an1 = 2;
                                while (CharPar[an1] != null && !(CharPar[an1] == rd3))
                                {
                                    an1++;
                                }
                                if (!(CharPar[an1] == rd3))
                                {
                                    break;
                                }
                                rd3 = CharPar[an5].Substring(0, 3);
                                mov = Convert.ToInt32(rd3, 16);
                                an3 = alm[dat + mov / 4] / 4;
                                an1 += 2;
                                while (CharPar[an1] != null && CharPar[an1].Length >= 4)
                                {
                                    rd3 = CharPar[an1].Substring(0, 3);
                                    fnt = 0;
                                    for (mov = 0; mov < 3; mov++)
                                    {
                                        if (!Uri.IsHexDigit(rd3[mov]))
                                        {
                                            fnt = 1;
                                            break;
                                        }
                                    }
                                    if (fnt != 0)
                                    {
                                        break;
                                    }
                                    n = Convert.ToInt32(rd3, 16);
                                    mov = alm[an3 + n / 4];
                                    if (mov <= 8096 || mov > tds[25])
                                    {
                                        n = 1;
                                    }
                                    if (n % 4 != 0)
                                    {
                                        break;
                                    }
                                    mov = CharPar[an1].Length - 1;
                                    if (CharPar[an1].Length >= 17)
                                    {
                                        rd3 = CharPar[an1].Substring(4, 10);
                                        if (rd3 == "SubAction ")
                                        {
                                            mov = alm[an3 + n / 4] / 4;
                                            if (alm[mov + an4] == j)
                                            {
                                                rd3 = "Article" + ArticleIDCb.Items[g + 1].ToString() + " " + CharPar[an1].Substring(4);
                                                break;
                                            }
                                        }
                                    }
                                    an1++;
                                }
                                break;
                            }
                        }
                        an5++;
                    }
                }
                if (rd2[2] == '0')
                {
                    rd3 = rd3 + " " + rd2.Substring(3, 1);
                }
                else
                {
                    rd3 = rd3 + " " + rd2.Substring(2, 2);
                }
            }
            else
            {
                rd3 = "Sub Routine";
            }
            if (rd2[4] == '0')
            {
                rd3 = rd3 + " - Offset:" + rd2.Substring(5);
            }
            else
            {
                rd3 = rd3 + " - Offset:" + rd2.Substring(4);
            }
        }

        private void GenUsingDtFix()
        {
            rmv = i * 4;
            if (alm[i] >= an5 && alm[i] < tds[25])
            {
                mov = 0;
                while (mov < par && asc[mov] != rmv)
                {
                    mov++;
                }
                if (mov >= par)
                {
                    asc[par] = rmv;
                    par++;
                    tds[26]++;
                    an1++;
                }
                if (alm[i] % 4 != 0)
                {
                    rd1 = rd1 + "8" + m.ToString("X5") + "00000000";
                    m++;
                    rmv = -1;
                    return;
                }
                j = alm[i] / 4;
                if (alm[j] == -86052851)
                {
                    rd1 = rd1 + "0" + m.ToString("X5") + "FADEF00D";
                    m++;
                    rmv = -2;
                }
            }
            else
            {
                Delasc();
                if (mov < par)
                {
                    an1++;
                }
                if (alm[i] != 0)
                {
                    rd1 = rd1 + "8" + m.ToString("X5") + "00000000";
                    m++;
                    rmv = -1;
                }
            }
        }

        public MainForm()
        {
            InitializeComponent();
            path = Application.StartupPath;
            ParFW = 317;
            ParFH = 295;
            ChgFW = 217;
            ChgFH = 231;
            ExrFW = 334;
            ExrFH = 270;
            OvrFW = 284;
            OvrFH = 242;
            CurrentSize.Enabled = false;
            EstiMinSize.Enabled = false;
            GenUsingUnkEvDt.Enabled = false;
            GenUsingVarDt.Enabled = false;
            GenBugDatas.Enabled = false;
            Fsave.Enabled = false;
            Qsave.Enabled = false;
            qe = false;
            fnt = 1;
            if (File.Exists(path + "\\Setting"))
            {
                FileStream fileStream = new FileStream(path + "\\Setting", FileMode.Open, FileAccess.Read);
                if ((g = fileStream.ReadByte()) != -1 && (h = fileStream.ReadByte()) != -1 && (j = fileStream.ReadByte()) != -1 && (k = fileStream.ReadByte()) != -1)
                {
                    CmpText.Text = "Setting data found.\r\n";
                    if ((g & 0x80) > 0)
                    {
                        SSEAtrAs.Checked = true;
                    }
                    if ((g & 0x40) > 0)
                    {
                        NameNoneCmp.Checked = true;
                    }
                    if ((g & 0x20) > 0)
                    {
                        EmptyCmp.Checked = true;
                    }
                    if ((g & 0x10) > 0)
                    {
                        SubaAsnameCmp.Checked = true;
                    }
                    if ((g & 8) > 0)
                    {
                        CmpRnData.Checked = true;
                    }
                    if ((g & 4) > 0)
                    {
                        NoEventCmp.Checked = true;
                    }
                    if ((g & 2) > 0)
                    {
                        SameDataCmp.Checked = true;
                    }
                    if ((g & 1) > 0)
                    {
                        SpAllEvCmp.Checked = true;
                    }
                    if ((h & 0x80) > 0)
                    {
                        SubaAllEvCmp.Checked = true;
                    }
                    if ((h & 0x40) > 0)
                    {
                        CmpInRn.Checked = true;
                    }
                    if ((h & 0x20) > 0)
                    {
                        ExternalCmp.Checked = true;
                    }
                    if ((h & 0x10) > 0)
                    {
                        DelPSAData.Checked = true;
                    }
                    if ((h & 8) > 0)
                    {
                        ArtEmptyCmp.Checked = true;
                    }
                    if ((h & 4) > 0)
                    {
                        ArtNoEventCmp.Checked = true;
                    }
                    if ((h & 2) > 0)
                    {
                        ArtAllEvCmp.Checked = true;
                    }
                    if ((h & 1) > 0)
                    {
                        ArtCmpInRn.Checked = true;
                    }
                    if ((j & 0x80) > 0)
                    {
                        EvOffsetInterlock.Checked = true;
                    }
                    if ((j & 0x40) > 0)
                    {
                        ArtHexView.Checked = true;
                    }
                    if ((j & 0x20) > 0)
                    {
                        AnimFlagTxtView.Checked = true;
                    }
                    if ((j & 0x10) > 0)
                    {
                        SettingSaveImportfilename.Checked = true;
                    }
                    if ((j & 8) > 0)
                    {
                        SettingSaveImportlocation.Checked = true;
                    }
                    if ((j & 4) > 0)
                    {
                        ViewEvPlus.Checked = true;
                    }
                    if ((j & 2) > 0)
                    {
                        SettingReadMisc.Checked = true;
                    }
                    if ((j & 1) > 0)
                    {
                        SettingEvTab.Checked = true;
                        ModeChange.SelectedIndex = 1;
                    }
                    if ((k & 0x80) > 0)
                    {
                        AllSameAnim.Checked = true;
                    }
                    if ((k & 0x40) > 0)
                    {
                        AnimAutoSave.Checked = true;
                    }
                    if ((k & 0x30) > 0)
                    {
                        j = (k & 0x30);
                        if (j == 16)
                        {
                            NQS.Checked = true;
                            Qsave.Text = "Quick Save";
                            Qsave.ShortcutKeys = (Keys)131155;
                        }
                        else if (j == 32)
                        {
                            EQS.Checked = true;
                            Qsave.Text = "Quick Save";
                            Qsave.ShortcutKeys = (Keys)131155;
                        }
                        else
                        {
                            Qsave.Text = "Overwrite Save";
                            OWS.Checked = true;
                        }
                    }
                    else
                    {
                        Qsave.Visible = false;
                    }
                    fnt = 0;
                }
                fileStream.Close();
            }
            if (fnt == 1)
            {
                EmptyCmp.Checked = true;
                NoEventCmp.Checked = true;
                ExternalCmp.Checked = true;
                ArtEmptyCmp.Checked = true;
                ArtNoEventCmp.Checked = true;
                EvOffsetInterlock.Checked = true;
                SettingSaveImportfilename.Checked = true;
                ViewEvPlus.Checked = true;
                SettingReadMisc.Checked = true;
                Qsave.Visible = false;
            }
            if (Directory.Exists(path + "\\Data\\"))
            {
                if (File.Exists(path + "\\Data\\Attributes.txt"))
                {
                    i = 0;
                    StreamReader streamReader = new StreamReader(path + "\\Data\\Attributes.txt", Encoding.GetEncoding("UTF-8"));
                    while ((rd1 = streamReader.ReadLine()) != null)
                    {
                        if (rd1.Length >= 2)
                        {
                            AtrEdList.Rows.Add(rd1, "0", "0");
                            if ((rd1 = streamReader.ReadLine()) == null)
                            {
                                i = 0;
                                break;
                            }
                            AtrEtxd[i] = rd1;
                            i++;
                        }
                        if (i > 184)
                        {
                            break;
                        }
                    }
                    streamReader.Close();
                    if (i != 185)
                    {
                        AtrEdList.Rows.Clear();
                        for (i = 0; i < 185; i++)
                        {
                            AtrEtxd[i] = "";
                        }
                        rd2 = "2";
                        CmpText.Text += "Error Reading Attributes.txt\r\n";
                    }
                    else
                    {
                        rd2 = "1";
                    }
                }
                else
                {
                    minitxt.Text = "Attributes";
                    rd2 = "0";
                }
                if (File.Exists(path + "\\Data\\Events.txt"))
                {
                    i = 0;
                    StreamReader streamReader2 = new StreamReader(path + "\\Data\\Events.txt", Encoding.GetEncoding("UTF-8"));
                    while ((rd1 = streamReader2.ReadLine()) != null)
                    {
                        if (rd1.Length < 8)
                        {
                            continue;
                        }
                        for (g = 0; g < 8; g++)
                        {
                            if (!Uri.IsHexDigit(rd1[g]))
                            {
                                g = 99;
                            }
                        }
                        if (g != 8)
                        {
                            continue;
                        }
                        if (rd1.Length > 8)
                        {
                            rd1.Substring(0, 8);
                        }
                        if ((rd3 = streamReader2.ReadLine()) == null)
                        {
                            continue;
                        }
                        EveEtid[i / 4] = Convert.ToInt32(rd1, 16);
                        EveEtxd[i] = rd1;
                        if (rd3 == "")
                        {
                            rd3 = rd1;
                        }
                        EveEtxd[i + 1] = rd3;
                        if ((rd3 = streamReader2.ReadLine()) != null)
                        {
                            if (rd3 == "")
                            {
                                rd3 = "No Description Available.";
                            }
                            EveEtxd[i + 2] = rd3;
                        }
                        else
                        {
                            EveEtxd[i + 2] = "No Description Available.";
                        }
                        if ((rd3 = streamReader2.ReadLine()) != null)
                        {
                            EveEtxd[i + 3] = rd3;
                        }
                        else
                        {
                            EveEtxd[i + 3] = "";
                        }
                        i += 4;
                        if (i >= 2000)
                        {
                            break;
                        }
                    }
                    streamReader2.Close();
                    rd2 += "1";
                }
                else
                {
                    if (minitxt.Text != "")
                    {
                        minitxt.Text += ",";
                    }
                    minitxt.Text += "EventsListView";
                    rd2 += "0";
                }
                if (File.Exists(path + "\\Data\\EventListView.txt"))
                {
                    i = 0;
                    StreamReader streamReader2 = new StreamReader(path + "\\Data\\EventListView.txt", Encoding.GetEncoding("UTF-8"));
                    while ((rd1 = streamReader2.ReadLine()) != null)
                    {
                        if (rd1.Length < 8)
                        {
                            continue;
                        }
                        for (g = 0; g < 8; g++)
                        {
                            if (!Uri.IsHexDigit(rd1[g]))
                            {
                                g = 99;
                            }
                        }
                        if (g != 8)
                        {
                            continue;
                        }
                        if (rd1.Length > 8)
                        {
                            rd1.Substring(0, 8);
                        }
                        ElvEtid[i] = Convert.ToInt32(rd1, 16);
                        if ((rd1 = streamReader2.ReadLine()) != null)
                        {
                            fnt = 2;
                            if (rd1.Length == 1)
                            {
                                if (rd1[0] == '1' || rd1[0] == 'C' || rd1[0] == 'V')
                                {
                                    rd3 = rd1 + "x";
                                    if (rd1[0] == 'V')
                                    {
                                        fnt = 1;
                                    }
                                    else
                                    {
                                        fnt = 0;
                                    }
                                }
                            }
                            else if (rd1.Length >= 2 && rd1[0] == '0' && (rd1[1] == '1' || rd1[1] == 'C' || rd1[1] == 'V'))
                            {
                                if (rd1.Length > 2)
                                {
                                    rd1.Substring(0, 2);
                                }
                                rd3 = rd1;
                                if (rd1[1] == 'V')
                                {
                                    fnt = 1;
                                }
                                else
                                {
                                    fnt = 0;
                                }
                            }
                            if ((rd1 = streamReader2.ReadLine()) != null)
                            {
                                if (rd1 != "")
                                {
                                    rd3 += rd1;
                                    if (fnt == 1)
                                    {
                                        if (rd1.Length > 9)
                                        {
                                            rd3 += "\r\n";
                                            while ((rd1 = streamReader2.ReadLine()) != null && rd1.Length >= 10)
                                            {
                                                rd3 = rd3 + rd1 + "\r\n";
                                            }
                                            ElvEtxd[i] = rd3;
                                        }
                                        else
                                        {
                                            fnt = 2;
                                        }
                                    }
                                    else
                                    {
                                        ElvEtxd[i] = rd3;
                                    }
                                }
                                else
                                {
                                    fnt = 2;
                                }
                            }
                            else
                            {
                                fnt = 2;
                            }
                            if (fnt != 2)
                            {
                                i++;
                            }
                            else
                            {
                                ElvEtid[i] = 0;
                            }
                        }
                        if (i >= 999)
                        {
                            break;
                        }
                    }
                    streamReader2.Close();
                    rd2 += "1";
                }
                else
                {
                    if (minitxt.Text != "")
                    {
                        minitxt.Text += ",";
                    }
                    minitxt.Text += "Events";
                    rd2 += "0";
                }
                if (File.Exists(path + "\\Data\\Parameters.txt"))
                {
                    i = 0;
                    StreamReader streamReader3 = new StreamReader(path + "\\Data\\Parameters.txt", Encoding.GetEncoding("UTF-8"));
                    while ((rd1 = streamReader3.ReadLine()) != null)
                    {
                        if (rd1.Length < 8)
                        {
                            continue;
                        }
                        for (g = 0; g < 8; g++)
                        {
                            if (!Uri.IsHexDigit(rd1[g]))
                            {
                                g = 99;
                            }
                        }
                        if (g != 8)
                        {
                            continue;
                        }
                        if (rd1.Length > 8)
                        {
                            rd1.Substring(0, 8);
                        }
                        ParEtid[i] = Convert.ToInt32(rd1, 16);
                        if ((rd1 = streamReader3.ReadLine()) != null && (rd3 = streamReader3.ReadLine()) != null && rd1 != "" && rd3 != "")
                        {
                            ParEtxd[i] = rd1 + "\r\n" + rd3 + "\r\n";
                            while ((rd1 = streamReader3.ReadLine()) != null && !(rd1 == ""))
                            {
                                string[] parEtxd;
                                string[] array = parEtxd = ParEtxd;
                                int num = i;
                                IntPtr intPtr = (IntPtr)num;
                                array[num] = parEtxd[(long)intPtr] + rd1 + "\r\n";
                            }
                            i++;
                            if (i >= 999)
                            {
                                break;
                            }
                        }
                    }
                    ParEtxd[i] = "";
                    streamReader3.Close();
                    rd2 += "1";
                }
                else
                {
                    if (minitxt.Text != "")
                    {
                        minitxt.Text += ",";
                    }
                    minitxt.Text += "Parameters";
                    rd2 += "0";
                }
                if (File.Exists(path + "\\Data\\Requirements.txt"))
                {
                    i = 0;
                    StreamReader streamReader4 = new StreamReader(path + "\\Data\\Requirements.txt", Encoding.GetEncoding("UTF-8"));
                    while ((rd1 = streamReader4.ReadLine()) != null)
                    {
                        if (rd1 != "")
                        {
                            ReqEtxd[i] = rd1;
                            i++;
                        }
                        if (i >= 151)
                        {
                            break;
                        }
                    }
                    streamReader4.Close();
                    if (i == 151)
                    {
                        rd2 += "1";
                    }
                    else
                    {
                        rd2 += "2";
                        if (minitxt.Text != "")
                        {
                            minitxt.Text += ",";
                        }
                        CmpText.Text += "Error Reading Requirements.txt\r\n";
                    }
                }
                else
                {
                    if (minitxt.Text != "")
                    {
                        minitxt.Text += ",";
                    }
                    minitxt.Text += "Requirements";
                    rd2 += "0";
                }
                if (rd2 != "11111")
                {
                    if (rd2 == "00000")
                    {
                        minitxt.Text = "No readable text file found.";
                    }
                    else
                    {
                        g = rd2.Length;
                        for (i = 0; i < g; i++)
                        {
                            if (rd2[i] == '0')
                            {
                                minitxt.Text += " file not found.";
                                break;
                            }
                        }
                    }
                }
            }
            else
            {
                minitxt.Text = "Data Directory not found.";
                rd2 = "00000";
            }
            if (rd2[0] != '1')
            {
                for (i = 0; i < 740; i += 4)
                {
                    if (i == 40 || i == 48 || i == 96 || i == 140 || i == 232 || i == 236 || i == 240 || i == 340 || i == 344 || i == 372 || i == 384 || i == 388 || i == 424 || i == 432 || i == 440 || i == 444 || i == 452 || i == 460 || i == 464 || i == 468 || i == 472 || i == 480 || i == 544 || i == 564 || i == 652 || i == 656 || i == 660 || i == 668 || i >= 704)
                    {
                        rd1 = "*0x" + i.ToString("X3");
                    }
                    else
                    {
                        rd1 = "0x" + i.ToString("X3");
                    }
                    AtrEdList.Rows.Add(rd1, "0", "0");
                }
            }
            if (rd2[4] != '1')
            {
                for (i = 0; i <= 127; i++)
                {
                    ReqEtxd[i] = i.ToString("X2");
                }
                for (n = 9999; n <= 10021; n++)
                {
                    ReqEtxd[i] = n.ToString("X");
                    i++;
                }
            }
            EvRnGenDatCbList.Items.Add("History");
            EvRnGenDatCbList.Items.Add("Extract Sub Routines (in Events)");
            EvRnGenDatCbList.Items.Add("Extract All Sub Routines (in Events)");
            EvRnGenDatCbList.Items.Add("Extract Sub Routines (in Articles)");
            EvRnGenDatCbList.Items.Add("Extract Sub Routines");
            EvRnGenDatCbList.Items.Add("Extract All Sub Routines");
            EvRnGenDatCbList.Items.Add("Extract Data that hinder Compress");
            EvRnGenDatCbList.Items.Add("Search Partial Match / Replace");
            EvRnGenDatCbList.SelectedIndex = 0;
            ArtParOffOpenSize.Items.Add("<Select Size>");
            for (i = 4; i < 81; i += 4)
            {
                ArtParOffOpenSize.Items.Add("Size=0x" + i.ToString("X"));
            }
            ArtParOffOpenSize.SelectedIndex = 0;
            DMiscParam.Columns.Add("List");
            DMiscParam.Columns.Add("Data");
            DMiscParam.Columns[0].Width = 135;
            DMiscParam.Columns[1].Width = 128;
        }

        private void MainForm_DragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(DataFormats.FileDrop))
            {
                e.Effect = DragDropEffects.All;
            }
            else
            {
                e.Effect = DragDropEffects.None;
            }
        }

        private void MainForm_DragDrop(object sender, DragEventArgs e)
        {
            string[] array = (string[])e.Data.GetData(DataFormats.FileDrop, autoConvert: false);
            FileStream fileStream = new FileStream(array[0], FileMode.Open, FileAccess.Read);
            long num = fileStream.Length;
            if (num >= 24000)
            {
                g = fileStream.ReadByte();
                h = fileStream.ReadByte();
                i = fileStream.ReadByte();
                j = fileStream.ReadByte();
                n = j + (i << 8) + (h << 16) + (g << 24);
                if (n != 1095910144)
                {
                    num = 0L;
                }
            }
            if (num <= 593920 && num >= 50000)
            {
                editFilePath = array[0];
                for (k = 1; k < 32; k++)
                {
                    g = fileStream.ReadByte();
                    h = fileStream.ReadByte();
                    i = fileStream.ReadByte();
                    j = fileStream.ReadByte();
                    tds[k] = j + (i << 8) + (h << 16) + (g << 24);
                }
                tds[0] = n;
                i = 0;
                j = 0;
                while ((g = fileStream.ReadByte()) != -1)
                {
                    if (i >= 3)
                    {
                        alm[j] = g + (nonam[2] << 8) + (nonam[1] << 16) + (nonam[0] << 24);
                        i = 0;
                        j++;
                    }
                    else
                    {
                        nonam[i] = g;
                        i++;
                    }
                }
                fileStream.Close();
                PacFileOpens();
            }
            else
            {
                minitxt.Text = "This file cannot be read.";
                fileStream.Close();
            }
        }

        /// <summary>
        /// Opens PAC moveset file after selecting the file
        /// File > Open in file menu
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		private void OpenpacFile_FileOk(object sender, CancelEventArgs e)
        {
            // name of PAC moveset file selected
            rd1 = OpenpacFile.FileName;

            // read in PAC moveset file as stream
            FileStream fileStream = new FileStream(rd1, FileMode.Open, FileAccess.Read);

            // length of stream in bytes
            long num = fileStream.Length;

            // Pretty sure this confirms that the file is a moveset file based on the first four bytes in the file
            // A unique byte sequence identifier maybe?
            if (num >= 24000)
            {
                // if n does not end up as 1095910144, it sets the length of the value of num to 0
                // which means the next if statement will not evaluate and instead the file will not be able to be read
                g = fileStream.ReadByte();
                h = fileStream.ReadByte();
                i = fileStream.ReadByte();
                j = fileStream.ReadByte();
                // converts bytes in g, h, i, and j to base ten number
                n = j + (i << 8) + (h << 16) + (g << 24);
                if (n != 1095910144)
                {
                    num = 0L;
                }
            }
            // ensures length of PAC moveset file is valid
            // I guess it won't read in anything over 593920 bytes.
            // Why?
            // Mortimers says 593..92 is the limit for moveset files in PM
            // why oh why is this limit set in a moveset editing application, talk about unscalable
            if (num <= 593920 && num >= 50000)
            {
                // set to name of moveset PAC file
                editFilePath = rd1;

                // sets of four bytes are converted to a base 10 number and stored in array tds from indexes 1-32
                // index 0 of tds contains the value from n previously (the first four bytes in file converted to base 10 number)
                for (k = 1; k < 32; k++)
                {
                    g = fileStream.ReadByte();
                    h = fileStream.ReadByte();
                    i = fileStream.ReadByte();
                    j = fileStream.ReadByte();
                    tds[k] = j + (i << 8) + (h << 16) + (g << 24);
                }
                tds[0] = n;
                i = 0;
                j = 0;

                // loops through each byte of the rest of the moveset file
                while ((g = fileStream.ReadByte()) != -1)
                {
                    // nonam array indexes 0 - 3 are populated with the file's next four bytes
                    // then, array alm's next index is set to the base ten number of those four bytes
                    // then the cycle continues as it reads in the entire file
                    if (i >= 3)
                    {
                        alm[j] = g + (nonam[2] << 8) + (nonam[1] << 16) + (nonam[0] << 24);
                        i = 0;
                        j++;
                    }
                    else
                    {
                        nonam[i] = g;
                        i++;
                    }
                }

                fileStream.Close();

                /*
                 * going into this method:
                 * tds is the first 32 four set of bytes in the file as base 10 numbers
                 * alm is the rest of the file after tds
                 * j is equal to the number of indexes used in alm (alm array has a limit)
                 */
                PacFileOpens();
            }
            // if not valid moveset file (length of file in bytes is not the proper length)
            else
            {
                minitxt.Text = "This file cannot be read.";
                fileStream.Close();
            }
        }

        private void SavepacFile_FileOk(object sender, CancelEventArgs e)
        {
            Fsave.Enabled = false;
            Fopen.Enabled = false;
            Qsave.Enabled = false;
            editFilePath = SavepacFile.FileName;
            if (tds[24] % 4 == 0)
            {
                n = tds[24] / 4;
            }
            else
            {
                n = (tds[24] + 3) / 4;
            }
            n -= 8;
            FileStream fileStream = new FileStream(editFilePath, FileMode.Create, FileAccess.Write);
            for (i = 0; i < 32; i++)
            {
                fnt = (byte)((tds[i] >> 24) & 0xFF);
                fileStream.WriteByte(fnt);
                fnt = (byte)((tds[i] >> 16) & 0xFF);
                fileStream.WriteByte(fnt);
                fnt = (byte)((tds[i] >> 8) & 0xFF);
                fileStream.WriteByte(fnt);
                fnt = (byte)(tds[i] & 0xFF);
                fileStream.WriteByte(fnt);
            }
            for (i = 0; i < n; i++)
            {
                fnt = (byte)((alm[i] >> 24) & 0xFF);
                fileStream.WriteByte(fnt);
                fnt = (byte)((alm[i] >> 16) & 0xFF);
                fileStream.WriteByte(fnt);
                fnt = (byte)((alm[i] >> 8) & 0xFF);
                fileStream.WriteByte(fnt);
                fnt = (byte)(alm[i] & 0xFF);
                fileStream.WriteByte(fnt);
            }
            if (n % 8 != 0)
            {
                j = 8 - n % 8;
                fnt = 0;
                for (i = 0; i < j; i++)
                {
                    fileStream.WriteByte(fnt);
                    fileStream.WriteByte(fnt);
                    fileStream.WriteByte(fnt);
                    fileStream.WriteByte(fnt);
                }
            }
            for (i = 148448 - efdts; i < 148448; i++)
            {
                fnt = (byte)((alm[i] >> 24) & 0xFF);
                fileStream.WriteByte(fnt);
                fnt = (byte)((alm[i] >> 16) & 0xFF);
                fileStream.WriteByte(fnt);
                fnt = (byte)((alm[i] >> 8) & 0xFF);
                fileStream.WriteByte(fnt);
                fnt = (byte)(alm[i] & 0xFF);
                fileStream.WriteByte(fnt);
            }
            fileStream.Close();
            for (k = editFilePath.Length - 2; k > 0; k--)
            {
                if (editFilePath[k] == '\\')
                {
                    rd1 = editFilePath.Substring(k + 1);
                    Text = "PSA Compressor - " + rd1;
                    break;
                }
            }
            Fsave.Enabled = true;
            Fopen.Enabled = true;
        }

        private void Fopen_Click(object sender, EventArgs e)
        {
            OpenpacFile.ShowDialog(this);
        }

        private void Fsave_Click(object sender, EventArgs e)
        {
            if (EvSubaCbList.Items.Count >= 4 && AnimAutoSave.Checked && EvSubaAnim.Text != rdn)
            {
                EvSubaAnim.Enabled = false;
                EvSubaAnimFlag.Enabled = false;
                k = alm[dat] / 4 + sid * 2;
                rd1 = EvSubaAnim.Text;
                if (rd1 != "<ERROR>")
                {
                    SubaRename();
                    rdn = rd1;
                }
                EvSubaAnim.Enabled = true;
                EvSubaAnimFlag.Enabled = true;
            }
            if (SettingSaveImportlocation.Checked)
            {
                for (k = editFilePath.Length - 2; k > 0; k--)
                {
                    if (editFilePath[k] == '\\')
                    {
                        SavepacFile.InitialDirectory = editFilePath.Substring(0, k);
                        break;
                    }
                }
            }
            if (SettingSaveImportfilename.Checked)
            {
                for (k = editFilePath.Length - 2; k > 0; k--)
                {
                    if (editFilePath[k] == '\\')
                    {
                        SavepacFile.FileName = editFilePath.Substring(k + 1);
                        break;
                    }
                }
            }
            else
            {
                SavepacFile.FileName = pacname.Text;
            }
            SavepacFile.ShowDialog(this);
        }

        private void Qsave_Click(object sender, EventArgs e)
        {
            if (EvSubaCbList.Items.Count < 4)
            {
                minitxt.Text = "invalid Command.";
                Qsave.Enabled = false;
                return;
            }
            if (AnimAutoSave.Checked && EvSubaAnim.Text != rdn)
            {
                EvSubaAnim.Enabled = false;
                EvSubaAnimFlag.Enabled = false;
                k = alm[dat] / 4 + sid * 2;
                rd1 = EvSubaAnim.Text;
                if (rd1 != "<ERROR>")
                {
                    SubaRename();
                }
                rdn = rd1;
                EvSubaAnim.Enabled = true;
                EvSubaAnimFlag.Enabled = true;
            }
            if (NQS.Checked)
            {
                k = editFilePath.Length - 2;
                while (true)
                {
                    if (k > 0)
                    {
                        if (editFilePath[k] == '\\')
                        {
                            break;
                        }
                        k--;
                        continue;
                    }
                    return;
                }
                rd3 = editFilePath.Substring(0, k);
                if (Directory.Exists(rd3))
                {
                    rd3 += "\\";
                    rd2 = editFilePath.Substring(k + 1);
                    QSG();
                    while (i < 1001)
                    {
                        if (!File.Exists(rd1 + i + ").pac"))
                        {
                            rd1 = rd1 + i + ").pac";
                            QS();
                            break;
                        }
                        i++;
                    }
                    if (i == 1001)
                    {
                        minitxt.Text = "Failed to Save.";
                    }
                    return;
                }
                if (!Directory.Exists(path + "\\Export"))
                {
                    Directory.CreateDirectory(path + "\\Export");
                }
                rd2 = editFilePath.Substring(k + 1);
                rd3 = path + "\\Export\\";
                QSG();
                while (i < 1001)
                {
                    if (!File.Exists(rd1 + i + ").pac"))
                    {
                        rd1 = rd1 + i + ").pac";
                        QS();
                        minitxt.Text = "Save Finished in Export Directory.";
                        break;
                    }
                    i++;
                }
                if (i == 1001)
                {
                    minitxt.Text = "Failed to Save.";
                }
            }
            else if (EQS.Checked)
            {
                k = editFilePath.Length - 2;
                while (true)
                {
                    if (k > 0)
                    {
                        if (editFilePath[k] == '\\')
                        {
                            break;
                        }
                        k--;
                        continue;
                    }
                    return;
                }
                if (!Directory.Exists(path + "\\Export"))
                {
                    Directory.CreateDirectory(path + "\\Export");
                }
                rd3 = path + "\\Export\\";
                rd2 = editFilePath.Substring(k + 1);
                QSG();
                while (i < 1001)
                {
                    if (!File.Exists(rd1 + i + ").pac"))
                    {
                        rd1 = rd1 + i + ").pac";
                        QS();
                        break;
                    }
                    i++;
                }
                if (i == 1001)
                {
                    minitxt.Text = "Failed to Save.";
                }
            }
            else if (OWS.Checked)
            {
                rd1 = editFilePath;
                QS();
            }
            else
            {
                minitxt.Text = "invalid Command.";
                Qsave.Enabled = false;
            }
        }

        private void Exitapps_Click(object sender, EventArgs e)
        {
            if (!CmpStart.Enabled)
            {
                Close();
            }
            else if (MessageBox.Show("Are you sure you want to Exit?", "PSA Compressor", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                Close();
            }
        }

        private void Settingdatasave_Click(object sender, EventArgs e)
        {
            FileStream fileStream = new FileStream(path + "\\Setting", FileMode.Create, FileAccess.Write);
            if (SSEAtrAs.Checked)
            {
                fnt = 128;
            }
            else
            {
                fnt = 0;
            }
            if (NameNoneCmp.Checked)
            {
                fnt += 64;
            }
            if (EmptyCmp.Checked)
            {
                fnt += 32;
            }
            if (SubaAsnameCmp.Checked)
            {
                fnt += 16;
            }
            if (CmpRnData.Checked)
            {
                fnt += 8;
            }
            if (NoEventCmp.Checked)
            {
                fnt += 4;
            }
            if (SameDataCmp.Checked)
            {
                fnt += 2;
            }
            if (SpAllEvCmp.Checked)
            {
                fnt++;
            }
            fileStream.WriteByte(fnt);
            if (SubaAllEvCmp.Checked)
            {
                fnt = 128;
            }
            else
            {
                fnt = 0;
            }
            if (CmpInRn.Checked)
            {
                fnt += 64;
            }
            if (ExternalCmp.Checked)
            {
                fnt += 32;
            }
            if (DelPSAData.Checked)
            {
                fnt += 16;
            }
            if (ArtEmptyCmp.Checked)
            {
                fnt += 8;
            }
            if (ArtNoEventCmp.Checked)
            {
                fnt += 4;
            }
            if (ArtAllEvCmp.Checked)
            {
                fnt += 2;
            }
            if (ArtCmpInRn.Checked)
            {
                fnt++;
            }
            fileStream.WriteByte(fnt);
            if (EvOffsetInterlock.Checked)
            {
                fnt = 128;
            }
            else
            {
                fnt = 0;
            }
            if (ArtHexView.Checked)
            {
                fnt += 64;
            }
            if (AnimFlagTxtView.Checked)
            {
                fnt += 32;
            }
            if (SettingSaveImportfilename.Checked)
            {
                fnt += 16;
            }
            if (SettingSaveImportlocation.Checked)
            {
                fnt += 8;
            }
            if (ViewEvPlus.Checked)
            {
                fnt += 4;
            }
            if (SettingReadMisc.Checked)
            {
                fnt += 2;
            }
            if (SettingEvTab.Checked)
            {
                fnt++;
            }
            fileStream.WriteByte(fnt);
            if (NQS.Checked)
            {
                fnt = 16;
            }
            else if (EQS.Checked)
            {
                fnt = 32;
            }
            else if (OWS.Checked)
            {
                fnt = 48;
            }
            else
            {
                fnt = 0;
            }
            if (AllSameAnim.Checked)
            {
                fnt += 128;
            }
            if (AnimAutoSave.Checked)
            {
                fnt += 64;
            }
            fileStream.WriteByte(fnt);
            fileStream.Close();
            minitxt.Text = "Setting Saved.";
        }

        private void NQS_Click(object sender, EventArgs e)
        {
            if (NQS.Checked)
            {
                NQS.Checked = false;
                Qsave.Enabled = false;
                Qsave.Visible = false;
                qe = false;
                Qsave.Text = "QS";
                Qsave.ShortcutKeys = Keys.None;
                return;
            }
            NQS.Checked = true;
            EQS.Checked = false;
            OWS.Checked = false;
            Qsave.Text = "Quick Save";
            Qsave.Visible = true;
            Qsave.ShortcutKeys = (Keys)131155;
            if (EvSubaCbList.Items.Count >= 4)
            {
                qe = true;
                Qsave.Enabled = true;
            }
        }

        private void EQS_Click(object sender, EventArgs e)
        {
            if (EQS.Checked)
            {
                EQS.Checked = false;
                Qsave.Enabled = false;
                Qsave.Visible = false;
                qe = false;
                Qsave.Text = "QS";
                Qsave.ShortcutKeys = Keys.None;
                return;
            }
            NQS.Checked = false;
            EQS.Checked = true;
            OWS.Checked = false;
            Qsave.Text = "Quick Save";
            Qsave.Visible = true;
            Qsave.ShortcutKeys = (Keys)131155;
            if (EvSubaCbList.Items.Count >= 4)
            {
                qe = true;
                Qsave.Enabled = true;
            }
        }

        private void OWS_Click(object sender, EventArgs e)
        {
            if (OWS.Checked)
            {
                OWS.Checked = false;
                Qsave.Visible = false;
                Qsave.Enabled = false;
                qe = false;
                Qsave.Text = "QS";
                Qsave.ShortcutKeys = Keys.None;
                return;
            }
            NQS.Checked = false;
            EQS.Checked = false;
            OWS.Checked = true;
            Qsave.Text = "Overwrite Save";
            Qsave.Visible = true;
            Qsave.ShortcutKeys = Keys.None;
            if (EvSubaCbList.Items.Count >= 4)
            {
                qe = true;
                Qsave.Enabled = true;
            }
        }

        private void AboutVersion_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Version: 0.37c", "PSA Compressor");
        }

        private void CurrentSize_Click(object sender, EventArgs e)
        {
            n = (tds[24] + 3) / 4;
            if (n % 8 != 0)
            {
                i = 8 - n % 8;
                n += i;
            }
            n += 24 + efdts;
            minitxt.Text = "Current MovesetSize=0x" + tds[24].ToString("X") + ",TotalSize: 0x" + (n * 4).ToString("X");
        }

        private void EstiMinSize_Click(object sender, EventArgs e)
        {
            g = 0;
            for (i = stf; i < md; i++)
            {
                if (alm[i] == -86052851)
                {
                    g++;
                }
            }
            n = (tds[24] + 3) / 4 - g;
            if (n % 8 != 0)
            {
                i = 8 - n % 8;
                n += i;
            }
            n += 24 + efdts;
            minitxt.Text = "MAX Compressed File Size: 0x" + (n * 4).ToString("X") + " (-0x" + (g * 4).ToString("X") + ")";
        }

        private void CmpStart_Click(object sender, EventArgs e)
        {
            ModeChange.Enabled = false;
            AllEnableChange();
            CmpText.Text = "<Before Compression>\r\n";
            TextBox cmpText = CmpText;
            cmpText.Text = cmpText.Text + "Moveset size=0x" + tds[24].ToString("X") + "\r\n\r\n";
            if (EvSubaCbList.Items.Count >= 4)
            {
                g = alm[dat + 8] / 4;
                if (g >= stf && g < md)
                {
                    m = alm[g];
                    n = alm[g] + alm[g + 1] * 4;
                }
                else
                {
                    m = 0;
                    n = 0;
                }
                k = alm[dat + 11] + 1095 + spas * 4;
                g = 0;
                for (i = 0; i < tds[28]; i++)
                {
                    h = rnext[(tds[27] + i) * 2];
                    if (h % 4 != 0)
                    {
                        if (h != -1)
                        {
                            rnext[(tds[27] + i) * 2] = -1;
                            g++;
                        }
                    }
                    else if (h >= 8096 && h < tds[25])
                    {
                        j = h / 4;
                        if (alm[j] >= 8096 && alm[j] < tds[25])
                        {
                            for (an5 = 0; an5 < 100; an5++)
                            {
                                an1 = alm[j];
                                an2 = j;
                                if (an1 >= 8096 && an1 < tds[25] && an1 % 4 == 0)
                                {
                                    j = an1 / 4;
                                    if (alm[j - 1] != 2 && (an1 < alm[dat + 11] || an1 > k) && (an1 < m || an1 > n))
                                    {
                                        alm[an2] = -1;
                                        g++;
                                        break;
                                    }
                                }
                                else if (alm[j] != -1)
                                {
                                    alm[j] = -1;
                                    g++;
                                    break;
                                }
                            }
                        }
                        else if (alm[j - 1] != 2 && (h < alm[dat + 11] || h > k) && (h < m || h > n))
                        {
                            rnext[(tds[27] + i) * 2] = -1;
                            g++;
                        }
                    }
                }
                if (g > 0)
                {
                    TextBox cmpText2 = CmpText;
                    cmpText2.Text = cmpText2.Text + "Fixed " + g + " External Data.\r\n";
                }
                if (SSEAtrAs.Checked)
                {
                    for (i = 0; i < 185; i++)
                    {
                        alm[i + 185] = alm[i];
                    }
                    AtrEdList.Enabled = false;
                    if (AtrHexView.Checked)
                    {
                        for (i = 0; i < 185; i++)
                        {
                            AtrEdList[2, i].Value = alm[i + 185].ToString("X");
                        }
                    }
                    else
                    {
                        for (i = 0; i < 185; i++)
                        {
                            rd1 = AtrEdList[0, i].Value.ToString();
                            if (rd1[0] == '*')
                            {
                                AtrEdList[2, i].Value = alm[i + 185].ToString();
                            }
                            else
                            {
                                bitf = BitConverter.GetBytes(alm[i + 185]);
                                rdfr = BitConverter.ToSingle(bitf, 0);
                                AtrEdList[2, i].Value = rdfr.ToString();
                            }
                        }
                    }
                    AtrEdList.Enabled = true;
                    CmpText.Text += "Changed SSE Attributes to the same value as Attributes.\r\n";
                }
                if (NameNoneCmp.Checked)
                {
                    j = 0;
                    for (i = stf; i < md; i++)
                    {
                        if (alm[i] == 1313820229 && (alm[i + 1] == 0 || alm[i + 1] == 14610445))
                        {
                            if (j > 500)
                            {
                                CmpText.Text += "ERROR : There is too much NONE.\r\n";
                                break;
                            }
                            nonam[j] = i;
                            j++;
                        }
                    }
                    if (j == 0)
                    {
                        CmpText.Text += "NONE not found.\r\n";
                    }
                    else
                    {
                        TextBox cmpText3 = CmpText;
                        cmpText3.Text = cmpText3.Text + "found " + j + " NONE.\r\n";
                        for (i = 0; i < j; i++)
                        {
                            h = 0;
                            alm[nonam[i]] = -86052851;
                            alm[nonam[i] + 1] = -86052851;
                            n = nonam[i] * 4;
                            for (k = stf; k < md - 1; k++)
                            {
                                if (alm[k] == n)
                                {
                                    h++;
                                    alm[k] = 0;
                                    rmv = k * 4;
                                    Delasc();
                                }
                            }
                            if (h == 0)
                            {
                                CmpText.Text += "found Unused NONE.\r\n";
                            }
                        }
                    }
                    if (EvSubaAnim.Text == "NONE")
                    {
                        EvSubaAnim.Text = "<null>";
                    }
                }
                if (EmptyCmp.Checked)
                {
                    k = alm[dat + 9] / 4;
                    g = k + spas * 2;
                    h = md - 1;
                    DelEmptyData();
                    k = alm[dat + 12] / 4;
                    g = k + suba * 4;
                    h = md - 1;
                    DelEmptyData();
                    if (EvSubaCbList.Items.Count > 7)
                    {
                        k = alm[dat + 31] / 4;
                        g = k + suba * 4;
                        DelEmptyData();
                    }
                }
                if (SubaAsnameCmp.Checked)
                {
                    an2 = alm[dat] / 4;
                    for (i = snstr; i < an2; i++)
                    {
                        if ((alm[i] & 4278190080u) != 0 && alm[i] != -86052851)
                        {
                            for (j = 0; j < 80; j++)
                            {
                                nonam[j] = alm[i + j];
                                if ((nonam[j] & 0xFF) < 15)
                                {
                                    break;
                                }
                            }
                            m = 2024;
                            while (m < md && alm[m] != i * 4)
                            {
                                m++;
                            }
                            if (m > md - 1)
                            {
                                for (n = 0; n <= j; n++)
                                {
                                    alm[i + n] = -86052851;
                                }
                            }
                            i += j;
                        }
                    }
                    k = an2 + suba * 2;
                    for (i = an2 + 1; i < k; i += 2)
                    {
                        if (alm[i] >= 8096 && alm[i] < tds[25])
                        {
                            g = alm[i] / 4;
                            for (j = 0; j < 80; j++)
                            {
                                nonam[j] = alm[g + j];
                                if ((nonam[j] & 0xFF) < 15)
                                {
                                    if ((nonam[j] & 4278190080u) == 0)
                                    {
                                        n = 1;
                                        if ((nonam[j] & 0xFFFFFF) == 14610445)
                                        {
                                            nonam[j] -= 14610445;
                                        }
                                    }
                                    else if ((nonam[j] & 0xFF0000) == 0)
                                    {
                                        n = 2;
                                        if ((nonam[j] & 0xFFFF) == 61453)
                                        {
                                            nonam[j] -= 61453;
                                        }
                                    }
                                    else if ((nonam[j] & 0xFF00) == 0)
                                    {
                                        n = 3;
                                        if ((nonam[j] & 0xFF) == 13)
                                        {
                                            nonam[j] -= 13;
                                        }
                                    }
                                    else
                                    {
                                        n = 0;
                                    }
                                    break;
                                }
                            }
                            h = 0;
                            for (m = snstr; m < an2; m++)
                            {
                                if (alm[m] == nonam[0] && m != g && ((alm[m - 1] & 0xFF) < 15 || (alm[m - 1] & 4293918720u) == 0))
                                {
                                    if (j == 0)
                                    {
                                        h = 1;
                                        break;
                                    }
                                    for (an3 = 1; an3 <= j; an3++)
                                    {
                                        if (an3 == j)
                                        {
                                            if (alm[m + j] == nonam[j])
                                            {
                                                h = 1;
                                                break;
                                            }
                                            if (n == 1 && alm[m + j] == nonam[j] + 14610445)
                                            {
                                                h = 1;
                                                break;
                                            }
                                            if (n == 2 && alm[m + j] == nonam[j] + 61453)
                                            {
                                                h = 1;
                                                break;
                                            }
                                            if (n == 3 && alm[m + j] == nonam[j] + 13)
                                            {
                                                h = 1;
                                                break;
                                            }
                                        }
                                        else if (alm[m + an3] != nonam[an3])
                                        {
                                            break;
                                        }
                                    }
                                    if (h == 1)
                                    {
                                        break;
                                    }
                                }
                            }
                            if (h != 1)
                            {
                                if (g >= snstr && g < an2)
                                {
                                    h = 3;
                                }
                                else
                                {
                                    for (m = snstr; m < an2; m++)
                                    {
                                        if ((alm[m] == 0 || alm[m] == -86052851) && (alm[m - 1] & 0xFF) < 15)
                                        {
                                            if (j != 0)
                                            {
                                                an3 = 0;
                                                while (an3 <= j && (alm[m + an3] == 0 || alm[m + an3] == -86052851))
                                                {
                                                    if (an3 == j)
                                                    {
                                                        h = 2;
                                                    }
                                                    an3++;
                                                }
                                            }
                                            else
                                            {
                                                h = 2;
                                            }
                                        }
                                        if (h == 2)
                                        {
                                            break;
                                        }
                                    }
                                    if (h == 0)
                                    {
                                        for (m = stf; m < md; m++)
                                        {
                                            if (alm[m] == nonam[0] && m != g && (alm[m - 1] & 0xFF) < 15)
                                            {
                                                if (j == 0)
                                                {
                                                    h = 4;
                                                    break;
                                                }
                                                for (an3 = 1; an3 <= j; an3++)
                                                {
                                                    if (an3 == j)
                                                    {
                                                        if (alm[m + j] == nonam[j])
                                                        {
                                                            h = 3;
                                                            break;
                                                        }
                                                        if (n == 1 && alm[m + j] == nonam[j] - 14610445)
                                                        {
                                                            h = 4;
                                                            break;
                                                        }
                                                        if (n == 2 && alm[m + j] == nonam[j] - 61453)
                                                        {
                                                            h = 4;
                                                            break;
                                                        }
                                                        if (n == 3 && alm[m + j] == nonam[j] - 13)
                                                        {
                                                            h = 4;
                                                            break;
                                                        }
                                                    }
                                                    else if (alm[m + an3] != nonam[an3])
                                                    {
                                                        break;
                                                    }
                                                }
                                                if (h == 4)
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (h == 1)
                            {
                                for (n = 0; n <= j; n++)
                                {
                                    alm[g + n] = -86052851;
                                }
                                alm[i] = m * 4;
                            }
                            else if (h == 2)
                            {
                                for (n = 0; n <= j; n++)
                                {
                                    alm[m + n] = nonam[n];
                                    alm[g + n] = -86052851;
                                }
                                alm[i] = m * 4;
                            }
                            else if (h == 4)
                            {
                                alm[i] = m * 4;
                                for (n = 0; n <= j; n++)
                                {
                                    alm[g + n] = -86052851;
                                }
                            }
                            else if (h != 3)
                            {
                                for (m = stf; m < md; m++)
                                {
                                    if (alm[m] == -86052851 && (alm[m - 1] & 0xFF) < 15)
                                    {
                                        if (j != 0)
                                        {
                                            an3 = 1;
                                            while (an3 <= j && alm[m + an3] == -86052851)
                                            {
                                                if (an3 == j)
                                                {
                                                    h = 5;
                                                    break;
                                                }
                                                an3++;
                                            }
                                        }
                                        else
                                        {
                                            h = 5;
                                        }
                                    }
                                    if (h == 5)
                                    {
                                        break;
                                    }
                                }
                                if (h == 5)
                                {
                                    alm[i] = m * 4;
                                    for (n = 0; n <= j; n++)
                                    {
                                        alm[m + n] = nonam[n];
                                        alm[g + n] = -86052851;
                                    }
                                }
                            }
                        }
                    }
                    for (i = snstr; i < an2; i++)
                    {
                        if ((alm[i] & 0xFF) == 13)
                        {
                            if (alm[i] == -86052851 || alm[i] == 14610445)
                            {
                                alm[i] = 0;
                            }
                            else if ((alm[i] & 0xFFFF) == 61453)
                            {
                                alm[i] -= 61453;
                            }
                            else
                            {
                                alm[i] -= 13;
                            }
                        }
                    }
                }
                if (CmpRnData.Checked)
                {
                    i = alm[dat + 12] / 4;
                    for (g = i + suba * 4; i < g; i++)
                    {
                        if (alm[i] >= 8096 && alm[i] < tds[25])
                        {
                            j = alm[i] / 4;
                            if (alm[j] != 0 && alm[j] != -86052851)
                            {
                                SubRnMinCmp();
                            }
                        }
                    }
                    if (EvSubaCbList.Items.Count == 8)
                    {
                        i = alm[dat + 31] / 4;
                        for (g = i + suba * 4; i < g; i++)
                        {
                            if (alm[i] >= 8096 && alm[i] < tds[25])
                            {
                                j = alm[i] / 4;
                                if (alm[j] != 0 && alm[j] != -86052851)
                                {
                                    SubRnMinCmp();
                                }
                            }
                        }
                    }
                    i = alm[dat + 9] / 4;
                    for (g = i + spas * 2; i < g; i++)
                    {
                        if (alm[i] >= 8096 && alm[i] < tds[25])
                        {
                            j = alm[i] / 4;
                            if (alm[j] != 0 && alm[j] != -86052851)
                            {
                                SubRnMinCmp();
                            }
                        }
                    }
                    if (alm[dat + 20] >= 8096 && alm[dat + 20] < tds[25])
                    {
                        i = alm[dat + 20] / 4 + 1;
                        while (i < md && alm[i - 1] >= 0)
                        {
                            if (alm[i] >= 8096 && alm[i] < tds[25])
                            {
                                j = alm[i] / 4;
                                if (alm[j] != 0 && alm[j] != -86052851)
                                {
                                    SubRnMinCmp();
                                }
                            }
                            i += 2;
                        }
                    }
                    if (alm[dat + 21] >= 8096 && alm[dat + 21] < tds[25])
                    {
                        i = alm[dat + 21] / 4 + 1;
                        while (i < md && alm[i - 1] >= 0)
                        {
                            if (alm[i] >= 8096 && alm[i] < tds[25])
                            {
                                j = alm[i] / 4;
                                if (alm[j] != 0 && alm[j] != -86052851)
                                {
                                    SubRnMinCmp();
                                }
                            }
                            i += 2;
                        }
                    }
                }
                if (NoEventCmp.Checked)
                {
                    i = alm[dat + 12] / 4;
                    for (g = i + suba * 4; i < g; i++)
                    {
                        if (alm[i] >= 8096 && alm[i] < tds[25])
                        {
                            j = alm[i] / 4;
                            if (alm[j] != 0 && alm[j] != -86052851)
                            {
                                DelNoEventData();
                            }
                        }
                    }
                    if (EvSubaCbList.Items.Count == 8)
                    {
                        i = alm[dat + 31] / 4;
                        for (g = i + suba * 4; i < g; i++)
                        {
                            if (alm[i] >= 8096 && alm[i] < tds[25])
                            {
                                j = alm[i] / 4;
                                if (alm[j] != 0 && alm[j] != -86052851)
                                {
                                    DelNoEventData();
                                }
                            }
                        }
                    }
                    i = alm[dat + 9] / 4;
                    for (g = i + spas * 2; i < g; i++)
                    {
                        if (alm[i] >= 8096 && alm[i] < tds[25])
                        {
                            j = alm[i] / 4;
                            if (alm[j] != 0 && alm[j] != -86052851)
                            {
                                DelNoEventData();
                            }
                        }
                    }
                    if (alm[dat + 20] >= 8096 && alm[dat + 20] < tds[25])
                    {
                        i = alm[dat + 20] / 4 + 1;
                        while (i < md && alm[i - 1] >= 0)
                        {
                            if (alm[i] >= 8096 && alm[i] < tds[25])
                            {
                                j = alm[i] / 4;
                                if (alm[j] != 0 && alm[j] != -86052851)
                                {
                                    DelNoEventData();
                                }
                            }
                            i += 2;
                        }
                    }
                    if (alm[dat + 21] >= 8096 && alm[dat + 21] < tds[25])
                    {
                        i = alm[dat + 21] / 4 + 1;
                        while (i < md && alm[i - 1] >= 0)
                        {
                            if (alm[i] >= 8096 && alm[i] < tds[25])
                            {
                                j = alm[i] / 4;
                                if (alm[j] != 0 && alm[j] != -86052851)
                                {
                                    DelNoEventData();
                                }
                            }
                            i += 2;
                        }
                    }
                }
                if (SameDataCmp.Checked)
                {
                    i = alm[dat + 12] / 4;
                    for (g = i + suba * 4; i < g; i++)
                    {
                        if (alm[i] >= 8096 && alm[i] < tds[25])
                        {
                            j = alm[i] / 4;
                            if (alm[j] > 65535 && alm[j + 2] > 65535)
                            {
                                CmpSameDtRn();
                            }
                        }
                    }
                    if (EvSubaCbList.Items.Count == 8)
                    {
                        i = alm[dat + 31] / 4;
                        for (g = i + suba * 4; i < g; i++)
                        {
                            if (alm[i] >= 8096 && alm[i] < tds[25])
                            {
                                j = alm[i] / 4;
                                if (alm[j] > 65535 && alm[j + 2] > 65535)
                                {
                                    CmpSameDtRn();
                                }
                            }
                        }
                    }
                    i = alm[dat + 9] / 4;
                    for (g = i + spas * 2; i < g; i++)
                    {
                        if (alm[i] >= 8096 && alm[i] < tds[25])
                        {
                            j = alm[i] / 4;
                            if (alm[j] > 65535 && alm[j + 2] > 65535)
                            {
                                CmpSameDtRn();
                            }
                        }
                    }
                    if (alm[dat + 20] >= 8096 && alm[dat + 20] < tds[25])
                    {
                        i = alm[dat + 20] / 4 + 1;
                        while (i < md && alm[i - 1] >= 0)
                        {
                            if (alm[i] >= 8096 && alm[i] < tds[25])
                            {
                                j = alm[i] / 4;
                                if (alm[j] > 65535 && alm[j + 2] > 65535)
                                {
                                    CmpSameDtRn();
                                }
                            }
                            i += 2;
                        }
                    }
                    if (alm[dat + 21] >= 8096 && alm[dat + 21] < tds[25])
                    {
                        i = alm[dat + 21] / 4 + 1;
                        while (i < md && alm[i - 1] >= 0)
                        {
                            if (alm[i] >= 8096 && alm[i] < tds[25])
                            {
                                j = alm[i] / 4;
                                if (alm[j] > 65535 && alm[j + 2] > 65535)
                                {
                                    CmpSameDtRn();
                                }
                            }
                            i += 2;
                        }
                    }
                }
                if (SubaAllEvCmp.Checked || SpAllEvCmp.Checked)
                {
                    for (i = stf; i < md; i++)
                    {
                        if (alm[i] == -86052851)
                        {
                            if (alm[i + 1] == -86052851)
                            {
                                nonam[0] = i;
                                break;
                            }
                            i++;
                        }
                    }
                    if (i >= md)
                    {
                        nonam[0] = md;
                    }
                }
                if (SubaAllEvCmp.Checked && nonam[0] < md)
                {
                    i = alm[dat + 12] / 4;
                    for (g = i + suba * 4; i < g; i++)
                    {
                        if (alm[i] >= 8096 && alm[i] < tds[25])
                        {
                            j = alm[i] / 4;
                            if (alm[j] != 0 && alm[j] != -86052851)
                            {
                                CmpMoveOffsetData();
                            }
                        }
                    }
                    if (EvSubaCbList.Items.Count == 8)
                    {
                        i = alm[dat + 31] / 4;
                        for (g = i + suba * 4; i < g; i++)
                        {
                            if (alm[i] >= 8096 && alm[i] < tds[25])
                            {
                                j = alm[i] / 4;
                                if (alm[j] != 0 && alm[j] != -86052851)
                                {
                                    CmpMoveOffsetData();
                                }
                            }
                        }
                    }
                }
                if (SpAllEvCmp.Checked && nonam[0] < md)
                {
                    i = alm[dat + 9] / 4;
                    for (g = i + spas * 2; i < g; i++)
                    {
                        if (alm[i] >= 8096 && alm[i] < tds[25])
                        {
                            j = alm[i] / 4;
                            if (alm[j] != 0 && alm[j] != -86052851)
                            {
                                CmpMoveOffsetData();
                            }
                        }
                    }
                }
                if (CmpInRn.Checked && nonam[0] < md)
                {
                    for (i = 10; i < 512; i++)
                    {
                        nonam[i] = 0;
                    }
                    rd1 = "";
                    if (SubaAllEvCmp.Checked)
                    {
                        i = alm[dat + 12] / 4;
                        for (g = i + suba * 4; i < g; i++)
                        {
                            if (alm[i] >= 8096 && alm[i] < tds[25])
                            {
                                j = alm[i] / 4;
                                if (alm[j] != 0 && alm[j] != -86052851)
                                {
                                    ScanRn();
                                }
                            }
                        }
                        if (EvSubaCbList.Items.Count == 8)
                        {
                            i = alm[dat + 31] / 4;
                            for (g = i + suba * 4; i < g; i++)
                            {
                                if (alm[i] >= 8096 && alm[i] < tds[25])
                                {
                                    j = alm[i] / 4;
                                    if (alm[j] != 0 && alm[j] != -86052851)
                                    {
                                        ScanRn();
                                    }
                                }
                            }
                        }
                    }
                    if (SpAllEvCmp.Checked)
                    {
                        i = alm[dat + 9] / 4;
                        for (g = i + spas * 2; i < g; i++)
                        {
                            if (alm[i] >= 8096 && alm[i] < tds[25])
                            {
                                j = alm[i] / 4;
                                if (alm[j] != 0 && alm[j] != -86052851)
                                {
                                    ScanRn();
                                }
                            }
                        }
                    }
                    for (i = 0; i < 10; i++)
                    {
                        nonam[i] = 0;
                    }
                    for (h = 10; h < 512; h++)
                    {
                        if (nonam[h] == 0)
                        {
                            h++;
                            break;
                        }
                    }
                    CmpInRnDelmov();
                }
                if (EmptyCmp.Checked || CmpRnData.Checked || NoEventCmp.Checked || SpAllEvCmp.Checked || SameDataCmp.Checked)
                {
                    if (EvSubaOffset.Text.Length > 5)
                    {
                        if (EvSubaCbID.SelectedIndex == -1)
                        {
                            EvSubaCbID.SelectedIndex = sid;
                        }
                        else if (EvSubaCbList.SelectedIndex == -1)
                        {
                            EvSubaCbList.SelectedIndex = slist;
                        }
                        else
                        {
                            h = EvSubaCbID.SelectedIndex;
                            g = EvSubaCbList.SelectedIndex;
                            if (g < 4)
                            {
                                n = alm[dat + 12 + g] / 4;
                            }
                            else
                            {
                                n = alm[dat + 27 + g] / 4;
                            }
                            i = alm[n + h];
                            EvSubaOffset.Text = "0x" + i.ToString("X");
                            if (EventTab.SelectedIndex == 1)
                            {
                                EvList.Items.Clear();
                                if (i > 0 && i < tds[25])
                                {
                                    j = i / 4;
                                    mov = 0;
                                    while (alm[j] != 0 && j < md)
                                    {
                                        EveListstring();
                                        EvList.Items.Add(rd1);
                                        j += 2;
                                    }
                                }
                            }
                        }
                    }
                    if (EvSpCbID.SelectedIndex == -1)
                    {
                        EvSpCbID.SelectedIndex = aid;
                    }
                    else if (EvSpCbList.SelectedIndex == -1)
                    {
                        EvSpCbList.SelectedIndex = alist;
                    }
                    else
                    {
                        h = EvSpCbID.SelectedIndex;
                        if (EvSpCbList.SelectedIndex == 0)
                        {
                            n = alm[dat + 9] / 4;
                        }
                        else
                        {
                            n = alm[dat + 10] / 4;
                        }
                        i = alm[n + h];
                        EvSpOffset.Text = "0x" + i.ToString("X");
                        if (EventTab.SelectedIndex == 0)
                        {
                            EvList.Items.Clear();
                            if (i > 0 && i < tds[25])
                            {
                                j = i / 4;
                                mov = 0;
                                while (alm[j] != 0 && j < md)
                                {
                                    EveListstring();
                                    EvList.Items.Add(rd1);
                                    j += 2;
                                }
                            }
                        }
                    }
                    if (EvOvrCbList.SelectedIndex == -1)
                    {
                        EvOvrCbList.Text = "";
                        EvOvrId.Text = "";
                    }
                    else if (EvOvrCbList.SelectedIndex < 2)
                    {
                        if (EvOvrId.SelectedIndex == -1)
                        {
                            EvOvrId.Text = "";
                        }
                        else
                        {
                            if (EvOvrCbList.SelectedIndex == 0)
                            {
                                n = alm[dat + 20] / 4;
                            }
                            else
                            {
                                n = alm[dat + 21] / 4;
                            }
                            i = EvOvrId.SelectedIndex;
                            h = alm[n + i * 2 + 1];
                            EvOvrOffset.Text = "0x" + h.ToString("X");
                            if (EventTab.SelectedIndex == 3)
                            {
                                EvList.Items.Clear();
                                if (h > 0 && h < tds[25])
                                {
                                    j = h / 4;
                                    mov = 0;
                                    while (alm[j] != 0 && j < md)
                                    {
                                        EveListstring();
                                        EvList.Items.Add(rd1);
                                        j += 2;
                                    }
                                }
                            }
                        }
                    }
                    EvRnOffset.Text = "";
                    if (EventTab.SelectedIndex == 2)
                    {
                        EvList.Items.Clear();
                    }
                }
                if (ExternalCmp.Checked)
                {
                    rmv = 0;
                    m = tds[27] * 2;
                    g = (tds[27] + tds[28]) * 2;
                    for (j = m; j < g; j += 2)
                    {
                        if (rnext[j] < 8096 || rnext[j] >= tds[25])
                        {
                            rnext[j] = -1;
                            rmv++;
                        }
                    }
                    if (rmv == 0)
                    {
                        CmpText.Text += "\r\nUnused External Sub Routine not found.\r\n";
                    }
                    else
                    {
                        TextBox cmpText4 = CmpText;
                        cmpText4.Text = cmpText4.Text + "\r\nFound " + rmv + " Unused External Sub Routine.\r\n";
                        k = tds[27] + tds[28] - rmv;
                        n = 0;
                        string[] array = new string[k];
                        g = (tds[27] + tds[28]) * 2;
                        an1 = tds[27] * 2;
                        for (j = 0; j < an1; j += 2)
                        {
                            array[n] = "0";
                            h = rnext[j + 1];
                            string[] array2;
                            IntPtr intPtr;
                            while (true)
                            {
                                bool flag = true;
                                if (h % 4 == 0)
                                {
                                    fntb[0] = (byte)((rnext[g + h / 4] >> 24) & 0xFF);
                                }
                                else if (h % 4 == 1)
                                {
                                    fntb[0] = (byte)((rnext[g + h / 4] >> 16) & 0xFF);
                                }
                                else if (h % 4 == 2)
                                {
                                    fntb[0] = (byte)((rnext[g + h / 4] >> 8) & 0xFF);
                                }
                                else
                                {
                                    fntb[0] = (byte)(rnext[g + h / 4] & 0xFF);
                                }
                                if (fntb[0] == 0)
                                {
                                    break;
                                }
                                string[] array3 = array2 = array;
                                int num = n;
                                intPtr = (IntPtr)num;
                                array3[num] = array2[(long)intPtr] + Encoding.UTF8.GetString(fntb);
                                h++;
                            }
                            string[] array4 = array2 = array;
                            int num2 = n;
                            intPtr = (IntPtr)num2;
                            array4[num2] = array2[(long)intPtr] + "   " + j.ToString("X3");
                            n++;
                        }
                        for (j = tds[27] * 2; j < g; j += 2)
                        {
                            if (rnext[j] != -1)
                            {
                                array[n] = "1";
                                h = rnext[j + 1];
                                string[] array2;
                                IntPtr intPtr;
                                while (true)
                                {
                                    bool flag = true;
                                    if (h % 4 == 0)
                                    {
                                        fntb[0] = (byte)((rnext[g + h / 4] >> 24) & 0xFF);
                                    }
                                    else if (h % 4 == 1)
                                    {
                                        fntb[0] = (byte)((rnext[g + h / 4] >> 16) & 0xFF);
                                    }
                                    else if (h % 4 == 2)
                                    {
                                        fntb[0] = (byte)((rnext[g + h / 4] >> 8) & 0xFF);
                                    }
                                    else
                                    {
                                        fntb[0] = (byte)(rnext[g + h / 4] & 0xFF);
                                    }
                                    if (fntb[0] == 0)
                                    {
                                        break;
                                    }
                                    string[] array5 = array2 = array;
                                    int num3 = n;
                                    intPtr = (IntPtr)num3;
                                    array5[num3] = array2[(long)intPtr] + Encoding.UTF8.GetString(fntb);
                                    h++;
                                }
                                string[] array6 = array2 = array;
                                int num4 = n;
                                intPtr = (IntPtr)num4;
                                array6[num4] = array2[(long)intPtr] + "   " + j.ToString("X3");
                                n++;
                            }
                        }
                        Array.Sort(array, StringComparer.Ordinal);
                        byte[] array7 = new byte[8000];
                        m = 0;
                        for (i = 0; i < k; i++)
                        {
                            n = array[i].Length - 7;
                            rd1 = array[i].Substring(n + 4);
                            j = Convert.ToInt32(rd1, 16);
                            nonam[i * 2] = rnext[j];
                            nonam[i * 2 + 1] = m;
                            rd1 = array[i].Substring(1, n);
                            for (j = 0; j < n; j++)
                            {
                                rd2 = rd1.Substring(j, 1);
                                fntb = Encoding.UTF8.GetBytes(rd2);
                                array7[m] = fntb[0];
                                m++;
                            }
                            array7[m] = 0;
                            m++;
                        }
                        n = (m + 3) / 4;
                        an2 = k * 2;
                        for (i = 0; i < an2; i++)
                        {
                            rnext[i] = nonam[i];
                        }
                        for (i = 0; i < m; i += 4)
                        {
                            rnext[an2 + i / 4] = array7[i] * 16777216 + array7[i + 1] * 65536 + array7[i + 2] * 256 + array7[i + 3];
                        }
                        rnexsize = an2 + n;
                        tds[28] -= rmv;
                        tds[24] = (tds[25] + tds[26]) * 4 + (tds[27] + tds[28]) * 8 + m;
                        DataDTList.Items.Clear();
                        DataExrnList.Items.Clear();
                        k = tds[27] + tds[28];
                        i = k * 2;
                        m = 0;
                        for (h = 0; h < k; h++)
                        {
                            rd1 = "";
                            g = rnext[m + 1];
                            m += 2;
                            if (g >= 0)
                            {
                                while (true)
                                {
                                    bool flag = true;
                                    if (g % 4 == 0)
                                    {
                                        fntb[0] = (byte)((rnext[i + g / 4] >> 24) & 0xFF);
                                    }
                                    else if (g % 4 == 1)
                                    {
                                        fntb[0] = (byte)((rnext[i + g / 4] >> 16) & 0xFF);
                                    }
                                    else if (g % 4 == 2)
                                    {
                                        fntb[0] = (byte)((rnext[i + g / 4] >> 8) & 0xFF);
                                    }
                                    else
                                    {
                                        fntb[0] = (byte)(rnext[i + g / 4] & 0xFF);
                                    }
                                    if (fntb[0] != 0)
                                    {
                                        rd1 += Encoding.UTF8.GetString(fntb);
                                        g++;
                                        continue;
                                    }
                                    break;
                                }
                                if (h < tds[27])
                                {
                                    DataDTList.Items.Add(rd1);
                                }
                                else
                                {
                                    DataExrnList.Items.Add(rd1);
                                }
                            }
                        }
                    }
                }
            }
            if (DelPSAData.Checked && alm[md - 2] == -86110838)
            {
                md -= 2;
            }
            Array.Sort(asc);
            par = tds[26];
            k = par - 1;
            for (i = 0; i < k; i++)
            {
                if (asc[i] == asc[i + 1])
                {
                    tds[26]--;
                    asc[i] = 16777216;
                }
            }
            Fixam();
            n = (tds[24] + 3) / 4;
            if (n % 8 != 0)
            {
                j = 8 - n % 8;
                n += j;
            }
            n += 24 + efdts;
            CmpText.Text += "\r\n<After Compression>\r\n";
            TextBox cmpText5 = CmpText;
            string text = cmpText5.Text;
            cmpText5.Text = text + "Moveset size=0x" + tds[24].ToString("X") + ", Total size=" + (n * 4).ToString("X") + "\r\n";
            ModeChange.Enabled = true;
            AllEnableChange();
            minitxt.Text = "";
        }

        private void EventTab_SelectedIndexChanged(object sender, EventArgs e)
        {
            EvList.Items.Clear();
            mov = 0;
            EvDesText.Text = "";
            if (EventTab.SelectedIndex == 0)
            {
                if (EvSpOffset.Text.Length <= 2)
                {
                    return;
                }
                rd1 = EvSpOffset.Text.Substring(2);
                h = Convert.ToInt32(rd1, 16);
                j = h / 4;
                mov = 0;
                if (j >= stf && j < md)
                {
                    while (alm[j] != 0 && j < md)
                    {
                        EveListstring();
                        EvList.Items.Add(rd1);
                        j += 2;
                    }
                }
            }
            else if (EventTab.SelectedIndex == 1)
            {
                if (EvSubaOffset.Text.Length <= 2)
                {
                    return;
                }
                rd1 = EvSubaOffset.Text.Substring(2);
                h = Convert.ToInt32(rd1, 16);
                j = h / 4;
                mov = 0;
                if (j >= stf && j < md)
                {
                    while (alm[j] != 0 && j < md)
                    {
                        EveListstring();
                        EvList.Items.Add(rd1);
                        j += 2;
                    }
                }
            }
            else if (EventTab.SelectedIndex == 3)
            {
                if (EvOvrOffset.Text.Length <= 2)
                {
                    return;
                }
                rd1 = EvOvrOffset.Text.Substring(2);
                h = Convert.ToInt32(rd1, 16);
                j = h / 4;
                mov = 0;
                if (j >= stf && j < md)
                {
                    while (alm[j] != 0 && j < md)
                    {
                        EveListstring();
                        EvList.Items.Add(rd1);
                        j += 2;
                    }
                }
            }
            else if (EvRnOffset.Text.Length > 5)
            {
                rd1 = EvRnOffset.Text.Substring(2);
                h = Convert.ToInt32(rd1, 16);
                j = h / 4;
                mov = 0;
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    EvList.Items.Add(rd1);
                    j += 2;
                }
            }
        }

        private void EvSpCbID_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (EvSpCbID.SelectedIndex == -1)
            {
                EvSpCbID.SelectedIndex = aid;
            }
            if (EvSpCbList.SelectedIndex == -1)
            {
                EvSpCbList.SelectedIndex = alist;
            }
            h = EvSpCbID.SelectedIndex;
            alist = EvSpCbList.SelectedIndex;
            aid = h;
            if (EvSubaCbList.Items.Count < 4)
            {
                if (EvSpCbList.SelectedIndex == 0)
                {
                    n = alm[dat + 4] / 4;
                }
                else
                {
                    n = alm[dat + 5] / 4;
                }
            }
            else if (EvSpCbList.SelectedIndex == 0)
            {
                n = alm[dat + 9] / 4;
            }
            else
            {
                n = alm[dat + 10] / 4;
            }
            i = alm[n + h];
            EvSpOffset.Text = "0x" + i.ToString("X");
            if (EventTab.SelectedIndex != 0)
            {
                return;
            }
            EvList.Items.Clear();
            j = i / 4;
            mov = 0;
            if (j >= stf && j < md)
            {
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    EvList.Items.Add(rd1);
                    j += 2;
                }
            }
        }

        private void EvSpCbList_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (EvSpCbID.SelectedIndex == -1)
            {
                EvSpCbID.SelectedIndex = aid;
            }
            if (EvSpCbList.SelectedIndex == -1)
            {
                EvSpCbList.SelectedIndex = alist;
            }
            h = EvSpCbID.SelectedIndex;
            alist = EvSpCbList.SelectedIndex;
            aid = h;
            if (EvSubaCbList.Items.Count < 4)
            {
                if (EvSpCbList.SelectedIndex == 0)
                {
                    n = alm[dat + 4] / 4;
                }
                else
                {
                    n = alm[dat + 5] / 4;
                }
            }
            else if (EvSpCbList.SelectedIndex == 0)
            {
                n = alm[dat + 9] / 4;
            }
            else
            {
                n = alm[dat + 10] / 4;
            }
            i = alm[n + h];
            EvSpOffset.Text = "0x" + i.ToString("X");
            if (EventTab.SelectedIndex != 0)
            {
                return;
            }
            EvList.Items.Clear();
            j = i / 4;
            mov = 0;
            if (j >= stf && j < md)
            {
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    EvList.Items.Add(rd1);
                    j += 2;
                }
            }
        }

        private void EvSubaCbID_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (EvSubaCbID.SelectedIndex == -1)
            {
                EvSubaCbID.SelectedIndex = sid;
            }
            else if (AnimAutoSave.Checked && EvSubaAnim.Text != rdn)
            {
                EvSubaAnim.Enabled = false;
                EvSubaAnimFlag.Enabled = false;
                k = alm[dat] / 4 + sid * 2;
                rd1 = EvSubaAnim.Text;
                if (rd1 != "<ERROR>")
                {
                    SubaRename();
                    rdn = rd1;
                }
                EvSubaAnim.Enabled = true;
                EvSubaAnimFlag.Enabled = true;
                if (qe)
                {
                    Qsave.Enabled = true;
                }
            }
            if (EvSubaCbList.SelectedIndex == -1)
            {
                EvSubaCbList.SelectedIndex = slist;
            }
            h = EvSubaCbID.SelectedIndex;
            g = EvSubaCbList.SelectedIndex;
            sid = h;
            slist = g;
            if (g < 4)
            {
                n = alm[dat + 12 + g] / 4;
            }
            else
            {
                n = alm[dat + 27 + g] / 4;
            }
            i = alm[n + h];
            EvSubaOffset.Text = "0x" + i.ToString("X");
            if (EventTab.SelectedIndex == 1)
            {
                EvList.Items.Clear();
                j = i / 4;
                mov = 0;
                if (j >= stf && j < md)
                {
                    while (alm[j] != 0 && j < md)
                    {
                        EveListstring();
                        EvList.Items.Add(rd1);
                        j += 2;
                    }
                }
            }
            k = alm[dat] / 4 + 1 + h * 2;
            if (alm[k] == 0)
            {
                EvSubaAnim.Text = "<null>";
                rdn = "<null>";
                return;
            }
            j = alm[k] / 4;
            EvSubaAnim.Text = "";
            rdn = "";
            if (j >= stf && j < md)
            {
                i = 0;
                while (i < 47)
                {
                    if (i % 4 == 0)
                    {
                        fntb[0] = (byte)((alm[j] >> 24) & 0xFF);
                    }
                    else if (i % 4 == 1)
                    {
                        fntb[0] = (byte)((alm[j] >> 16) & 0xFF);
                    }
                    else if (i % 4 == 2)
                    {
                        fntb[0] = (byte)((alm[j] >> 8) & 0xFF);
                    }
                    else
                    {
                        fntb[0] = (byte)(alm[j] & 0xFF);
                        j++;
                    }
                    if (fntb[0] != 0)
                    {
                        rdn += Encoding.UTF8.GetString(fntb);
                        i++;
                        continue;
                    }
                    break;
                }
                EvSubaAnim.Text = rdn;
            }
            else
            {
                EvSubaAnim.Text = "<ERROR>";
            }
        }

        private void EvSubaCbList_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (EvSubaCbID.SelectedIndex == -1)
            {
                EvSubaCbID.SelectedIndex = sid;
            }
            if (EvSubaCbList.SelectedIndex == -1)
            {
                EvSubaCbList.SelectedIndex = slist;
            }
            h = EvSubaCbID.SelectedIndex;
            g = EvSubaCbList.SelectedIndex;
            sid = h;
            slist = g;
            if (g < 4)
            {
                n = alm[dat + 12 + g] / 4;
            }
            else
            {
                n = alm[dat + 27 + g] / 4;
            }
            i = alm[n + h];
            EvSubaOffset.Text = "0x" + i.ToString("X");
            if (EventTab.SelectedIndex != 1)
            {
                return;
            }
            EvList.Items.Clear();
            j = i / 4;
            mov = 0;
            if (j >= stf && j < md)
            {
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    EvList.Items.Add(rd1);
                    j += 2;
                }
            }
        }

        private void EvSubaAnim_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Return && EvSubaCbID.SelectedIndex != -1)
            {
                EvSubaAnim.Enabled = false;
                EvSubaAnimFlag.Enabled = false;
                k = alm[dat] / 4 + EvSubaCbID.SelectedIndex * 2;
                rd1 = EvSubaAnim.Text;
                if (rd1 != "<ERROR>")
                {
                    SubaRename();
                    rdn = rd1;
                }
                EvSubaAnim.Enabled = true;
                EvSubaAnimFlag.Enabled = true;
                if (qe)
                {
                    Qsave.Enabled = true;
                }
            }
        }

        private void EvSubaAnimFlag_Click(object sender, EventArgs e)
        {
            if (EvSubaCbID.SelectedIndex == -1)
            {
                return;
            }
            k = alm[dat] / 4 + EvSubaCbID.SelectedIndex * 2;
            g = alm[k];
            rd1 = EvSubaAnim.Text;
            if (AnimFlagTxtView.Checked)
            {
                i = 0;
            }
            else
            {
                i = 1;
            }
            using (SubaAnimFlagsForm subaAnimFlagsForm = new SubaAnimFlagsForm())
            {
                subaAnimFlagsForm.afdat = g;
                subaAnimFlagsForm.afrn = i;
                subaAnimFlagsForm.afanm = rd1;
                subaAnimFlagsForm.ShowDialog(this);
                g = subaAnimFlagsForm.afdat;
                i = subaAnimFlagsForm.afrn;
                rd1 = subaAnimFlagsForm.afanm;
            }
            if (i == 7)
            {
                alm[k] = g;
                if (AnimFlagTxtView.Checked && rd1 != "<ERROR>")
                {
                    EvSubaAnim.Enabled = false;
                    EvSubaAnimFlag.Enabled = false;
                    SubaRename();
                    EvSubaAnim.Text = rd1;
                    rdn = rd1;
                    EvSubaAnim.Enabled = true;
                    EvSubaAnimFlag.Enabled = true;
                }
                if (qe)
                {
                    Qsave.Enabled = true;
                }
            }
        }

        private void EvRnOpen_Click(object sender, EventArgs e)
        {
            if (EvRnOfSele.Text.Length > 3)
            {
                rd1 = EvRnOfSele.Text.Substring(0, 2);
                g = 1;
                if (rd1 == "Dx")
                {
                    rd2 = EvRnOfSele.Text.Substring(2);
                    if (rd2.Length > 3)
                    {
                        if (int.TryParse(rd2, out i))
                        {
                            g = int.Parse(rd2);
                        }
                    }
                    else
                    {
                        g = 0;
                    }
                }
                else
                {
                    if (rd1 == "0x")
                    {
                        rd2 = EvRnOfSele.Text.Substring(2);
                    }
                    else
                    {
                        rd2 = EvRnOfSele.Text;
                    }
                    j = rd2.Length;
                    if (j > 3)
                    {
                        for (i = 0; i < j; i++)
                        {
                            if (!Uri.IsHexDigit(rd2[i]))
                            {
                                g = 0;
                            }
                        }
                        if (g != 0)
                        {
                            g = Convert.ToInt32(rd2, 16);
                        }
                    }
                    else
                    {
                        g = 0;
                    }
                }
                if (g >= stf * 4 && g < tds[25] && g % 4 == 0)
                {
                    if (minitxt.Text == "Cannot Open Offset")
                    {
                        minitxt.Text = "";
                    }
                    EvRnOffset.Text = "0x" + g.ToString("X");
                    if (EvRnGenDatCbList.SelectedIndex == 0)
                    {
                        rd1 = "0x" + g.ToString("X");
                        if (EvRnOffCbList.Items.Count == 0)
                        {
                            GenTraceS();
                            EvRnOffCbList.Items.Add(rd1);
                        }
                        else
                        {
                            h = EvRnOffCbList.Items.Count;
                            for (j = 0; j < h; j++)
                            {
                                rd2 = EvRnOffCbList.Items[j].ToString();
                                if (rd2.Length >= 9)
                                {
                                    if (rd2[6] == ' ')
                                    {
                                        rd2 = rd2.Substring(0, 6);
                                    }
                                    else if (rd2[7] == ' ')
                                    {
                                        rd2 = rd2.Substring(0, 7);
                                    }
                                }
                                if (rd1 == rd2)
                                {
                                    break;
                                }
                            }
                            if (j == h)
                            {
                                GenTraceS();
                                EvRnOffCbList.Items.Add(rd1);
                            }
                        }
                    }
                    EvList.Items.Clear();
                    j = g / 4;
                    mov = 0;
                    while (alm[j] != 0 && j < md)
                    {
                        EveListstring();
                        EvList.Items.Add(rd1);
                        j += 2;
                    }
                }
                else
                {
                    h = 0;
                }
            }
            else
            {
                h = 0;
            }
            if (h == 0)
            {
                minitxt.Text = "Cannot Open Offset";
            }
        }

        private void EvRnCreate_Click(object sender, EventArgs e)
        {
            EvList.Items.Clear();
            for (j = stf; j < md; j++)
            {
                if (alm[j] == -86052851)
                {
                    for (i = j + 1; i <= j + 3; i++)
                    {
                        if (alm[i] != -86052851)
                        {
                            j = i;
                            break;
                        }
                    }
                    if (i == j + 4)
                    {
                        alm[j] = 131072;
                        alm[j + 1] = 0;
                        alm[j + 2] = 0;
                        alm[j + 3] = 0;
                        break;
                    }
                }
            }
            if (j >= md)
            {
                j = md;
                alm[j] = 131072;
                alm[j + 1] = 0;
                alm[j + 2] = 0;
                alm[j + 3] = 0;
            }
            h = j * 4;
            mov = 0;
            EvRnOffset.Text = "0x" + h.ToString("X");
            EveListstring();
            EvList.Items.Add(rd1);
            if (j == md)
            {
                md += 4;
                Fixam();
            }
        }

        private void EvOvrId_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (EvOvrCbList.SelectedIndex == -1 || EvOvrId.SelectedIndex == -1)
            {
                return;
            }
            if (EvOvrCbList.SelectedIndex == 2)
            {
                if (EventTab.SelectedIndex == 3)
                {
                    EvList.Items.Clear();
                }
                n = alm[dat + 11] / 4 + EvOvrId.SelectedIndex;
                if (alm[n] != 0)
                {
                    m = n * 4;
                    for (h = 0; h < tds[28]; h++)
                    {
                        g = rnext[(tds[27] + h) * 2];
                        if (g >= 8096 && g < tds[25])
                        {
                            if (m == g)
                            {
                                rd1 = "External:" + DataExrnList.Items[h].ToString();
                                break;
                            }
                            if (g >= 8096 && g < tds[25])
                            {
                                an5 = 0;
                                while (an5 < 100)
                                {
                                    k = g / 4;
                                    g = alm[k];
                                    if (g >= 8096 && g < tds[25])
                                    {
                                        if (m == g)
                                        {
                                            rd1 = "External:" + DataExrnList.Items[h].ToString();
                                            break;
                                        }
                                        an5++;
                                        continue;
                                    }
                                    break;
                                }
                                if (m == g)
                                {
                                    break;
                                }
                            }
                        }
                    }
                    if (m == g)
                    {
                        EvOvrOffset.Text = "";
                        EvPreSelExternal.Text = rd1;
                        return;
                    }
                    EvPreSelExternal.Text = "External:False";
                    h = alm[n];
                    EvOvrOffset.Text = "0x" + h.ToString("X");
                    if (h >= 8096 && h < tds[25] && h % 4 == 0 && EventTab.SelectedIndex == 3)
                    {
                        j = h / 4;
                        mov = 0;
                        while (alm[j] != 0 && j < md)
                        {
                            EveListstring();
                            EvList.Items.Add(rd1);
                            j += 2;
                        }
                    }
                }
                else
                {
                    EvOvrOffset.Text = "0x0";
                    EvPreSelExternal.Text = "External:False";
                }
                return;
            }
            if (EvOvrCbList.SelectedIndex == 0)
            {
                n = alm[dat + 20] / 4;
            }
            else
            {
                n = alm[dat + 21] / 4;
            }
            i = EvOvrId.SelectedIndex;
            h = alm[n + i * 2 + 1];
            EvOvrOffset.Text = "0x" + h.ToString("X");
            if (EventTab.SelectedIndex != 3)
            {
                return;
            }
            EvList.Items.Clear();
            j = h / 4;
            mov = 0;
            if (j >= stf && j < md)
            {
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    EvList.Items.Add(rd1);
                    j += 2;
                }
            }
        }

        private void EvOvrCbList_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (EvOvrCbList.SelectedIndex == -1)
            {
                return;
            }
            if (EvOvrCbList.SelectedIndex == 2)
            {
                EvOvrOffset.Text = "";
                n = 274 + spas;
                EvOvrId.Items.Clear();
                EvPreSelExternal.Visible = true;
                for (i = 0; i < n; i++)
                {
                    EvOvrId.Items.Add(i.ToString("X"));
                }
                EvOvrId.SelectedIndex = 0;
                return;
            }
            EvOvrOffset.Text = "";
            EvList.Items.Clear();
            if (EvOvrCbList.SelectedIndex == 0)
            {
                n = alm[dat + 20];
            }
            else
            {
                n = alm[dat + 21];
            }
            EvOvrId.Items.Clear();
            EvPreSelExternal.Visible = false;
            if (n >= 8096 && n < tds[25])
            {
                i = n / 4;
                while (alm[i] >= 0)
                {
                    EvOvrId.Items.Add(alm[i].ToString("X"));
                    i += 2;
                    if (i >= md)
                    {
                        break;
                    }
                }
                if (EvOvrId.Items.Count >= 1)
                {
                    EvOvrId.SelectedIndex = 0;
                }
            }
            else
            {
                EvOvrId.Text = "";
            }
        }

        private void EvPreSelExternal_Click(object sender, EventArgs e)
        {
            if (EvOvrId.SelectedIndex == -1 || EvOvrCbList.SelectedIndex != 2 || (!(EvOvrOffset.Text == "") && !(EvOvrOffset.Text == "0x0")))
            {
                return;
            }
            n = alm[dat + 11] / 4 + EvOvrId.SelectedIndex;
            if (alm[n] != 0)
            {
                m = n * 4;
                for (h = 0; h < tds[28]; h++)
                {
                    g = rnext[(tds[27] + h) * 2];
                    if (g >= 8096 && g < tds[25])
                    {
                        if (m == g)
                        {
                            break;
                        }
                        if (g >= 8096 && g < tds[25])
                        {
                            for (an5 = 0; an5 < 100; an5++)
                            {
                                k = g / 4;
                                g = alm[k];
                                if (g < 8096 || g >= tds[25] || m == g)
                                {
                                    break;
                                }
                            }
                            if (m == g)
                            {
                                break;
                            }
                        }
                    }
                }
                if (h >= tds[28])
                {
                    h = 1048575;
                }
            }
            else
            {
                h = tds[28];
            }
            if (h >= 1048575)
            {
                return;
            }
            g = 5;
            k = h;
            string[] eclis = DataExrnList.Items.Cast<string>().ToArray();
            using (EvChangeForm evChangeForm = new EvChangeForm())
            {
                evChangeForm.ecid = k;
                evChangeForm.ecdn = g;
                evChangeForm.ecwf = ExrFW;
                evChangeForm.echf = ExrFH;
                evChangeForm.eclis = eclis;
                evChangeForm.ShowDialog(this);
                k = evChangeForm.ecid;
                g = evChangeForm.ecdn;
                ExrFW = evChangeForm.ecwf;
                ExrFH = evChangeForm.echf;
            }
            if (g <= 5 || h == k)
            {
                return;
            }
            if (minitxt.Text == "Unused External Sub Routine data has occurred.")
            {
                minitxt.Text = "";
            }
            if (h < tds[28])
            {
                an2 = (tds[27] + h) * 2;
                g = rnext[an2];
                if (g == m)
                {
                    if (alm[n] >= 8096 && alm[n] < tds[25])
                    {
                        rnext[an2] = alm[n];
                    }
                    else
                    {
                        rnext[an2] = -1;
                        minitxt.Text = "Unused External Sub Routine data has occurred.";
                    }
                }
                else
                {
                    for (an5 = 0; an5 < 100; an5++)
                    {
                        i = g / 4;
                        if (alm[i] == m)
                        {
                            alm[i] = alm[n];
                            break;
                        }
                        g = alm[i];
                    }
                }
            }
            if (k >= tds[28])
            {
                alm[n] = 0;
                Fixam();
                EvOvrOffset.Text = "0x0";
                EvPreSelExternal.Text = "External:False";
            }
            else
            {
                an4 = rnext[(tds[27] + k) * 2];
                an5 = 0;
                while (an5 < 101 && an4 >= 8096 && an4 < tds[25])
                {
                    an1 = an4 / 4;
                    an4 = alm[an1];
                    an5++;
                }
                if (an5 < 100)
                {
                    if (an5 > 0)
                    {
                        alm[an1] = n * 4;
                        alm[n] = -1;
                    }
                    else
                    {
                        alm[n] = -1;
                        i = (tds[27] + k) * 2;
                        rnext[i] = n * 4;
                    }
                }
                else
                {
                    minitxt.Text = "Cannot use Selected Data.";
                    alm[n] = 0;
                }
                EvOvrOffset.Text = "";
                EvPreSelExternal.Text = "External:" + DataExrnList.Items[k].ToString();
                Fixam();
            }
            if (qe)
            {
                Qsave.Enabled = true;
            }
        }

        private void EvList_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!EvDesText.Enabled)
            {
                return;
            }
            if (EvList.SelectedIndex != -1)
            {
                if (EventTab.SelectedIndex == 0)
                {
                    rd1 = EvSpOffset.Text.Substring(2);
                }
                else if (EventTab.SelectedIndex == 1)
                {
                    rd1 = EvSubaOffset.Text.Substring(2);
                }
                else if (EventTab.SelectedIndex == 3)
                {
                    rd1 = EvOvrOffset.Text.Substring(2);
                }
                else
                {
                    rd1 = EvRnOffset.Text.Substring(2);
                }
                g = Convert.ToInt32(rd1, 16);
                m = EvList.SelectedIndex;
                n = alm[g / 4 + m * 2];
                m = 0;
                while (EveEtid[m] != 0 && n != EveEtid[m])
                {
                    m++;
                    if (m >= 500)
                    {
                        m = 0;
                        break;
                    }
                }
                if (n != EveEtid[m])
                {
                    g = 0;
                    m = 16777216;
                    k = (n | 0xFFFF) - 65535;
                    while (EveEtid[g] != 0)
                    {
                        if (EveEtid[g] >= k && EveEtid[g] < n)
                        {
                            k = EveEtid[g] + 1;
                            m = g;
                        }
                        g++;
                        if (g >= 500)
                        {
                            break;
                        }
                    }
                }
                if (m < 500)
                {
                    EvDesText.Text = EveEtxd[m * 4 + 2];
                }
                else
                {
                    EvDesText.Text = "No Description Available.";
                }
            }
            else
            {
                EvDesText.Text = "";
            }
        }

        private void EvAdd_Click(object sender, EventArgs e)
        {
            if (EventTab.SelectedIndex == 0)
            {
                if (EvSpOffset.Text.Length > 2)
                {
                    if (EvSpCbID.SelectedIndex == -1)
                    {
                        EvSpCbID.SelectedIndex = aid;
                    }
                    if (EvSpCbList.SelectedIndex == -1)
                    {
                        EvSpCbList.SelectedIndex = alist;
                    }
                    rd1 = EvSpOffset.Text.Substring(2);
                }
                else
                {
                    rd1 = "";
                }
            }
            else if (EventTab.SelectedIndex == 1)
            {
                if (EvSubaOffset.Text.Length > 2)
                {
                    if (EvSubaCbID.SelectedIndex == -1)
                    {
                        EvSubaCbID.SelectedIndex = sid;
                    }
                    if (EvSubaCbList.SelectedIndex == -1)
                    {
                        EvSubaCbList.SelectedIndex = slist;
                    }
                    rd1 = EvSubaOffset.Text.Substring(2);
                }
                else
                {
                    rd1 = "";
                }
            }
            else if (EventTab.SelectedIndex == 3)
            {
                if (EvOvrOffset.Text.Length > 2)
                {
                    if (EvOvrId.SelectedIndex != -1)
                    {
                        if (EvOvrCbList.SelectedIndex != -1)
                        {
                            rd1 = EvOvrOffset.Text.Substring(2);
                        }
                        else
                        {
                            rd1 = "";
                        }
                    }
                    else
                    {
                        rd1 = "";
                    }
                }
                else
                {
                    rd1 = "";
                }
            }
            else if (EvRnOffset.Text.Length > 5)
            {
                rd1 = EvRnOffset.Text.Substring(2);
            }
            else
            {
                rd1 = "";
            }
            if (!(rd1 != ""))
            {
                return;
            }
            EvDesText.Enabled = false;
            h = Convert.ToInt32(rd1, 16);
            if (h == 0 || (h >= stf * 4 && h < tds[25]))
            {
                g = EvList.Items.Count;
                EventAdd();
                if (h == 0)
                {
                    h = j * 4;
                    if (EventTab.SelectedIndex == 0)
                    {
                        i = EvSpCbID.SelectedIndex;
                        if (EvSubaCbList.Items.Count < 4)
                        {
                            if (EvSpCbList.SelectedIndex == 0)
                            {
                                n = alm[dat + 4] / 4;
                            }
                            else
                            {
                                n = alm[dat + 5] / 4;
                            }
                        }
                        else if (EvSpCbList.SelectedIndex == 0)
                        {
                            n = alm[dat + 9] / 4;
                        }
                        else
                        {
                            n = alm[dat + 10] / 4;
                        }
                        alm[n + i] = h;
                        asc[par] = (n + i) * 4;
                        mov = 0;
                        tds[26]++;
                        EvSpOffset.Text = "0x" + h.ToString("X");
                    }
                    else if (EventTab.SelectedIndex == 1)
                    {
                        i = EvSubaCbID.SelectedIndex;
                        m = EvSubaCbList.SelectedIndex;
                        if (m < 4)
                        {
                            n = alm[dat + 12 + m] / 4;
                        }
                        else
                        {
                            n = alm[dat + 27 + m] / 4;
                        }
                        alm[n + i] = h;
                        asc[par] = (n + i) * 4;
                        mov = 0;
                        tds[26]++;
                        EvSubaOffset.Text = "0x" + h.ToString("X");
                    }
                    else if (EventTab.SelectedIndex == 3)
                    {
                        if (EvOvrCbList.SelectedIndex == 2)
                        {
                            n = alm[dat + 11] / 4;
                            i = EvOvrId.SelectedIndex;
                        }
                        else
                        {
                            if (EvOvrCbList.SelectedIndex == 0)
                            {
                                n = alm[dat + 20] / 4 + 1;
                            }
                            else
                            {
                                n = alm[dat + 21] / 4 + 1;
                            }
                            i = EvOvrId.SelectedIndex * 2;
                        }
                        alm[n + i] = h;
                        asc[par] = (n + i) * 4;
                        mov = 0;
                        tds[26]++;
                        EvOvrOffset.Text = "0x" + h.ToString("X");
                    }
                    EveListstring();
                    EvList.Items.Add(rd1);
                    Fixam();
                }
                else
                {
                    if (k > 4)
                    {
                        an1 = j;
                        g = j * 4;
                        if (EventTab.SelectedIndex == 0)
                        {
                            if (EvSubaCbList.Items.Count < 4)
                            {
                                if (EvSpCbList.SelectedIndex == 0)
                                {
                                    n = alm[dat + 4] / 4;
                                }
                                else
                                {
                                    n = alm[dat + 5] / 4;
                                }
                            }
                            else if (EvSpCbList.SelectedIndex == 0)
                            {
                                n = alm[dat + 9] / 4;
                            }
                            else
                            {
                                n = alm[dat + 10] / 4;
                            }
                            i = EvSpCbID.SelectedIndex;
                            alm[n + i] = g;
                            EvSpOffset.Text = "0x" + g.ToString("X");
                        }
                        else if (EventTab.SelectedIndex == 1)
                        {
                            m = EvSubaCbList.SelectedIndex;
                            if (m < 4)
                            {
                                n = alm[dat + 12 + m] / 4;
                            }
                            else
                            {
                                n = alm[dat + 27 + m] / 4;
                            }
                            i = EvSubaCbID.SelectedIndex;
                            alm[n + i] = g;
                            EvSubaOffset.Text = "0x" + g.ToString("X");
                        }
                        else if (EventTab.SelectedIndex == 3)
                        {
                            if (EvOvrCbList.SelectedIndex == 2)
                            {
                                n = alm[dat + 11] / 4;
                                i = EvOvrId.SelectedIndex;
                            }
                            else
                            {
                                if (EvOvrCbList.SelectedIndex == 0)
                                {
                                    n = alm[dat + 20] / 4 + 1;
                                }
                                else
                                {
                                    n = alm[dat + 21] / 4 + 1;
                                }
                                i = EvOvrId.SelectedIndex * 2;
                            }
                            alm[n + i] = g;
                            EvOvrOffset.Text = "0x" + g.ToString("X");
                        }
                        else
                        {
                            rd1 = EvRnOffset.Text;
                            rd2 = "0x" + g.ToString("X");
                            EvRnOffset.Text = rd2;
                            if (EvOffsetInterlock.Checked)
                            {
                                if (EvSpOffset.Text == rd1)
                                {
                                    EvSpOffset.Text = rd2;
                                }
                                if (EvSubaOffset.Text == rd1)
                                {
                                    EvSubaOffset.Text = rd2;
                                }
                                if (EvOvrOffset.Text == rd1)
                                {
                                    EvOvrOffset.Text = rd2;
                                }
                            }
                        }
                        if (EvOffsetInterlock.Checked)
                        {
                            i = EvList.Items.Count;
                            k = h + i * 8;
                            for (i = stf; i < md; i++)
                            {
                                if (alm[i] >= h && alm[i] <= k)
                                {
                                    n = i * 4;
                                    for (mov = 0; mov < par; mov++)
                                    {
                                        if (asc[mov] == n)
                                        {
                                            if (alm[i] == h)
                                            {
                                                alm[i] = g;
                                                break;
                                            }
                                            m = alm[i] - h;
                                            if (m % 8 == 0)
                                            {
                                                alm[i] = g + m;
                                            }
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        Fixam();
                        j = an1;
                    }
                    else if (k == 1)
                    {
                        Fixam();
                        j = h / 4;
                    }
                    if (EvList.SelectedIndex != -1)
                    {
                        g = EvList.Items.Count;
                        k = 0;
                        if (g < 511)
                        {
                            for (i = 0; i < g; i++)
                            {
                                if (EvList.GetSelected(i))
                                {
                                    nonam[k] = i;
                                    k++;
                                }
                            }
                            nonam[k] = 1048575;
                        }
                        else
                        {
                            nonam[0] = 1048575;
                        }
                    }
                    else
                    {
                        nonam[0] = 1048575;
                    }
                    mov = 0;
                    EvList.Items.Clear();
                    while (alm[j] != 0 && j < md)
                    {
                        EveListstring();
                        EvList.Items.Add(rd1);
                        j += 2;
                    }
                    if (nonam[0] < 1048575)
                    {
                        g = EvList.Items.Count;
                        k = 0;
                        for (i = 0; i < g; i++)
                        {
                            if (i == nonam[k])
                            {
                                EvList.SetSelected(i, value: true);
                                k++;
                            }
                        }
                    }
                }
                if (qe)
                {
                    Qsave.Enabled = true;
                }
            }
            EvDesText.Enabled = true;
        }

        private void EvModify_Click(object sender, EventArgs e)
        {
            if (EvList.SelectedIndex == -1)
            {
                return;
            }
            if (EventTab.SelectedIndex == 0)
            {
                rd1 = EvSpOffset.Text.Substring(2);
            }
            else if (EventTab.SelectedIndex == 1)
            {
                rd1 = EvSubaOffset.Text.Substring(2);
            }
            else if (EventTab.SelectedIndex == 3)
            {
                rd1 = EvOvrOffset.Text.Substring(2);
            }
            else
            {
                rd1 = EvRnOffset.Text.Substring(2);
            }
            h = Convert.ToInt32(rd1, 16);
            g = EvList.SelectedIndex;
            j = h / 4 + g * 2;
            if (alm[j + 1] >= 0 && alm[j + 1] < tds[25])
            {
                EventModify();
                if (h != -1)
                {
                    return;
                }
                h = Convert.ToInt32(rd1, 16);
                g = EvList.Items.Count;
                k = 0;
                if (g < 511)
                {
                    for (i = 0; i < g; i++)
                    {
                        if (EvList.GetSelected(i))
                        {
                            nonam[k] = i;
                            k++;
                        }
                    }
                    nonam[k] = 1048575;
                }
                else
                {
                    nonam[0] = 1048575;
                }
                j = h / 4;
                mov = 0;
                EvList.Items.Clear();
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    EvList.Items.Add(rd1);
                    j += 2;
                }
                if (nonam[0] < 1048575)
                {
                    EvDesText.Enabled = false;
                    g = EvList.Items.Count;
                    k = 0;
                    for (i = 0; i < g; i++)
                    {
                        if (i == nonam[k])
                        {
                            EvList.SetSelected(i, value: true);
                            k++;
                        }
                    }
                    EvDesText.Enabled = true;
                }
                if (qe)
                {
                    Qsave.Enabled = true;
                }
            }
            else
            {
                minitxt.Text = "Error! Cannot Modify this Event.";
            }
        }

        private void EvList_DoubleClick(object sender, EventArgs e)
        {
            if (EvList.SelectedIndex == -1)
            {
                return;
            }
            if (EventTab.SelectedIndex == 0)
            {
                rd1 = EvSpOffset.Text.Substring(2);
            }
            else if (EventTab.SelectedIndex == 1)
            {
                rd1 = EvSubaOffset.Text.Substring(2);
            }
            else if (EventTab.SelectedIndex == 3)
            {
                rd1 = EvOvrOffset.Text.Substring(2);
            }
            else
            {
                rd1 = EvRnOffset.Text.Substring(2);
            }
            h = Convert.ToInt32(rd1, 16);
            g = EvList.SelectedIndex;
            j = h / 4 + g * 2;
            if (alm[j + 1] >= 0 && alm[j + 1] < tds[25])
            {
                EventModify();
                if (h != -1)
                {
                    return;
                }
                h = Convert.ToInt32(rd1, 16);
                g = EvList.Items.Count;
                k = 0;
                if (g < 511)
                {
                    for (i = 0; i < g; i++)
                    {
                        if (EvList.GetSelected(i))
                        {
                            nonam[k] = i;
                            k++;
                        }
                    }
                    nonam[k] = 1048575;
                }
                else
                {
                    nonam[0] = 1048575;
                }
                j = h / 4;
                mov = 0;
                EvList.Items.Clear();
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    EvList.Items.Add(rd1);
                    j += 2;
                }
                if (nonam[0] < 1048575)
                {
                    EvDesText.Enabled = false;
                    g = EvList.Items.Count;
                    k = 0;
                    for (i = 0; i < g; i++)
                    {
                        if (i == nonam[k])
                        {
                            EvList.SetSelected(i, value: true);
                            k++;
                        }
                    }
                    EvDesText.Enabled = true;
                }
                if (qe)
                {
                    Qsave.Enabled = true;
                }
            }
            else
            {
                minitxt.Text = "Error! Cannot Modify this Event.";
            }
        }

        private void EvRemove_Click(object sender, EventArgs e)
        {
            if (EvList.SelectedIndex == -1)
            {
                return;
            }
            if (EventTab.SelectedIndex == 0)
            {
                if (EvSpOffset.Text.Length > 2)
                {
                    if (EvSpCbID.SelectedIndex == -1)
                    {
                        EvSpCbID.SelectedIndex = aid;
                    }
                    if (EvSpCbList.SelectedIndex == -1)
                    {
                        EvSpCbList.SelectedIndex = alist;
                    }
                    rd1 = EvSpOffset.Text.Substring(2);
                }
                else
                {
                    rd1 = "";
                }
            }
            else if (EventTab.SelectedIndex == 1)
            {
                if (EvSubaOffset.Text.Length > 2)
                {
                    if (EvSubaCbID.SelectedIndex == -1)
                    {
                        EvSubaCbID.SelectedIndex = sid;
                    }
                    if (EvSubaCbList.SelectedIndex == -1)
                    {
                        EvSubaCbList.SelectedIndex = slist;
                    }
                    rd1 = EvSubaOffset.Text.Substring(2);
                }
                else
                {
                    rd1 = "";
                }
            }
            else if (EventTab.SelectedIndex == 3)
            {
                if (EvOvrOffset.Text.Length > 2)
                {
                    if (EvOvrId.SelectedIndex != -1)
                    {
                        if (EvOvrCbList.SelectedIndex != -1)
                        {
                            rd1 = EvOvrOffset.Text.Substring(2);
                        }
                        else
                        {
                            rd1 = "";
                        }
                    }
                    else
                    {
                        rd1 = "";
                    }
                }
                else
                {
                    rd1 = "";
                }
            }
            else if (EvRnOffset.Text.Length > 5)
            {
                rd1 = EvRnOffset.Text.Substring(2);
            }
            else
            {
                rd1 = "";
            }
            if (!(rd1 != ""))
            {
                return;
            }
            h = Convert.ToInt32(rd1, 16);
            j = h / 4;
            g = EvList.Items.Count;
            if (EvList.SelectedItems.Count >= g)
            {
                RemoveAllEv();
                if (EventTab.SelectedIndex == 0)
                {
                    if (EvSubaCbList.Items.Count < 4)
                    {
                        if (EvSpCbList.SelectedIndex == 0)
                        {
                            n = alm[dat + 4] / 4;
                        }
                        else
                        {
                            n = alm[dat + 5] / 4;
                        }
                    }
                    else if (EvSpCbList.SelectedIndex == 0)
                    {
                        n = alm[dat + 9] / 4;
                    }
                    else
                    {
                        n = alm[dat + 10] / 4;
                    }
                    i = EvSpCbID.SelectedIndex;
                    alm[n + i] = 0;
                    rmv = (n + i) * 4;
                    Delasc();
                    EvSpOffset.Text = "0x0";
                }
                else if (EventTab.SelectedIndex == 1)
                {
                    k = EvSubaCbList.SelectedIndex;
                    i = EvSubaCbID.SelectedIndex;
                    if (k < 4)
                    {
                        n = alm[dat + 12 + k] / 4;
                    }
                    else
                    {
                        n = alm[dat + 27 + k] / 4;
                    }
                    alm[n + i] = 0;
                    rmv = (n + i) * 4;
                    Delasc();
                    EvSubaOffset.Text = "0x0";
                }
                else if (EventTab.SelectedIndex == 3)
                {
                    if (EvOvrCbList.SelectedIndex == 2)
                    {
                        n = alm[dat + 11] / 4;
                        i = EvOvrId.SelectedIndex;
                    }
                    else
                    {
                        if (EvOvrCbList.SelectedIndex == 0)
                        {
                            n = alm[dat + 20] / 4 + 1;
                        }
                        else
                        {
                            n = alm[dat + 21] / 4 + 1;
                        }
                        i = EvOvrId.SelectedIndex * 2;
                    }
                    alm[n + i] = 0;
                    rmv = (n + i) * 4;
                    Delasc();
                    EvOvrOffset.Text = "0x0";
                }
                else
                {
                    rd1 = EvRnOffset.Text;
                    EvRnOffset.Text = "0x0";
                    if (EvOffsetInterlock.Checked)
                    {
                        if (EvSpOffset.Text == rd1)
                        {
                            EvSpOffset.Text = "0x0";
                        }
                        if (EvSubaOffset.Text == rd1)
                        {
                            EvSubaOffset.Text = "0x0";
                        }
                        if (EvOvrOffset.Text == rd1)
                        {
                            EvOvrOffset.Text = "0x0";
                        }
                    }
                }
                if (EvOffsetInterlock.Checked)
                {
                    k = h + g * 8;
                    for (i = stf; i < md; i++)
                    {
                        if (alm[i] >= h && alm[i] <= k)
                        {
                            DelILData();
                        }
                    }
                }
                EvList.Items.Clear();
            }
            else
            {
                for (i = g - 1; i >= 0; i--)
                {
                    if (EvList.GetSelected(i))
                    {
                        RemoveSeleEv();
                    }
                }
                if (EvOffsetInterlock.Checked)
                {
                    k = h + g * 8;
                    h = k - EvList.SelectedItems.Count * 8;
                    for (i = stf; i < md; i++)
                    {
                        if (alm[i] >= h && alm[i] <= k)
                        {
                            DelILData();
                        }
                    }
                }
                EvList.Items.Clear();
                mov = 0;
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    EvList.Items.Add(rd1);
                    j += 2;
                }
            }
            EvDesText.Text = "";
            Fixam();
            if (qe)
            {
                Qsave.Enabled = true;
            }
        }

        private void EvUp_Click(object sender, EventArgs e)
        {
            if (EvList.SelectedIndex == -1)
            {
                return;
            }
            if (EventTab.SelectedIndex == 0)
            {
                rd1 = EvSpOffset.Text.Substring(2);
            }
            else if (EventTab.SelectedIndex == 1)
            {
                rd1 = EvSubaOffset.Text.Substring(2);
            }
            else if (EventTab.SelectedIndex == 3)
            {
                rd1 = EvOvrOffset.Text.Substring(2);
            }
            else
            {
                rd1 = EvRnOffset.Text.Substring(2);
            }
            h = Convert.ToInt32(rd1, 16);
            j = h / 4;
            if (EvList.GetSelected(0))
            {
                return;
            }
            g = EvList.Items.Count;
            if (EvList.SelectedItems.Count < 510)
            {
                k = 0;
                for (i = 0; i < g; i++)
                {
                    if (EvList.GetSelected(i))
                    {
                        SeleEvUp();
                        nonam[k] = i - 1;
                        k++;
                    }
                }
                nonam[k] = 1048575;
            }
            else
            {
                nonam[0] = 1048575;
                for (i = 0; i < g; i++)
                {
                    if (EvList.GetSelected(i))
                    {
                        SeleEvUp();
                    }
                }
            }
            EvList.Items.Clear();
            mov = 0;
            while (alm[j] != 0 && j < md)
            {
                EveListstring();
                EvList.Items.Add(rd1);
                j += 2;
            }
            if (nonam[0] < 1048575)
            {
                h = EvList.Items.Count;
                k = 0;
                EvDesText.Enabled = false;
                for (i = 0; i < EvList.Items.Count; i++)
                {
                    if (i == nonam[k])
                    {
                        EvList.SetSelected(i, value: true);
                        k++;
                    }
                }
                EvDesText.Enabled = true;
            }
            if (qe)
            {
                Qsave.Enabled = true;
            }
        }

        private void EvDown_Click(object sender, EventArgs e)
        {
            if (EvList.SelectedIndex == -1)
            {
                return;
            }
            if (EventTab.SelectedIndex == 0)
            {
                rd1 = EvSpOffset.Text.Substring(2);
            }
            else if (EventTab.SelectedIndex == 1)
            {
                rd1 = EvSubaOffset.Text.Substring(2);
            }
            else if (EventTab.SelectedIndex == 3)
            {
                rd1 = EvOvrOffset.Text.Substring(2);
            }
            else
            {
                rd1 = EvRnOffset.Text.Substring(2);
            }
            h = Convert.ToInt32(rd1, 16);
            j = h / 4;
            g = EvList.Items.Count;
            if (EvList.GetSelected(g - 1))
            {
                return;
            }
            if (EvList.SelectedItems.Count < 510)
            {
                k = 0;
                for (i = g - 1; i >= 0; i--)
                {
                    if (EvList.GetSelected(i))
                    {
                        SeleEvDown();
                        nonam[k] = i + 1;
                        k++;
                    }
                }
                nonam[k] = 1048575;
            }
            else
            {
                nonam[0] = 1048575;
                for (i = g - 1; i >= 0; i--)
                {
                    if (EvList.GetSelected(i))
                    {
                        SeleEvDown();
                    }
                }
            }
            EvList.Items.Clear();
            mov = 0;
            while (alm[j] != 0 && j < md)
            {
                EveListstring();
                EvList.Items.Add(rd1);
                j += 2;
            }
            if (nonam[0] < 1048575)
            {
                k = 0;
                EvDesText.Enabled = false;
                for (i = EvList.Items.Count; i >= 0; i--)
                {
                    if (i == nonam[k])
                    {
                        EvList.SetSelected(i, value: true);
                        k++;
                    }
                }
                EvDesText.Enabled = true;
            }
            if (qe)
            {
                Qsave.Enabled = true;
            }
        }

        private void EvCopy_Click(object sender, EventArgs e)
        {
            if (EvList.SelectedIndex == -1)
            {
                return;
            }
            if (EventTab.SelectedIndex == 0)
            {
                rd1 = EvSpOffset.Text.Substring(2);
            }
            else if (EventTab.SelectedIndex == 1)
            {
                rd1 = EvSubaOffset.Text.Substring(2);
            }
            else if (EventTab.SelectedIndex == 3)
            {
                rd1 = EvOvrOffset.Text.Substring(2);
            }
            else
            {
                rd1 = EvRnOffset.Text.Substring(2);
            }
            g = Convert.ToInt32(rd1, 16);
            n = g / 4;
            rd1 = "";
            h = EvList.Items.Count;
            for (i = 0; i < h; i++)
            {
                if (EvList.GetSelected(i))
                {
                    rd1 = rd1 + "E=" + alm[n + i * 2].ToString("X8") + ":";
                    g = ((alm[n + i * 2] >> 8) & 0xFF);
                    if (g != 0)
                    {
                        k = g * 2;
                        g = alm[n + i * 2 + 1] / 4;
                        if (g >= stf && g < md)
                        {
                            if (k == 2)
                            {
                                if (alm[g] == 2)
                                {
                                    an1 = g * 4 + 4;
                                    for (j = 0; j < tds[28]; j++)
                                    {
                                        k = rnext[(tds[27] + j) * 2];
                                        if (k >= 8096 && k < tds[25])
                                        {
                                            if (k == an1)
                                            {
                                                break;
                                            }
                                            for (an5 = 0; an5 < 100; an5++)
                                            {
                                                m = k / 4;
                                                k = alm[m];
                                                if (k < 8096 || k >= tds[25] || an1 == k)
                                                {
                                                    break;
                                                }
                                            }
                                            if (an1 == k)
                                            {
                                                break;
                                            }
                                        }
                                    }
                                    if (j < tds[28])
                                    {
                                        rd1 = rd1 + "SE" + j.ToString("X8") + ",";
                                    }
                                    else
                                    {
                                        rd1 = rd1 + "2-" + alm[g + 1].ToString("X8") + ",";
                                    }
                                }
                                else
                                {
                                    string text = rd1;
                                    rd1 = text + alm[g].ToString("X") + "-" + alm[g + 1].ToString("X8") + ",";
                                }
                            }
                            else
                            {
                                for (j = 0; j < k; j += 2)
                                {
                                    string text = rd1;
                                    rd1 = text + alm[g + j].ToString("X") + "-" + alm[g + j + 1].ToString("X8") + ",";
                                }
                            }
                        }
                    }
                }
            }
            Clipboard.SetText(rd1);
        }

        private void EvPaste_Click(object sender, EventArgs e)
        {
            if (Clipboard.ContainsText())
            {
                EvPaste.Enabled = false;
                h = 1048575;
                if (EventTab.SelectedIndex == 0)
                {
                    if (EvSpOffset.Text.Length > 2)
                    {
                        if (EvSpCbID.SelectedIndex == -1)
                        {
                            EvSpCbID.SelectedIndex = aid;
                        }
                        if (EvSpCbList.SelectedIndex == -1)
                        {
                            EvSpCbList.SelectedIndex = alist;
                        }
                        rd1 = EvSpOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                    }
                }
                else if (EventTab.SelectedIndex == 1)
                {
                    if (EvSubaOffset.Text.Length > 2)
                    {
                        if (EvSubaCbID.SelectedIndex == -1)
                        {
                            EvSubaCbID.SelectedIndex = sid;
                        }
                        if (EvSubaCbList.SelectedIndex == -1)
                        {
                            EvSubaCbList.SelectedIndex = slist;
                        }
                        rd1 = EvSubaOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                    }
                }
                else if (EventTab.SelectedIndex == 3)
                {
                    if (EvOvrOffset.Text.Length > 2 && EvOvrId.SelectedIndex != -1 && EvOvrCbList.SelectedIndex != -1)
                    {
                        rd1 = EvOvrOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                    }
                }
                else if (EvRnOffset.Text.Length > 5)
                {
                    rd1 = EvRnOffset.Text.Substring(2);
                    h = Convert.ToInt32(rd1, 16);
                }
                if (h == 0 || (h >= stf * 4 && h < tds[25]))
                {
                    rd1 = Clipboard.GetText();
                    if (rd1 != null)
                    {
                        if (rd1.Length > 10)
                        {
                            if (rd1[2] == ':' && EvSubaCbList.Items.Count > 3)
                            {
                                ModeChange.Enabled = false;
                                AllEnableChange();
                                rd4 = "";
                                rd1 += "/";
                                h = 0;
                                g = rd1.Length;
                                an5 = 0;
                                this.i = 3;
                                while (this.i < g)
                                {
                                    if (rd1[this.i] == '/')
                                    {
                                        rd2 = rd1.Substring(h, this.i - h + 1);
                                        if (rd2.Length < 15)
                                        {
                                            break;
                                        }
                                        rd3 = rd2.Substring(0, 2);
                                        if (rd3 == "AC" || rd3 == "PB" || rd3 == "PF" || rd3 == "PO")
                                        {
                                            if (rd2.Length <= 18 || rd2[3] != 'S' || !Uri.IsHexDigit(rd2[10]) || !Uri.IsHexDigit(rd2[11]) || !Uri.IsHexDigit(rd2[12]) || rd2[13] != '-' || !Uri.IsHexDigit(rd2[14]) || !Uri.IsHexDigit(rd2[15]) || !Uri.IsHexDigit(rd2[16]))
                                            {
                                                break;
                                            }
                                            rd3 = rd2.Substring(10, 3);
                                            an1 = Convert.ToInt32(rd3, 16);
                                            rd3 = rd2.Substring(14, 3);
                                            an2 = Convert.ToInt32(rd3, 16);
                                            if (an1 > an2)
                                            {
                                                an2 = an1;
                                                rd2 = rd2.Substring(0, 14) + an2.ToString("X3") + rd2.Substring(17);
                                            }
                                            j = 1;
                                            if (rd2[4] == 'p')
                                            {
                                                if (an1 >= 274 && an1 < 274 + spas)
                                                {
                                                    if (an2 > 273 + spas)
                                                    {
                                                        an2 = 273 + spas;
                                                        rd2 = rd2.Substring(0, 14) + an2.ToString("X3") + rd2.Substring(17);
                                                    }
                                                    j = 0;
                                                }
                                            }
                                            else if (rd2[4] == 'O')
                                            {
                                                if (rd2[8] == 'n')
                                                {
                                                    if (alm[dat + 20] >= 8096 && alm[dat + 20] < tds[25])
                                                    {
                                                        k = alm[dat + 20] / 4;
                                                        while (k < md && alm[k] >= 0)
                                                        {
                                                            if (alm[k] >= an1 && alm[k] <= an2)
                                                            {
                                                                j = 0;
                                                                break;
                                                            }
                                                            k += 2;
                                                        }
                                                    }
                                                }
                                                else if (rd2[8] == 'x')
                                                {
                                                    if (alm[dat + 21] >= 8096 && alm[dat + 21] < tds[25])
                                                    {
                                                        k = alm[dat + 21] / 4;
                                                        while (k < md && alm[k] >= 0)
                                                        {
                                                            if (alm[k] >= an1 && alm[k] <= an2)
                                                            {
                                                                j = 0;
                                                                break;
                                                            }
                                                            k += 2;
                                                        }
                                                    }
                                                }
                                                else if (an1 >= 0 && an1 < 274 + spas)
                                                {
                                                    if (an2 > 273 + spas)
                                                    {
                                                        an2 = 273 + spas;
                                                        rd2 = rd2.Substring(0, 14) + an2.ToString("X3") + rd2.Substring(17);
                                                    }
                                                    j = 0;
                                                }
                                            }
                                            else if (an1 >= 0 && an1 < suba)
                                            {
                                                j = 0;
                                                if (rd2[7] == 'N' && EvSubaCbList.Items.Count != 8)
                                                {
                                                    rd2 = rd2.Substring(0, 7) + ":" + rd2.Substring(8);
                                                }
                                                if (an2 >= suba)
                                                {
                                                    an2 = suba - 1;
                                                    rd2 = rd2.Substring(0, 14) + an2.ToString("X3") + rd2.Substring(17);
                                                }
                                            }
                                            if (j == 0)
                                            {
                                                if (rd2[0] == 'A')
                                                {
                                                    rd4 += rd2;
                                                    an5++;
                                                }
                                                else if (rd2.Length >= 30)
                                                {
                                                    j = 20;
                                                    while (j < 28 && Uri.IsHexDigit(rd2[j]))
                                                    {
                                                        j++;
                                                    }
                                                    if (j == 28)
                                                    {
                                                        rd4 += rd2;
                                                        an5++;
                                                    }
                                                }
                                            }
                                            h = this.i + 1;
                                            this.i += 4;
                                        }
                                        else
                                        {
                                            if ((!(rd3 == "AF") && !(rd3 == "EF") && !(rd3 == "SF") && !(rd3 == "SN")) || (rd2[3] != 'S' && rd2[3] != 'A' && rd2[3] != 'O') || !Uri.IsHexDigit(rd2[6]) || !Uri.IsHexDigit(rd2[7]) || !Uri.IsHexDigit(rd2[8]) || rd2[9] != '-' || !Uri.IsHexDigit(rd2[10]) || !Uri.IsHexDigit(rd2[11]) || !Uri.IsHexDigit(rd2[12]))
                                            {
                                                break;
                                            }
                                            rd3 = rd2.Substring(6, 3);
                                            an1 = Convert.ToInt32(rd3, 16);
                                            rd3 = rd2.Substring(10, 3);
                                            an2 = Convert.ToInt32(rd3, 16);
                                            if (an1 > an2)
                                            {
                                                an2 = an1;
                                                rd2 = rd2.Substring(0, 10) + an2.ToString("X3") + rd2.Substring(13);
                                            }
                                            if (rd2[1] == 'N')
                                            {
                                                if (rd2[3] != 'S')
                                                {
                                                    break;
                                                }
                                                k = rd2.Length - 2;
                                                for (j = 14; j < k; j++)
                                                {
                                                    if (rd2[j] == '\r')
                                                    {
                                                        rd2 = rd2.Substring(0, j) + "/";
                                                        break;
                                                    }
                                                }
                                                if (rd2.Length > 20)
                                                {
                                                    rd3 = rd2.Substring(14, 6);
                                                    if (rd3 == "<null>")
                                                    {
                                                        rd2 = rd2.Substring(0, 20) + "/";
                                                    }
                                                    else if (rd3 == "<ERROR")
                                                    {
                                                        an1 = 268435456;
                                                    }
                                                }
                                                if (rd2.Length <= 15)
                                                {
                                                    an1 = 268435456;
                                                }
                                                if (an1 < suba)
                                                {
                                                    if (an2 >= suba)
                                                    {
                                                        an2 = suba - 1;
                                                        rd2 = rd2.Substring(0, 10) + an2.ToString("X3") + rd2.Substring(13);
                                                    }
                                                    rd4 += rd2;
                                                    an5++;
                                                }
                                                h = this.i + 1;
                                                this.i += 4;
                                            }
                                            else if (rd2.Length >= 23)
                                            {
                                                if (rd2[0] == 'S')
                                                {
                                                    if (an1 >= 0 && an1 < suba && rd2.Length >= 23)
                                                    {
                                                        j = 14;
                                                        while (j < 22 && Uri.IsHexDigit(rd2[j]))
                                                        {
                                                            j++;
                                                        }
                                                        if (j == 22)
                                                        {
                                                            if (an2 >= suba)
                                                            {
                                                                an2 = suba - 1;
                                                                rd2 = rd2.Substring(0, 10) + an2.ToString("X3") + rd2.Substring(13);
                                                            }
                                                            rd4 += rd2;
                                                            an5++;
                                                        }
                                                    }
                                                }
                                                else if (rd2[0] == 'E')
                                                {
                                                    if (an1 >= 0 && an1 < 274 + spas && rd2.Length >= 25 && (rd2[14] == '0' || rd2[14] == '1') && rd2[15] == '-')
                                                    {
                                                        j = 16;
                                                        while (j < 24 && Uri.IsHexDigit(rd2[j]))
                                                        {
                                                            j++;
                                                        }
                                                        if (j == 24)
                                                        {
                                                            if (an2 > 273 + spas)
                                                            {
                                                                an2 = 273 + spas;
                                                                rd2 = rd2.Substring(0, 10) + an2.ToString("X3") + rd2.Substring(13);
                                                            }
                                                            rd4 += rd2;
                                                            an5++;
                                                        }
                                                    }
                                                }
                                                else if (an1 >= 0 && an1 < 274 + spas && rd2.Length >= 25 && (rd2[14] == '0' || rd2[14] == '1' || rd2[14] == '2' || rd2[14] == '3') && rd2[15] == '-')
                                                {
                                                    j = 16;
                                                    while (j < 24 && Uri.IsHexDigit(rd2[j]))
                                                    {
                                                        j++;
                                                    }
                                                    if (j == 24)
                                                    {
                                                        if (an2 > 273 + spas)
                                                        {
                                                            an2 = 273 + spas;
                                                            rd2 = rd2.Substring(0, 10) + an2.ToString("X3") + rd2.Substring(13);
                                                        }
                                                        rd4 += rd2;
                                                        an5++;
                                                    }
                                                }
                                                h = this.i + 1;
                                                this.i += 4;
                                            }
                                        }
                                    }
                                    this.i++;
                                }
                                if (an5 > 0)
                                {
                                    if (minitxt.Text == "Cannot Paste.")
                                    {
                                        minitxt.Text = "";
                                    }
                                    string[] array = new string[an5];
                                    g = rd4.Length;
                                    h = 0;
                                    k = 0;
                                    this.i = 3;
                                    while (this.i < g)
                                    {
                                        if (rd4[this.i] == '/')
                                        {
                                            rd1 = rd4.Substring(h, this.i - h);
                                            rd2 = rd1.Substring(0, 2);
                                            if (rd2 == "AC" || rd2 == "PB" || rd2 == "PF" || rd2 == "PO")
                                            {
                                                if (rd2 == "AC")
                                                {
                                                    array[k] = "Events All Clear: ";
                                                }
                                                else if (rd2 == "PB")
                                                {
                                                    array[k] = "Events Add: ";
                                                }
                                                else if (rd2 == "PF")
                                                {
                                                    array[k] = "Events Add(Top): ";
                                                }
                                                else
                                                {
                                                    array[k] = "Events Add(Over): ";
                                                }
                                                if (rd1[4] == 'p')
                                                {
                                                    if (rd1[8] == 'x')
                                                    {
                                                        string[] array2;
                                                        string[] array3 = array2 = array;
                                                        int num = k;
                                                        IntPtr intPtr = (IntPtr)num;
                                                        array3[num] = array2[(long)intPtr] + "Specials Exit ";
                                                    }
                                                    else
                                                    {
                                                        string[] array2;
                                                        string[] array4 = array2 = array;
                                                        int num2 = k;
                                                        IntPtr intPtr = (IntPtr)num2;
                                                        array4[num2] = array2[(long)intPtr] + "Specials Entry ";
                                                    }
                                                }
                                                else if (rd1[4] == 'O')
                                                {
                                                    if (rd1[8] == 'n')
                                                    {
                                                        string[] array2;
                                                        string[] array5 = array2 = array;
                                                        int num3 = k;
                                                        IntPtr intPtr = (IntPtr)num3;
                                                        array5[num3] = array2[(long)intPtr] + "Action Override Entry ";
                                                    }
                                                    else if (rd1[8] == 'x')
                                                    {
                                                        string[] array2;
                                                        string[] array6 = array2 = array;
                                                        int num4 = k;
                                                        IntPtr intPtr = (IntPtr)num4;
                                                        array6[num4] = array2[(long)intPtr] + "Action Override Exit ";
                                                    }
                                                    else
                                                    {
                                                        string[] array2;
                                                        string[] array7 = array2 = array;
                                                        int num5 = k;
                                                        IntPtr intPtr = (IntPtr)num5;
                                                        array7[num5] = array2[(long)intPtr] + "Action Pre ";
                                                    }
                                                }
                                                else if (rd1[7] == 'N')
                                                {
                                                    if (rd1[8] == 'M')
                                                    {
                                                        string[] array2;
                                                        string[] array8 = array2 = array;
                                                        int num6 = k;
                                                        IntPtr intPtr = (IntPtr)num6;
                                                        array8[num6] = array2[(long)intPtr] + "Sub Action NMain ";
                                                    }
                                                    else if (rd1[8] == 'G')
                                                    {
                                                        string[] array2;
                                                        string[] array9 = array2 = array;
                                                        int num7 = k;
                                                        IntPtr intPtr = (IntPtr)num7;
                                                        array9[num7] = array2[(long)intPtr] + "Sub Action NGFX ";
                                                    }
                                                    else if (rd1[8] == 'S')
                                                    {
                                                        string[] array2;
                                                        string[] array10 = array2 = array;
                                                        int num8 = k;
                                                        IntPtr intPtr = (IntPtr)num8;
                                                        array10[num8] = array2[(long)intPtr] + "Sub Action NSFX ";
                                                    }
                                                    else
                                                    {
                                                        string[] array2;
                                                        string[] array11 = array2 = array;
                                                        int num9 = k;
                                                        IntPtr intPtr = (IntPtr)num9;
                                                        array11[num9] = array2[(long)intPtr] + "Sub Action NOther ";
                                                    }
                                                }
                                                else if (rd1[8] == 'M')
                                                {
                                                    string[] array2;
                                                    string[] array12 = array2 = array;
                                                    int num10 = k;
                                                    IntPtr intPtr = (IntPtr)num10;
                                                    array12[num10] = array2[(long)intPtr] + "Sub Action Main ";
                                                }
                                                else if (rd1[8] == 'G')
                                                {
                                                    string[] array2;
                                                    string[] array13 = array2 = array;
                                                    int num11 = k;
                                                    IntPtr intPtr = (IntPtr)num11;
                                                    array13[num11] = array2[(long)intPtr] + "Sub Action GFX ";
                                                }
                                                else if (rd1[8] == 'S')
                                                {
                                                    string[] array2;
                                                    string[] array14 = array2 = array;
                                                    int num12 = k;
                                                    IntPtr intPtr = (IntPtr)num12;
                                                    array14[num12] = array2[(long)intPtr] + "Sub Action SFX ";
                                                }
                                                else
                                                {
                                                    string[] array2;
                                                    string[] array15 = array2 = array;
                                                    int num13 = k;
                                                    IntPtr intPtr = (IntPtr)num13;
                                                    array15[num13] = array2[(long)intPtr] + "Sub Action Other";
                                                }
                                                m = 0;
                                                if (rd1[10] == rd1[14] && rd1[11] == rd1[15] && rd1[12] == rd1[16])
                                                {
                                                    m = 1;
                                                }
                                                if (rd2 != "AC")
                                                {
                                                    j = rd1.Length - 18;
                                                    j -= j % 11;
                                                    if (m == 0)
                                                    {
                                                        string[] array2;
                                                        string[] array16 = array2 = array;
                                                        int num14 = k;
                                                        IntPtr intPtr = (IntPtr)num14;
                                                        array16[num14] = array2[(long)intPtr] + rd1.Substring(10, j + 8);
                                                    }
                                                    else
                                                    {
                                                        string[] array2;
                                                        string[] array17 = array2 = array;
                                                        int num15 = k;
                                                        IntPtr intPtr = (IntPtr)num15;
                                                        array17[num15] = array2[(long)intPtr] + rd1.Substring(14, j + 4);
                                                    }
                                                }
                                                else if (m == 0)
                                                {
                                                    string[] array2;
                                                    string[] array18 = array2 = array;
                                                    int num16 = k;
                                                    IntPtr intPtr = (IntPtr)num16;
                                                    array18[num16] = array2[(long)intPtr] + rd1.Substring(10, 8);
                                                }
                                                else
                                                {
                                                    string[] array2;
                                                    string[] array19 = array2 = array;
                                                    int num17 = k;
                                                    IntPtr intPtr = (IntPtr)num17;
                                                    array19[num17] = array2[(long)intPtr] + rd1.Substring(14, 4);
                                                }
                                            }
                                            else
                                            {
                                                m = 0;
                                                if (rd1[6] == rd1[10] && rd1[7] == rd1[11] && rd1[8] == rd1[12])
                                                {
                                                    m = 1;
                                                }
                                                if (rd2 == "SN")
                                                {
                                                    if (m == 0)
                                                    {
                                                        array[k] = "SubAction Name Change: " + rd1.Substring(6, 7) + " Set=";
                                                    }
                                                    else
                                                    {
                                                        array[k] = "SubAction Name Change: " + rd1.Substring(10, 3) + " Set=";
                                                    }
                                                    if (rd1.Length > 45)
                                                    {
                                                        string[] array2;
                                                        string[] array20 = array2 = array;
                                                        int num18 = k;
                                                        IntPtr intPtr = (IntPtr)num18;
                                                        array20[num18] = array2[(long)intPtr] + rd1.Substring(14, 31);
                                                    }
                                                    else
                                                    {
                                                        string[] array2;
                                                        string[] array21 = array2 = array;
                                                        int num19 = k;
                                                        IntPtr intPtr = (IntPtr)num19;
                                                        array21[num19] = array2[(long)intPtr] + rd1.Substring(14);
                                                    }
                                                }
                                                else
                                                {
                                                    if (rd2 == "AF")
                                                    {
                                                        array[k] = "Action Flags Change: ";
                                                    }
                                                    else if (rd2 == "EF")
                                                    {
                                                        array[k] = "ExtraAction Flags Change: ";
                                                    }
                                                    else
                                                    {
                                                        array[k] = "SubAction Flags Change: ";
                                                    }
                                                    if (m == 0)
                                                    {
                                                        string[] array2;
                                                        string[] array22 = array2 = array;
                                                        int num20 = k;
                                                        IntPtr intPtr = (IntPtr)num20;
                                                        array22[num20] = array2[(long)intPtr] + rd1.Substring(6, 8) + " ";
                                                    }
                                                    else
                                                    {
                                                        string[] array2;
                                                        string[] array23 = array2 = array;
                                                        int num21 = k;
                                                        IntPtr intPtr = (IntPtr)num21;
                                                        array23[num21] = array2[(long)intPtr] + rd1.Substring(10, 4) + " ";
                                                    }
                                                    if (rd2 != "SF")
                                                    {
                                                        string[] array2;
                                                        string[] array24 = array2 = array;
                                                        int num22 = k;
                                                        IntPtr intPtr = (IntPtr)num22;
                                                        array24[num22] = array2[(long)intPtr] + "Flags" + rd1.Substring(14, 1) + " ";
                                                    }
                                                    if (rd1[3] == 'S')
                                                    {
                                                        string[] array2;
                                                        string[] array25 = array2 = array;
                                                        int num23 = k;
                                                        IntPtr intPtr = (IntPtr)num23;
                                                        array25[num23] = array2[(long)intPtr] + "Flags Set=";
                                                    }
                                                    else if (rd1[3] == 'A')
                                                    {
                                                        string[] array2;
                                                        string[] array26 = array2 = array;
                                                        int num24 = k;
                                                        IntPtr intPtr = (IntPtr)num24;
                                                        array26[num24] = array2[(long)intPtr] + "Flags And-Set:";
                                                    }
                                                    else
                                                    {
                                                        string[] array2;
                                                        string[] array27 = array2 = array;
                                                        int num25 = k;
                                                        IntPtr intPtr = (IntPtr)num25;
                                                        array27[num25] = array2[(long)intPtr] + "Flags OR-Set:";
                                                    }
                                                    if (rd2 == "SF")
                                                    {
                                                        string[] array2;
                                                        string[] array28 = array2 = array;
                                                        int num26 = k;
                                                        IntPtr intPtr = (IntPtr)num26;
                                                        array28[num26] = array2[(long)intPtr] + rd1.Substring(14, 8);
                                                    }
                                                    else
                                                    {
                                                        string[] array2;
                                                        string[] array29 = array2 = array;
                                                        int num27 = k;
                                                        IntPtr intPtr = (IntPtr)num27;
                                                        array29[num27] = array2[(long)intPtr] + rd1.Substring(16, 8);
                                                    }
                                                }
                                            }
                                            h = this.i + 1;
                                            this.i += 4;
                                            k++;
                                        }
                                        this.i++;
                                    }
                                    g = 1;
                                    using (EvChangeForm evChangeForm = new EvChangeForm())
                                    {
                                        evChangeForm.StartPosition = FormStartPosition.CenterParent;
                                        evChangeForm.ecid = k;
                                        evChangeForm.ecdn = g;
                                        evChangeForm.ecwf = ExrFW;
                                        evChangeForm.echf = ExrFH;
                                        evChangeForm.eclis = array;
                                        evChangeForm.ShowDialog(this);
                                        k = evChangeForm.ecid;
                                        g = evChangeForm.ecdn;
                                        ExrFW = evChangeForm.ecwf;
                                        ExrFH = evChangeForm.echf;
                                    }
                                    if (g == 7)
                                    {
                                        EvSubaAnim.Enabled = false;
                                        EvSubaAnimFlag.Enabled = false;
                                        g = rd4.Length;
                                        h = 0;
                                        k = 0;
                                        this.i = 3;
                                        while (this.i < g)
                                        {
                                            if (rd4[this.i] == '/')
                                            {
                                                array[k] = rd4.Substring(h, this.i - h);
                                                h = this.i + 1;
                                                this.i += 4;
                                                k++;
                                            }
                                            this.i++;
                                        }
                                        rd1 = "";
                                        this.i = 0;
                                        while (this.i < an5)
                                        {
                                            rd1 = rd1 + array[this.i] + "\r\n";
                                            this.i++;
                                        }
                                        for (an3 = 0; an3 < an5; an3++)
                                        {
                                            rd2 = array[an3].Substring(0, 2);
                                            if (rd2 == "AC" || rd2 == "PB" || rd2 == "PF" || rd2 == "PO")
                                            {
                                                rd1 = array[an3];
                                                an1 = Convert.ToInt32(rd1.Substring(10, 3), 16);
                                                an2 = Convert.ToInt32(rd1.Substring(14, 3), 16);
                                                if (rd1[4] == 'p')
                                                {
                                                    if (rd1[8] == 'x')
                                                    {
                                                        this.i = alm[dat + 10];
                                                    }
                                                    else
                                                    {
                                                        this.i = alm[dat + 9];
                                                    }
                                                    an1 -= 274;
                                                    an2 -= 274;
                                                }
                                                else if (rd1[4] == 'O')
                                                {
                                                    if (rd1[8] == 'n')
                                                    {
                                                        this.i = alm[dat + 20];
                                                    }
                                                    else if (rd1[8] == 'x')
                                                    {
                                                        this.i = alm[dat + 21];
                                                    }
                                                    else
                                                    {
                                                        this.i = alm[dat + 11];
                                                    }
                                                }
                                                else if (rd1[7] == 'N')
                                                {
                                                    if (rd1[8] == 'M')
                                                    {
                                                        this.i = alm[dat + 31];
                                                    }
                                                    else if (rd1[8] == 'G')
                                                    {
                                                        this.i = alm[dat + 32];
                                                    }
                                                    else if (rd1[8] == 'S')
                                                    {
                                                        this.i = alm[dat + 33];
                                                    }
                                                    else
                                                    {
                                                        this.i = alm[dat + 34];
                                                    }
                                                }
                                                else if (rd1[8] == 'M')
                                                {
                                                    this.i = alm[dat + 12];
                                                }
                                                else if (rd1[8] == 'G')
                                                {
                                                    this.i = alm[dat + 13];
                                                }
                                                else if (rd1[8] == 'S')
                                                {
                                                    this.i = alm[dat + 14];
                                                }
                                                else
                                                {
                                                    this.i = alm[dat + 15];
                                                }
                                                if (rd2 == "AC")
                                                {
                                                    if (rd1[4] == 'O')
                                                    {
                                                        if (rd1[8] == 'n' || rd1[8] == 'x')
                                                        {
                                                            for (int i = this.i / 4; i < md && alm[i] >= 0; i += 2)
                                                            {
                                                                if (alm[i] < an1 || alm[i] > an2 || alm[i + 1] < 8096 || alm[i + 1] >= 593920)
                                                                {
                                                                    continue;
                                                                }
                                                                j = alm[i + 1] / 4;
                                                                if (j >= md)
                                                                {
                                                                    continue;
                                                                }
                                                                g = 0;
                                                                k = j;
                                                                while (alm[k] != 0 && k < md)
                                                                {
                                                                    k += 2;
                                                                    g++;
                                                                }
                                                                if (g > 0)
                                                                {
                                                                    RemoveAllEv();
                                                                }
                                                                else
                                                                {
                                                                    alm[j] = -86052851;
                                                                    alm[j + 1] = -86052851;
                                                                }
                                                                h = alm[i + 1];
                                                                alm[i + 1] = 0;
                                                                rmv = i * 4 + 4;
                                                                Delasc();
                                                                if (!EvOffsetInterlock.Checked)
                                                                {
                                                                    continue;
                                                                }
                                                                k = h + g * 8;
                                                                this.i = stf;
                                                                while (this.i < md)
                                                                {
                                                                    if (alm[this.i] >= h && alm[this.i] <= k)
                                                                    {
                                                                        DelILData();
                                                                    }
                                                                    this.i++;
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            int i = this.i / 4 + an1;
                                                            for (int num28 = this.i / 4 + an2; i <= num28; i++)
                                                            {
                                                                if (alm[i] == 0)
                                                                {
                                                                    continue;
                                                                }
                                                                m = i * 4;
                                                                for (h = 0; h < tds[28]; h++)
                                                                {
                                                                    g = rnext[(tds[27] + h) * 2];
                                                                    if (g >= 8096 && g < tds[25])
                                                                    {
                                                                        if (m == g)
                                                                        {
                                                                            if (alm[i] >= 8096 && alm[i] < tds[25])
                                                                            {
                                                                                rnext[(tds[27] + h) * 2] = alm[i];
                                                                            }
                                                                            else
                                                                            {
                                                                                rnext[(tds[27] + h) * 2] = -1;
                                                                            }
                                                                            alm[i] = 0;
                                                                            break;
                                                                        }
                                                                        if (g >= 8096 && g < tds[25])
                                                                        {
                                                                            for (an4 = 0; an4 < 100; an4++)
                                                                            {
                                                                                k = g / 4;
                                                                                g = alm[k];
                                                                                if (g < 8096 || g >= tds[25])
                                                                                {
                                                                                    break;
                                                                                }
                                                                                if (m == g)
                                                                                {
                                                                                    if (alm[i] >= 8096 && alm[i] < tds[25])
                                                                                    {
                                                                                        alm[k] = alm[i];
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        alm[k] = -1;
                                                                                    }
                                                                                    alm[i] = 0;
                                                                                    break;
                                                                                }
                                                                            }
                                                                            if (m == g)
                                                                            {
                                                                                break;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                if (m == g || alm[i] < 8096 || alm[i] >= 593920)
                                                                {
                                                                    continue;
                                                                }
                                                                j = alm[i] / 4;
                                                                if (j >= md)
                                                                {
                                                                    continue;
                                                                }
                                                                g = 0;
                                                                k = j;
                                                                while (alm[k] != 0 && k < md)
                                                                {
                                                                    k += 2;
                                                                    g++;
                                                                }
                                                                if (g > 0)
                                                                {
                                                                    RemoveAllEv();
                                                                }
                                                                else
                                                                {
                                                                    alm[j] = -86052851;
                                                                    alm[j + 1] = -86052851;
                                                                }
                                                                h = alm[i];
                                                                alm[i] = 0;
                                                                rmv = i * 4;
                                                                Delasc();
                                                                if (!EvOffsetInterlock.Checked)
                                                                {
                                                                    continue;
                                                                }
                                                                k = h + g * 8;
                                                                this.i = stf;
                                                                while (this.i < md)
                                                                {
                                                                    if (alm[this.i] >= h && alm[this.i] <= k)
                                                                    {
                                                                        DelILData();
                                                                    }
                                                                    this.i++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        int i = this.i / 4 + an1;
                                                        for (int num28 = this.i / 4 + an2; i <= num28; i++)
                                                        {
                                                            if (alm[i] < 8096 || alm[i] >= 593920)
                                                            {
                                                                continue;
                                                            }
                                                            j = alm[i] / 4;
                                                            if (j >= md)
                                                            {
                                                                continue;
                                                            }
                                                            g = 0;
                                                            k = j;
                                                            while (alm[k] != 0 && k < md)
                                                            {
                                                                k += 2;
                                                                g++;
                                                            }
                                                            if (g > 0)
                                                            {
                                                                RemoveAllEv();
                                                            }
                                                            else
                                                            {
                                                                alm[j] = -86052851;
                                                                alm[j + 1] = -86052851;
                                                            }
                                                            h = alm[i];
                                                            alm[i] = 0;
                                                            rmv = i * 4;
                                                            Delasc();
                                                            if (!EvOffsetInterlock.Checked)
                                                            {
                                                                continue;
                                                            }
                                                            k = h + g * 8;
                                                            this.i = stf;
                                                            while (this.i < md)
                                                            {
                                                                if (alm[this.i] >= h && alm[this.i] <= k)
                                                                {
                                                                    DelILData();
                                                                }
                                                                this.i++;
                                                            }
                                                        }
                                                    }
                                                }
                                                if (rd2 == "PB" || rd2 == "PF" || rd2 == "PO")
                                                {
                                                    if (rd1[4] == 'O')
                                                    {
                                                        if (rd1[8] == 'n' || rd1[8] == 'x')
                                                        {
                                                            int num28 = an1;
                                                            int num29 = an2;
                                                            for (int i = this.i / 4; i < md && alm[i] >= 0; i += 2)
                                                            {
                                                                if (alm[i] < num28 || alm[i] > num29)
                                                                {
                                                                    continue;
                                                                }
                                                                h = alm[i + 1];
                                                                if (h < 0 || h >= 593920)
                                                                {
                                                                    continue;
                                                                }
                                                                g = 0;
                                                                j = h / 4;
                                                                if (j >= md)
                                                                {
                                                                    continue;
                                                                }
                                                                rd1 = array[an3].Substring(18);
                                                                if (alm[i + 1] >= 8096)
                                                                {
                                                                    k = j;
                                                                    while (alm[k] != 0 && k < md)
                                                                    {
                                                                        k += 2;
                                                                        g++;
                                                                    }
                                                                    if (array[an3][1] == 'O')
                                                                    {
                                                                        RemoveAllEv();
                                                                        alm[j] = 0;
                                                                        alm[j + 1] = 0;
                                                                        g = 0;
                                                                    }
                                                                }
                                                                EventPaste();
                                                                if (mov >= 501)
                                                                {
                                                                    break;
                                                                }
                                                                if (h == 0)
                                                                {
                                                                    alm[i + 1] = j * 4;
                                                                    asc[par] = i * 4 + 4;
                                                                    tds[26]++;
                                                                    par++;
                                                                    continue;
                                                                }
                                                                if (array[an3][1] == 'F')
                                                                {
                                                                    MltPsTop();
                                                                }
                                                                if (fnt != 2)
                                                                {
                                                                    continue;
                                                                }
                                                                this.i = j * 4;
                                                                alm[i + 1] = this.i;
                                                                if (!EvOffsetInterlock.Checked)
                                                                {
                                                                    continue;
                                                                }
                                                                k = h + g * 8;
                                                                an4 = j + (this.i + mov) * 2;
                                                                for (g = stf; g < md; g++)
                                                                {
                                                                    if (alm[g] >= h && alm[g] <= k)
                                                                    {
                                                                        n = g * 4;
                                                                        if (g < j || g > an4)
                                                                        {
                                                                            for (an1 = 0; an1 < par; an1++)
                                                                            {
                                                                                if (asc[an1] == n)
                                                                                {
                                                                                    if (alm[g] == h)
                                                                                    {
                                                                                        alm[g] = this.i;
                                                                                        break;
                                                                                    }
                                                                                    m = alm[g] - h;
                                                                                    if (array[an3][1] == 'F')
                                                                                    {
                                                                                        m += mov;
                                                                                    }
                                                                                    if (m % 8 == 0)
                                                                                    {
                                                                                        alm[g] = this.i + m;
                                                                                    }
                                                                                    break;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            int i = this.i / 4 + an1;
                                                            for (int num28 = this.i / 4 + an2; i <= num28; i++)
                                                            {
                                                                if (alm[i] == 0)
                                                                {
                                                                    g = 0;
                                                                    h = 0;
                                                                    rd1 = array[an3].Substring(18);
                                                                    EventPaste();
                                                                    if (mov < 501)
                                                                    {
                                                                        alm[i] = j * 4;
                                                                        asc[par] = i * 4;
                                                                        tds[26]++;
                                                                        par++;
                                                                        continue;
                                                                    }
                                                                    break;
                                                                }
                                                                m = i * 4;
                                                                for (h = 0; h < tds[28]; h++)
                                                                {
                                                                    g = rnext[(tds[27] + h) * 2];
                                                                    if (g >= 8096 && g < tds[25])
                                                                    {
                                                                        if (m == g)
                                                                        {
                                                                            if (array[an3][1] == 'O')
                                                                            {
                                                                                if (alm[i] >= 8096 && alm[i] < tds[25])
                                                                                {
                                                                                    rnext[(tds[27] + h) * 2] = alm[i];
                                                                                }
                                                                                else
                                                                                {
                                                                                    rnext[(tds[27] + h) * 2] = -1;
                                                                                }
                                                                                alm[i] = 0;
                                                                                m = 0;
                                                                            }
                                                                            break;
                                                                        }
                                                                        if (g >= 8096 && g < tds[25])
                                                                        {
                                                                            for (an4 = 0; an4 < 100; an4++)
                                                                            {
                                                                                k = g / 4;
                                                                                g = alm[k];
                                                                                if (g < 8096 || g >= tds[25])
                                                                                {
                                                                                    break;
                                                                                }
                                                                                if (m == g)
                                                                                {
                                                                                    if (array[an3][1] == 'O')
                                                                                    {
                                                                                        if (alm[i] >= 8096 && alm[i] < tds[25])
                                                                                        {
                                                                                            alm[k] = alm[i];
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            alm[k] = -1;
                                                                                        }
                                                                                        alm[i] = 0;
                                                                                        m = 0;
                                                                                        h = tds[28];
                                                                                    }
                                                                                    break;
                                                                                }
                                                                            }
                                                                            if (m == g)
                                                                            {
                                                                                break;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                if (m == g || alm[i] < 0 || alm[i] >= 593920)
                                                                {
                                                                    continue;
                                                                }
                                                                g = 0;
                                                                h = alm[i];
                                                                j = h / 4;
                                                                if (j >= md)
                                                                {
                                                                    continue;
                                                                }
                                                                rd1 = array[an3].Substring(18);
                                                                if (alm[i] >= 8096)
                                                                {
                                                                    k = j;
                                                                    while (alm[k] != 0 && k < md)
                                                                    {
                                                                        k += 2;
                                                                        g++;
                                                                    }
                                                                    if (array[an3][1] == 'O')
                                                                    {
                                                                        RemoveAllEv();
                                                                        alm[j] = 0;
                                                                        alm[j + 1] = 0;
                                                                        g = 0;
                                                                    }
                                                                }
                                                                EventPaste();
                                                                if (mov >= 501)
                                                                {
                                                                    break;
                                                                }
                                                                if (h == 0)
                                                                {
                                                                    alm[i] = j * 4;
                                                                    asc[par] = i * 4;
                                                                    tds[26]++;
                                                                    par++;
                                                                    continue;
                                                                }
                                                                if (array[an3][1] == 'F')
                                                                {
                                                                    MltPsTop();
                                                                }
                                                                if (fnt != 2)
                                                                {
                                                                    continue;
                                                                }
                                                                this.i = j * 4;
                                                                alm[i] = this.i;
                                                                if (!EvOffsetInterlock.Checked)
                                                                {
                                                                    continue;
                                                                }
                                                                k = h + g * 8;
                                                                an4 = j + (this.i + mov) * 2;
                                                                for (g = stf; g < md; g++)
                                                                {
                                                                    if (alm[g] >= h && alm[g] <= k)
                                                                    {
                                                                        n = g * 4;
                                                                        if (g < j || g > an4)
                                                                        {
                                                                            for (an1 = 0; an1 < par; an1++)
                                                                            {
                                                                                if (asc[an1] == n)
                                                                                {
                                                                                    if (alm[g] == h)
                                                                                    {
                                                                                        alm[g] = this.i;
                                                                                        break;
                                                                                    }
                                                                                    m = alm[g] - h;
                                                                                    if (array[an3][1] == 'F')
                                                                                    {
                                                                                        m += mov;
                                                                                    }
                                                                                    if (m % 8 == 0)
                                                                                    {
                                                                                        alm[g] = this.i + m;
                                                                                    }
                                                                                    break;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        int i = this.i / 4 + an1;
                                                        for (int num28 = this.i / 4 + an2; i <= num28; i++)
                                                        {
                                                            if (alm[i] < 0 || alm[i] >= 593920)
                                                            {
                                                                continue;
                                                            }
                                                            j = alm[i] / 4;
                                                            if (j >= md)
                                                            {
                                                                continue;
                                                            }
                                                            g = 0;
                                                            h = alm[i];
                                                            rd1 = array[an3].Substring(18);
                                                            if (alm[i] >= 8096)
                                                            {
                                                                k = j;
                                                                while (alm[k] != 0 && k < md)
                                                                {
                                                                    k += 2;
                                                                    g++;
                                                                }
                                                                if (array[an3][1] == 'O')
                                                                {
                                                                    RemoveAllEv();
                                                                    alm[j] = 0;
                                                                    alm[j + 1] = 0;
                                                                    g = 0;
                                                                }
                                                            }
                                                            EventPaste();
                                                            if (mov >= 501)
                                                            {
                                                                break;
                                                            }
                                                            if (h == 0)
                                                            {
                                                                alm[i] = j * 4;
                                                                asc[par] = i * 4;
                                                                tds[26]++;
                                                                par++;
                                                                continue;
                                                            }
                                                            if (array[an3][1] == 'F')
                                                            {
                                                                MltPsTop();
                                                            }
                                                            if (fnt != 2)
                                                            {
                                                                continue;
                                                            }
                                                            this.i = j * 4;
                                                            alm[i] = this.i;
                                                            if (!EvOffsetInterlock.Checked)
                                                            {
                                                                continue;
                                                            }
                                                            k = h + g * 8;
                                                            an4 = j + (this.i + mov) * 2;
                                                            for (g = stf; g < md; g++)
                                                            {
                                                                if (alm[g] >= h && alm[g] <= k)
                                                                {
                                                                    n = g * 4;
                                                                    if (g < j || g > an4)
                                                                    {
                                                                        for (an1 = 0; an1 < par; an1++)
                                                                        {
                                                                            if (asc[an1] == n)
                                                                            {
                                                                                if (alm[g] == h)
                                                                                {
                                                                                    alm[g] = this.i;
                                                                                    break;
                                                                                }
                                                                                m = alm[g] - h;
                                                                                if (array[an3][1] == 'F')
                                                                                {
                                                                                    m += mov;
                                                                                }
                                                                                if (m % 8 == 0)
                                                                                {
                                                                                    alm[g] = this.i + m;
                                                                                }
                                                                                break;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else if (rd2 == "SN")
                                            {
                                                rd1 = array[an3].Substring(14);
                                                rd2 = array[an3];
                                                this.i = Convert.ToInt32(rd2.Substring(6, 3), 16);
                                                int i = alm[dat] / 4 + this.i * 2;
                                                n = Convert.ToInt32(rd2.Substring(10, 3), 16);
                                                if (n >= suba)
                                                {
                                                    n = suba - 1;
                                                }
                                                int num28 = alm[dat] / 4 + n * 2;
                                                if (rd1 == "<null>")
                                                {
                                                    for (; i <= num28; i += 2)
                                                    {
                                                        n = alm[i + 1];
                                                        this.i = n / 4;
                                                        an2 = alm[dat] / 4 - 1;
                                                        if (n == 0)
                                                        {
                                                            continue;
                                                        }
                                                        alm[i] = 0;
                                                        alm[i + 1] = 0;
                                                        rmv = i * 4 + 4;
                                                        Delasc();
                                                        h = stf;
                                                        while (h < md && alm[h] != n)
                                                        {
                                                            h++;
                                                        }
                                                        if (h != md)
                                                        {
                                                            continue;
                                                        }
                                                        if (this.i >= snstr && this.i < an2)
                                                        {
                                                            while ((alm[this.i] & 0xFF) > 13)
                                                            {
                                                                alm[this.i] = 0;
                                                                this.i++;
                                                            }
                                                            alm[this.i] = 0;
                                                        }
                                                        else
                                                        {
                                                            while ((alm[this.i] & 0xFF) > 15)
                                                            {
                                                                alm[this.i] = -86052851;
                                                                this.i++;
                                                            }
                                                            alm[this.i] = -86052851;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    k = i;
                                                    SubaRename();
                                                    n = alm[i + 1];
                                                    i += 2;
                                                    an2 = alm[dat] / 4 - 1;
                                                    for (; i <= num28; i += 2)
                                                    {
                                                        if (alm[i + 1] == 0)
                                                        {
                                                            alm[i + 1] = n;
                                                            asc[par] = i * 4 + 4;
                                                            par++;
                                                            tds[26]++;
                                                        }
                                                        else
                                                        {
                                                            if (alm[i + 1] == n)
                                                            {
                                                                continue;
                                                            }
                                                            m = alm[i + 1];
                                                            this.i = m / 4;
                                                            alm[i + 1] = n;
                                                            h = stf;
                                                            while (h < md && alm[h] != m)
                                                            {
                                                                h++;
                                                            }
                                                            if (h != md)
                                                            {
                                                                continue;
                                                            }
                                                            if (this.i >= snstr && this.i < an2)
                                                            {
                                                                while ((alm[this.i] & 0xFF) > 13)
                                                                {
                                                                    alm[this.i] = 0;
                                                                    this.i++;
                                                                }
                                                                alm[this.i] = 0;
                                                            }
                                                            else
                                                            {
                                                                while ((alm[this.i] & 0xFF) > 15)
                                                                {
                                                                    alm[this.i] = -86052851;
                                                                    this.i++;
                                                                }
                                                                alm[this.i] = -86052851;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                rd1 = array[an3];
                                                this.i = Convert.ToInt32(rd1.Substring(6, 3), 16);
                                                n = Convert.ToInt32(rd1.Substring(10, 3), 16);
                                                if (rd1[0] == 'S')
                                                {
                                                    k = Convert.ToInt32(rd1.Substring(14, 8), 16);
                                                    if (n >= suba)
                                                    {
                                                        n = suba - 1;
                                                    }
                                                    int i = alm[dat] / 4 + this.i * 2;
                                                    for (int num28 = alm[dat] / 4 + n * 2; i <= num28; i += 2)
                                                    {
                                                        h = alm[i];
                                                        if (rd1[3] == 'O')
                                                        {
                                                            alm[i] = (h | k);
                                                        }
                                                        else if (rd1[3] == 'A')
                                                        {
                                                            alm[i] = (h & k);
                                                        }
                                                        else
                                                        {
                                                            alm[i] = k;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    k = Convert.ToInt32(rd1.Substring(16, 8), 16);
                                                    j = Convert.ToInt32(rd1.Substring(14, 1), 16);
                                                    if (rd1[0] == 'A')
                                                    {
                                                        if (this.i < 274)
                                                        {
                                                            int i = alm[dat + 5] / 4 + j + this.i * 4;
                                                            for (int num28 = (n <= 273) ? (alm[dat + 5] / 4 + j + n * 4) : (alm[dat + 5] / 4 + 1092 + j); i <= num28; i += 4)
                                                            {
                                                                h = alm[i];
                                                                if (rd1[3] == 'O')
                                                                {
                                                                    alm[i] = (h | k);
                                                                }
                                                                else if (rd1[3] == 'A')
                                                                {
                                                                    alm[i] = (h & k);
                                                                }
                                                                else
                                                                {
                                                                    alm[i] = k;
                                                                }
                                                            }
                                                        }
                                                        if (n >= 274)
                                                        {
                                                            this.i -= 274;
                                                            n -= 274;
                                                            int i = (this.i > 0) ? (alm[dat + 6] / 4 + j + this.i * 4) : (alm[dat + 6] / 4 + j);
                                                            for (int num28 = alm[dat + 6] / 4 + j + n * 4; i <= num28; i += 4)
                                                            {
                                                                h = alm[i];
                                                                if (rd1[3] == 'O')
                                                                {
                                                                    alm[i] = (h | k);
                                                                }
                                                                else if (rd1[3] == 'A')
                                                                {
                                                                    alm[i] = (h & k);
                                                                }
                                                                else
                                                                {
                                                                    alm[i] = k;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        int i = alm[dat + 7] / 4 + j + this.i * 2;
                                                        for (int num28 = alm[dat + 7] / 4 + j + n * 2; i <= num28; i += 2)
                                                        {
                                                            h = alm[i];
                                                            if (rd1[3] == 'O')
                                                            {
                                                                alm[i] = (h | k);
                                                            }
                                                            else if (rd1[3] == 'A')
                                                            {
                                                                alm[i] = (h & k);
                                                            }
                                                            else
                                                            {
                                                                alm[i] = k;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Fixam();
                                        EvSubaAnim.Enabled = true;
                                        EvSubaAnimFlag.Enabled = true;
                                        if (EvSubaOffset.Text.Length > 2)
                                        {
                                            if (EvSubaCbID.SelectedIndex == -1)
                                            {
                                                EvSubaCbID.SelectedIndex = sid;
                                            }
                                            else if (EvSubaCbList.SelectedIndex == -1)
                                            {
                                                h = EvSubaCbID.SelectedIndex;
                                                k = alm[dat] / 4 + 1 + h * 2;
                                                if (alm[k] == 0)
                                                {
                                                    EvSubaAnim.Text = "<null>";
                                                }
                                                else
                                                {
                                                    j = alm[k] / 4;
                                                    EvSubaAnim.Text = "";
                                                    if (j >= stf && j < md)
                                                    {
                                                        n = 0;
                                                        while (n < 47)
                                                        {
                                                            if (n % 4 == 0)
                                                            {
                                                                fntb[0] = (byte)((alm[j] >> 24) & 0xFF);
                                                            }
                                                            else if (n % 4 == 1)
                                                            {
                                                                fntb[0] = (byte)((alm[j] >> 16) & 0xFF);
                                                            }
                                                            else if (n % 4 == 2)
                                                            {
                                                                fntb[0] = (byte)((alm[j] >> 8) & 0xFF);
                                                            }
                                                            else
                                                            {
                                                                fntb[0] = (byte)(alm[j] & 0xFF);
                                                                j++;
                                                            }
                                                            if (fntb[0] != 0)
                                                            {
                                                                EvSubaAnim.Text += Encoding.UTF8.GetString(fntb);
                                                                n++;
                                                                continue;
                                                            }
                                                            break;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        EvSubaAnim.Text = "<ERROR>";
                                                    }
                                                }
                                                EvSubaCbList.SelectedIndex = slist;
                                            }
                                            else
                                            {
                                                h = EvSubaCbID.SelectedIndex;
                                                g = EvSubaCbList.SelectedIndex;
                                                if (g < 4)
                                                {
                                                    n = alm[dat + 12 + g] / 4;
                                                }
                                                else
                                                {
                                                    n = alm[dat + 27 + g] / 4;
                                                }
                                                this.i = alm[n + h];
                                                EvSubaOffset.Text = "0x" + this.i.ToString("X");
                                                k = alm[dat] / 4 + 1 + h * 2;
                                                if (alm[k] == 0)
                                                {
                                                    EvSubaAnim.Text = "<null>";
                                                }
                                                else
                                                {
                                                    j = alm[k] / 4;
                                                    EvSubaAnim.Text = "";
                                                    if (j >= stf && j < md)
                                                    {
                                                        n = 0;
                                                        while (n < 47)
                                                        {
                                                            if (n % 4 == 0)
                                                            {
                                                                fntb[0] = (byte)((alm[j] >> 24) & 0xFF);
                                                            }
                                                            else if (n % 4 == 1)
                                                            {
                                                                fntb[0] = (byte)((alm[j] >> 16) & 0xFF);
                                                            }
                                                            else if (n % 4 == 2)
                                                            {
                                                                fntb[0] = (byte)((alm[j] >> 8) & 0xFF);
                                                            }
                                                            else
                                                            {
                                                                fntb[0] = (byte)(alm[j] & 0xFF);
                                                                j++;
                                                            }
                                                            if (fntb[0] != 0)
                                                            {
                                                                EvSubaAnim.Text += Encoding.UTF8.GetString(fntb);
                                                                n++;
                                                                continue;
                                                            }
                                                            break;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        EvSubaAnim.Text = "<ERROR>";
                                                    }
                                                }
                                                if (EventTab.SelectedIndex == 1)
                                                {
                                                    EvList.Items.Clear();
                                                    if (this.i > 0 && this.i < tds[25])
                                                    {
                                                        j = this.i / 4;
                                                        mov = 0;
                                                        while (alm[j] != 0 && j < md)
                                                        {
                                                            EveListstring();
                                                            EvList.Items.Add(rd1);
                                                            j += 2;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (EvSpCbID.SelectedIndex == -1)
                                        {
                                            EvSpCbID.SelectedIndex = aid;
                                        }
                                        else if (EvSpCbList.SelectedIndex == -1)
                                        {
                                            EvSpCbList.SelectedIndex = alist;
                                        }
                                        else
                                        {
                                            h = EvSpCbID.SelectedIndex;
                                            if (EvSpCbList.SelectedIndex == 0)
                                            {
                                                n = alm[dat + 9] / 4;
                                            }
                                            else
                                            {
                                                n = alm[dat + 10] / 4;
                                            }
                                            this.i = alm[n + h];
                                            EvSpOffset.Text = "0x" + this.i.ToString("X");
                                            if (EventTab.SelectedIndex == 0)
                                            {
                                                EvList.Items.Clear();
                                                if (this.i > 0 && this.i < tds[25])
                                                {
                                                    j = this.i / 4;
                                                    mov = 0;
                                                    while (alm[j] != 0 && j < md)
                                                    {
                                                        EveListstring();
                                                        EvList.Items.Add(rd1);
                                                        j += 2;
                                                    }
                                                }
                                            }
                                        }
                                        if (EvOvrCbList.SelectedIndex == -1)
                                        {
                                            EvOvrCbList.Text = "";
                                            EvOvrId.Text = "";
                                        }
                                        else if (EvOvrCbList.SelectedIndex < 2)
                                        {
                                            if (EvOvrId.SelectedIndex == -1)
                                            {
                                                EvOvrId.Text = "";
                                            }
                                            else
                                            {
                                                if (EvOvrCbList.SelectedIndex == 0)
                                                {
                                                    n = alm[dat + 20] / 4;
                                                }
                                                else
                                                {
                                                    n = alm[dat + 21] / 4;
                                                }
                                                this.i = EvOvrId.SelectedIndex;
                                                h = alm[n + this.i * 2 + 1];
                                                EvOvrOffset.Text = "0x" + h.ToString("X");
                                                if (EventTab.SelectedIndex == 3)
                                                {
                                                    EvList.Items.Clear();
                                                    if (h > 0 && h < tds[25])
                                                    {
                                                        j = h / 4;
                                                        mov = 0;
                                                        while (alm[j] != 0 && j < md)
                                                        {
                                                            EveListstring();
                                                            EvList.Items.Add(rd1);
                                                            j += 2;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else if (EvOvrId.SelectedIndex == -1)
                                        {
                                            EvOvrId.SelectedIndex = 0;
                                        }
                                        else
                                        {
                                            n = alm[dat + 11] / 4 + EvOvrId.SelectedIndex;
                                            h = alm[n];
                                            EvOvrOffset.Text = "0x" + h.ToString("X");
                                            if (EventTab.SelectedIndex == 3)
                                            {
                                                EvList.Items.Clear();
                                                if (h > 0 && h < tds[25])
                                                {
                                                    j = h / 4;
                                                    mov = 0;
                                                    while (alm[j] != 0 && j < md)
                                                    {
                                                        EveListstring();
                                                        EvList.Items.Add(rd1);
                                                        j += 2;
                                                    }
                                                }
                                            }
                                        }
                                        EvRnOffset.Text = "";
                                        if (EventTab.SelectedIndex == 2)
                                        {
                                            EvList.Items.Clear();
                                        }
                                        if (DMiscOffset.Text != "" && DMiscList.SelectedNode != null)
                                        {
                                            rd1 = DMiscList.SelectedNode.FullPath;
                                            if (rd1.Length >= 25 && rd1.Length < 30)
                                            {
                                                rd2 = rd1.Substring(0, 15);
                                                n = 0;
                                                if (rd2 == "ExtraActionFlag")
                                                {
                                                    this.i = DMiscList.SelectedNode.Index;
                                                    n = alm[dat + 7] + this.i * 8;
                                                }
                                                else if (rd2 == "SpecialActionFl")
                                                {
                                                    this.i = DMiscList.SelectedNode.Index;
                                                    n = alm[dat + 6] + this.i * 16;
                                                }
                                                else if (rd2 == "CommonActionFla")
                                                {
                                                    this.i = DMiscList.SelectedNode.Index;
                                                    n = alm[dat + 5] + this.i * 16;
                                                }
                                                if (n > 1479 && n < tds[25])
                                                {
                                                    j = n / 4;
                                                    string[] array30 = new string[2];
                                                    DMiscParam.Items.Clear();
                                                    if (rd1[0] == 'E')
                                                    {
                                                        this.i = 0;
                                                        while (this.i < 2)
                                                        {
                                                            array30[0] = "Flags" + this.i;
                                                            array30[1] = alm[j + this.i].ToString("X8");
                                                            DMiscParam.Items.Add(new ListViewItem(array30));
                                                            this.i++;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        this.i = 0;
                                                        while (this.i < 4)
                                                        {
                                                            array30[0] = "Flags" + this.i;
                                                            array30[1] = alm[j + this.i].ToString("X8");
                                                            DMiscParam.Items.Add(new ListViewItem(array30));
                                                            this.i++;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    minitxt.Text = "Cannot Paste.";
                                }
                                ModeChange.Enabled = true;
                                AllEnableChange();
                            }
                            else
                            {
                                g = EvList.Items.Count;
                                EventPaste();
                                if (mov < 501)
                                {
                                    if (h == 0)
                                    {
                                        h = j * 4;
                                        if (EventTab.SelectedIndex == 0)
                                        {
                                            this.i = EvSpCbID.SelectedIndex;
                                            if (EvSubaCbList.Items.Count < 4)
                                            {
                                                if (EvSpCbList.SelectedIndex == 0)
                                                {
                                                    n = alm[dat + 4] / 4;
                                                }
                                                else
                                                {
                                                    n = alm[dat + 5] / 4;
                                                }
                                            }
                                            else if (EvSpCbList.SelectedIndex == 0)
                                            {
                                                n = alm[dat + 9] / 4;
                                            }
                                            else
                                            {
                                                n = alm[dat + 10] / 4;
                                            }
                                            alm[n + this.i] = h;
                                            asc[par] = (n + this.i) * 4;
                                            tds[26]++;
                                            EvSpOffset.Text = "0x" + h.ToString("X");
                                        }
                                        else if (EventTab.SelectedIndex == 1)
                                        {
                                            this.i = EvSubaCbID.SelectedIndex;
                                            m = EvSubaCbList.SelectedIndex;
                                            if (m < 4)
                                            {
                                                n = alm[dat + 12 + m] / 4;
                                            }
                                            else
                                            {
                                                n = alm[dat + 27 + m] / 4;
                                            }
                                            alm[n + this.i] = h;
                                            asc[par] = (n + this.i) * 4;
                                            tds[26]++;
                                            EvSubaOffset.Text = "0x" + h.ToString("X");
                                        }
                                        else if (EventTab.SelectedIndex == 3)
                                        {
                                            if (EvOvrCbList.SelectedIndex == 2)
                                            {
                                                n = alm[dat + 11] / 4;
                                                this.i = EvOvrId.SelectedIndex;
                                            }
                                            else
                                            {
                                                this.i = EvOvrId.SelectedIndex * 2;
                                                if (EvOvrCbList.SelectedIndex == 0)
                                                {
                                                    n = alm[dat + 20] / 4 + 1;
                                                }
                                                else
                                                {
                                                    n = alm[dat + 21] / 4 + 1;
                                                }
                                            }
                                            alm[n + this.i] = h;
                                            asc[par] = (n + this.i) * 4;
                                            tds[26]++;
                                            EvOvrOffset.Text = "0x" + h.ToString("X");
                                        }
                                    }
                                    else if (fnt == 2)
                                    {
                                        g = j * 4;
                                        if (EventTab.SelectedIndex == 0)
                                        {
                                            if (EvSubaCbList.Items.Count < 4)
                                            {
                                                if (EvSpCbList.SelectedIndex == 0)
                                                {
                                                    n = alm[dat + 4] / 4;
                                                }
                                                else
                                                {
                                                    n = alm[dat + 5] / 4;
                                                }
                                            }
                                            else if (EvSpCbList.SelectedIndex == 0)
                                            {
                                                n = alm[dat + 9] / 4;
                                            }
                                            else
                                            {
                                                n = alm[dat + 10] / 4;
                                            }
                                            this.i = EvSpCbID.SelectedIndex;
                                            alm[n + this.i] = g;
                                            EvSpOffset.Text = "0x" + g.ToString("X");
                                        }
                                        else if (EventTab.SelectedIndex == 1)
                                        {
                                            this.i = EvSubaCbID.SelectedIndex;
                                            m = EvSubaCbList.SelectedIndex;
                                            if (m < 4)
                                            {
                                                n = alm[dat + 12 + m] / 4;
                                            }
                                            else
                                            {
                                                n = alm[dat + 27 + m] / 4;
                                            }
                                            alm[n + this.i] = g;
                                            EvSubaOffset.Text = "0x" + g.ToString("X");
                                        }
                                        else if (EventTab.SelectedIndex == 3)
                                        {
                                            if (EvOvrCbList.SelectedIndex == 2)
                                            {
                                                n = alm[dat + 11] / 4;
                                                this.i = EvOvrId.SelectedIndex;
                                            }
                                            else
                                            {
                                                this.i = EvOvrId.SelectedIndex * 2;
                                                if (EvOvrCbList.SelectedIndex == 0)
                                                {
                                                    n = alm[dat + 20] / 4 + 1;
                                                }
                                                else
                                                {
                                                    n = alm[dat + 21] / 4 + 1;
                                                }
                                            }
                                            alm[n + this.i] = g;
                                            EvOvrOffset.Text = "0x" + g.ToString("X");
                                        }
                                        else
                                        {
                                            rd1 = EvRnOffset.Text;
                                            rd2 = "0x" + g.ToString("X");
                                            EvRnOffset.Text = rd2;
                                            if (EvOffsetInterlock.Checked)
                                            {
                                                if (EvSpOffset.Text == rd1)
                                                {
                                                    EvSpOffset.Text = rd2;
                                                }
                                                if (EvSubaOffset.Text == rd1)
                                                {
                                                    EvSubaOffset.Text = rd2;
                                                }
                                                if (EvOvrOffset.Text == rd1)
                                                {
                                                    EvOvrOffset.Text = rd2;
                                                }
                                            }
                                        }
                                        if (EvOffsetInterlock.Checked)
                                        {
                                            this.i = EvList.Items.Count;
                                            k = h + this.i * 8;
                                            an4 = j + (this.i + mov) * 2;
                                            this.i = stf;
                                            while (this.i < md)
                                            {
                                                if (alm[this.i] >= h && alm[this.i] <= k)
                                                {
                                                    n = this.i * 4;
                                                    if (this.i < j || this.i > an4)
                                                    {
                                                        for (mov = 0; mov < par; mov++)
                                                        {
                                                            if (asc[mov] == n)
                                                            {
                                                                if (alm[this.i] == h)
                                                                {
                                                                    alm[this.i] = g;
                                                                    break;
                                                                }
                                                                m = alm[this.i] - h;
                                                                if (m % 8 == 0)
                                                                {
                                                                    alm[this.i] = g + m;
                                                                }
                                                                break;
                                                            }
                                                        }
                                                    }
                                                }
                                                this.i++;
                                            }
                                        }
                                    }
                                    g = j;
                                    Fixam();
                                    mov = 0;
                                    j = g;
                                    nonam[0] = EvList.Items.Count;
                                    EvList.Items.Clear();
                                    while (alm[j] != 0 && j < md)
                                    {
                                        EveListstring();
                                        EvList.Items.Add(rd1);
                                        j += 2;
                                    }
                                    k = EvList.Items.Count;
                                    EvDesText.Enabled = false;
                                    this.i = nonam[0];
                                    while (this.i < k)
                                    {
                                        EvList.SetSelected(this.i, value: true);
                                        this.i++;
                                    }
                                    EvDesText.Enabled = true;
                                    if (minitxt.Text == "Cannot Paste.")
                                    {
                                        minitxt.Text = "";
                                    }
                                    if (qe)
                                    {
                                        Qsave.Enabled = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            minitxt.Text = "Cannot Paste.";
                        }
                    }
                    else
                    {
                        minitxt.Text = "Cannot Paste.";
                    }
                }
                else
                {
                    minitxt.Text = "Cannot Paste.";
                }
                EvPaste.Enabled = true;
            }
            else
            {
                minitxt.Text = "Cannot Paste.";
            }
        }

        private void AtrEdList_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (!AtrEdList.Enabled)
            {
                return;
            }
            i = AtrEdList.CurrentCell.RowIndex;
            j = AtrEdList.CurrentCell.ColumnIndex;
            rd2 = AtrEdList[0, i].Value.ToString();
            if (AtrEdList.CurrentCell.Value != null)
            {
                rd1 = AtrEdList.CurrentCell.Value.ToString();
                if (AtrHexView.Checked)
                {
                    for (k = 0; k < rd1.Length; k++)
                    {
                        if (!Uri.IsHexDigit(rd1[k]))
                        {
                            k = 512;
                        }
                    }
                    if (k <= 8)
                    {
                        k = Convert.ToInt32(rd1, 16);
                        if (j == 1)
                        {
                            alm[i] = k;
                        }
                        else
                        {
                            alm[i + 185] = k;
                        }
                        if (qe)
                        {
                            Qsave.Enabled = true;
                        }
                    }
                    else
                    {
                        if (j == 1)
                        {
                            k = alm[i];
                        }
                        else
                        {
                            k = alm[i + 185];
                        }
                        AtrEdList.Enabled = false;
                        AtrEdList[j, i].Value = k.ToString("X");
                        AtrEdList.Enabled = true;
                    }
                }
                else if (rd2[0] == '*')
                {
                    if (int.TryParse(rd1, out k))
                    {
                        if (j == 1)
                        {
                            alm[i] = k;
                        }
                        else
                        {
                            alm[i + 185] = k;
                        }
                        if (qe)
                        {
                            Qsave.Enabled = true;
                        }
                    }
                    else
                    {
                        if (j == 1)
                        {
                            k = alm[i];
                        }
                        else
                        {
                            k = alm[i + 185];
                        }
                        AtrEdList.Enabled = false;
                        AtrEdList[j, i].Value = k.ToString();
                        AtrEdList.Enabled = true;
                    }
                }
                else if (float.TryParse(rd1, out rdfr))
                {
                    bitf = BitConverter.GetBytes(rdfr);
                    if (BitConverter.IsLittleEndian)
                    {
                        k = bitf[0] + bitf[1] * 256 + bitf[2] * 65536 + bitf[3] * 16777216;
                    }
                    else
                    {
                        k = bitf[3] + bitf[2] * 256 + bitf[1] * 65536 + bitf[0] * 16777216;
                    }
                    if (j == 1)
                    {
                        alm[i] = k;
                    }
                    else
                    {
                        alm[i + 185] = k;
                    }
                    if (qe)
                    {
                        Qsave.Enabled = true;
                    }
                }
                else
                {
                    if (j == 1)
                    {
                        k = alm[i];
                    }
                    else
                    {
                        k = alm[i + 185];
                    }
                    AtrEdList.Enabled = false;
                    bitf = BitConverter.GetBytes(k);
                    rdfr = BitConverter.ToSingle(bitf, 0);
                    AtrEdList[j, i].Value = rdfr.ToString();
                    AtrEdList.Enabled = true;
                }
                return;
            }
            AtrEdList.Enabled = false;
            if (AtrHexView.Checked)
            {
                if (j == 1)
                {
                    k = alm[i];
                }
                else
                {
                    k = alm[i + 185];
                }
                AtrEdList.Enabled = false;
                AtrEdList[j, i].Value = k.ToString("X");
                AtrEdList.Enabled = true;
            }
            else if (rd2[0] == '*')
            {
                if (j == 1)
                {
                    k = alm[i];
                }
                else
                {
                    k = alm[i + 185];
                }
                AtrEdList[j, i].Value = k.ToString();
            }
            else
            {
                if (j == 1)
                {
                    k = alm[i];
                }
                else
                {
                    k = alm[i + 185];
                }
                bitf = BitConverter.GetBytes(k);
                rdfr = BitConverter.ToSingle(bitf, 0);
                AtrEdList[j, i].Value = rdfr.ToString();
            }
            AtrEdList.Enabled = true;
        }

        private void AtrEdList_SelectionChanged(object sender, EventArgs e)
        {
            i = AtrEdList.CurrentCell.RowIndex;
            if (AtrEtxd[i] == "" || AtrEtxd[i] == null)
            {
                AtrEdText.Text = "No Description Available.";
            }
            else
            {
                AtrEdText.Text = AtrEtxd[i];
            }
        }

        private void ModeChange_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ModeChange.SelectedIndex == 1)
            {
                if (EventTab.SelectedIndex == 2 && EvRnOffset.Text.Length > 5)
                {
                    EvList.Items.Clear();
                    rd1 = EvRnOffset.Text.Substring(2);
                    h = Convert.ToInt32(rd1, 16);
                    j = h / 4;
                    mov = 0;
                    while (alm[j] != 0 && j < md)
                    {
                        EveListstring();
                        EvList.Items.Add(rd1);
                        j += 2;
                    }
                }
            }
            else if (ModeChange.SelectedIndex == 3)
            {
                if (ArtActId.Items.Count > 0)
                {
                    i = ArtActId.SelectedIndex;
                    if (ArtDataList.Items.Count > 13)
                    {
                        rd1 = ArtDataList.Items[13].ToString();
                        if (rd1.Length > 21)
                        {
                            rd1 = rd1.Substring(2, 14);
                        }
                    }
                    else
                    {
                        rd1 = "";
                    }
                    if (rd1 == "034 ActionExit")
                    {
                        if (i != -1 && ArtActCbList.SelectedIndex != -1)
                        {
                            ArtActList.Items.Clear();
                            if (ArtActCbList.SelectedIndex == 1)
                            {
                                k = alm[artdt + 13] / 4;
                            }
                            else
                            {
                                k = alm[artdt + 5] / 4;
                            }
                            h = alm[k + i];
                            ArtActOffset.Text = "0x" + h.ToString("X");
                            j = h / 4;
                            mov = 0;
                            if (j >= stf && j < md)
                            {
                                while (alm[j] != 0 && j < md)
                                {
                                    EveListstring();
                                    ArtActList.Items.Add(rd1);
                                    j += 2;
                                }
                            }
                        }
                        else if (i == -1)
                        {
                            ArtActCbList.SelectedIndex = 0;
                            ArtActId.SelectedIndex = 0;
                        }
                        else
                        {
                            ArtActCbList.SelectedIndex = 0;
                        }
                    }
                    else if (i == -1)
                    {
                        ArtActId.SelectedIndex = 0;
                    }
                    else
                    {
                        ArtActList.Items.Clear();
                        k = alm[artdt + 5] / 4;
                        h = alm[k + i];
                        ArtActOffset.Text = "0x" + h.ToString("X");
                        j = h / 4;
                        mov = 0;
                        if (j >= stf && j < md)
                        {
                            while (alm[j] != 0 && j < md)
                            {
                                EveListstring();
                                ArtActList.Items.Add(rd1);
                                j += 2;
                            }
                        }
                    }
                }
                if (ArtSubaId.Items.Count <= 0 || ArtSubaCbList.Items.Count <= 0)
                {
                    return;
                }
                i = ArtSubaId.SelectedIndex;
                if (i == -1)
                {
                    ArtSubaId.SelectedIndex = 0;
                    return;
                }
                if (ArtSubaCbList.SelectedIndex == -1)
                {
                    ArtSubaCbList.SelectedIndex = 0;
                    return;
                }
                ArtSubaList.Items.Clear();
                g = ArtSubaCbList.SelectedIndex;
                if (alm[artdt + 6] == 0 && alm[artdt + 7] != 0)
                {
                    g++;
                }
                if (g < 3 && alm[artdt + 6 + g] != 0)
                {
                    k = alm[artdt + 6 + g] / 4;
                    h = alm[k + i];
                    ArtSubaOffset.Text = "0x" + h.ToString("X");
                    j = h / 4;
                    mov = 0;
                    if (j >= stf && j < md)
                    {
                        while (alm[j] != 0 && j < md)
                        {
                            EveListstring();
                            ArtSubaList.Items.Add(rd1);
                            j += 2;
                        }
                    }
                    return;
                }
                rd3 = ArtDataList.Items[13].ToString();
                rd1 = rd3.Substring(6, 10);
                if (rd1 != "SubAction ")
                {
                    g++;
                }
                rd2 = ArtDataList.Items[13 + g].ToString();
                rd1 = rd2.Substring(2, 3);
                k = Convert.ToInt32(rd1, 16);
                g = alm[artdt + k / 4] / 4;
                h = alm[g + i];
                ArtSubaOffset.Text = "0x" + h.ToString("X");
                j = h / 4;
                mov = 0;
                if (j >= stf && j < md)
                {
                    while (alm[j] != 0 && j < md)
                    {
                        EveListstring();
                        ArtSubaList.Items.Add(rd1);
                        j += 2;
                    }
                }
            }
            else
            {
                if (ModeChange.SelectedIndex != 4 || DMiscParam.Items.Count <= 0 || DMiscList.SelectedNode == null)
                {
                    return;
                }
                rd1 = DMiscList.SelectedNode.FullPath;
                if (rd1 == "ExtraActionInterrupts")
                {
                    if (alm[dat + 22] >= 8096 && alm[dat + 22] < tds[25] && DMiscParam.Items.Count == 3)
                    {
                        i = alm[dat + 22] / 4;
                        DMiscParam.Items[2].SubItems[1].Text = "0x" + alm[i + 2].ToString("X");
                    }
                }
                else
                {
                    if (rd1.Length <= 25)
                    {
                        return;
                    }
                    rd2 = DMiscList.SelectedNode.Text;
                    if (!(rd2 == "SubAction GFX"))
                    {
                        return;
                    }
                    rd2 = rd1.Substring(0, 7);
                    if (rd2 == "StaticA")
                    {
                        if (alm[dat + 25] < 8096 || alm[dat + 25] >= tds[25])
                        {
                            return;
                        }
                        h = alm[dat + 25] / 4;
                        if (alm[h] < 8096 || alm[h] >= tds[25])
                        {
                            return;
                        }
                        i = DMiscList.SelectedNode.Parent.Index;
                        g = alm[h] / 4 + i * 14 + 7;
                        if (alm[g] >= 8096 && alm[g] < tds[25])
                        {
                            h = alm[g] / 4;
                            g = DMiscParam.Items.Count;
                            for (i = 0; i < g; i++)
                            {
                                DMiscParam.Items[i].SubItems[1].Text = "GFX" + i + " Offset:0x" + alm[h + i].ToString("X");
                            }
                        }
                    }
                    else
                    {
                        if (!(rd2 == "EntryAr") || alm[dat + 26] < 8096 || alm[dat + 26] >= tds[25])
                        {
                            return;
                        }
                        i = alm[dat + 26] / 4 + 7;
                        if (alm[i] >= 8096 && alm[i] < tds[25])
                        {
                            h = alm[i] / 4;
                            g = DMiscParam.Items.Count;
                            for (i = 0; i < g; i++)
                            {
                                DMiscParam.Items[i].SubItems[1].Text = "GFX" + i + " Offset:0x" + alm[h + i].ToString("X");
                            }
                        }
                    }
                }
            }
        }

        private void ArticleIDCb_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ArticleIDCb.SelectedIndex == -1)
            {
                return;
            }
            ArtParCbList.Items.Clear();
            ArtActId.Items.Clear();
            ArtDataList.Items.Clear();
            ArtSubaId.Items.Clear();
            ArtSubaCbList.Items.Clear();
            ArtActList.Items.Clear();
            ArtSubaList.Items.Clear();
            ArtActOffset.Text = "";
            ArtSubaOffset.Text = "";
            ArtActText.Text = "";
            ArtSubaText.Text = "";
            ArtSubaCbList.Text = "";
            ArtParOffset.Text = "";
            if (ArticleIDCb.SelectedIndex == 0)
            {
                ArtSubaAnim.Text = "";
                ArtOffset.Text = "";
                i = 1;
                while (CharPar[i].Length >= 7)
                {
                    rd1 = CharPar[i].Substring(4, 3);
                    if (rd1 == "Par")
                    {
                        rd1 = CharPar[i].Substring(0, 3);
                        n = Convert.ToInt32(rd1, 16);
                        j = 2;
                        if (CharPar[i].Length > 9)
                        {
                            rd1 = CharPar[i].Substring(4, 5);
                        }
                        else
                        {
                            rd1 = CharPar[i].Substring(4);
                        }
                        while (CharPar[j] != null && !(CharPar[j] == rd1))
                        {
                            j++;
                        }
                        if (CharPar[j] == rd1 && CharPar[j + 1].Length >= 2)
                        {
                            rd1 = CharPar[j + 1];
                        }
                        ArtParCbList.Items.Add(rd1);
                        ArtDataList.Items.Add("0x" + n.ToString("X3") + " " + rd1 + " - 0x" + alm[dat + n / 4].ToString("X"));
                    }
                    else if (CharPar[i][0] == 'X')
                    {
                        if (!Uri.IsHexDigit(CharPar[i][1]))
                        {
                            break;
                        }
                        rd2 = CharPar[i].Substring(4);
                        n = rd2.Length;
                        an2 = dat;
                        j = 2;
                        while (j < n && rd2[j] == '-')
                        {
                            j += 3;
                        }
                        for (k = 0; k < j; k += 3)
                        {
                            rd1 = rd2.Substring(k, 2);
                            g = Convert.ToInt32(rd1, 16);
                            an4 = alm[an2 + g];
                            an2 = an4 / 4;
                            if (an2 < stf || an2 >= md)
                            {
                                break;
                            }
                        }
                        if (k > j)
                        {
                            if (j == n - 1)
                            {
                                rd1 = "EXD " + rd2;
                                j = 2;
                                while (CharPar[j] != null && !(CharPar[j] == rd1))
                                {
                                    j++;
                                }
                                if (CharPar[j] == rd1)
                                {
                                    rd1 = CharPar[j + 1];
                                }
                                else
                                {
                                    rd1 = "ExtraData(Place:" + rd2 + ")";
                                }
                            }
                            else
                            {
                                rd1 = rd2.Substring(j + 1);
                            }
                        }
                        else
                        {
                            rd1 = "ExtraData(Place:" + rd2 + ")";
                        }
                        ArtParCbList.Items.Add(rd1);
                        ArtDataList.Items.Add("ExtraData: " + rd1 + " - 0x" + an4.ToString("X"));
                    }
                    i++;
                }
            }
            else
            {
                g = ArticleIDCb.SelectedIndex;
                j = 0;
                i = 1;
                while (CharPar[i].Length >= 7)
                {
                    rd1 = CharPar[i].Substring(4, 3);
                    if (rd1 == "Art")
                    {
                        j++;
                        if (j == g)
                        {
                            rd1 = CharPar[i].Substring(4);
                            j = 2;
                            while (CharPar[j] != null && !(CharPar[j] == rd1))
                            {
                                j++;
                            }
                            if (CharPar[j] == rd1)
                            {
                                rd1 = CharPar[i].Substring(0, 3);
                                g = Convert.ToInt32(rd1, 16);
                                artdt = alm[dat + g / 4] / 4;
                                if (CharPar[j + 1].Length <= 5)
                                {
                                    rd1 = CharPar[j + 1];
                                    k = rd1.Length - 1;
                                    fnt = 1;
                                    for (h = 1; h < k; h++)
                                    {
                                        if (rd1[h] == '-')
                                        {
                                            fnt = 0;
                                            break;
                                        }
                                    }
                                    if (fnt == 0)
                                    {
                                        rd2 = rd1.Substring(0, h);
                                        rd3 = rd1.Substring(h + 1);
                                        for (k = 0; k < h; k++)
                                        {
                                            if (!Uri.IsHexDigit(rd2[k]))
                                            {
                                                fnt = 1;
                                                break;
                                            }
                                        }
                                        if (fnt == 0)
                                        {
                                            h = rd3.Length;
                                            for (k = 0; k < h; k++)
                                            {
                                                if (!Uri.IsHexDigit(rd3[k]))
                                                {
                                                    fnt = 1;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    if (fnt == 0)
                                    {
                                        h = Convert.ToInt32(rd2, 16);
                                        if (h >= 1 && alm[artdt + 5] > 8096 && alm[artdt + 5] < tds[25])
                                        {
                                            for (k = 0; k < h; k++)
                                            {
                                                ArtActId.Items.Add(k.ToString("X"));
                                            }
                                        }
                                        h = Convert.ToInt32(rd3, 16);
                                        if (h >= 1 && alm[artdt + 4] > 8096 && alm[artdt + 4] < tds[25])
                                        {
                                            for (k = 0; k < h; k++)
                                            {
                                                ArtSubaId.Items.Add(k.ToString("X"));
                                            }
                                            if (alm[artdt + 6] > 8096 && alm[artdt + 6] < tds[25])
                                            {
                                                ArtSubaCbList.Items.Add("Main");
                                            }
                                            if (alm[artdt + 7] > 8096 && alm[artdt + 7] < tds[25])
                                            {
                                                ArtSubaCbList.Items.Add("GFX");
                                            }
                                            if (alm[artdt + 8] > 8096 && alm[artdt + 8] < tds[25])
                                            {
                                                ArtSubaCbList.Items.Add("SFX");
                                            }
                                        }
                                        j++;
                                    }
                                }
                                ArtOffset.Text = "0x" + (artdt * 4).ToString("X");
                                ArtDataList.Items.Add("0x000 ArticleGroupID : " + alm[artdt]);
                                ArtDataList.Items.Add("0x004 ARCEntryGroup : " + alm[artdt + 1]);
                                ArtDataList.Items.Add("0x008 Bone - 0x" + alm[artdt + 2].ToString("X"));
                                ArtDataList.Items.Add("0x00C ActionFlags - 0x" + alm[artdt + 3].ToString("X"));
                                ArtDataList.Items.Add("0x010 SubActionFlags - 0x" + alm[artdt + 4].ToString("X"));
                                ArtDataList.Items.Add("0x014 Actions - 0x" + alm[artdt + 5].ToString("X"));
                                ArtDataList.Items.Add("0x018 SubActionMain - 0x" + alm[artdt + 6].ToString("X"));
                                ArtDataList.Items.Add("0x01C SubActionGFX - 0x" + alm[artdt + 7].ToString("X"));
                                ArtDataList.Items.Add("0x020 SubActionSFX - 0x" + alm[artdt + 8].ToString("X"));
                                ArtDataList.Items.Add("0x024 ModelVisibility - 0x" + alm[artdt + 9].ToString("X"));
                                ArtDataList.Items.Add("0x028 CollisionData - 0x" + alm[artdt + 10].ToString("X"));
                                ArtDataList.Items.Add("0x02C Data2 - 0x" + alm[artdt + 11].ToString("X"));
                                ArtDataList.Items.Add("---------------------------");
                                k = 40;
                                fntb[0] = 0;
                                ArtActCbList.Visible = false;
                                i = j + 1;
                                while (CharPar[i] != null && CharPar[i].Length >= 4)
                                {
                                    rd2 = CharPar[i].Substring(0, 3);
                                    fnt = 0;
                                    if (rd2[0] == 'X')
                                    {
                                        if (Uri.IsHexDigit(rd2[1]))
                                        {
                                            if (!Uri.IsHexDigit(rd2[2]))
                                            {
                                                fnt = 1;
                                            }
                                        }
                                        else
                                        {
                                            fnt = 1;
                                        }
                                        if (fnt != 0)
                                        {
                                            break;
                                        }
                                        fntb[0] = 2;
                                        rd2 = CharPar[i].Substring(4);
                                        n = rd2.Length;
                                        an2 = dat;
                                        j = 2;
                                        while (j < n && rd2[j] == '-')
                                        {
                                            j += 3;
                                        }
                                        for (k = 0; k < j; k += 3)
                                        {
                                            rd1 = rd2.Substring(k, 2);
                                            g = Convert.ToInt32(rd1, 16);
                                            an4 = alm[an2 + g];
                                            an2 = an4 / 4;
                                            if (an2 < stf || an2 >= md)
                                            {
                                                break;
                                            }
                                        }
                                        if (k > j)
                                        {
                                            if (j == n - 1)
                                            {
                                                rd1 = "EXD " + rd2;
                                                j = 2;
                                                while (CharPar[j] != null && !(CharPar[j] == rd1))
                                                {
                                                    j++;
                                                }
                                                if (CharPar[j] == rd1)
                                                {
                                                    rd1 = CharPar[j + 1];
                                                }
                                                else
                                                {
                                                    rd1 = "ExtraData(Place:" + rd2 + ")";
                                                }
                                            }
                                            else
                                            {
                                                rd1 = rd2.Substring(j + 1);
                                            }
                                        }
                                        else
                                        {
                                            rd1 = "ExtraData(PlaceError:" + rd2 + ")";
                                        }
                                        ArtParCbList.Items.Add(rd1);
                                        ArtDataList.Items.Add("ExtraData: " + rd1 + " - 0x" + an4.ToString("X"));
                                    }
                                    else
                                    {
                                        for (j = 0; j < 3; j++)
                                        {
                                            if (!Uri.IsHexDigit(rd2[j]))
                                            {
                                                fnt = 1;
                                                break;
                                            }
                                        }
                                        if (fnt != 0)
                                        {
                                            break;
                                        }
                                        n = Convert.ToInt32(rd2, 16);
                                        j = alm[artdt + n / 4];
                                        if (j < 8096 || j >= tds[25])
                                        {
                                            n = 0;
                                        }
                                        if (n <= k || n % 4 != 0)
                                        {
                                            break;
                                        }
                                        j = CharPar[i].Length - 1;
                                        fnt = 1;
                                        if (CharPar[i].Length >= 7)
                                        {
                                            rd1 = CharPar[i].Substring(4, 3);
                                            if (rd1 == "Par")
                                            {
                                                if (CharPar[i].Length > 11)
                                                {
                                                    rd1 = CharPar[i].Substring(4, 7);
                                                }
                                                else
                                                {
                                                    rd1 = CharPar[i].Substring(4);
                                                }
                                                k = Convert.ToInt32(rd2, 16);
                                                fnt = 0;
                                                fntb[0] = 2;
                                                j = 2;
                                                while (CharPar[j] != null && !(CharPar[j] == rd1))
                                                {
                                                    j++;
                                                }
                                                if (CharPar[j] == rd1 && CharPar[j + 1].Length >= 2)
                                                {
                                                    rd1 = CharPar[j + 1];
                                                }
                                                if (alm[artdt + n / 4] + k >= tds[25])
                                                {
                                                    rd1 = "PlaceError:" + rd1;
                                                }
                                                ArtParCbList.Items.Add(rd1);
                                                ArtDataList.Items.Add("0x" + n.ToString("X3") + " " + rd1 + " - 0x" + alm[artdt + n / 4].ToString("X"));
                                            }
                                            if (fntb[0] < 2)
                                            {
                                                if (CharPar[i].Length >= 15)
                                                {
                                                    rd1 = CharPar[i].Substring(4, 10);
                                                    if (rd1 == "SubAction ")
                                                    {
                                                        rd1 = CharPar[i].Substring(14);
                                                        ArtSubaCbList.Items.Add(rd1);
                                                        ArtDataList.Items.Add("0x" + CharPar[i] + " - 0x" + alm[artdt + n / 4].ToString("X"));
                                                    }
                                                }
                                                else if (CharPar[i] == "034 ActionExit" && fntb[0] == 0)
                                                {
                                                    fntb[0] = 1;
                                                    ArtActCbList.Visible = true;
                                                    ArtActCbList.SelectedIndex = 0;
                                                    ArtDataList.Items.Add("0x" + CharPar[i] + " - 0x" + alm[artdt + n / 4].ToString("X"));
                                                }
                                            }
                                        }
                                        k = n;
                                    }
                                    i++;
                                }
                            }
                            else
                            {
                                rd1 = CharPar[i].Substring(0, 3);
                                g = Convert.ToInt32(rd1, 16);
                                artdt = alm[dat + g / 4] / 4;
                                ArtOffset.Text = "0x" + (artdt * 4).ToString("X");
                                ArtDataList.Items.Add("0x000 ArticleGroupID : " + alm[artdt]);
                                ArtDataList.Items.Add("0x004 ARCEntryGroup : " + alm[artdt + 1]);
                                ArtDataList.Items.Add("0x008 Bone - 0x" + alm[artdt + 2].ToString("X"));
                                ArtDataList.Items.Add("0x00C ActionFlags - 0x" + alm[artdt + 3].ToString("X"));
                                ArtDataList.Items.Add("0x010 SubActionFlags - 0x" + alm[artdt + 4].ToString("X"));
                                ArtDataList.Items.Add("0x014 Actions - 0x" + alm[artdt + 5].ToString("X"));
                                ArtDataList.Items.Add("0x018 SubActionMain - 0x" + alm[artdt + 6].ToString("X"));
                                ArtDataList.Items.Add("0x01C SubActionGFX - 0x" + alm[artdt + 7].ToString("X"));
                                ArtDataList.Items.Add("0x020 SubActionSFX - 0x" + alm[artdt + 8].ToString("X"));
                                ArtDataList.Items.Add("0x024 ModelVisibility - 0x" + alm[artdt + 9].ToString("X"));
                                ArtDataList.Items.Add("0x028 CollisionData - 0x" + alm[artdt + 10].ToString("X"));
                                ArtDataList.Items.Add("0x02C Data2 - 0x" + alm[artdt + 11].ToString("X"));
                                ArtDataList.Items.Add("0x030 Data3 - 0x" + alm[artdt + 12].ToString("X"));
                            }
                            break;
                        }
                    }
                    i++;
                }
            }
            if (ArtParCbList.Items.Count < 1)
            {
                ArtParList.Rows.Clear();
                ArtParCbList.Text = "";
                ArtParText.Text = "";
            }
            else
            {
                ArtParCbList.SelectedIndex = 0;
            }
            if (ArtActId.Items.Count > 0)
            {
                ArtActId.SelectedIndex = 0;
            }
            else
            {
                ArtActId.Text = "";
            }
            if (ArtSubaId.Items.Count > 0)
            {
                ArtSubaId.SelectedIndex = 0;
                return;
            }
            ArtSubaId.Text = "";
            ArtSubaAnim.Text = "";
        }

        private void ArtActId_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ArtActId.SelectedIndex == -1)
            {
                return;
            }
            ArtActList.Items.Clear();
            i = ArtActId.SelectedIndex;
            if (!ArtActCbList.Visible)
            {
                k = alm[artdt + 5] / 4;
            }
            else if (ArtActCbList.SelectedIndex == 1)
            {
                k = alm[artdt + 13] / 4;
            }
            else
            {
                k = alm[artdt + 5] / 4;
            }
            h = alm[k + i];
            ArtActOffset.Text = "0x" + h.ToString("X");
            j = h / 4;
            mov = 0;
            if (j >= stf && j < md)
            {
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    ArtActList.Items.Add(rd1);
                    j += 2;
                }
            }
        }

        private void ArtActCbList_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ArtActId.SelectedIndex == -1 || ArtActCbList.SelectedIndex == -1)
            {
                return;
            }
            ArtActList.Items.Clear();
            i = ArtActId.SelectedIndex;
            if (!ArtActCbList.Visible)
            {
                k = alm[artdt + 5] / 4;
            }
            else if (ArtActCbList.SelectedIndex == 1)
            {
                k = alm[artdt + 13] / 4;
            }
            else
            {
                k = alm[artdt + 5] / 4;
            }
            h = alm[k + i];
            ArtActOffset.Text = "0x" + h.ToString("X");
            j = h / 4;
            mov = 0;
            if (j >= stf && j < md)
            {
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    ArtActList.Items.Add(rd1);
                    j += 2;
                }
            }
        }

        private void ArtActList_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!ArtActText.Enabled)
            {
                return;
            }
            if (ArtActList.SelectedIndex != -1)
            {
                rd1 = ArtActOffset.Text.Substring(2);
                g = Convert.ToInt32(rd1, 16);
                m = ArtActList.SelectedIndex;
                n = alm[g / 4 + m * 2];
                m = 0;
                while (EveEtid[m] != 0 && n != EveEtid[m])
                {
                    m++;
                    if (m >= 500)
                    {
                        m = 0;
                        break;
                    }
                }
                if (n != EveEtid[m])
                {
                    g = 0;
                    m = 16777216;
                    k = (n | 0xFFFF) - 65535;
                    while (EveEtid[g] != 0)
                    {
                        if (EveEtid[g] >= k && EveEtid[g] < n)
                        {
                            k = EveEtid[g] + 1;
                            m = g;
                        }
                        g++;
                        if (g >= 500)
                        {
                            break;
                        }
                    }
                }
                if (m < 500)
                {
                    ArtActText.Text = EveEtxd[m * 4 + 2];
                }
                else
                {
                    ArtActText.Text = "No Description Available.";
                }
            }
            else
            {
                ArtActText.Text = "";
            }
        }

        private void ArtActAdd_Click(object sender, EventArgs e)
        {
            if (ArtActId.SelectedIndex == -1)
            {
                return;
            }
            rd1 = ArtActOffset.Text.Substring(2);
            h = Convert.ToInt32(rd1, 16);
            if (ArtActCbList.Visible && ArtActCbList.SelectedIndex == -1)
            {
                h = -1;
            }
            if (h != 0 && (h < stf * 4 || h >= tds[25]))
            {
                return;
            }
            g = ArtActList.Items.Count;
            EventAdd();
            if (h == 0)
            {
                h = j * 4;
                i = ArtActId.SelectedIndex;
                if (!ArtActCbList.Visible)
                {
                    n = alm[artdt + 5] / 4;
                }
                else if (ArtActCbList.SelectedIndex == 1)
                {
                    n = alm[artdt + 13] / 4;
                }
                else
                {
                    n = alm[artdt + 5] / 4;
                }
                alm[n + i] = h;
                asc[par] = (n + i) * 4;
                mov = 0;
                tds[26]++;
                ArtActOffset.Text = "0x" + h.ToString("X");
                EveListstring();
                ArtActList.Items.Add(rd1);
                Fixam();
            }
            else
            {
                if (k > 4)
                {
                    if (!ArtActCbList.Visible)
                    {
                        n = alm[artdt + 5] / 4;
                    }
                    else if (ArtActCbList.SelectedIndex == 1)
                    {
                        n = alm[artdt + 13] / 4;
                    }
                    else
                    {
                        n = alm[artdt + 5] / 4;
                    }
                    i = ArtActId.SelectedIndex;
                    an1 = j;
                    g = j * 4;
                    alm[n + i] = g;
                    ArtActOffset.Text = "0x" + g.ToString("X");
                    if (EvOffsetInterlock.Checked)
                    {
                        i = ArtActList.Items.Count;
                        k = h + i * 8;
                        for (i = stf; i < md; i++)
                        {
                            if (alm[i] >= h && alm[i] <= k)
                            {
                                n = i * 4;
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == n)
                                    {
                                        if (alm[i] == h)
                                        {
                                            alm[i] = g;
                                            break;
                                        }
                                        m = alm[i] - h;
                                        if (m % 8 == 0)
                                        {
                                            alm[i] = g + m;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    Fixam();
                    j = an1;
                }
                else if (k == 1)
                {
                    Fixam();
                    j = h / 4;
                }
                if (ArtActList.SelectedIndex != -1)
                {
                    g = ArtActList.Items.Count;
                    k = 0;
                    if (g < 511)
                    {
                        for (i = 0; i < g; i++)
                        {
                            if (ArtActList.GetSelected(i))
                            {
                                nonam[k] = i;
                                k++;
                            }
                        }
                        nonam[k] = 1048575;
                    }
                    else
                    {
                        nonam[0] = 1048575;
                    }
                }
                else
                {
                    nonam[0] = 1048575;
                }
                mov = 0;
                ArtActList.Items.Clear();
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    ArtActList.Items.Add(rd1);
                    j += 2;
                }
                if (nonam[0] < 1048575)
                {
                    ArtActText.Enabled = false;
                    g = ArtActList.Items.Count;
                    k = 0;
                    for (i = 0; i < g; i++)
                    {
                        if (i == nonam[k])
                        {
                            ArtActList.SetSelected(i, value: true);
                            k++;
                        }
                    }
                    ArtActText.Enabled = true;
                }
            }
            if (qe)
            {
                Qsave.Enabled = true;
            }
        }

        private void ArtActModify_Click(object sender, EventArgs e)
        {
            if (ArtActList.SelectedIndex == -1)
            {
                return;
            }
            rd1 = ArtActOffset.Text.Substring(2);
            h = Convert.ToInt32(rd1, 16);
            g = ArtActList.SelectedIndex;
            j = h / 4 + g * 2;
            if (alm[j + 1] >= 0 && alm[j + 1] < tds[25])
            {
                EventModify();
                if (h != -1)
                {
                    return;
                }
                g = ArtActList.Items.Count;
                k = 0;
                if (g < 511)
                {
                    for (i = 0; i < g; i++)
                    {
                        if (ArtActList.GetSelected(i))
                        {
                            nonam[k] = i;
                            k++;
                        }
                    }
                    nonam[k] = 1048575;
                }
                else
                {
                    nonam[0] = 1048575;
                }
                rd1 = ArtActOffset.Text.Substring(2);
                h = Convert.ToInt32(rd1, 16);
                j = h / 4;
                mov = 0;
                ArtActList.Items.Clear();
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    ArtActList.Items.Add(rd1);
                    j += 2;
                }
                if (nonam[0] < 1048575)
                {
                    ArtActText.Enabled = false;
                    g = ArtActList.Items.Count;
                    k = 0;
                    for (i = 0; i < g; i++)
                    {
                        if (i == nonam[k])
                        {
                            ArtActList.SetSelected(i, value: true);
                            k++;
                        }
                    }
                    ArtActText.Enabled = true;
                }
                if (qe)
                {
                    Qsave.Enabled = true;
                }
            }
            else
            {
                minitxt.Text = "Error! Cannot Modify this Event.";
            }
        }

        private void ArtActList_DoubleClick(object sender, EventArgs e)
        {
            if (ArtActList.SelectedIndex == -1)
            {
                return;
            }
            rd1 = ArtActOffset.Text.Substring(2);
            h = Convert.ToInt32(rd1, 16);
            g = ArtActList.SelectedIndex;
            j = h / 4 + g * 2;
            if (alm[j + 1] >= 0 && alm[j + 1] < tds[25])
            {
                EventModify();
                if (h != -1)
                {
                    return;
                }
                g = ArtActList.Items.Count;
                k = 0;
                if (g < 511)
                {
                    for (i = 0; i < g; i++)
                    {
                        if (ArtActList.GetSelected(i))
                        {
                            nonam[k] = i;
                            k++;
                        }
                    }
                    nonam[k] = 1048575;
                }
                else
                {
                    nonam[0] = 1048575;
                }
                rd1 = ArtActOffset.Text.Substring(2);
                h = Convert.ToInt32(rd1, 16);
                j = h / 4;
                mov = 0;
                ArtActList.Items.Clear();
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    ArtActList.Items.Add(rd1);
                    j += 2;
                }
                if (nonam[0] < 1048575)
                {
                    ArtActText.Enabled = false;
                    g = ArtActList.Items.Count;
                    k = 0;
                    for (i = 0; i < g; i++)
                    {
                        if (i == nonam[k])
                        {
                            ArtActList.SetSelected(i, value: true);
                            k++;
                        }
                    }
                    ArtActText.Enabled = true;
                }
                if (qe)
                {
                    Qsave.Enabled = true;
                }
            }
            else
            {
                minitxt.Text = "Error! Cannot Modify this Event.";
            }
        }

        private void ArtActRemove_Click(object sender, EventArgs e)
        {
            if (ArtActList.SelectedIndex == -1 || ArtActId.SelectedIndex == -1)
            {
                return;
            }
            rd1 = ArtActOffset.Text.Substring(2);
            h = Convert.ToInt32(rd1, 16);
            j = h / 4;
            mov = 0;
            g = ArtActList.Items.Count;
            if (ArtActList.SelectedItems.Count >= g)
            {
                if (ArtActCbList.Visible && ArtActCbList.SelectedIndex == -1)
                {
                    h = -1;
                }
                if (h != -1)
                {
                    RemoveAllEv();
                    if (!ArtActCbList.Visible)
                    {
                        n = alm[artdt + 5] / 4;
                    }
                    else if (ArtActCbList.SelectedIndex == 1)
                    {
                        n = alm[artdt + 13] / 4;
                    }
                    else
                    {
                        n = alm[artdt + 5] / 4;
                    }
                    i = ArtActList.SelectedIndex;
                    alm[n + i] = 0;
                    rmv = (n + i) * 4;
                    Delasc();
                    ArtActOffset.Text = "0x0";
                    ArtActList.Items.Clear();
                    if (EvOffsetInterlock.Checked)
                    {
                        k = h + g * 8;
                        for (i = stf; i < md; i++)
                        {
                            if (alm[i] >= h && alm[i] <= k)
                            {
                                DelILData();
                            }
                        }
                    }
                }
            }
            else
            {
                for (i = g - 1; i >= 0; i--)
                {
                    if (ArtActList.GetSelected(i))
                    {
                        RemoveSeleEv();
                    }
                }
                if (EvOffsetInterlock.Checked)
                {
                    k = h + g * 8;
                    h = k - ArtActList.SelectedItems.Count * 8;
                    for (i = stf; i < md; i++)
                    {
                        if (alm[i] >= h && alm[i] <= k)
                        {
                            DelILData();
                        }
                    }
                }
                ArtActList.Items.Clear();
                mov = 0;
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    ArtActList.Items.Add(rd1);
                    j += 2;
                }
            }
            ArtActText.Text = "";
            Fixam();
            if (qe)
            {
                Qsave.Enabled = true;
            }
        }

        private void ArtActUp_Click(object sender, EventArgs e)
        {
            if (ArtActList.SelectedIndex == -1)
            {
                return;
            }
            rd1 = ArtActOffset.Text.Substring(2);
            h = Convert.ToInt32(rd1, 16);
            j = h / 4;
            if (ArtActList.GetSelected(0))
            {
                return;
            }
            g = ArtActList.Items.Count;
            if (ArtActList.SelectedItems.Count < 510)
            {
                k = 0;
                for (i = 0; i < g; i++)
                {
                    if (ArtActList.GetSelected(i))
                    {
                        SeleEvUp();
                        nonam[k] = i - 1;
                        k++;
                    }
                }
                nonam[k] = 1048575;
            }
            else
            {
                nonam[0] = 1048575;
                for (i = 0; i < g; i++)
                {
                    if (ArtActList.GetSelected(i))
                    {
                        SeleEvUp();
                    }
                }
            }
            ArtActList.Items.Clear();
            mov = 0;
            while (alm[j] != 0 && j < md)
            {
                EveListstring();
                ArtActList.Items.Add(rd1);
                j += 2;
            }
            if (nonam[0] < 1048575)
            {
                h = ArtActList.Items.Count;
                k = 0;
                ArtActText.Enabled = false;
                for (i = 0; i < ArtActList.Items.Count; i++)
                {
                    if (i == nonam[k])
                    {
                        ArtActList.SetSelected(i, value: true);
                        k++;
                    }
                }
                ArtActText.Enabled = true;
            }
            if (qe)
            {
                Qsave.Enabled = true;
            }
        }

        private void ArtActDown_Click(object sender, EventArgs e)
        {
            if (ArtActList.SelectedIndex == -1)
            {
                return;
            }
            rd1 = ArtActOffset.Text.Substring(2);
            h = Convert.ToInt32(rd1, 16);
            j = h / 4;
            g = ArtActList.Items.Count;
            if (ArtActList.GetSelected(g - 1))
            {
                return;
            }
            if (ArtActList.SelectedItems.Count < 510)
            {
                k = 0;
                for (i = g - 1; i >= 0; i--)
                {
                    if (ArtActList.GetSelected(i))
                    {
                        SeleEvDown();
                        nonam[k] = i + 1;
                        k++;
                    }
                }
                nonam[k] = 1048575;
            }
            else
            {
                nonam[0] = 1048575;
                for (i = g - 1; i >= 0; i--)
                {
                    if (ArtActList.GetSelected(i))
                    {
                        SeleEvDown();
                    }
                }
            }
            ArtActList.Items.Clear();
            mov = 0;
            while (alm[j] != 0 && j < md)
            {
                EveListstring();
                ArtActList.Items.Add(rd1);
                j += 2;
            }
            if (nonam[0] < 1048575)
            {
                k = 0;
                ArtActText.Enabled = false;
                for (i = ArtActList.Items.Count; i >= 0; i--)
                {
                    if (i == nonam[k])
                    {
                        ArtActList.SetSelected(i, value: true);
                        k++;
                    }
                }
                ArtActText.Enabled = true;
            }
            if (qe)
            {
                Qsave.Enabled = true;
            }
        }

        private void ArtActCopy_Click(object sender, EventArgs e)
        {
            if (ArtActList.SelectedIndex == -1)
            {
                return;
            }
            rd1 = ArtActOffset.Text.Substring(2);
            g = Convert.ToInt32(rd1, 16);
            n = g / 4;
            rd1 = "";
            h = ArtActList.Items.Count;
            for (i = 0; i < h; i++)
            {
                if (ArtActList.GetSelected(i))
                {
                    rd1 = rd1 + "E=" + alm[n + i * 2].ToString("X8") + ":";
                    g = ((alm[n + i * 2] >> 8) & 0xFF);
                    if (g != 0)
                    {
                        k = g * 2;
                        g = alm[n + i * 2 + 1] / 4;
                        if (g >= 0 && g < md)
                        {
                            for (j = 0; j < k; j++)
                            {
                                rd1 = rd1 + alm[g + j].ToString("X") + "-";
                                j++;
                                rd1 = rd1 + alm[g + j].ToString("X8") + ",";
                            }
                        }
                    }
                }
            }
            Clipboard.SetText(rd1);
        }

        private void ArtActPaste_Click(object sender, EventArgs e)
        {
            if (Clipboard.ContainsText())
            {
                if (ArtActId.SelectedIndex != -1)
                {
                    ArtActPaste.Enabled = false;
                    rd1 = ArtActOffset.Text.Substring(2);
                    h = Convert.ToInt32(rd1, 16);
                    if (ArtActCbList.Visible && ArtActCbList.SelectedIndex == -1)
                    {
                        h = -1;
                    }
                    if (h == 0 || (h >= stf * 4 && h < tds[25]))
                    {
                        rd1 = Clipboard.GetText();
                        if (rd1 != null)
                        {
                            if (rd1.Length > 10)
                            {
                                if (minitxt.Text == "Cannot Paste.")
                                {
                                    minitxt.Text = "";
                                }
                                g = ArtActList.Items.Count;
                                EventPaste();
                                if (mov < 512)
                                {
                                    if (h == 0)
                                    {
                                        h = j * 4;
                                        i = ArtActId.SelectedIndex;
                                        if (!ArtActCbList.Visible)
                                        {
                                            n = alm[artdt + 5] / 4;
                                        }
                                        else if (ArtActCbList.SelectedIndex == 1)
                                        {
                                            n = alm[artdt + 13] / 4;
                                        }
                                        else
                                        {
                                            n = alm[artdt + 5] / 4;
                                        }
                                        alm[n + i] = h;
                                        asc[par] = (n + i) * 4;
                                        mov = 0;
                                        tds[26]++;
                                        ArtActOffset.Text = "0x" + h.ToString("X");
                                    }
                                    else if (fnt == 2)
                                    {
                                        g = j * 4;
                                        i = ArtActId.SelectedIndex;
                                        if (!ArtActCbList.Visible)
                                        {
                                            n = alm[artdt + 5] / 4;
                                        }
                                        else if (ArtActCbList.SelectedIndex == 1)
                                        {
                                            n = alm[artdt + 13] / 4;
                                        }
                                        else
                                        {
                                            n = alm[artdt + 5] / 4;
                                        }
                                        alm[n + i] = g;
                                        ArtActOffset.Text = "0x" + g.ToString("X");
                                        if (EvOffsetInterlock.Checked)
                                        {
                                            i = ArtActList.Items.Count;
                                            k = h + i * 8;
                                            an4 = j + (i + mov) * 2;
                                            for (i = stf; i < md; i++)
                                            {
                                                if (alm[i] >= h && alm[i] <= k)
                                                {
                                                    n = i * 4;
                                                    if (i < j || i > an4)
                                                    {
                                                        for (mov = 0; mov < par; mov++)
                                                        {
                                                            if (asc[mov] == n)
                                                            {
                                                                if (alm[i] == h)
                                                                {
                                                                    alm[i] = g;
                                                                    break;
                                                                }
                                                                m = alm[i] - h;
                                                                if (m % 8 == 0)
                                                                {
                                                                    alm[i] = g + m;
                                                                }
                                                                break;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    g = j;
                                    Fixam();
                                    mov = 0;
                                    j = g;
                                    nonam[0] = ArtActList.Items.Count;
                                    ArtActList.Items.Clear();
                                    while (alm[j] != 0 && j < md)
                                    {
                                        EveListstring();
                                        ArtActList.Items.Add(rd1);
                                        j += 2;
                                    }
                                    k = ArtActList.Items.Count;
                                    ArtActText.Enabled = false;
                                    for (i = nonam[0]; i < k; i++)
                                    {
                                        ArtActList.SetSelected(i, value: true);
                                    }
                                    ArtActText.Enabled = true;
                                    if (qe)
                                    {
                                        Qsave.Enabled = true;
                                    }
                                }
                            }
                            else
                            {
                                minitxt.Text = "Cannot Paste.";
                            }
                        }
                        else
                        {
                            minitxt.Text = "Cannot Paste.";
                        }
                    }
                    else
                    {
                        minitxt.Text = "Cannot Paste.";
                    }
                    ArtActPaste.Enabled = true;
                }
                else
                {
                    minitxt.Text = "Cannot Paste.";
                }
            }
            else
            {
                minitxt.Text = "Cannot Paste.";
            }
        }

        private void ArtSubaId_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ArtSubaId.SelectedIndex == -1)
            {
                return;
            }
            i = ArtSubaId.SelectedIndex;
            g = 1;
            k = alm[artdt + 4] / 4 + 1 + i * 2;
            if (k > 2024 && k < md)
            {
                g = alm[k] / 4;
                if (g > 2024 && g < md)
                {
                    ArtSubaAnim.Text = "";
                    k = 0;
                    while (k < 80)
                    {
                        if (k % 4 == 0)
                        {
                            fntb[0] = (byte)((alm[g] >> 24) & 0xFF);
                        }
                        else if (k % 4 == 1)
                        {
                            fntb[0] = (byte)((alm[g] >> 16) & 0xFF);
                        }
                        else if (k % 4 == 2)
                        {
                            fntb[0] = (byte)((alm[g] >> 8) & 0xFF);
                        }
                        else
                        {
                            fntb[0] = (byte)(alm[g] & 0xFF);
                            g++;
                        }
                        if (fntb[0] != 0)
                        {
                            ArtSubaAnim.Text += Encoding.UTF8.GetString(fntb);
                            k++;
                            continue;
                        }
                        break;
                    }
                }
                else if (alm[k] == 0)
                {
                    ArtSubaAnim.Text = "<null>";
                }
                else
                {
                    ArtSubaAnim.Text = "<ERROR>";
                }
            }
            else
            {
                ArtSubaAnim.Text = "<ERROR>";
            }
            if (ArtSubaCbList.Items.Count <= 0)
            {
                return;
            }
            if (ArtSubaCbList.SelectedIndex == -1)
            {
                ArtSubaCbList.SelectedIndex = 0;
                return;
            }
            ArtSubaList.Items.Clear();
            g = ArtSubaCbList.SelectedIndex;
            if (alm[artdt + 6] == 0 && alm[artdt + 7] != 0)
            {
                g++;
            }
            if (g < 3 && alm[artdt + 6 + g] != 0)
            {
                k = alm[artdt + 6 + g] / 4;
                h = alm[k + i];
                ArtSubaOffset.Text = "0x" + h.ToString("X");
                j = h / 4;
                mov = 0;
                if (j >= stf && j < md)
                {
                    while (alm[j] != 0 && j < md)
                    {
                        EveListstring();
                        ArtSubaList.Items.Add(rd1);
                        j += 2;
                    }
                }
                return;
            }
            rd3 = ArtDataList.Items[13].ToString();
            rd1 = rd3.Substring(6, 10);
            if (rd1 != "SubAction ")
            {
                g++;
            }
            rd2 = ArtDataList.Items[13 + g].ToString();
            rd1 = rd2.Substring(2, 3);
            k = Convert.ToInt32(rd1, 16);
            g = alm[artdt + k / 4] / 4;
            h = alm[g + i];
            ArtSubaOffset.Text = "0x" + h.ToString("X");
            j = h / 4;
            mov = 0;
            if (j >= stf && j < md)
            {
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    ArtSubaList.Items.Add(rd1);
                    j += 2;
                }
            }
        }

        private void ArtSubaCbList_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ArtSubaCbList.SelectedIndex == -1 || ArtSubaId.SelectedIndex == -1)
            {
                return;
            }
            ArtSubaList.Items.Clear();
            i = ArtSubaId.SelectedIndex;
            g = ArtSubaCbList.SelectedIndex;
            if (alm[artdt + 6] == 0 && alm[artdt + 7] != 0)
            {
                g++;
            }
            if (g < 3 && alm[artdt + 6 + g] != 0)
            {
                k = alm[artdt + 6 + g] / 4;
                h = alm[k + i];
                ArtSubaOffset.Text = "0x" + h.ToString("X");
                j = h / 4;
                mov = 0;
                if (j >= stf && j < md)
                {
                    while (alm[j] != 0 && j < md)
                    {
                        EveListstring();
                        ArtSubaList.Items.Add(rd1);
                        j += 2;
                    }
                }
                return;
            }
            rd3 = ArtDataList.Items[13].ToString();
            rd1 = rd3.Substring(6, 10);
            if (rd1 != "SubAction ")
            {
                g++;
            }
            rd2 = ArtDataList.Items[13 + g].ToString();
            rd1 = rd2.Substring(2, 3);
            k = Convert.ToInt32(rd1, 16);
            g = alm[artdt + k / 4] / 4;
            h = alm[g + i];
            ArtSubaOffset.Text = "0x" + h.ToString("X");
            j = h / 4;
            mov = 0;
            if (j >= stf && j < md)
            {
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    ArtSubaList.Items.Add(rd1);
                    j += 2;
                }
            }
        }

        private void ArtSubaAnimFlag_Click(object sender, EventArgs e)
        {
            if (ArtSubaId.SelectedIndex == -1)
            {
                return;
            }
            k = alm[artdt + 4] / 4 + ArtSubaId.SelectedIndex * 2;
            g = alm[k];
            rd1 = ArtSubaAnim.Text;
            i = 1;
            using (SubaAnimFlagsForm subaAnimFlagsForm = new SubaAnimFlagsForm())
            {
                subaAnimFlagsForm.afdat = g;
                subaAnimFlagsForm.afrn = i;
                subaAnimFlagsForm.afanm = rd1;
                subaAnimFlagsForm.ShowDialog(this);
                g = subaAnimFlagsForm.afdat;
                i = subaAnimFlagsForm.afrn;
                rd1 = subaAnimFlagsForm.afanm;
            }
            if (i == 7)
            {
                alm[k] = g;
                if (qe)
                {
                    Qsave.Enabled = true;
                }
            }
        }

        private void ArtSubaAnim_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Return && ArtSubaId.SelectedIndex != -1)
            {
                ArtSubaAnim.Enabled = false;
                ArtSubaAnimFlag.Enabled = false;
                k = alm[artdt + 4] / 4 + ArtSubaId.SelectedIndex * 2;
                rd1 = ArtSubaAnim.Text;
                if (rd1 != "<ERROR>")
                {
                    SubaRename();
                }
                ArtSubaAnim.Enabled = true;
                ArtSubaAnimFlag.Enabled = true;
                if (qe)
                {
                    Qsave.Enabled = true;
                }
            }
        }

        private void ArtSubaList_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!ArtSubaText.Enabled)
            {
                return;
            }
            if (ArtSubaList.SelectedIndex != -1)
            {
                rd1 = ArtSubaOffset.Text.Substring(2);
                g = Convert.ToInt32(rd1, 16);
                m = ArtSubaList.SelectedIndex;
                n = alm[g / 4 + m * 2];
                m = 0;
                while (EveEtid[m] != 0 && n != EveEtid[m])
                {
                    m++;
                    if (m >= 500)
                    {
                        m = 0;
                        break;
                    }
                }
                if (n != EveEtid[m])
                {
                    g = 0;
                    m = 16777216;
                    k = (n | 0xFFFF) - 65535;
                    while (EveEtid[g] != 0)
                    {
                        if (EveEtid[g] >= k && EveEtid[g] < n)
                        {
                            k = EveEtid[g] + 1;
                            m = g;
                        }
                        g++;
                        if (g >= 500)
                        {
                            break;
                        }
                    }
                }
                if (m < 500)
                {
                    ArtSubaText.Text = EveEtxd[m * 4 + 2];
                }
                else
                {
                    ArtSubaText.Text = "No Description Available.";
                }
            }
            else
            {
                ArtSubaText.Text = "";
            }
        }

        private void ArtSubaAdd_Click(object sender, EventArgs e)
        {
            if (ArtSubaId.SelectedIndex == -1 || ArtSubaCbList.SelectedIndex == -1)
            {
                return;
            }
            rd1 = ArtSubaOffset.Text.Substring(2);
            h = Convert.ToInt32(rd1, 16);
            if (h != 0 && (h < stf * 4 || h >= tds[25]))
            {
                return;
            }
            g = ArtSubaList.Items.Count;
            EventAdd();
            if (h == 0)
            {
                h = j * 4;
                i = ArtSubaId.SelectedIndex;
                m = ArtSubaCbList.SelectedIndex;
                if (alm[artdt + 6] == 0 && alm[artdt + 7] != 0)
                {
                    m++;
                }
                if (m < 3 && alm[artdt + 6 + m] != 0)
                {
                    n = alm[artdt + 6 + m] / 4;
                }
                else
                {
                    rd3 = ArtDataList.Items[13].ToString();
                    rd1 = rd3.Substring(6, 10);
                    if (rd1 != "SubAction ")
                    {
                        m++;
                    }
                    rd2 = ArtDataList.Items[13 + m].ToString();
                    rd1 = rd2.Substring(2, 3);
                    k = Convert.ToInt32(rd1, 16);
                    n = alm[artdt + k / 4] / 4;
                }
                alm[n + i] = h;
                asc[par] = (n + i) * 4;
                mov = 0;
                tds[26]++;
                ArtSubaOffset.Text = "0x" + h.ToString("X");
                EveListstring();
                ArtSubaList.Items.Add(rd1);
                Fixam();
            }
            else
            {
                if (k > 4)
                {
                    i = ArtSubaId.SelectedIndex;
                    m = ArtSubaCbList.SelectedIndex;
                    if (alm[artdt + 6] == 0 && alm[artdt + 7] != 0)
                    {
                        m++;
                    }
                    if (m < 3 && alm[artdt + 6 + m] != 0)
                    {
                        n = alm[artdt + 6 + m] / 4;
                    }
                    else
                    {
                        rd3 = ArtDataList.Items[13].ToString();
                        rd1 = rd3.Substring(6, 10);
                        if (rd1 != "SubAction ")
                        {
                            m++;
                        }
                        rd2 = ArtDataList.Items[13 + m].ToString();
                        rd1 = rd2.Substring(2, 3);
                        k = Convert.ToInt32(rd1, 16);
                        n = alm[artdt + k / 4] / 4;
                    }
                    g = j * 4;
                    alm[n + i] = g;
                    an1 = j;
                    ArtSubaOffset.Text = "0x" + g.ToString("X");
                    if (EvOffsetInterlock.Checked)
                    {
                        i = ArtSubaList.Items.Count;
                        k = h + i * 8;
                        for (i = stf; i < md; i++)
                        {
                            if (alm[i] >= h && alm[i] <= k)
                            {
                                n = i * 4;
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == n)
                                    {
                                        if (alm[i] == h)
                                        {
                                            alm[i] = g;
                                            break;
                                        }
                                        m = alm[i] - h;
                                        if (m % 8 == 0)
                                        {
                                            alm[i] = g + m;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    Fixam();
                    j = an1;
                }
                else if (k == 1)
                {
                    Fixam();
                    j = h / 4;
                }
                if (ArtSubaList.SelectedIndex != -1)
                {
                    g = ArtSubaList.Items.Count;
                    k = 0;
                    if (g < 511)
                    {
                        for (i = 0; i < g; i++)
                        {
                            if (ArtSubaList.GetSelected(i))
                            {
                                nonam[k] = i;
                                k++;
                            }
                        }
                        nonam[k] = 1048575;
                    }
                    else
                    {
                        nonam[0] = 1048575;
                    }
                }
                else
                {
                    nonam[0] = 1048575;
                }
                mov = 0;
                ArtSubaList.Items.Clear();
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    ArtSubaList.Items.Add(rd1);
                    j += 2;
                }
                if (nonam[0] < 1048575)
                {
                    ArtSubaText.Enabled = false;
                    g = ArtSubaList.Items.Count;
                    k = 0;
                    for (i = 0; i < g; i++)
                    {
                        if (i == nonam[k])
                        {
                            ArtSubaList.SetSelected(i, value: true);
                            k++;
                        }
                    }
                    ArtSubaText.Enabled = true;
                }
            }
            if (qe)
            {
                Qsave.Enabled = true;
            }
        }

        private void ArtSubaModify_Click(object sender, EventArgs e)
        {
            if (ArtSubaList.SelectedIndex == -1)
            {
                return;
            }
            rd1 = ArtSubaOffset.Text.Substring(2);
            h = Convert.ToInt32(rd1, 16);
            g = ArtSubaList.SelectedIndex;
            j = h / 4 + g * 2;
            if (alm[j + 1] >= 0 && alm[j + 1] < tds[25])
            {
                EventModify();
                if (h != -1)
                {
                    return;
                }
                g = ArtSubaList.Items.Count;
                k = 0;
                if (g < 511)
                {
                    for (i = 0; i < g; i++)
                    {
                        if (ArtSubaList.GetSelected(i))
                        {
                            nonam[k] = i;
                            k++;
                        }
                    }
                    nonam[k] = 1048575;
                }
                else
                {
                    nonam[0] = 1048575;
                }
                rd1 = ArtSubaOffset.Text.Substring(2);
                h = Convert.ToInt32(rd1, 16);
                j = h / 4;
                mov = 0;
                ArtSubaList.Items.Clear();
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    ArtSubaList.Items.Add(rd1);
                    j += 2;
                }
                if (nonam[0] < 1048575)
                {
                    ArtSubaText.Enabled = false;
                    g = ArtSubaList.Items.Count;
                    k = 0;
                    for (i = 0; i < g; i++)
                    {
                        if (i == nonam[k])
                        {
                            ArtSubaList.SetSelected(i, value: true);
                            k++;
                        }
                    }
                    ArtSubaText.Enabled = true;
                }
                if (qe)
                {
                    Qsave.Enabled = true;
                }
            }
            else
            {
                minitxt.Text = "Error! Cannot Modify this Event.";
            }
        }

        private void ArtSubaList_DoubleClick(object sender, EventArgs e)
        {
            if (ArtSubaList.SelectedIndex == -1)
            {
                return;
            }
            rd1 = ArtSubaOffset.Text.Substring(2);
            h = Convert.ToInt32(rd1, 16);
            g = ArtSubaList.SelectedIndex;
            j = h / 4 + g * 2;
            if (alm[j + 1] >= 0 && alm[j + 1] < tds[25])
            {
                EventModify();
                if (h != -1)
                {
                    return;
                }
                g = ArtSubaList.Items.Count;
                k = 0;
                if (g < 511)
                {
                    for (i = 0; i < g; i++)
                    {
                        if (ArtSubaList.GetSelected(i))
                        {
                            nonam[k] = i;
                            k++;
                        }
                    }
                    nonam[k] = 1048575;
                }
                else
                {
                    nonam[0] = 1048575;
                }
                rd1 = ArtSubaOffset.Text.Substring(2);
                h = Convert.ToInt32(rd1, 16);
                j = h / 4;
                mov = 0;
                ArtSubaList.Items.Clear();
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    ArtSubaList.Items.Add(rd1);
                    j += 2;
                }
                if (nonam[0] < 1048575)
                {
                    ArtSubaText.Enabled = false;
                    g = ArtSubaList.Items.Count;
                    k = 0;
                    for (i = 0; i < g; i++)
                    {
                        if (i == nonam[k])
                        {
                            ArtSubaList.SetSelected(i, value: true);
                            k++;
                        }
                    }
                    ArtSubaText.Enabled = true;
                }
                if (qe)
                {
                    Qsave.Enabled = true;
                }
            }
            else
            {
                minitxt.Text = "Error! Cannot Modify this Event.";
            }
        }

        private void ArtSubaRemove_Click(object sender, EventArgs e)
        {
            if (ArtSubaList.SelectedIndex == -1 || ArtSubaId.SelectedIndex == -1 || ArtSubaCbList.SelectedIndex == -1)
            {
                return;
            }
            rd1 = ArtSubaOffset.Text.Substring(2);
            h = Convert.ToInt32(rd1, 16);
            j = h / 4;
            mov = 0;
            g = ArtSubaList.Items.Count;
            if (ArtSubaList.SelectedItems.Count >= g)
            {
                RemoveAllEv();
                g = ArtSubaCbList.SelectedIndex;
                if (alm[artdt + 6] == 0 && alm[artdt + 7] != 0)
                {
                    g++;
                }
                if (g < 3 && alm[artdt + 6 + g] != 0)
                {
                    n = alm[artdt + 6 + g] / 4;
                }
                else
                {
                    rd3 = ArtDataList.Items[13].ToString();
                    rd1 = rd3.Substring(6, 10);
                    if (rd1 != "SubAction ")
                    {
                        g++;
                    }
                    rd2 = ArtDataList.Items[13 + g].ToString();
                    rd1 = rd2.Substring(2, 3);
                    k = Convert.ToInt32(rd1, 16);
                    n = alm[artdt + k / 4] / 4;
                }
                i = ArtSubaId.SelectedIndex;
                alm[n + i] = 0;
                rmv = (n + i) * 4;
                Delasc();
                ArtSubaOffset.Text = "0x0";
                ArtSubaList.Items.Clear();
                if (EvOffsetInterlock.Checked)
                {
                    k = h + g * 8;
                    for (i = stf; i < md; i++)
                    {
                        if (alm[i] >= h && alm[i] <= k)
                        {
                            DelILData();
                        }
                    }
                }
            }
            else
            {
                for (i = g - 1; i >= 0; i--)
                {
                    if (ArtSubaList.GetSelected(i))
                    {
                        RemoveSeleEv();
                    }
                }
                ArtSubaList.Items.Clear();
                mov = 0;
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    ArtSubaList.Items.Add(rd1);
                    j += 2;
                }
            }
            ArtSubaText.Text = "";
            Fixam();
            if (qe)
            {
                Qsave.Enabled = true;
            }
        }

        private void ArtSubaUp_Click(object sender, EventArgs e)
        {
            if (ArtSubaList.SelectedIndex == -1)
            {
                return;
            }
            rd1 = ArtSubaOffset.Text.Substring(2);
            h = Convert.ToInt32(rd1, 16);
            g = ArtSubaList.Items.Count;
            j = h / 4;
            if (ArtSubaList.GetSelected(0))
            {
                return;
            }
            g = ArtSubaList.Items.Count;
            if (ArtSubaList.SelectedItems.Count < 510)
            {
                k = 0;
                for (i = 0; i < g; i++)
                {
                    if (ArtSubaList.GetSelected(i))
                    {
                        SeleEvUp();
                        nonam[k] = i - 1;
                        k++;
                    }
                }
                nonam[k] = 1048575;
            }
            else
            {
                nonam[0] = 1048575;
                for (i = 0; i < g; i++)
                {
                    if (ArtSubaList.GetSelected(i))
                    {
                        SeleEvUp();
                    }
                }
            }
            ArtSubaList.Items.Clear();
            mov = 0;
            while (alm[j] != 0 && j < md)
            {
                EveListstring();
                ArtSubaList.Items.Add(rd1);
                j += 2;
            }
            if (nonam[0] < 1048575)
            {
                h = ArtSubaList.Items.Count;
                k = 0;
                ArtSubaText.Enabled = false;
                for (i = 0; i < ArtSubaList.Items.Count; i++)
                {
                    if (i == nonam[k])
                    {
                        ArtSubaList.SetSelected(i, value: true);
                        k++;
                    }
                }
                ArtSubaText.Enabled = true;
            }
            if (qe)
            {
                Qsave.Enabled = true;
            }
        }

        private void ArtSubaDown_Click(object sender, EventArgs e)
        {
            if (ArtSubaList.SelectedIndex == -1)
            {
                return;
            }
            rd1 = ArtSubaOffset.Text.Substring(2);
            h = Convert.ToInt32(rd1, 16);
            g = ArtSubaList.Items.Count;
            j = h / 4;
            if (ArtSubaList.GetSelected(g - 1))
            {
                return;
            }
            if (ArtSubaList.SelectedItems.Count < 510)
            {
                k = 0;
                for (i = g - 1; i >= 0; i--)
                {
                    if (ArtSubaList.GetSelected(i))
                    {
                        SeleEvDown();
                        nonam[k] = i + 1;
                        k++;
                    }
                }
                nonam[k] = 1048575;
            }
            else
            {
                nonam[0] = 1048575;
                for (i = g - 1; i >= 0; i--)
                {
                    if (ArtSubaList.GetSelected(i))
                    {
                        SeleEvDown();
                    }
                }
            }
            ArtSubaList.Items.Clear();
            mov = 0;
            while (alm[j] != 0 && j < md)
            {
                EveListstring();
                ArtSubaList.Items.Add(rd1);
                j += 2;
            }
            if (nonam[0] < 1048575)
            {
                k = 0;
                ArtSubaText.Enabled = false;
                for (i = ArtSubaList.Items.Count; i >= 0; i--)
                {
                    if (i == nonam[k])
                    {
                        ArtSubaList.SetSelected(i, value: true);
                        k++;
                    }
                }
                ArtSubaText.Enabled = true;
            }
            if (qe)
            {
                Qsave.Enabled = true;
            }
        }

        private void ArtSubaCopy_Click(object sender, EventArgs e)
        {
            if (ArtSubaList.SelectedIndex == -1)
            {
                return;
            }
            rd1 = ArtSubaOffset.Text.Substring(2);
            g = Convert.ToInt32(rd1, 16);
            n = g / 4;
            rd1 = "";
            h = ArtSubaList.Items.Count;
            for (i = 0; i < h; i++)
            {
                if (ArtSubaList.GetSelected(i))
                {
                    rd1 = rd1 + "E=" + alm[n + i * 2].ToString("X8") + ":";
                    g = ((alm[n + i * 2] >> 8) & 0xFF);
                    if (g != 0)
                    {
                        k = g * 2;
                        g = alm[n + i * 2 + 1] / 4;
                        if (g >= 0 && g < md)
                        {
                            for (j = 0; j < k; j++)
                            {
                                rd1 = rd1 + alm[g + j].ToString("X") + "-";
                                j++;
                                rd1 = rd1 + alm[g + j].ToString("X8") + ",";
                            }
                        }
                    }
                }
            }
            Clipboard.SetText(rd1);
        }

        private void ArtSubaPaste_Click(object sender, EventArgs e)
        {
            if (Clipboard.ContainsText())
            {
                if (ArtSubaId.SelectedIndex != -1)
                {
                    if (ArtSubaCbList.SelectedIndex != -1)
                    {
                        ArtSubaPaste.Enabled = false;
                        rd1 = ArtSubaOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                        if (h == 0 || (h >= stf * 4 && h < tds[25]))
                        {
                            rd1 = Clipboard.GetText();
                            if (rd1 != null)
                            {
                                if (rd1.Length > 10)
                                {
                                    if (minitxt.Text == "Cannot Paste.")
                                    {
                                        minitxt.Text = "";
                                    }
                                    g = ArtSubaList.Items.Count;
                                    EventPaste();
                                    if (mov < 512)
                                    {
                                        if (h == 0)
                                        {
                                            h = j * 4;
                                            i = ArtSubaId.SelectedIndex;
                                            m = ArtSubaCbList.SelectedIndex;
                                            if (alm[artdt + 6] == 0 && alm[artdt + 7] != 0)
                                            {
                                                m++;
                                            }
                                            if (m < 3 && alm[artdt + 6 + m] != 0)
                                            {
                                                n = alm[artdt + 6 + m] / 4;
                                            }
                                            else
                                            {
                                                rd3 = ArtDataList.Items[13].ToString();
                                                rd1 = rd3.Substring(6, 10);
                                                if (rd1 != "SubAction ")
                                                {
                                                    m++;
                                                }
                                                rd2 = ArtDataList.Items[13 + m].ToString();
                                                rd1 = rd2.Substring(2, 3);
                                                k = Convert.ToInt32(rd1, 16);
                                                n = alm[artdt + k / 4] / 4;
                                            }
                                            alm[n + i] = h;
                                            asc[par] = (n + i) * 4;
                                            mov = 0;
                                            tds[26]++;
                                            ArtSubaOffset.Text = "0x" + h.ToString("X");
                                        }
                                        else if (fnt == 2)
                                        {
                                            g = j * 4;
                                            i = ArtSubaId.SelectedIndex;
                                            m = ArtSubaCbList.SelectedIndex;
                                            if (alm[artdt + 6] == 0 && alm[artdt + 7] != 0)
                                            {
                                                m++;
                                            }
                                            if (m < 3 && alm[artdt + 6 + m] != 0)
                                            {
                                                n = alm[artdt + 6 + m] / 4;
                                            }
                                            else
                                            {
                                                rd3 = ArtDataList.Items[13].ToString();
                                                rd1 = rd3.Substring(6, 10);
                                                if (rd1 != "SubAction ")
                                                {
                                                    m++;
                                                }
                                                rd2 = ArtDataList.Items[13 + m].ToString();
                                                rd1 = rd2.Substring(2, 3);
                                                k = Convert.ToInt32(rd1, 16);
                                                n = alm[artdt + k / 4] / 4;
                                            }
                                            alm[n + i] = g;
                                            ArtSubaOffset.Text = "0x" + g.ToString("X");
                                            if (EvOffsetInterlock.Checked)
                                            {
                                                i = ArtSubaList.Items.Count;
                                                k = h + i * 8;
                                                an4 = j + (i + mov) * 2;
                                                for (i = stf; i < md; i++)
                                                {
                                                    if (alm[i] >= h && alm[i] <= k)
                                                    {
                                                        n = i * 4;
                                                        if (i < j || i > an4)
                                                        {
                                                            for (mov = 0; mov < par; mov++)
                                                            {
                                                                if (asc[mov] == n)
                                                                {
                                                                    if (alm[i] == h)
                                                                    {
                                                                        alm[i] = g;
                                                                        break;
                                                                    }
                                                                    m = alm[i] - h;
                                                                    if (m % 8 == 0)
                                                                    {
                                                                        alm[i] = g + m;
                                                                    }
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        an1 = j;
                                        Fixam();
                                        j = an1;
                                        mov = 0;
                                        nonam[0] = ArtSubaList.Items.Count;
                                        ArtSubaList.Items.Clear();
                                        while (alm[j] != 0 && j < md)
                                        {
                                            EveListstring();
                                            ArtSubaList.Items.Add(rd1);
                                            j += 2;
                                        }
                                        k = ArtSubaList.Items.Count;
                                        ArtSubaText.Enabled = false;
                                        for (i = nonam[0]; i < k; i++)
                                        {
                                            ArtSubaList.SetSelected(i, value: true);
                                        }
                                        ArtSubaText.Enabled = true;
                                        if (qe)
                                        {
                                            Qsave.Enabled = true;
                                        }
                                    }
                                }
                                else
                                {
                                    minitxt.Text = "Cannot Paste.";
                                }
                            }
                            else
                            {
                                minitxt.Text = "Cannot Paste.";
                            }
                        }
                        else
                        {
                            minitxt.Text = "Cannot Paste.";
                        }
                        ArtSubaPaste.Enabled = true;
                    }
                    else
                    {
                        minitxt.Text = "Cannot Paste.";
                    }
                }
                else
                {
                    minitxt.Text = "Cannot Paste.";
                }
            }
            else
            {
                minitxt.Text = "Cannot Paste.";
            }
        }

        private void ArtParCbList_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ArtParCbList.SelectedIndex == -1)
            {
                return;
            }
            ArtParList.Enabled = false;
            ArtParList.Rows.Clear();
            g = ArtParCbList.SelectedIndex;
            h = 0;
            if (ArticleIDCb.SelectedIndex == 0)
            {
                i = 1;
                while (true)
                {
                    if (CharPar[i].Length < 7)
                    {
                        return;
                    }
                    rd1 = CharPar[i].Substring(4, 3);
                    if (rd1 == "Par")
                    {
                        if (h == g)
                        {
                            rd1 = CharPar[i].Substring(0, 3);
                            g = Convert.ToInt32(rd1, 16);
                            artpo = alm[dat + g / 4] / 4;
                            if (CharPar[i].Length > 10)
                            {
                                rd1 = CharPar[i].Substring(10);
                                if (Uri.IsHexDigit(rd1[0]))
                                {
                                    h = Convert.ToInt32(rd1, 16);
                                }
                                else
                                {
                                    h = 0;
                                }
                                rd1 = CharPar[i].Substring(4, 5);
                            }
                            else
                            {
                                if (CharPar[i].Length == 10)
                                {
                                    rd1 = CharPar[i].Substring(4, 5);
                                }
                                else
                                {
                                    rd1 = CharPar[i].Substring(4);
                                }
                                h = 0;
                            }
                            ArtParView();
                            ArtParList.Enabled = true;
                            return;
                        }
                        h++;
                    }
                    else if (CharPar[i][0] == 'X')
                    {
                        if (h == g)
                        {
                            break;
                        }
                        h++;
                    }
                    i++;
                }
                rd2 = CharPar[i].Substring(4);
                n = rd2.Length;
                an2 = dat;
                j = 2;
                while (j < n && rd2[j] == '-')
                {
                    j += 3;
                }
                for (k = 0; k < j; k += 3)
                {
                    rd1 = rd2.Substring(k, 2);
                    g = Convert.ToInt32(rd1, 16);
                    an4 = alm[an2 + g];
                    an2 = an4 / 4;
                    if (an2 < stf || an2 >= md)
                    {
                        break;
                    }
                }
                if (k > j)
                {
                    rd1 = CharPar[i].Substring(1, 2);
                    h = Convert.ToInt32(rd1, 16);
                    artpo = an2;
                    if (j == n - 1)
                    {
                        rd1 = "EXD " + CharPar[i].Substring(4);
                    }
                    else if (rd2[j] == 'i')
                    {
                        i = -2;
                    }
                    else if (rd2[j] == 'f')
                    {
                        i = -3;
                    }
                    else
                    {
                        i = -1;
                    }
                    ArtParView();
                }
                ArtParList.Enabled = true;
            }
            else
            {
                if (ArticleIDCb.SelectedIndex == -1)
                {
                    return;
                }
                rd1 = "Art" + ArticleIDCb.Text;
                i = 2;
                while (true)
                {
                    if (CharPar[i] != null)
                    {
                        if (CharPar[i] == rd1)
                        {
                            break;
                        }
                        i++;
                        continue;
                    }
                    return;
                }
                i++;
                h = 0;
                while (true)
                {
                    if (CharPar[i] == null)
                    {
                        return;
                    }
                    if (CharPar[i].Length >= 7)
                    {
                        rd1 = CharPar[i].Substring(4, 3);
                        if (rd1 == "Par")
                        {
                            if (h == g)
                            {
                                rd1 = CharPar[i].Substring(0, 3);
                                g = Convert.ToInt32(rd1, 16);
                                artpo = alm[artdt + g / 4] / 4;
                                if (CharPar[i].Length > 12)
                                {
                                    rd1 = CharPar[i].Substring(12);
                                    if (Uri.IsHexDigit(rd1[0]))
                                    {
                                        h = Convert.ToInt32(rd1, 16);
                                    }
                                    else
                                    {
                                        h = 0;
                                    }
                                    rd1 = CharPar[i].Substring(4, 7);
                                }
                                else
                                {
                                    if (CharPar[i].Length == 12)
                                    {
                                        rd1 = CharPar[i].Substring(4, 7);
                                    }
                                    else
                                    {
                                        rd1 = CharPar[i].Substring(4);
                                    }
                                    h = 0;
                                }
                                ArtParView();
                                ArtParList.Enabled = true;
                                return;
                            }
                            h++;
                        }
                        else if (CharPar[i][0] == 'X')
                        {
                            if (h == g)
                            {
                                break;
                            }
                            h++;
                        }
                    }
                    i++;
                }
                rd2 = CharPar[i].Substring(4);
                n = rd2.Length;
                an2 = dat;
                j = 2;
                while (j < n && rd2[j] == '-')
                {
                    j += 3;
                }
                for (k = 0; k < j; k += 3)
                {
                    rd1 = rd2.Substring(k, 2);
                    g = Convert.ToInt32(rd1, 16);
                    an4 = alm[an2 + g];
                    an2 = an4 / 4;
                    if (an2 < stf || an2 >= md)
                    {
                        break;
                    }
                }
                if (k > j)
                {
                    rd1 = CharPar[i].Substring(1, 2);
                    h = Convert.ToInt32(rd1, 16);
                    artpo = an2;
                    if (j == n - 1)
                    {
                        rd1 = "EXD " + CharPar[i].Substring(4);
                    }
                    else if (rd2[j] == 'i')
                    {
                        i = -2;
                    }
                    else if (rd2[j] == 'f')
                    {
                        i = -3;
                    }
                    else
                    {
                        i = -1;
                    }
                    ArtParView();
                    ArtParList.Enabled = true;
                }
            }
        }

        private void ArtParList_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (!ArtParList.Enabled)
            {
                return;
            }
            i = ArtParList.CurrentCell.RowIndex;
            rd2 = ArtParList[0, i].Value.ToString();
            if (rd2[0] == 'O')
            {
                ArtParList.Enabled = false;
                ArtParList[1, i].Value = alm[artpo + i].ToString("X");
                ArtParList.Enabled = true;
            }
            else if (ArtParList.CurrentCell.Value != null)
            {
                rd1 = ArtParList.CurrentCell.Value.ToString();
                if (ArtHexView.Checked)
                {
                    for (k = 0; k < rd1.Length; k++)
                    {
                        if (!Uri.IsHexDigit(rd1[k]))
                        {
                            k = 512;
                        }
                    }
                    if (k <= 8)
                    {
                        k = Convert.ToInt32(rd1, 16);
                        alm[artpo + i] = k;
                        return;
                    }
                    ArtParList.Enabled = false;
                    ArtParList[1, i].Value = alm[artpo + i].ToString("X");
                    ArtParList.Enabled = true;
                    if (qe)
                    {
                        Qsave.Enabled = true;
                    }
                }
                else if (rd2[0] == '*')
                {
                    if (int.TryParse(rd1, out k))
                    {
                        alm[artpo + i] = k;
                        return;
                    }
                    ArtParList.Enabled = false;
                    ArtParList[1, i].Value = alm[artpo + i].ToString();
                    ArtParList.Enabled = true;
                    if (qe)
                    {
                        Qsave.Enabled = true;
                    }
                }
                else if (rd2[0] == 'F')
                {
                    for (k = 0; k < rd1.Length; k++)
                    {
                        if (!Uri.IsHexDigit(rd1[k]))
                        {
                            k = 512;
                        }
                    }
                    if (k <= 8)
                    {
                        k = Convert.ToInt32(rd1, 16);
                        alm[artpo + i] = k;
                        return;
                    }
                    ArtParList.Enabled = false;
                    ArtParList[1, i].Value = alm[artpo + i].ToString("X");
                    ArtParList.Enabled = true;
                    if (qe)
                    {
                        Qsave.Enabled = true;
                    }
                }
                else if (float.TryParse(rd1, out rdfr))
                {
                    bitf = BitConverter.GetBytes(rdfr);
                    if (BitConverter.IsLittleEndian)
                    {
                        k = bitf[0] + bitf[1] * 256 + bitf[2] * 65536 + bitf[3] * 16777216;
                    }
                    else
                    {
                        k = bitf[3] + bitf[2] * 256 + bitf[1] * 65536 + bitf[0] * 16777216;
                    }
                    alm[artpo + i] = k;
                    if (qe)
                    {
                        Qsave.Enabled = true;
                    }
                }
                else
                {
                    ArtParList.Enabled = false;
                    bitf = BitConverter.GetBytes(alm[artpo + i]);
                    rdfr = BitConverter.ToSingle(bitf, 0);
                    ArtParList[1, i].Value = rdfr.ToString();
                    ArtParList.Enabled = true;
                }
            }
            else
            {
                ArtParList.Enabled = false;
                if (ArtHexView.Checked)
                {
                    ArtParList[1, i].Value = alm[artpo + i].ToString("X");
                }
                else if (rd2[0] == '*')
                {
                    ArtParList[1, i].Value = alm[artpo + i].ToString();
                }
                else if (rd2[0] == 'F')
                {
                    ArtParList[1, i].Value = alm[artpo + i].ToString("X");
                }
                else
                {
                    bitf = BitConverter.GetBytes(alm[artpo + i]);
                    rdfr = BitConverter.ToSingle(bitf, 0);
                    ArtParList[1, i].Value = rdfr.ToString();
                }
                ArtParList.Enabled = true;
            }
        }

        private void ArtParList_SelectionChanged(object sender, EventArgs e)
        {
            if (ArtParList.Enabled)
            {
                if (artpr != 0)
                {
                    n = ArtParList.CurrentCell.RowIndex;
                    ArtParText.Text = CharPar[artpr + n * 2 + 1];
                }
                else
                {
                    ArtParText.Text = "No Description Available.";
                }
            }
        }

        private void ArtCmpStart_Click(object sender, EventArgs e)
        {
            if (minitxt.Text == "invalid Command.")
            {
                minitxt.Text = "";
            }
            if (ArticleIDCb.SelectedIndex > 0)
            {
                if (ArtEmptyCmp.Checked || ArtNoEventCmp.Checked || ArtAllEvCmp.Checked)
                {
                    ModeChange.Enabled = false;
                    AllEnableChange();
                    if (ArtSubaId.Items.Count > 0)
                    {
                        if (ArtSubaCbList.Items.Count > 0)
                        {
                            if (alm[artdt + 6] == 0 && alm[artdt + 7] == 0 && alm[artdt + 8] == 0)
                            {
                                an2 = 13;
                                rd3 = ArtDataList.Items[an2].ToString();
                                rd1 = rd3.Substring(6, 10);
                                if (rd1 != "SubAction ")
                                {
                                    an2++;
                                    rd3 = ArtDataList.Items[an2].ToString();
                                    rd1 = rd3.Substring(6, 10);
                                }
                                if (rd1 == "SubAction ")
                                {
                                    an3 = an2 + ArtSubaCbList.Items.Count;
                                    if (ArtEmptyCmp.Checked)
                                    {
                                        h = md - 1;
                                        for (an4 = an2; an4 < an3; an4++)
                                        {
                                            rd3 = ArtDataList.Items[an4].ToString();
                                            rd1 = rd3.Substring(2, 3);
                                            g = Convert.ToInt32(rd1, 16);
                                            k = alm[artdt + g / 4] / 4;
                                            g = k + ArtSubaId.Items.Count;
                                            DelEmptyData();
                                        }
                                    }
                                    if (ArtNoEventCmp.Checked)
                                    {
                                        for (an4 = an2; an4 < an3; an4++)
                                        {
                                            rd3 = ArtDataList.Items[an4].ToString();
                                            rd1 = rd3.Substring(2, 3);
                                            g = Convert.ToInt32(rd1, 16);
                                            this.i = alm[artdt + g / 4] / 4;
                                            g = this.i + ArtSubaId.Items.Count;
                                            while (this.i < g)
                                            {
                                                if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                                {
                                                    j = alm[this.i] / 4;
                                                    if (alm[j] != 0 && alm[j] != -86052851)
                                                    {
                                                        DelNoEventData();
                                                    }
                                                }
                                                this.i++;
                                            }
                                        }
                                    }
                                    if (ArtAllEvCmp.Checked)
                                    {
                                        this.i = stf;
                                        while (this.i < md)
                                        {
                                            if (alm[this.i] == -86052851)
                                            {
                                                if (alm[this.i + 1] == -86052851)
                                                {
                                                    nonam[0] = this.i;
                                                    break;
                                                }
                                                this.i++;
                                            }
                                            this.i++;
                                        }
                                        if (this.i < md)
                                        {
                                            for (int i = an2; i < an3; i++)
                                            {
                                                rd3 = ArtDataList.Items[i].ToString();
                                                rd1 = rd3.Substring(2, 3);
                                                g = Convert.ToInt32(rd1, 16);
                                                this.i = alm[artdt + g / 4] / 4;
                                                g = this.i + ArtSubaId.Items.Count;
                                                while (this.i < g)
                                                {
                                                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                                    {
                                                        j = alm[this.i] / 4;
                                                        if (alm[j] != 0 && alm[j] != -86052851)
                                                        {
                                                            CmpMoveOffsetData();
                                                        }
                                                    }
                                                    this.i++;
                                                }
                                            }
                                            if (ArtCmpInRn.Checked)
                                            {
                                                this.i = 10;
                                                while (this.i < 512)
                                                {
                                                    nonam[this.i] = 0;
                                                    this.i++;
                                                }
                                                int i = an3 - ArtSubaCbList.Items.Count;
                                                int num;
                                                for (num = an3; i < num; i++)
                                                {
                                                    rd3 = ArtDataList.Items[i].ToString();
                                                    rd1 = rd3.Substring(2, 3);
                                                    g = Convert.ToInt32(rd1, 16);
                                                    this.i = alm[artdt + g / 4] / 4;
                                                    g = this.i + ArtSubaId.Items.Count;
                                                    while (this.i < g)
                                                    {
                                                        if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                                        {
                                                            j = alm[this.i] / 4;
                                                            if (alm[j] != 0 && alm[j] != -86052851)
                                                            {
                                                                ScanRn();
                                                            }
                                                        }
                                                        this.i++;
                                                    }
                                                }
                                                if (ArtActId.Items.Count < 1)
                                                {
                                                    this.i = 0;
                                                    while (this.i < 10)
                                                    {
                                                        nonam[this.i] = 0;
                                                        this.i++;
                                                    }
                                                    for (h = 10; h < 512; h++)
                                                    {
                                                        if (nonam[h] == 0)
                                                        {
                                                            h++;
                                                            break;
                                                        }
                                                    }
                                                    for (i = num - ArtSubaCbList.Items.Count; i < num; i++)
                                                    {
                                                        rd3 = ArtDataList.Items[i].ToString();
                                                        rd1 = rd3.Substring(2, 3);
                                                        g = Convert.ToInt32(rd1, 16);
                                                        this.i = alm[artdt + g / 4] / 4;
                                                        g = this.i + ArtSubaId.Items.Count;
                                                        while (this.i < g)
                                                        {
                                                            if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                                            {
                                                                for (j = 10; j < h; j++)
                                                                {
                                                                    if (nonam[j] == alm[this.i])
                                                                    {
                                                                        nonam[j] = 0;
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                            this.i++;
                                                        }
                                                    }
                                                    CmpInRnDelmov();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else if (alm[artdt + 6] != 0)
                            {
                                if (ArtEmptyCmp.Checked)
                                {
                                    h = md - 1;
                                    an3 = artdt + 9;
                                    for (an4 = artdt + 6; an4 < an3; an4++)
                                    {
                                        if (alm[an4] != 0)
                                        {
                                            k = alm[an4] / 4;
                                            g = k + ArtSubaId.Items.Count;
                                            DelEmptyData();
                                        }
                                    }
                                }
                                if (ArtNoEventCmp.Checked)
                                {
                                    an3 = artdt + 9;
                                    for (an4 = artdt + 6; an4 < an3; an4++)
                                    {
                                        if (alm[an4] != 0)
                                        {
                                            this.i = alm[an4] / 4;
                                            g = this.i + ArtSubaId.Items.Count;
                                            while (this.i < g)
                                            {
                                                if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                                {
                                                    j = alm[this.i] / 4;
                                                    if (alm[j] != 0 && alm[j] != -86052851)
                                                    {
                                                        DelNoEventData();
                                                    }
                                                }
                                                this.i++;
                                            }
                                        }
                                    }
                                }
                                if (ArtAllEvCmp.Checked)
                                {
                                    this.i = stf;
                                    while (this.i < md)
                                    {
                                        if (alm[this.i] == -86052851)
                                        {
                                            if (alm[this.i + 1] == -86052851)
                                            {
                                                nonam[0] = this.i;
                                                break;
                                            }
                                            this.i++;
                                        }
                                        this.i++;
                                    }
                                    if (this.i < md)
                                    {
                                        for (an3 = artdt + 6; an3 < artdt + 9; an3++)
                                        {
                                            if (alm[an3] != 0)
                                            {
                                                this.i = alm[an3] / 4;
                                                g = this.i + ArtSubaId.Items.Count;
                                                while (this.i < g)
                                                {
                                                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                                    {
                                                        j = alm[this.i] / 4;
                                                        if (alm[j] != 0 && alm[j] != -86052851)
                                                        {
                                                            CmpMoveOffsetData();
                                                        }
                                                    }
                                                    this.i++;
                                                }
                                            }
                                        }
                                        if (ArtCmpInRn.Checked)
                                        {
                                            this.i = 10;
                                            while (this.i < 512)
                                            {
                                                nonam[this.i] = 0;
                                                this.i++;
                                            }
                                            for (int num = artdt + 6; num < artdt + 9; num++)
                                            {
                                                if (alm[num] == 0)
                                                {
                                                    continue;
                                                }
                                                this.i = alm[num] / 4;
                                                g = this.i + ArtSubaId.Items.Count;
                                                while (this.i < g)
                                                {
                                                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                                    {
                                                        j = alm[this.i] / 4;
                                                        if (alm[j] != 0 && alm[j] != -86052851)
                                                        {
                                                            ScanRn();
                                                        }
                                                    }
                                                    this.i++;
                                                }
                                            }
                                            if (ArtActId.Items.Count < 1)
                                            {
                                                this.i = 0;
                                                while (this.i < 10)
                                                {
                                                    nonam[this.i] = 0;
                                                    this.i++;
                                                }
                                                for (h = 10; h < 512; h++)
                                                {
                                                    if (nonam[h] == 0)
                                                    {
                                                        h++;
                                                        break;
                                                    }
                                                }
                                                for (int num = artdt + 6; num < artdt + 9; num++)
                                                {
                                                    if (alm[num] == 0)
                                                    {
                                                        continue;
                                                    }
                                                    this.i = alm[num] / 4;
                                                    g = this.i + ArtSubaId.Items.Count;
                                                    while (this.i < g)
                                                    {
                                                        if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                                        {
                                                            for (j = 10; j < h; j++)
                                                            {
                                                                if (nonam[j] == alm[this.i])
                                                                {
                                                                    nonam[j] = 0;
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        this.i++;
                                                    }
                                                }
                                                CmpInRnDelmov();
                                            }
                                        }
                                    }
                                }
                            }
                            fnt = 0;
                        }
                        else
                        {
                            fnt = 1;
                        }
                    }
                    else
                    {
                        fnt = 1;
                    }
                    if (ArtActId.Items.Count > 0)
                    {
                        if (ArtEmptyCmp.Checked)
                        {
                            k = alm[artdt + 5] / 4;
                            g = k + ArtActId.Items.Count;
                            DelEmptyData();
                            if (ArtDataList.Items.Count > 13)
                            {
                                rd1 = ArtDataList.Items[13].ToString();
                                if (rd1.Length > 21)
                                {
                                    rd1 = rd1.Substring(2, 14);
                                    if (rd1 == "034 ActionExit")
                                    {
                                        k = alm[artdt + 13] / 4;
                                        g = k + ArtActId.Items.Count;
                                        DelEmptyData();
                                    }
                                }
                            }
                        }
                        if (ArtNoEventCmp.Checked)
                        {
                            this.i = alm[artdt + 5] / 4;
                            g = this.i + ArtActId.Items.Count;
                            while (this.i < g)
                            {
                                if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                {
                                    j = alm[this.i] / 4;
                                    if (alm[j] != 0 && alm[j] != -86052851)
                                    {
                                        DelNoEventData();
                                    }
                                }
                                this.i++;
                            }
                            if (ArtDataList.Items.Count > 13)
                            {
                                rd1 = ArtDataList.Items[13].ToString();
                                if (rd1.Length > 21)
                                {
                                    rd1 = rd1.Substring(2, 14);
                                    if (rd1 == "034 ActionExit")
                                    {
                                        this.i = alm[artdt + 13] / 4;
                                        g = this.i + ArtActId.Items.Count;
                                        while (this.i < g)
                                        {
                                            if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                            {
                                                j = alm[this.i] / 4;
                                                if (alm[j] != 0 && alm[j] != -86052851)
                                                {
                                                    DelNoEventData();
                                                }
                                            }
                                            this.i++;
                                        }
                                    }
                                }
                            }
                        }
                        if (ArtAllEvCmp.Checked)
                        {
                            this.i = stf;
                            while (this.i < md)
                            {
                                if (alm[this.i] == -86052851)
                                {
                                    if (alm[this.i + 1] == -86052851)
                                    {
                                        nonam[0] = this.i;
                                        break;
                                    }
                                    this.i++;
                                }
                                this.i++;
                            }
                            if (this.i < md)
                            {
                                this.i = alm[artdt + 5] / 4;
                                g = this.i + ArtActId.Items.Count;
                                while (this.i < g)
                                {
                                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                    {
                                        j = alm[this.i] / 4;
                                        if (alm[j] != 0 && alm[j] != -86052851)
                                        {
                                            CmpMoveOffsetData();
                                        }
                                    }
                                    this.i++;
                                }
                                if (ArtDataList.Items.Count > 13)
                                {
                                    rd1 = ArtDataList.Items[13].ToString();
                                    if (rd1.Length > 21)
                                    {
                                        rd1 = rd1.Substring(2, 14);
                                        if (rd1 == "034 ActionExit")
                                        {
                                            this.i = alm[artdt + 13] / 4;
                                            g = this.i + ArtActId.Items.Count;
                                            while (this.i < g)
                                            {
                                                if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                                {
                                                    j = alm[this.i] / 4;
                                                    if (alm[j] != 0 && alm[j] != -86052851)
                                                    {
                                                        CmpMoveOffsetData();
                                                    }
                                                }
                                                this.i++;
                                            }
                                        }
                                    }
                                }
                                if (ArtCmpInRn.Checked)
                                {
                                    if (ArtSubaId.Items.Count < 1 || ArtSubaCbList.Items.Count < 1)
                                    {
                                        this.i = 10;
                                        while (this.i < 512)
                                        {
                                            nonam[this.i] = 0;
                                            this.i++;
                                        }
                                    }
                                    this.i = alm[artdt + 5] / 4;
                                    g = this.i + ArtSubaId.Items.Count;
                                    while (this.i < g)
                                    {
                                        if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                        {
                                            j = alm[this.i] / 4;
                                            if (alm[j] != 0 && alm[j] != -86052851)
                                            {
                                                ScanRn();
                                            }
                                        }
                                        this.i++;
                                    }
                                    if (ArtDataList.Items.Count > 13)
                                    {
                                        rd1 = ArtDataList.Items[13].ToString();
                                        if (rd1.Length > 21)
                                        {
                                            rd1 = rd1.Substring(2, 14);
                                            if (rd1 == "034 ActionExit")
                                            {
                                                this.i = alm[artdt + 13] / 4;
                                                g = this.i + ArtActId.Items.Count;
                                                while (this.i < g)
                                                {
                                                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                                    {
                                                        j = alm[this.i] / 4;
                                                        if (alm[j] != 0 && alm[j] != -86052851)
                                                        {
                                                            ScanRn();
                                                        }
                                                    }
                                                    this.i++;
                                                }
                                            }
                                        }
                                    }
                                    this.i = 0;
                                    while (this.i < 10)
                                    {
                                        nonam[this.i] = 0;
                                        this.i++;
                                    }
                                    for (h = 10; h < 512; h++)
                                    {
                                        if (nonam[h] == 0)
                                        {
                                            h++;
                                            break;
                                        }
                                    }
                                    this.i = alm[artdt + 5] / 4;
                                    g = this.i + ArtActId.Items.Count;
                                    while (this.i < g)
                                    {
                                        if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                        {
                                            for (j = 10; j < h; j++)
                                            {
                                                if (nonam[j] == alm[this.i])
                                                {
                                                    nonam[j] = 0;
                                                    break;
                                                }
                                            }
                                        }
                                        this.i++;
                                    }
                                    if (ArtDataList.Items.Count > 13)
                                    {
                                        rd1 = ArtDataList.Items[13].ToString();
                                        if (rd1.Length > 21)
                                        {
                                            rd1 = rd1.Substring(2, 14);
                                            if (rd1 == "034 ActionExit")
                                            {
                                                this.i = alm[artdt + 13] / 4;
                                                g = this.i + ArtActId.Items.Count;
                                                while (this.i < g)
                                                {
                                                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                                    {
                                                        for (j = 10; j < h; j++)
                                                        {
                                                            if (nonam[j] == alm[this.i])
                                                            {
                                                                nonam[j] = 0;
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    this.i++;
                                                }
                                            }
                                        }
                                    }
                                    if (ArtSubaId.Items.Count < 1 || ArtSubaCbList.Items.Count < 1)
                                    {
                                        if (alm[artdt + 6] == 0 && alm[artdt + 7] == 0 && alm[artdt + 8] == 0)
                                        {
                                            an2 = 13;
                                            rd3 = ArtDataList.Items[an2].ToString();
                                            rd1 = rd3.Substring(6, 10);
                                            if (rd1 != "SubAction ")
                                            {
                                                rd3 = ArtDataList.Items[an2].ToString();
                                                rd1 = rd3.Substring(6, 10);
                                            }
                                            if (rd1 == "SubAction ")
                                            {
                                                int i = an2;
                                                for (int num = an2 + ArtSubaCbList.Items.Count; i < num; i++)
                                                {
                                                    rd3 = ArtDataList.Items[i].ToString();
                                                    rd1 = rd3.Substring(2, 3);
                                                    g = Convert.ToInt32(rd1, 16);
                                                    this.i = alm[artdt + g / 4] / 4;
                                                    g = this.i + ArtSubaId.Items.Count;
                                                    while (this.i < g)
                                                    {
                                                        if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                                        {
                                                            for (j = 10; j < h; j++)
                                                            {
                                                                if (nonam[j] == alm[this.i])
                                                                {
                                                                    nonam[j] = 0;
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        this.i++;
                                                    }
                                                }
                                            }
                                        }
                                        else if (alm[artdt + 6] != 0)
                                        {
                                            for (int num = artdt + 6; num < artdt + 9; num++)
                                            {
                                                if (alm[num] == 0)
                                                {
                                                    continue;
                                                }
                                                this.i = alm[num] / 4;
                                                g = this.i + ArtSubaId.Items.Count;
                                                while (this.i < g)
                                                {
                                                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                                    {
                                                        for (j = 10; j < h; j++)
                                                        {
                                                            if (nonam[j] == alm[this.i])
                                                            {
                                                                nonam[j] = 0;
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    this.i++;
                                                }
                                            }
                                        }
                                    }
                                    CmpInRnDelmov();
                                }
                            }
                        }
                        Fixam();
                        if (ArtActId.SelectedIndex != -1)
                        {
                            ArtActList.Items.Clear();
                            this.i = ArtActId.SelectedIndex;
                            if (ArtDataList.Items.Count > 13)
                            {
                                rd1 = ArtDataList.Items[13].ToString();
                                if (rd1.Length > 21)
                                {
                                    rd1 = rd1.Substring(2, 14);
                                }
                            }
                            else
                            {
                                rd1 = "";
                            }
                            if (rd1 == "034 ActionExit")
                            {
                                if (ArtActCbList.SelectedIndex == 1)
                                {
                                    k = alm[artdt + 13] / 4;
                                }
                                else
                                {
                                    k = alm[artdt + 5] / 4;
                                }
                            }
                            else
                            {
                                k = alm[artdt + 5] / 4;
                            }
                            h = alm[k + this.i];
                            ArtActOffset.Text = "0x" + h.ToString("X");
                            if (h > 8096 && h < tds[25])
                            {
                                j = h / 4;
                                mov = 0;
                                while (alm[j] != 0 && j < md)
                                {
                                    EveListstring();
                                    ArtActList.Items.Add(rd1);
                                    j += 2;
                                }
                            }
                        }
                        if (ArtSubaId.Items.Count > 0 && ArtSubaCbList.Items.Count > 0 && ArtSubaCbList.SelectedIndex != -1 && ArtSubaId.SelectedIndex != -1)
                        {
                            ArtSubaList.Items.Clear();
                            this.i = ArtSubaId.SelectedIndex;
                            g = ArtSubaCbList.SelectedIndex;
                            if (g < 3 && alm[artdt + 6 + g] != 0)
                            {
                                k = alm[artdt + 6 + g] / 4;
                                h = alm[k + this.i];
                                ArtSubaOffset.Text = "0x" + h.ToString("X");
                                if (h > 8096 && h < tds[25])
                                {
                                    j = h / 4;
                                    mov = 0;
                                    while (alm[j] != 0 && j < md)
                                    {
                                        EveListstring();
                                        ArtSubaList.Items.Add(rd1);
                                        j += 2;
                                    }
                                }
                            }
                            else if (alm[artdt + 7] != 0)
                            {
                                k = alm[artdt + 7] / 4;
                                h = alm[k + this.i];
                                ArtSubaOffset.Text = "0x" + h.ToString("X");
                                if (h > 8096 && h < tds[25])
                                {
                                    j = h / 4;
                                    mov = 0;
                                    while (alm[j] != 0 && j < md)
                                    {
                                        EveListstring();
                                        ArtSubaList.Items.Add(rd1);
                                        j += 2;
                                    }
                                }
                            }
                            else
                            {
                                rd3 = ArtDataList.Items[13].ToString();
                                rd1 = rd3.Substring(6, 10);
                                if (rd1 != "SubAction ")
                                {
                                    g++;
                                }
                                rd2 = ArtDataList.Items[13 + g].ToString();
                                rd1 = rd2.Substring(2, 3);
                                k = Convert.ToInt32(rd1, 16);
                                g = alm[artdt + k / 4] / 4;
                                h = alm[g + this.i];
                                ArtSubaOffset.Text = "0x" + h.ToString("X");
                                if (h > 8096 && h < tds[25])
                                {
                                    j = h / 4;
                                    mov = 0;
                                    while (alm[j] != 0 && j < md)
                                    {
                                        EveListstring();
                                        ArtSubaList.Items.Add(rd1);
                                        j += 2;
                                    }
                                }
                            }
                        }
                    }
                    else if (fnt == 0)
                    {
                        Fixam();
                        if (ArtSubaCbList.SelectedIndex != -1 && ArtSubaId.SelectedIndex != -1)
                        {
                            ArtSubaList.Items.Clear();
                            this.i = ArtSubaId.SelectedIndex;
                            g = ArtSubaCbList.SelectedIndex;
                            if (g < 3 && alm[artdt + 6 + g] != 0)
                            {
                                k = alm[artdt + 6 + g] / 4;
                                h = alm[k + this.i];
                                ArtSubaOffset.Text = "0x" + h.ToString("X");
                                if (h > 8096 && h < tds[25])
                                {
                                    j = h / 4;
                                    mov = 0;
                                    while (alm[j] != 0 && j < md)
                                    {
                                        EveListstring();
                                        ArtSubaList.Items.Add(rd1);
                                        j += 2;
                                    }
                                }
                            }
                            else if (alm[artdt + 7] != 0)
                            {
                                k = alm[artdt + 7] / 4;
                                h = alm[k + this.i];
                                ArtSubaOffset.Text = "0x" + h.ToString("X");
                                if (h > 8096 && h < tds[25])
                                {
                                    j = h / 4;
                                    mov = 0;
                                    while (alm[j] != 0 && j < md)
                                    {
                                        EveListstring();
                                        ArtSubaList.Items.Add(rd1);
                                        j += 2;
                                    }
                                }
                            }
                            else
                            {
                                rd3 = ArtDataList.Items[13].ToString();
                                rd1 = rd3.Substring(6, 10);
                                if (rd1 != "SubAction ")
                                {
                                    g++;
                                }
                                rd2 = ArtDataList.Items[13 + g].ToString();
                                rd1 = rd2.Substring(2, 3);
                                k = Convert.ToInt32(rd1, 16);
                                g = alm[artdt + k / 4] / 4;
                                h = alm[g + this.i];
                                ArtSubaOffset.Text = "0x" + h.ToString("X");
                                if (h > 8096 && h < tds[25])
                                {
                                    j = h / 4;
                                    mov = 0;
                                    while (alm[j] != 0 && j < md)
                                    {
                                        EveListstring();
                                        ArtSubaList.Items.Add(rd1);
                                        j += 2;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        minitxt.Text = "invalid Command.";
                    }
                    CmpText.Text = "";
                    ModeChange.Enabled = true;
                    AllEnableChange();
                }
                else
                {
                    minitxt.Text = "invalid Command.";
                }
            }
            else
            {
                minitxt.Text = "invalid Command.";
            }
        }

        private void EvNoSelect_Click(object sender, EventArgs e)
        {
            if (ModeChange.SelectedIndex == 1)
            {
                EvList.ClearSelected();
            }
            else if (ArticleTab.SelectedIndex == 0)
            {
                ArtActList.ClearSelected();
            }
            else
            {
                ArtSubaList.ClearSelected();
            }
        }

        private void EvAllSelect_Click(object sender, EventArgs e)
        {
            if (ModeChange.SelectedIndex == 1)
            {
                EvDesText.Enabled = false;
                for (n = 0; n < EvList.Items.Count; n++)
                {
                    EvList.SetSelected(n, value: true);
                }
                EvDesText.Enabled = true;
            }
            else if (ArticleTab.SelectedIndex == 0)
            {
                ArtActText.Enabled = false;
                for (n = 0; n < ArtActList.Items.Count; n++)
                {
                    ArtActList.SetSelected(n, value: true);
                }
                ArtActText.Enabled = true;
            }
            else
            {
                ArtSubaText.Enabled = false;
                for (n = 0; n < ArtSubaList.Items.Count; n++)
                {
                    ArtSubaList.SetSelected(n, value: true);
                }
                ArtSubaText.Enabled = true;
            }
        }

        private void EvOffsetView_Click(object sender, EventArgs e)
        {
            if (ModeChange.SelectedIndex == 1)
            {
                if (EvList.SelectedIndex != -1)
                {
                    if (EventTab.SelectedIndex == 0)
                    {
                        rd1 = EvSpOffset.Text.Substring(2);
                    }
                    else if (EventTab.SelectedIndex == 1)
                    {
                        rd1 = EvSubaOffset.Text.Substring(2);
                    }
                    else if (EventTab.SelectedIndex == 3)
                    {
                        rd1 = EvOvrOffset.Text.Substring(2);
                    }
                    else
                    {
                        rd1 = EvRnOffset.Text.Substring(2);
                    }
                    g = Convert.ToInt32(rd1, 16);
                    h = EvList.SelectedIndex;
                    i = g / 4 + h * 2;
                    minitxt.Text = "Event Offset=0x" + (i * 4).ToString("X") + ",Params Offset=0x" + alm[i + 1].ToString("X");
                }
                else
                {
                    minitxt.Text = "Event Count:" + EvList.Items.Count;
                }
            }
            else if (ArticleTab.SelectedIndex == 0)
            {
                if (ArtActList.SelectedIndex != -1)
                {
                    rd1 = ArtActOffset.Text.Substring(2);
                    g = Convert.ToInt32(rd1, 16);
                    h = ArtActList.SelectedIndex;
                    i = g / 4 + h * 2;
                    minitxt.Text = "Event Offset=0x" + (i * 4).ToString("X") + ",Params Offset=0x" + alm[i + 1].ToString("X");
                }
                else
                {
                    minitxt.Text = "Event Count:" + ArtActList.Items.Count;
                }
            }
            else if (ArtSubaList.SelectedIndex != -1)
            {
                rd1 = ArtSubaOffset.Text.Substring(2);
                g = Convert.ToInt32(rd1, 16);
                h = ArtSubaList.SelectedIndex;
                i = g / 4 + h * 2;
                minitxt.Text = "Event Offset=0x" + (i * 4).ToString("X") + ",Params Offset=0x" + alm[i + 1].ToString("X");
            }
            else
            {
                minitxt.Text = "Event Count:" + ArtSubaList.Items.Count;
            }
        }

        private void EvOpenSubRoutine_Click(object sender, EventArgs e)
        {
            if (ModeChange.SelectedIndex == 1)
            {
                if (EvList.SelectedIndex != -1)
                {
                    if (EventTab.SelectedIndex == 0)
                    {
                        rd1 = EvSpOffset.Text.Substring(2);
                    }
                    else if (EventTab.SelectedIndex == 1)
                    {
                        rd1 = EvSubaOffset.Text.Substring(2);
                    }
                    else if (EventTab.SelectedIndex == 3)
                    {
                        rd1 = EvOvrOffset.Text.Substring(2);
                    }
                    else
                    {
                        rd1 = EvRnOffset.Text.Substring(2);
                    }
                    g = Convert.ToInt32(rd1, 16);
                    h = EvList.SelectedIndex;
                    i = g / 4 + h * 2;
                    k = ((alm[i] >> 8) & 0xFF);
                    if (k == 1 || k == 2)
                    {
                        if (alm[i + 1] > 8052 && alm[i + 1] < tds[25])
                        {
                            h = alm[i + 1] / 4;
                            if (alm[h] == 2)
                            {
                                g = alm[h + 1];
                                if (g >= stf * 4 && g < tds[25])
                                {
                                    k = (tds[27] + tds[28]) * 2;
                                    for (j = tds[27] * 2; j < k; j += 2)
                                    {
                                        m = rnext[j];
                                        if (m >= 8096 && m < tds[25])
                                        {
                                            for (mov = 0; mov < 100; mov++)
                                            {
                                                h = m / 4;
                                                m = alm[h];
                                                if (m < 8096 || m >= tds[25] || g == m)
                                                {
                                                    break;
                                                }
                                            }
                                            if (g == m)
                                            {
                                                g = 1;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            else if (k == 2 && alm[h + 2] == 2)
                            {
                                g = alm[h + 3];
                                if (g >= 8096 && g < tds[25])
                                {
                                    k = (tds[27] + tds[28]) * 2;
                                    for (j = tds[27] * 2; j < k; j += 2)
                                    {
                                        m = rnext[j];
                                        if (m >= 8096 && m < tds[25])
                                        {
                                            for (mov = 0; mov < 100; mov++)
                                            {
                                                h = m / 4;
                                                m = alm[h];
                                                if (m < 8096 || m >= tds[25] || g == m)
                                                {
                                                    break;
                                                }
                                            }
                                            if (g == m)
                                            {
                                                g = 1;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                k = 0;
                            }
                        }
                        else
                        {
                            k = 0;
                        }
                    }
                    else
                    {
                        k = 0;
                    }
                    if (k == 0)
                    {
                        g = i * 4;
                    }
                    if (g >= stf * 4 && g < tds[25] && g % 4 == 0)
                    {
                        if (minitxt.Text == "Cannot Open Offset")
                        {
                            minitxt.Text = "";
                        }
                        EvRnOfSele.Text = g.ToString("X");
                        EvList.Items.Clear();
                        EvRnOffset.Text = "";
                        if (EventTab.SelectedIndex != 2)
                        {
                            EventTab.SelectedIndex = 2;
                        }
                        rd1 = "0x" + g.ToString("X");
                        EvRnOffset.Text = rd1;
                        if (EvRnGenDatCbList.SelectedIndex == 0)
                        {
                            if (EvRnOffCbList.Items.Count == 0)
                            {
                                GenTraceS();
                                EvRnOffCbList.Items.Add(rd1);
                            }
                            else
                            {
                                h = EvRnOffCbList.Items.Count;
                                for (j = 0; j < h; j++)
                                {
                                    rd2 = EvRnOffCbList.Items[j].ToString();
                                    if (rd2.Length >= 9)
                                    {
                                        if (rd2[6] == ' ')
                                        {
                                            rd2 = rd2.Substring(0, 6);
                                        }
                                        else if (rd2[7] == ' ')
                                        {
                                            rd2 = rd2.Substring(0, 7);
                                        }
                                    }
                                    if (rd1 == rd2)
                                    {
                                        break;
                                    }
                                }
                                if (j == h)
                                {
                                    GenTraceS();
                                    EvRnOffCbList.Items.Add(rd1);
                                }
                            }
                        }
                        j = g / 4;
                        mov = 0;
                        while (alm[j] != 0 && j < md)
                        {
                            EveListstring();
                            EvList.Items.Add(rd1);
                            j += 2;
                        }
                    }
                    else
                    {
                        minitxt.Text = "Cannot Open Offset";
                    }
                }
                else
                {
                    if (EvList.Items.Count <= 0)
                    {
                        return;
                    }
                    if (EventTab.SelectedIndex == 0)
                    {
                        rd1 = EvSpOffset.Text.Substring(2);
                    }
                    else if (EventTab.SelectedIndex == 1)
                    {
                        rd1 = EvSubaOffset.Text.Substring(2);
                    }
                    else if (EventTab.SelectedIndex == 3)
                    {
                        rd1 = EvOvrOffset.Text.Substring(2);
                    }
                    else
                    {
                        rd1 = EvRnOffset.Text.Substring(2);
                    }
                    g = Convert.ToInt32(rd1, 16);
                    if (g >= stf * 4 && g < tds[25] && g % 4 == 0)
                    {
                        if (minitxt.Text == "Cannot Open Offset")
                        {
                            minitxt.Text = "";
                        }
                        EvRnOfSele.Text = g.ToString("X");
                        EvList.Items.Clear();
                        EvRnOffset.Text = "";
                        if (EventTab.SelectedIndex != 2)
                        {
                            EventTab.SelectedIndex = 2;
                        }
                        rd1 = "0x" + g.ToString("X");
                        EvRnOffset.Text = rd1;
                        if (EvRnGenDatCbList.SelectedIndex == 0)
                        {
                            if (EvRnOffCbList.Items.Count == 0)
                            {
                                GenTraceS();
                                EvRnOffCbList.Items.Add(rd1);
                            }
                            else
                            {
                                h = EvRnOffCbList.Items.Count;
                                for (j = 0; j < h; j++)
                                {
                                    rd2 = EvRnOffCbList.Items[j].ToString();
                                    if (rd2.Length >= 9)
                                    {
                                        if (rd2[6] == ' ')
                                        {
                                            rd2 = rd2.Substring(0, 6);
                                        }
                                        else if (rd2[7] == ' ')
                                        {
                                            rd2 = rd2.Substring(0, 7);
                                        }
                                    }
                                    if (rd1 == rd2)
                                    {
                                        break;
                                    }
                                }
                                if (j == h)
                                {
                                    GenTraceS();
                                    EvRnOffCbList.Items.Add(rd1);
                                }
                            }
                        }
                        j = g / 4;
                        mov = 0;
                        while (alm[j] != 0 && j < md)
                        {
                            EveListstring();
                            EvList.Items.Add(rd1);
                            j += 2;
                        }
                    }
                    else
                    {
                        minitxt.Text = "Cannot Open Offset";
                    }
                }
            }
            else if (ArticleTab.SelectedIndex == 0)
            {
                if (ArtActList.SelectedIndex != -1)
                {
                    rd1 = ArtActOffset.Text.Substring(2);
                    g = Convert.ToInt32(rd1, 16);
                    j = ArtActList.SelectedIndex;
                    i = g / 4 + j * 2;
                    k = ((alm[i] >> 8) & 0xFF);
                    if (k == 1 || k == 2)
                    {
                        if (alm[i + 1] > 8052 && alm[i + 1] < tds[25])
                        {
                            h = alm[i + 1] / 4;
                            if (alm[h] == 2)
                            {
                                g = alm[h + 1];
                            }
                            else if (k == 2 && alm[h + 2] == 2)
                            {
                                g = alm[h + 3];
                            }
                            else
                            {
                                k = 0;
                            }
                        }
                        else
                        {
                            k = 0;
                        }
                    }
                    else
                    {
                        k = 0;
                    }
                    if (k == 0)
                    {
                        g = i * 4;
                    }
                    if (g >= stf * 4 && g < tds[25] && g % 4 == 0)
                    {
                        if (minitxt.Text == "Cannot Open Offset")
                        {
                            minitxt.Text = "";
                        }
                        if (ArtActCbList.Visible)
                        {
                            m = 1;
                        }
                        else
                        {
                            m = 0;
                        }
                        EvRnOfSele.Text = g.ToString("X");
                        EvList.Items.Clear();
                        EvRnOffset.Text = "";
                        ModeChange.SelectedIndex = 1;
                        if (EventTab.SelectedIndex != 2)
                        {
                            EventTab.SelectedIndex = 2;
                        }
                        rd1 = "0x" + g.ToString("X");
                        EvRnOffset.Text = rd1;
                        if (EvRnGenDatCbList.SelectedIndex == 0)
                        {
                            if (EvRnOffCbList.Items.Count == 0)
                            {
                                if (k == 0 && j == 0)
                                {
                                    if (ArtActId.SelectedIndex != -1 && ArticleIDCb.SelectedIndex != -1)
                                    {
                                        i = ArticleIDCb.SelectedIndex;
                                        h = ArtActId.SelectedIndex;
                                        if (m == 1)
                                        {
                                            if (ArtActCbList.SelectedIndex == 0)
                                            {
                                                string text = rd1;
                                                rd1 = text + " Article" + ArticleIDCb.Items[i].ToString() + " Action Entry " + h.ToString("X");
                                            }
                                            else if (ArtActCbList.SelectedIndex == 1)
                                            {
                                                string text = rd1;
                                                rd1 = text + " Article" + ArticleIDCb.Items[i].ToString() + " Action Exit " + h.ToString("X");
                                            }
                                        }
                                        else
                                        {
                                            string text = rd1;
                                            rd1 = text + " Article" + ArticleIDCb.Items[i].ToString() + " Action " + h.ToString("X");
                                        }
                                    }
                                }
                                else
                                {
                                    GenTraceS();
                                }
                                EvRnOffCbList.Items.Add(rd1);
                            }
                            else
                            {
                                h = EvRnOffCbList.Items.Count;
                                for (i = 0; i < h; i++)
                                {
                                    rd2 = EvRnOffCbList.Items[i].ToString();
                                    if (rd2.Length >= 9)
                                    {
                                        if (rd2[6] == ' ')
                                        {
                                            rd2 = rd2.Substring(0, 6);
                                        }
                                        else if (rd2[7] == ' ')
                                        {
                                            rd2 = rd2.Substring(0, 7);
                                        }
                                    }
                                    if (rd1 == rd2)
                                    {
                                        break;
                                    }
                                }
                                if (i == h)
                                {
                                    if (k == 0 && j == 0)
                                    {
                                        if (ArtActId.SelectedIndex != -1 && ArticleIDCb.SelectedIndex != -1)
                                        {
                                            i = ArticleIDCb.SelectedIndex;
                                            h = ArtActId.SelectedIndex;
                                            if (m == 1)
                                            {
                                                if (ArtActCbList.SelectedIndex == 0)
                                                {
                                                    string text = rd1;
                                                    rd1 = text + " Article" + ArticleIDCb.Items[i].ToString() + " Action Entry " + h.ToString("X");
                                                }
                                                else if (ArtActCbList.SelectedIndex == 1)
                                                {
                                                    string text = rd1;
                                                    rd1 = text + " Article" + ArticleIDCb.Items[i].ToString() + " Action Exit " + h.ToString("X");
                                                }
                                            }
                                            else
                                            {
                                                string text = rd1;
                                                rd1 = text + " Article" + ArticleIDCb.Items[i].ToString() + " Action " + h.ToString("X");
                                            }
                                        }
                                    }
                                    else
                                    {
                                        GenTraceS();
                                    }
                                    EvRnOffCbList.Items.Add(rd1);
                                }
                            }
                        }
                        j = g / 4;
                        mov = 0;
                        while (alm[j] != 0 && j < md)
                        {
                            EveListstring();
                            EvList.Items.Add(rd1);
                            j += 2;
                        }
                    }
                    else
                    {
                        minitxt.Text = "Cannot Open Offset";
                    }
                }
                else
                {
                    if (ArtActList.Items.Count <= 0)
                    {
                        return;
                    }
                    rd1 = ArtActOffset.Text.Substring(2);
                    g = Convert.ToInt32(rd1, 16);
                    if (g >= stf * 4 && g < tds[25] && g % 4 == 0)
                    {
                        if (minitxt.Text == "Cannot Open Offset")
                        {
                            minitxt.Text = "";
                        }
                        if (ArtActCbList.Visible)
                        {
                            m = 1;
                        }
                        else
                        {
                            m = 0;
                        }
                        EvRnOfSele.Text = g.ToString("X");
                        EvList.Items.Clear();
                        EvRnOffset.Text = "";
                        ModeChange.SelectedIndex = 1;
                        if (EventTab.SelectedIndex != 2)
                        {
                            EventTab.SelectedIndex = 2;
                        }
                        rd1 = "0x" + g.ToString("X");
                        EvRnOffset.Text = rd1;
                        if (EvRnGenDatCbList.SelectedIndex == 0)
                        {
                            if (EvRnOffCbList.Items.Count == 0)
                            {
                                if (ArtActId.SelectedIndex != -1 && ArticleIDCb.SelectedIndex != -1)
                                {
                                    i = ArticleIDCb.SelectedIndex;
                                    h = ArtActId.SelectedIndex;
                                    if (m == 1)
                                    {
                                        if (ArtActCbList.SelectedIndex == 0)
                                        {
                                            string text = rd1;
                                            rd1 = text + " Article" + ArticleIDCb.Items[i].ToString() + " Action Entry " + h.ToString("X");
                                        }
                                        else if (ArtActCbList.SelectedIndex == 1)
                                        {
                                            string text = rd1;
                                            rd1 = text + " Article" + ArticleIDCb.Items[i].ToString() + " Action Exit " + h.ToString("X");
                                        }
                                    }
                                    else
                                    {
                                        string text = rd1;
                                        rd1 = text + " Article" + ArticleIDCb.Items[i].ToString() + " Action " + h.ToString("X");
                                    }
                                }
                                EvRnOffCbList.Items.Add(rd1);
                            }
                            else
                            {
                                h = EvRnOffCbList.Items.Count;
                                for (i = 0; i < h; i++)
                                {
                                    rd2 = EvRnOffCbList.Items[i].ToString();
                                    if (rd2.Length >= 9)
                                    {
                                        if (rd2[6] == ' ')
                                        {
                                            rd2 = rd2.Substring(0, 6);
                                        }
                                        else if (rd2[7] == ' ')
                                        {
                                            rd2 = rd2.Substring(0, 7);
                                        }
                                    }
                                    if (rd1 == rd2)
                                    {
                                        break;
                                    }
                                }
                                if (i == h)
                                {
                                    if (ArtActId.SelectedIndex != -1 && ArticleIDCb.SelectedIndex != -1)
                                    {
                                        i = ArticleIDCb.SelectedIndex;
                                        h = ArtActId.SelectedIndex;
                                        if (m == 1)
                                        {
                                            if (ArtActCbList.SelectedIndex == 0)
                                            {
                                                string text = rd1;
                                                rd1 = text + " Article" + ArticleIDCb.Items[i].ToString() + " Action Entry " + h.ToString("X");
                                            }
                                            else if (ArtActCbList.SelectedIndex == 1)
                                            {
                                                string text = rd1;
                                                rd1 = text + " Article" + ArticleIDCb.Items[i].ToString() + " Action Exit " + h.ToString("X");
                                            }
                                        }
                                        else
                                        {
                                            string text = rd1;
                                            rd1 = text + " Article" + ArticleIDCb.Items[i].ToString() + " Action " + h.ToString("X");
                                        }
                                    }
                                    EvRnOffCbList.Items.Add(rd1);
                                }
                            }
                        }
                        j = g / 4;
                        mov = 0;
                        while (alm[j] != 0 && j < md)
                        {
                            EveListstring();
                            EvList.Items.Add(rd1);
                            j += 2;
                        }
                    }
                    else
                    {
                        minitxt.Text = "Cannot Open Offset";
                    }
                }
            }
            else if (ArtSubaList.SelectedIndex != -1)
            {
                rd1 = ArtSubaOffset.Text.Substring(2);
                g = Convert.ToInt32(rd1, 16);
                j = ArtSubaList.SelectedIndex;
                i = g / 4 + j * 2;
                k = ((alm[i] >> 8) & 0xFF);
                if (k == 1 || k == 2)
                {
                    if (alm[i + 1] > 8052 && alm[i + 1] < tds[25])
                    {
                        h = alm[i + 1] / 4;
                        if (alm[h] == 2)
                        {
                            g = alm[h + 1];
                        }
                        else if (k == 2 && alm[h + 2] == 2)
                        {
                            g = alm[h + 3];
                        }
                        else
                        {
                            k = 0;
                        }
                    }
                    else
                    {
                        k = 0;
                    }
                }
                else
                {
                    k = 0;
                }
                if (k == 0)
                {
                    g = i * 4;
                }
                if (g >= stf * 4 && g < tds[25] && g % 4 == 0)
                {
                    if (minitxt.Text == "Cannot Open Offset")
                    {
                        minitxt.Text = "";
                    }
                    EvRnOfSele.Text = g.ToString("X");
                    EvList.Items.Clear();
                    EvRnOffset.Text = "";
                    ModeChange.SelectedIndex = 1;
                    if (EventTab.SelectedIndex != 2)
                    {
                        EventTab.SelectedIndex = 2;
                    }
                    rd1 = "0x" + g.ToString("X");
                    EvRnOffset.Text = rd1;
                    if (EvRnGenDatCbList.SelectedIndex == 0)
                    {
                        if (EvRnOffCbList.Items.Count == 0)
                        {
                            if (k == 0 && j == 0)
                            {
                                if (ArtSubaId.SelectedIndex != -1 && ArtSubaCbList.SelectedIndex != -1 && ArticleIDCb.SelectedIndex != -1)
                                {
                                    i = ArticleIDCb.SelectedIndex;
                                    h = ArtSubaId.SelectedIndex;
                                    j = ArtSubaCbList.SelectedIndex;
                                    string text = rd1;
                                    rd1 = text + " Article" + ArticleIDCb.Items[i].ToString() + " Sub Action " + ArtSubaCbList.Items[j].ToString() + " " + h.ToString("X");
                                }
                            }
                            else
                            {
                                GenTraceS();
                            }
                            EvRnOffCbList.Items.Add(rd1);
                        }
                        else
                        {
                            h = EvRnOffCbList.Items.Count;
                            for (i = 0; i < h; i++)
                            {
                                rd2 = EvRnOffCbList.Items[i].ToString();
                                if (rd2.Length >= 9)
                                {
                                    if (rd2[6] == ' ')
                                    {
                                        rd2 = rd2.Substring(0, 6);
                                    }
                                    else if (rd2[7] == ' ')
                                    {
                                        rd2 = rd2.Substring(0, 7);
                                    }
                                }
                                if (rd1 == rd2)
                                {
                                    break;
                                }
                            }
                            if (i == h)
                            {
                                if (k == 0 && j == 0)
                                {
                                    if (ArtSubaId.SelectedIndex != -1 && ArtSubaCbList.SelectedIndex != -1 && ArticleIDCb.SelectedIndex != -1)
                                    {
                                        i = ArticleIDCb.SelectedIndex;
                                        h = ArtSubaId.SelectedIndex;
                                        j = ArtSubaCbList.SelectedIndex;
                                        string text = rd1;
                                        rd1 = text + " Article" + ArticleIDCb.Items[i].ToString() + " Sub Action " + ArtSubaCbList.Items[j].ToString() + " " + h.ToString("X");
                                    }
                                }
                                else
                                {
                                    GenTraceS();
                                }
                                EvRnOffCbList.Items.Add(rd1);
                            }
                        }
                    }
                    j = g / 4;
                    mov = 0;
                    while (alm[j] != 0 && j < md)
                    {
                        EveListstring();
                        EvList.Items.Add(rd1);
                        j += 2;
                    }
                }
                else
                {
                    minitxt.Text = "Cannot Open Offset";
                }
            }
            else
            {
                if (ArtSubaList.Items.Count <= 0)
                {
                    return;
                }
                rd1 = ArtSubaOffset.Text.Substring(2);
                g = Convert.ToInt32(rd1, 16);
                if (g >= stf * 4 && g < tds[25] && g % 4 == 0)
                {
                    if (minitxt.Text == "Cannot Open Offset")
                    {
                        minitxt.Text = "";
                    }
                    EvRnOfSele.Text = g.ToString("X");
                    EvList.Items.Clear();
                    EvRnOffset.Text = "";
                    ModeChange.SelectedIndex = 1;
                    if (EventTab.SelectedIndex != 2)
                    {
                        EventTab.SelectedIndex = 2;
                    }
                    rd1 = "0x" + g.ToString("X");
                    EvRnOffset.Text = rd1;
                    if (EvRnGenDatCbList.SelectedIndex == 0)
                    {
                        if (EvRnOffCbList.Items.Count == 0)
                        {
                            if (ArtSubaId.SelectedIndex != -1 && ArtSubaCbList.SelectedIndex != -1 && ArticleIDCb.SelectedIndex != -1)
                            {
                                i = ArticleIDCb.SelectedIndex;
                                h = ArtSubaId.SelectedIndex;
                                j = ArtSubaCbList.SelectedIndex;
                                string text = rd1;
                                rd1 = text + " Article" + ArticleIDCb.Items[i].ToString() + " Sub Action " + ArtSubaCbList.Items[j].ToString() + " " + h.ToString("X");
                            }
                            EvRnOffCbList.Items.Add(rd1);
                        }
                        else
                        {
                            h = EvRnOffCbList.Items.Count;
                            for (i = 0; i < h; i++)
                            {
                                rd2 = EvRnOffCbList.Items[i].ToString();
                                if (rd2.Length >= 9)
                                {
                                    if (rd2[6] == ' ')
                                    {
                                        rd2 = rd2.Substring(0, 6);
                                    }
                                    else if (rd2[7] == ' ')
                                    {
                                        rd2 = rd2.Substring(0, 7);
                                    }
                                }
                                if (rd1 == rd2)
                                {
                                    break;
                                }
                            }
                            if (i == h)
                            {
                                if (ArtSubaId.SelectedIndex != -1 && ArtSubaCbList.SelectedIndex != -1 && ArticleIDCb.SelectedIndex != -1)
                                {
                                    i = ArticleIDCb.SelectedIndex;
                                    h = ArtSubaId.SelectedIndex;
                                    j = ArtSubaCbList.SelectedIndex;
                                    string text = rd1;
                                    rd1 = text + " Article" + ArticleIDCb.Items[i].ToString() + " Sub Action " + ArtSubaCbList.Items[j].ToString() + " " + h.ToString("X");
                                }
                                EvRnOffCbList.Items.Add(rd1);
                            }
                        }
                    }
                    j = g / 4;
                    mov = 0;
                    while (alm[j] != 0 && j < md)
                    {
                        EveListstring();
                        EvList.Items.Add(rd1);
                        j += 2;
                    }
                }
                else
                {
                    minitxt.Text = "Cannot Open Offset";
                }
            }
        }

        private void EvRefresh_Click(object sender, EventArgs e)
        {
            if (ModeChange.SelectedIndex == 1)
            {
                if (EventTab.SelectedIndex == 0)
                {
                    if (EvSpOffset.Text.Length > 2)
                    {
                        if (EvSpCbID.SelectedIndex == -1)
                        {
                            EvSpCbID.SelectedIndex = aid;
                        }
                        if (EvSpCbList.SelectedIndex == -1)
                        {
                            EvSpCbList.SelectedIndex = alist;
                        }
                        rd1 = EvSpOffset.Text.Substring(2);
                    }
                    else
                    {
                        rd1 = "";
                    }
                }
                else if (EventTab.SelectedIndex == 1)
                {
                    if (EvSubaOffset.Text.Length > 2)
                    {
                        if (EvSubaCbID.SelectedIndex == -1)
                        {
                            EvSubaCbID.SelectedIndex = sid;
                        }
                        if (EvSubaCbList.SelectedIndex == -1)
                        {
                            EvSubaCbList.SelectedIndex = slist;
                        }
                        rd1 = EvSubaOffset.Text.Substring(2);
                    }
                    else
                    {
                        rd1 = "";
                    }
                }
                else if (EventTab.SelectedIndex == 3)
                {
                    if (EvOvrOffset.Text.Length > 2)
                    {
                        if (EvOvrId.SelectedIndex != -1)
                        {
                            if (EvOvrCbList.SelectedIndex != -1)
                            {
                                rd1 = EvOvrOffset.Text.Substring(2);
                            }
                            else
                            {
                                rd1 = "";
                            }
                        }
                        else
                        {
                            rd1 = "";
                        }
                    }
                    else
                    {
                        rd1 = "";
                    }
                }
                else if (EvRnOffset.Text.Length > 5)
                {
                    rd1 = EvRnOffset.Text.Substring(2);
                }
                else
                {
                    rd1 = "";
                }
                if (rd1 != "")
                {
                    h = Convert.ToInt32(rd1, 16);
                    if (EventTab.SelectedIndex == 0)
                    {
                        if (EvSubaCbList.Items.Count < 4)
                        {
                            if (EvSpCbList.SelectedIndex == 0)
                            {
                                n = alm[dat + 4] / 4;
                            }
                            else
                            {
                                n = alm[dat + 5] / 4;
                            }
                        }
                        else if (EvSpCbList.SelectedIndex == 0)
                        {
                            n = alm[dat + 9] / 4;
                        }
                        else
                        {
                            n = alm[dat + 10] / 4;
                        }
                        i = n + EvSpCbID.SelectedIndex;
                    }
                    else if (EventTab.SelectedIndex == 1)
                    {
                        g = EvSubaCbList.SelectedIndex;
                        if (g < 4)
                        {
                            n = alm[dat + 12 + g] / 4;
                        }
                        else
                        {
                            n = alm[dat + 27 + g] / 4;
                        }
                        i = n + EvSubaCbID.SelectedIndex;
                    }
                    else if (EventTab.SelectedIndex == 3)
                    {
                        if (EvOvrCbList.SelectedIndex == 2)
                        {
                            i = alm[dat + 11] / 4 + EvOvrId.SelectedIndex;
                        }
                        else
                        {
                            if (EvOvrCbList.SelectedIndex == 0)
                            {
                                n = alm[dat + 20] / 4 + 1;
                            }
                            else
                            {
                                n = alm[dat + 21] / 4 + 1;
                            }
                            i = n + EvOvrId.SelectedIndex * 2;
                        }
                    }
                    else
                    {
                        i = 0;
                    }
                    if (h >= stf * 4 && h < tds[25])
                    {
                        if (h % 4 == 0)
                        {
                            k = h / 4;
                            if (alm[k] == 0 || alm[k] == -86052851)
                            {
                                if (alm[k] == 0)
                                {
                                    alm[k] = -86052851;
                                    alm[k + 1] = -86052851;
                                }
                                else
                                {
                                    EvList.Items.Clear();
                                }
                                if (i > 0)
                                {
                                    alm[i] = 0;
                                    rmv = i * 4;
                                    Delasc();
                                }
                                if (EventTab.SelectedIndex == 0)
                                {
                                    EvSpOffset.Text = "0x0";
                                }
                                else if (EventTab.SelectedIndex == 1)
                                {
                                    EvSubaOffset.Text = "0x0";
                                }
                                else if (EventTab.SelectedIndex == 3)
                                {
                                    EvOvrOffset.Text = "0x0";
                                }
                                else
                                {
                                    rd1 = EvRnOffset.Text;
                                    EvRnOffset.Text = "0x0";
                                    if (EvOffsetInterlock.Checked)
                                    {
                                        if (EvSpOffset.Text == rd1)
                                        {
                                            EvSpOffset.Text = "0x0";
                                        }
                                        if (EvSubaOffset.Text == rd1)
                                        {
                                            EvSubaOffset.Text = "0x0";
                                        }
                                        if (EvOvrOffset.Text == rd1)
                                        {
                                            EvOvrOffset.Text = "0x0";
                                        }
                                    }
                                }
                                if (EvOffsetInterlock.Checked)
                                {
                                    for (i = stf; i < md; i++)
                                    {
                                        if (alm[i] == h)
                                        {
                                            DelILData();
                                        }
                                    }
                                    rd2 = "0x" + rd1;
                                    if (EvSpOffset.Text == rd2)
                                    {
                                        EvSpOffset.Text = "0x0";
                                    }
                                    if (EvSubaOffset.Text == rd2)
                                    {
                                        EvSubaOffset.Text = "0x0";
                                    }
                                    if (EvOvrOffset.Text == rd2)
                                    {
                                        EvOvrOffset.Text = "0x0";
                                    }
                                }
                                minitxt.Text = "Empty Event List Cleared.";
                                Fixam();
                            }
                            else
                            {
                                rmv = i * 4;
                                g = 0;
                                fnt = 0;
                                nonam[0] = 0;
                                if (i != 0)
                                {
                                    mov = 0;
                                    while (mov < par && asc[mov] != rmv)
                                    {
                                        mov++;
                                    }
                                    if (mov >= par)
                                    {
                                        asc[par] = rmv;
                                        par++;
                                        tds[26]++;
                                        g++;
                                    }
                                }
                                n = EvList.Items.Count * 2;
                                for (i = 0; i < n; i += 2)
                                {
                                    if (alm[k + i] == -86052851)
                                    {
                                        alm[k + i] = 0;
                                        g++;
                                        fnt = 1;
                                        if (alm[k + i + 1] == -86052851)
                                        {
                                            alm[k + i + 1] = 0;
                                        }
                                        break;
                                    }
                                }
                                i = 0;
                                while (i < n && alm[k + i] != 0)
                                {
                                    if (((alm[k + i] >> 8) & 0xFF) == 0)
                                    {
                                        if (alm[k + i] > 0 && alm[k + i] < 256)
                                        {
                                            if (alm[k + i + 1] != 0)
                                            {
                                                alm[k + i + 1] = 0;
                                            }
                                            rmv = (k + i) * 4 + 4;
                                            Delasc();
                                            if (mov < par)
                                            {
                                                g++;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        rmv = (k + i) * 4 + 4;
                                        mov = 0;
                                        while (mov < par && asc[mov] != rmv)
                                        {
                                            mov++;
                                        }
                                        if (mov >= par)
                                        {
                                            asc[par] = rmv;
                                            par++;
                                            tds[26]++;
                                            g++;
                                        }
                                        j = alm[k + i + 1] / 4;
                                        if (j >= stf && j < md)
                                        {
                                            if (alm[k + i] == 459008)
                                            {
                                                if (alm[j] == 2)
                                                {
                                                    rmv = j * 4 + 4;
                                                    for (an2 = 0; an2 < tds[28]; an2++)
                                                    {
                                                        an4 = rnext[(tds[27] + an2) * 2];
                                                        if (an4 >= 8096 && an4 < tds[25])
                                                        {
                                                            if (rmv == an4)
                                                            {
                                                                break;
                                                            }
                                                            if (an4 >= 8096 && an4 < tds[25])
                                                            {
                                                                for (an5 = 0; an5 < 100; an5++)
                                                                {
                                                                    m = an4 / 4;
                                                                    an4 = alm[m];
                                                                    if (an4 < 8096 || an4 >= tds[25] || rmv == an4)
                                                                    {
                                                                        break;
                                                                    }
                                                                }
                                                                if (rmv == an4)
                                                                {
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (an2 < tds[28])
                                                    {
                                                        Delasc();
                                                        if (mov < par)
                                                        {
                                                            g++;
                                                        }
                                                    }
                                                    else if (alm[j + 1] < 1)
                                                    {
                                                        Delasc();
                                                        if (mov < par)
                                                        {
                                                            g++;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        mov = 0;
                                                        while (mov < par && asc[mov] != rmv)
                                                        {
                                                            mov++;
                                                        }
                                                        if (mov >= par)
                                                        {
                                                            asc[par] = rmv;
                                                            par++;
                                                            tds[26]++;
                                                            g++;
                                                        }
                                                    }
                                                }
                                            }
                                            else if (alm[k + i] == 218104320)
                                            {
                                                if (alm[j] == 2)
                                                {
                                                    rmv = j * 4 + 4;
                                                    if (alm[j + 1] < 1)
                                                    {
                                                        Delasc();
                                                        if (mov < par)
                                                        {
                                                            g++;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        mov = 0;
                                                        while (mov < par && asc[mov] != rmv)
                                                        {
                                                            mov++;
                                                        }
                                                        if (mov >= par)
                                                        {
                                                            asc[par] = rmv;
                                                            par++;
                                                            tds[26]++;
                                                            g++;
                                                        }
                                                    }
                                                }
                                                if (alm[j + 2] == 2)
                                                {
                                                    rmv = j * 4 + 12;
                                                    for (an2 = 0; an2 < tds[28]; an2++)
                                                    {
                                                        an4 = rnext[(tds[27] + an2) * 2];
                                                        if (an4 >= 8096 && an4 < tds[25])
                                                        {
                                                            if (rmv == an4)
                                                            {
                                                                break;
                                                            }
                                                            if (an4 >= 8096 && an4 < tds[25])
                                                            {
                                                                for (an5 = 0; an5 < 100; an5++)
                                                                {
                                                                    m = an4 / 4;
                                                                    an4 = alm[m];
                                                                    if (an4 < 8096 || an4 >= tds[25] || rmv == an4)
                                                                    {
                                                                        break;
                                                                    }
                                                                }
                                                                if (rmv == an4)
                                                                {
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (an2 < tds[28])
                                                    {
                                                        Delasc();
                                                        if (mov < par)
                                                        {
                                                            g++;
                                                        }
                                                    }
                                                    else if (alm[j + 3] < 1)
                                                    {
                                                        Delasc();
                                                        if (mov < par)
                                                        {
                                                            g++;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        mov = 0;
                                                        while (mov < par && asc[mov] != rmv)
                                                        {
                                                            mov++;
                                                        }
                                                        if (mov >= par)
                                                        {
                                                            asc[par] = rmv;
                                                            par++;
                                                            tds[26]++;
                                                            g++;
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                an1 = ((alm[k + i] >> 8) & 0xFF) * 2;
                                                for (an2 = 0; an2 < an1; an2 += 2)
                                                {
                                                    if (alm[j + an2] == 2 || alm[j + an2] == 4)
                                                    {
                                                        rmv = (j + an2) * 4 + 4;
                                                        if (alm[j + an2 + 1] < 1)
                                                        {
                                                            Delasc();
                                                            if (mov < par)
                                                            {
                                                                g++;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            mov = 0;
                                                            while (mov < par && asc[mov] != rmv)
                                                            {
                                                                mov++;
                                                            }
                                                            if (mov >= par)
                                                            {
                                                                asc[par] = rmv;
                                                                par++;
                                                                tds[26]++;
                                                                g++;
                                                            }
                                                        }
                                                    }
                                                    else if (alm[j + an2] < 0 || alm[j + an2] >= 7)
                                                    {
                                                        nonam[0]++;
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            nonam[0]++;
                                        }
                                    }
                                    i += 2;
                                }
                                if (g > 0)
                                {
                                    minitxt.Text = "Fixed " + g + " Data.";
                                    Fixam();
                                    if (fnt == 1)
                                    {
                                        j = h / 4;
                                        mov = 0;
                                        EvList.Items.Clear();
                                        while (alm[j] != 0 && j < md)
                                        {
                                            EveListstring();
                                            EvList.Items.Add(rd1);
                                            j += 2;
                                        }
                                    }
                                }
                                else
                                {
                                    minitxt.Text = "No Effect.";
                                }
                                if (nonam[0] > 0)
                                {
                                    TextBox textBox = minitxt;
                                    textBox.Text = textBox.Text + " Found " + nonam[0] + " Error.";
                                }
                            }
                        }
                        else
                        {
                            alm[i] = 0;
                            rmv = i * 4;
                            Delasc();
                            if (mov < par)
                            {
                                Fixam();
                            }
                            EvList.Items.Clear();
                            if (EventTab.SelectedIndex == 0)
                            {
                                EvSpOffset.Text = "0x0";
                            }
                            else if (EventTab.SelectedIndex == 1)
                            {
                                EvSubaOffset.Text = "0x0";
                            }
                            else if (EventTab.SelectedIndex == 3)
                            {
                                EvOvrOffset.Text = "0x0";
                            }
                            else
                            {
                                EvRnOffset.Text = "0x0";
                            }
                            minitxt.Text = "Fixed 1 Error.";
                        }
                    }
                    else if (i > 0)
                    {
                        rmv = i * 4;
                        if (h == 0)
                        {
                            Delasc();
                            if (mov < par)
                            {
                                Fixam();
                                minitxt.Text = "Fixed 1 Data.";
                            }
                            else
                            {
                                minitxt.Text = "No Effect.";
                            }
                        }
                        else
                        {
                            alm[i] = 0;
                            Delasc();
                            if (mov < par)
                            {
                                Fixam();
                            }
                            EvList.Items.Clear();
                            if (EventTab.SelectedIndex == 0)
                            {
                                EvSpOffset.Text = "0x0";
                            }
                            else if (EventTab.SelectedIndex == 1)
                            {
                                EvSubaOffset.Text = "0x0";
                            }
                            else if (EventTab.SelectedIndex == 3)
                            {
                                EvOvrOffset.Text = "0x0";
                            }
                            else
                            {
                                EvRnOffset.Text = "0x0";
                            }
                            minitxt.Text = "Fixed 1 Error.";
                        }
                    }
                    else
                    {
                        minitxt.Text = "invalid Command.";
                    }
                    if (qe)
                    {
                        Qsave.Enabled = true;
                    }
                }
                else
                {
                    minitxt.Text = "invalid Command.";
                }
            }
            else if (ArticleTab.SelectedIndex == 0)
            {
                if (ArtActId.SelectedIndex != -1)
                {
                    if (!ArtActCbList.Visible)
                    {
                        n = alm[artdt + 5] / 4;
                    }
                    else if (ArtActCbList.SelectedIndex == 0)
                    {
                        n = alm[artdt + 5] / 4;
                    }
                    else if (ArtActCbList.SelectedIndex == 1)
                    {
                        n = alm[artdt + 13] / 4;
                    }
                    else
                    {
                        n = 0;
                    }
                    if (n >= stf)
                    {
                        rd1 = ArtActOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                        g = n + ArtActId.SelectedIndex;
                        rmv = g * 4;
                        if (h >= stf * 4 && h < tds[25])
                        {
                            if (h % 4 == 0)
                            {
                                k = h / 4;
                                if (alm[k] == 0 || alm[k] == -86052851)
                                {
                                    if (alm[k] == 0)
                                    {
                                        j = alm[g] / 4;
                                        alm[j] = -86052851;
                                        alm[j + 1] = -86052851;
                                    }
                                    else
                                    {
                                        ArtActList.Items.Clear();
                                    }
                                    alm[g] = 0;
                                    Delasc();
                                    ArtActOffset.Text = "0x0";
                                    if (EvOffsetInterlock.Checked)
                                    {
                                        for (i = stf; i < md; i++)
                                        {
                                            if (alm[i] == h)
                                            {
                                                DelILData();
                                            }
                                        }
                                    }
                                    minitxt.Text = "Empty Event List Cleared.";
                                    Fixam();
                                }
                                else
                                {
                                    fnt = 0;
                                    g = 0;
                                    nonam[0] = 0;
                                    mov = 0;
                                    while (mov < par && asc[mov] != rmv)
                                    {
                                        mov++;
                                    }
                                    if (mov >= par)
                                    {
                                        asc[par] = rmv;
                                        par++;
                                        tds[26]++;
                                        g++;
                                    }
                                    n = ArtActList.Items.Count * 2;
                                    for (i = 0; i < n; i += 2)
                                    {
                                        if (alm[k + i] == -86052851)
                                        {
                                            alm[k + i] = 0;
                                            g++;
                                            fnt = 1;
                                            if (alm[k + i + 1] == -86052851)
                                            {
                                                alm[k + i + 1] = 0;
                                            }
                                            break;
                                        }
                                    }
                                    i = 0;
                                    while (i < n && alm[k + i] != 0)
                                    {
                                        an1 = ((alm[k + i] >> 8) & 0xFF) * 2;
                                        rmv = (k + i) * 4 + 4;
                                        if (an1 == 0)
                                        {
                                            if (alm[k + i + 1] != 0)
                                            {
                                                alm[k + i + 1] = 0;
                                            }
                                            Delasc();
                                            if (mov < par)
                                            {
                                                g++;
                                            }
                                        }
                                        else
                                        {
                                            mov = 0;
                                            while (mov < par && asc[mov] != rmv)
                                            {
                                                mov++;
                                            }
                                            if (mov >= par)
                                            {
                                                asc[par] = rmv;
                                                par++;
                                                tds[26]++;
                                                g++;
                                            }
                                            j = alm[k + i + 1] / 4;
                                            if (j >= stf && j < md)
                                            {
                                                for (an2 = 0; an2 < an1; an2 += 2)
                                                {
                                                    if (alm[j + an2] == 2)
                                                    {
                                                        rmv = (j + an2) * 4 + 4;
                                                        if (alm[j + an2 + 1] < 1)
                                                        {
                                                            Delasc();
                                                            if (mov < par)
                                                            {
                                                                g++;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            mov = 0;
                                                            while (mov < par && asc[mov] != rmv)
                                                            {
                                                                mov++;
                                                            }
                                                            if (mov >= par)
                                                            {
                                                                asc[par] = rmv;
                                                                par++;
                                                                tds[26]++;
                                                                g++;
                                                            }
                                                        }
                                                    }
                                                    else if (alm[j + an2] < 0 || alm[j + an2] >= 7)
                                                    {
                                                        nonam[0]++;
                                                    }
                                                }
                                            }
                                        }
                                        i += 2;
                                    }
                                    if (g > 0)
                                    {
                                        minitxt.Text = "Fixed " + g + " Data.";
                                        Fixam();
                                        if (fnt == 1)
                                        {
                                            j = h / 4;
                                            mov = 0;
                                            ArtActList.Items.Clear();
                                            while (alm[j] != 0 && j < md)
                                            {
                                                EveListstring();
                                                ArtActList.Items.Add(rd1);
                                                j += 2;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        minitxt.Text = "No Effect.";
                                    }
                                    if (nonam[0] > 0)
                                    {
                                        TextBox textBox2 = minitxt;
                                        textBox2.Text = textBox2.Text + " Found " + nonam[0] + " Error.";
                                    }
                                }
                            }
                            else
                            {
                                alm[g] = 0;
                                Delasc();
                                if (mov < par)
                                {
                                    Fixam();
                                }
                                ArtActOffset.Text = "0x0";
                                ArtActList.Items.Clear();
                                minitxt.Text = "Fixed 1 Error.";
                            }
                        }
                        else if (h == 0)
                        {
                            Delasc();
                            if (mov < par)
                            {
                                Fixam();
                                minitxt.Text = "Fixed 1 Data.";
                            }
                            else
                            {
                                minitxt.Text = "No Effect.";
                            }
                        }
                        else
                        {
                            alm[g] = 0;
                            Delasc();
                            if (mov < par)
                            {
                                Fixam();
                            }
                            ArtActOffset.Text = "0x0";
                            ArtActList.Items.Clear();
                            minitxt.Text = "Fixed 1 Error.";
                        }
                        if (qe)
                        {
                            Qsave.Enabled = true;
                        }
                    }
                    else
                    {
                        minitxt.Text = "invalid Command.";
                    }
                }
                else
                {
                    minitxt.Text = "invalid Command.";
                }
            }
            else if (ArtSubaId.SelectedIndex != -1)
            {
                if (ArtSubaCbList.SelectedIndex != -1)
                {
                    g = ArtSubaCbList.SelectedIndex;
                    if (alm[artdt + 6] == 0 && alm[artdt + 7] != 0)
                    {
                        g++;
                    }
                    if (g < 3 && alm[artdt + 6 + g] != 0)
                    {
                        n = alm[artdt + 6 + g] / 4;
                    }
                    else
                    {
                        j = ArtDataList.Items.Count;
                        rd3 = ArtDataList.Items[13].ToString();
                        rd1 = rd3.Substring(6, 10);
                        if (rd1 != "SubAction ")
                        {
                            g++;
                        }
                        if (j > 12 + g)
                        {
                            rd2 = ArtDataList.Items[13 + g].ToString();
                            rd1 = rd2.Substring(2, 3);
                            j = Convert.ToInt32(rd1, 16);
                            n = alm[artdt + j / 4] / 4;
                        }
                        else
                        {
                            n = 0;
                        }
                    }
                    if (n < stf)
                    {
                        return;
                    }
                    rd1 = ArtSubaOffset.Text.Substring(2);
                    h = Convert.ToInt32(rd1, 16);
                    g = n + ArtSubaId.SelectedIndex;
                    rmv = g * 4;
                    if (h >= stf * 4 && h < tds[25])
                    {
                        if (h % 4 == 0)
                        {
                            k = h / 4;
                            if (alm[k] == 0 || alm[k] == -86052851)
                            {
                                if (alm[k] == 0)
                                {
                                    i = alm[g] / 4;
                                    alm[i] = -86052851;
                                    alm[i + 1] = -86052851;
                                }
                                alm[g] = 0;
                                Delasc();
                                ArtSubaList.Items.Clear();
                                ArtSubaOffset.Text = "0x0";
                                if (EvOffsetInterlock.Checked)
                                {
                                    for (i = stf; i < md; i++)
                                    {
                                        if (alm[i] == h)
                                        {
                                            DelILData();
                                        }
                                    }
                                }
                                minitxt.Text = "Empty Event List Cleared.";
                                Fixam();
                            }
                            else
                            {
                                fnt = 0;
                                g = 0;
                                nonam[0] = 0;
                                mov = 0;
                                while (mov < par && asc[mov] != rmv)
                                {
                                    mov++;
                                }
                                if (mov >= par)
                                {
                                    asc[par] = rmv;
                                    par++;
                                    tds[26]++;
                                    g++;
                                }
                                n = ArtActList.Items.Count * 2;
                                for (i = 0; i < n; i += 2)
                                {
                                    if (alm[k + i] == -86052851)
                                    {
                                        alm[k + i] = 0;
                                        g++;
                                        fnt = 1;
                                        if (alm[k + i + 1] == -86052851)
                                        {
                                            alm[k + i + 1] = 0;
                                        }
                                        break;
                                    }
                                }
                                i = 0;
                                while (i < n && alm[k + i] != 0)
                                {
                                    an1 = ((alm[k + i] >> 8) & 0xFF) * 2;
                                    rmv = (k + i) * 4 + 4;
                                    if (an1 == 0)
                                    {
                                        if (alm[k + i + 1] != 0)
                                        {
                                            alm[k + i + 1] = 0;
                                        }
                                        Delasc();
                                        if (mov < par)
                                        {
                                            g++;
                                        }
                                    }
                                    else
                                    {
                                        mov = 0;
                                        while (mov < par && asc[mov] != rmv)
                                        {
                                            mov++;
                                        }
                                        if (mov >= par)
                                        {
                                            asc[par] = rmv;
                                            par++;
                                            tds[26]++;
                                            g++;
                                        }
                                        j = alm[k + i + 1] / 4;
                                        if (j >= stf && j < md)
                                        {
                                            for (an2 = 0; an2 < an1; an2 += 2)
                                            {
                                                if (alm[j + an2] == 2)
                                                {
                                                    rmv = (j + an2) * 4 + 4;
                                                    if (alm[j + an2 + 1] < 1)
                                                    {
                                                        Delasc();
                                                        if (mov < par)
                                                        {
                                                            g++;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        mov = 0;
                                                        while (mov < par && asc[mov] != rmv)
                                                        {
                                                            mov++;
                                                        }
                                                        if (mov >= par)
                                                        {
                                                            asc[par] = rmv;
                                                            par++;
                                                            tds[26]++;
                                                            g++;
                                                        }
                                                    }
                                                }
                                                else if (alm[j + an2] < 0 || alm[j + an2] >= 7)
                                                {
                                                    nonam[0]++;
                                                }
                                            }
                                        }
                                    }
                                    i += 2;
                                }
                                if (g > 0)
                                {
                                    minitxt.Text = "Fixed " + g + " Data.";
                                    Fixam();
                                    if (fnt == 1)
                                    {
                                        j = h / 4;
                                        mov = 0;
                                        ArtSubaList.Items.Clear();
                                        while (alm[j] != 0 && j < md)
                                        {
                                            EveListstring();
                                            ArtSubaList.Items.Add(rd1);
                                            j += 2;
                                        }
                                    }
                                }
                                else
                                {
                                    minitxt.Text = "No Effect.";
                                }
                                if (nonam[0] > 0)
                                {
                                    TextBox textBox3 = minitxt;
                                    textBox3.Text = textBox3.Text + " Found " + nonam[0] + " Error.";
                                }
                            }
                        }
                        else
                        {
                            alm[g] = 0;
                            Delasc();
                            if (mov < par)
                            {
                                Fixam();
                            }
                            ArtSubaList.Items.Clear();
                            ArtSubaOffset.Text = "0x0";
                            minitxt.Text = "Fixed 1 Error.";
                        }
                    }
                    else if (h == 0)
                    {
                        Delasc();
                        if (mov < par)
                        {
                            Fixam();
                            minitxt.Text = "Fixed 1 Data.";
                        }
                        else
                        {
                            minitxt.Text = "No Effect.";
                        }
                    }
                    else
                    {
                        alm[g] = 0;
                        Delasc();
                        if (mov < par)
                        {
                            Fixam();
                        }
                        ArtSubaList.Items.Clear();
                        ArtSubaOffset.Text = "0x0";
                        minitxt.Text = "Fixed 1 Error.";
                    }
                    if (qe)
                    {
                        Qsave.Enabled = true;
                    }
                }
                else
                {
                    minitxt.Text = "invalid Command.";
                }
            }
            else
            {
                minitxt.Text = "invalid Command.";
            }
        }

        private void EvCopytxt_Click(object sender, EventArgs e)
        {
            rd1 = "";
            if (ModeChange.SelectedIndex == 1)
            {
                if (EvList.SelectedItems.Count > 0)
                {
                    j = EvList.Items.Count;
                    for (i = 0; i < j; i++)
                    {
                        if (EvList.GetSelected(i))
                        {
                            rd1 = rd1 + EvList.Items[i].ToString() + "\r\n";
                        }
                    }
                }
            }
            else if (ArticleTab.SelectedIndex == 0)
            {
                if (ArtActList.SelectedItems.Count > 0)
                {
                    j = ArtActList.Items.Count;
                    for (i = 0; i < j; i++)
                    {
                        if (ArtActList.GetSelected(i))
                        {
                            rd1 = rd1 + ArtActList.SelectedItems[i].ToString() + "\r\n";
                        }
                    }
                }
            }
            else if (ArtSubaList.SelectedItems.Count > 0)
            {
                j = ArtSubaList.Items.Count;
                for (i = 0; i < j; i++)
                {
                    if (ArtSubaList.GetSelected(i))
                    {
                        rd1 = rd1 + ArtSubaList.SelectedItems[i].ToString() + "\r\n";
                    }
                }
            }
            if (rd1 != "")
            {
                Clipboard.SetText(rd1);
            }
        }

        private void EvListMoveF_Click(object sender, EventArgs e)
        {
            if (ModeChange.SelectedIndex == 1)
            {
                if (EventTab.SelectedIndex == 0)
                {
                    if (EvSpOffset.Text.Length > 2)
                    {
                        if (EvSpCbID.SelectedIndex == -1)
                        {
                            EvSpCbID.SelectedIndex = aid;
                        }
                        if (EvSpCbList.SelectedIndex == -1)
                        {
                            EvSpCbList.SelectedIndex = alist;
                        }
                        rd1 = EvSpOffset.Text.Substring(2);
                    }
                    else
                    {
                        rd1 = "";
                    }
                }
                else if (EventTab.SelectedIndex == 1)
                {
                    if (EvSubaOffset.Text.Length > 2)
                    {
                        if (EvSubaCbID.SelectedIndex == -1)
                        {
                            EvSubaCbID.SelectedIndex = sid;
                        }
                        if (EvSubaCbList.SelectedIndex == -1)
                        {
                            EvSubaCbList.SelectedIndex = slist;
                        }
                        rd1 = EvSubaOffset.Text.Substring(2);
                    }
                    else
                    {
                        rd1 = "";
                    }
                }
                else if (EventTab.SelectedIndex == 3)
                {
                    if (EvOvrOffset.Text.Length > 2)
                    {
                        if (EvOvrId.SelectedIndex != -1)
                        {
                            if (EvOvrCbList.SelectedIndex != -1)
                            {
                                rd1 = EvOvrOffset.Text.Substring(2);
                            }
                            else
                            {
                                rd1 = "";
                            }
                        }
                        else
                        {
                            rd1 = "";
                        }
                    }
                    else
                    {
                        rd1 = "";
                    }
                }
                else if (EvRnOffset.Text.Length > 5)
                {
                    rd1 = EvRnOffset.Text.Substring(2);
                }
                else
                {
                    rd1 = "";
                }
                if (rd1.Length <= 3)
                {
                    return;
                }
                h = Convert.ToInt32(rd1, 16);
                if (h < stf * 4 || h >= tds[25] || h % 4 != 0)
                {
                    return;
                }
                k = h / 4;
                if (EventTab.SelectedIndex == 0)
                {
                    if (EvSubaCbList.Items.Count < 4)
                    {
                        if (EvSpCbList.SelectedIndex == 0)
                        {
                            n = alm[dat + 4] / 4;
                        }
                        else
                        {
                            n = alm[dat + 5] / 4;
                        }
                    }
                    else if (EvSpCbList.SelectedIndex == 0)
                    {
                        n = alm[dat + 9] / 4;
                    }
                    else
                    {
                        n = alm[dat + 10] / 4;
                    }
                    i = n + EvSpCbID.SelectedIndex;
                }
                else if (EventTab.SelectedIndex == 1)
                {
                    g = EvSubaCbList.SelectedIndex;
                    if (g < 4)
                    {
                        n = alm[dat + 12 + g] / 4;
                    }
                    else
                    {
                        n = alm[dat + 27 + g] / 4;
                    }
                    i = n + EvSubaCbID.SelectedIndex;
                }
                else if (EventTab.SelectedIndex == 3)
                {
                    if (EvOvrCbList.SelectedIndex == 2)
                    {
                        i = alm[dat + 11] / 4 + EvOvrId.SelectedIndex;
                    }
                    else
                    {
                        if (EvOvrCbList.SelectedIndex == 0)
                        {
                            n = alm[dat + 20] / 4 + 1;
                        }
                        else
                        {
                            n = alm[dat + 21] / 4 + 1;
                        }
                        i = n + EvOvrId.SelectedIndex * 2;
                    }
                }
                else
                {
                    i = 0;
                }
                if (alm[k] == 0 || alm[k] == -86052851)
                {
                    if (alm[k] == 0)
                    {
                        alm[k] = -86052851;
                        alm[k + 1] = -86052851;
                    }
                    else
                    {
                        EvList.Items.Clear();
                    }
                    if (i > 0)
                    {
                        alm[i] = 0;
                        rmv = i * 4;
                        Delasc();
                    }
                    if (EventTab.SelectedIndex == 0)
                    {
                        EvSpOffset.Text = "0x0";
                    }
                    else if (EventTab.SelectedIndex == 1)
                    {
                        EvSubaOffset.Text = "0x0";
                    }
                    else if (EventTab.SelectedIndex == 3)
                    {
                        EvOvrOffset.Text = "0x0";
                    }
                    else
                    {
                        rd1 = EvRnOffset.Text;
                        EvRnOffset.Text = "0x0";
                        if (EvOffsetInterlock.Checked)
                        {
                            if (EvSpOffset.Text == rd1)
                            {
                                EvSpOffset.Text = "0x0";
                            }
                            if (EvSubaOffset.Text == rd1)
                            {
                                EvSubaOffset.Text = "0x0";
                            }
                            if (EvOvrOffset.Text == rd1)
                            {
                                EvOvrOffset.Text = "0x0";
                            }
                        }
                    }
                    if (EvOffsetInterlock.Checked)
                    {
                        for (i = stf; i < md; i++)
                        {
                            if (alm[i] == h)
                            {
                                DelILData();
                            }
                        }
                        rd2 = "0x" + rd1;
                        if (EvSpOffset.Text == rd2)
                        {
                            EvSpOffset.Text = "0x0";
                        }
                        if (EvSubaOffset.Text == rd2)
                        {
                            EvSubaOffset.Text = "0x0";
                        }
                        if (EvOvrOffset.Text == rd2)
                        {
                            EvOvrOffset.Text = "0x0";
                        }
                    }
                    minitxt.Text = "Empty Event List Cleared.";
                    Fixam();
                    if (qe)
                    {
                        Qsave.Enabled = true;
                    }
                    return;
                }
                g = EvList.Items.Count * 2;
                ListMoveF();
                if (j < k)
                {
                    k = j * 4;
                    if (i >= stf)
                    {
                        alm[i] = k;
                    }
                    if (EventTab.SelectedIndex == 0)
                    {
                        EvSpOffset.Text = "0x" + k.ToString("X");
                    }
                    else if (EventTab.SelectedIndex == 1)
                    {
                        EvSubaOffset.Text = "0x" + k.ToString("X");
                    }
                    else if (EventTab.SelectedIndex == 3)
                    {
                        EvOvrOffset.Text = "0x" + k.ToString("X");
                    }
                    else
                    {
                        rd1 = EvRnOffset.Text;
                        rd2 = "0x" + k.ToString("X");
                        EvRnOffset.Text = rd2;
                        if (EvOffsetInterlock.Checked)
                        {
                            if (EvSpOffset.Text == rd1)
                            {
                                EvSpOffset.Text = rd2;
                            }
                            if (EvSubaOffset.Text == rd1)
                            {
                                EvSubaOffset.Text = rd2;
                            }
                            if (EvOvrOffset.Text == rd1)
                            {
                                EvOvrOffset.Text = rd2;
                            }
                            if (ArtActOffset.Text == rd1)
                            {
                                ArtActOffset.Text = rd2;
                            }
                            if (ArtSubaOffset.Text == rd1)
                            {
                                ArtSubaOffset.Text = rd2;
                            }
                        }
                    }
                    if (EvOffsetInterlock.Checked)
                    {
                        i = EvList.Items.Count;
                        g = h + i * 8;
                        for (i = stf; i < md; i++)
                        {
                            if (alm[i] >= h && alm[i] <= g)
                            {
                                n = i * 4;
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == n)
                                    {
                                        if (alm[i] == h)
                                        {
                                            alm[i] = k;
                                            break;
                                        }
                                        m = alm[i] - h;
                                        if (m % 8 == 0)
                                        {
                                            alm[i] = k + m;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                if (an5 == 1)
                {
                    minitxt.Text = "Moved 1 Data.";
                    Fixam();
                    if (qe)
                    {
                        Qsave.Enabled = true;
                    }
                }
                else
                {
                    minitxt.Text = "No Moved.";
                }
            }
            else if (ArticleTab.SelectedIndex == 0)
            {
                if (ArtActOffset.Text.Length <= 5 || ArtActId.SelectedIndex == -1)
                {
                    return;
                }
                rd1 = ArtActOffset.Text.Substring(2);
                h = Convert.ToInt32(rd1, 16);
                if (h >= stf * 4 && h < tds[25] && h % 4 == 0)
                {
                    k = h / 4;
                    if (!ArtActCbList.Visible)
                    {
                        n = alm[artdt + 5] / 4;
                    }
                    else if (ArtActCbList.SelectedIndex == 0)
                    {
                        n = alm[artdt + 5] / 4;
                    }
                    else if (ArtActCbList.SelectedIndex == 1)
                    {
                        n = alm[artdt + 13] / 4;
                    }
                    else
                    {
                        n = 0;
                    }
                    if (n < stf)
                    {
                        return;
                    }
                    i = ArtActId.SelectedIndex;
                    g = n + i;
                    if (alm[k] == 0 || alm[k] == -86052851)
                    {
                        if (alm[k] == 0)
                        {
                            j = alm[g] / 4;
                            alm[j] = -86052851;
                            alm[j + 1] = -86052851;
                        }
                        else
                        {
                            ArtActList.Items.Clear();
                        }
                        alm[g] = 0;
                        rmv = g * 4;
                        Delasc();
                        ArtActOffset.Text = "0x0";
                        if (EvOffsetInterlock.Checked)
                        {
                            for (i = stf; i < md; i++)
                            {
                                if (alm[i] == h)
                                {
                                    DelILData();
                                }
                            }
                        }
                        minitxt.Text = "Empty Event List Cleared.";
                        Fixam();
                        if (qe)
                        {
                            Qsave.Enabled = true;
                        }
                        return;
                    }
                    i = n + ArtActId.SelectedIndex;
                    g = ArtActList.Items.Count * 2;
                    ListMoveF();
                    if (j < k)
                    {
                        k = j * 4;
                        alm[i] = k;
                        ArtActOffset.Text = "0x" + k.ToString("X");
                        if (EvOffsetInterlock.Checked)
                        {
                            i = ArtActList.Items.Count;
                            g = h + i * 8;
                            for (i = stf; i < md; i++)
                            {
                                if (alm[i] >= h && alm[i] <= g)
                                {
                                    n = i * 4;
                                    for (mov = 0; mov < par; mov++)
                                    {
                                        if (asc[mov] == n)
                                        {
                                            if (alm[i] == h)
                                            {
                                                alm[i] = k;
                                                break;
                                            }
                                            m = alm[i] - h;
                                            if (m % 8 == 0)
                                            {
                                                alm[i] = k + m;
                                            }
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (an5 == 1)
                    {
                        minitxt.Text = "Moved 1 Data.";
                        Fixam();
                        if (qe)
                        {
                            Qsave.Enabled = true;
                        }
                    }
                    else
                    {
                        minitxt.Text = "No Moved.";
                    }
                }
                else
                {
                    minitxt.Text = "invalid Command.";
                }
            }
            else
            {
                if (ArtSubaOffset.Text.Length <= 5 || ArtSubaId.SelectedIndex == -1 || ArtSubaCbList.SelectedIndex == -1)
                {
                    return;
                }
                rd1 = ArtSubaOffset.Text.Substring(2);
                h = Convert.ToInt32(rd1, 16);
                if (h >= stf * 4 && h < tds[25] && h % 4 == 0)
                {
                    k = h / 4;
                    g = ArtSubaCbList.SelectedIndex;
                    if (alm[artdt + 6] == 0 && alm[artdt + 7] != 0)
                    {
                        g++;
                    }
                    if (g < 3 && alm[artdt + 6 + g] != 0)
                    {
                        n = alm[artdt + 6 + g] / 4;
                    }
                    else
                    {
                        j = ArtDataList.Items.Count;
                        rd3 = ArtDataList.Items[13].ToString();
                        rd1 = rd3.Substring(6, 10);
                        if (rd1 != "SubAction ")
                        {
                            g++;
                        }
                        if (j > 12 + g)
                        {
                            rd2 = ArtDataList.Items[13 + g].ToString();
                            rd1 = rd2.Substring(2, 3);
                            j = Convert.ToInt32(rd1, 16);
                            n = alm[artdt + j / 4] / 4;
                        }
                    }
                    if (alm[k] == 0 || alm[k] == -86052851)
                    {
                        g = n + ArtSubaId.SelectedIndex;
                        if (alm[k] == 0)
                        {
                            i = alm[g] / 4;
                            alm[i] = -86052851;
                            alm[i + 1] = -86052851;
                        }
                        else
                        {
                            ArtSubaList.Items.Clear();
                        }
                        alm[g] = 0;
                        rmv = g * 4;
                        Delasc();
                        ArtSubaList.Items.Clear();
                        ArtSubaOffset.Text = "0x0";
                        if (EvOffsetInterlock.Checked)
                        {
                            for (i = stf; i < md; i++)
                            {
                                if (alm[i] == h)
                                {
                                    DelILData();
                                }
                            }
                        }
                        minitxt.Text = "Empty Event List Cleared.";
                        Fixam();
                        if (qe)
                        {
                            Qsave.Enabled = true;
                        }
                        return;
                    }
                    i = n + ArtSubaId.SelectedIndex;
                    g = ArtSubaList.Items.Count * 2;
                    ListMoveF();
                    if (j < k)
                    {
                        k = j * 4;
                        alm[i] = k;
                        ArtSubaOffset.Text = "0x" + k.ToString("X");
                        if (EvOffsetInterlock.Checked)
                        {
                            i = ArtSubaList.Items.Count;
                            g = h + i * 8;
                            for (i = stf; i < md; i++)
                            {
                                if (alm[i] >= h && alm[i] <= g)
                                {
                                    n = i * 4;
                                    for (mov = 0; mov < par; mov++)
                                    {
                                        if (asc[mov] == n)
                                        {
                                            if (alm[i] == h)
                                            {
                                                alm[i] = k;
                                                break;
                                            }
                                            m = alm[i] - h;
                                            if (m % 8 == 0)
                                            {
                                                alm[i] = k + m;
                                            }
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (an5 == 1)
                    {
                        minitxt.Text = "Moved 1 Data.";
                        Fixam();
                        if (qe)
                        {
                            Qsave.Enabled = true;
                        }
                    }
                    else
                    {
                        minitxt.Text = "No Moved.";
                    }
                }
                else
                {
                    minitxt.Text = "invalid Command.";
                }
            }
        }

        private void EvListMoveB_Click(object sender, EventArgs e)
        {
            if (ModeChange.SelectedIndex == 1)
            {
                if (EventTab.SelectedIndex == 0)
                {
                    if (EvSpOffset.Text.Length > 2)
                    {
                        if (EvSpCbID.SelectedIndex == -1)
                        {
                            EvSpCbID.SelectedIndex = aid;
                        }
                        if (EvSpCbList.SelectedIndex == -1)
                        {
                            EvSpCbList.SelectedIndex = alist;
                        }
                        rd1 = EvSpOffset.Text.Substring(2);
                    }
                    else
                    {
                        rd1 = "";
                    }
                }
                else if (EventTab.SelectedIndex == 1)
                {
                    if (EvSubaOffset.Text.Length > 2)
                    {
                        if (EvSubaCbID.SelectedIndex == -1)
                        {
                            EvSubaCbID.SelectedIndex = sid;
                        }
                        if (EvSubaCbList.SelectedIndex == -1)
                        {
                            EvSubaCbList.SelectedIndex = slist;
                        }
                        rd1 = EvSubaOffset.Text.Substring(2);
                    }
                    else
                    {
                        rd1 = "";
                    }
                }
                else if (EventTab.SelectedIndex == 3)
                {
                    if (EvOvrOffset.Text.Length > 2)
                    {
                        if (EvOvrId.SelectedIndex != -1)
                        {
                            if (EvOvrCbList.SelectedIndex != -1)
                            {
                                rd1 = EvOvrOffset.Text.Substring(2);
                            }
                            else
                            {
                                rd1 = "";
                            }
                        }
                        else
                        {
                            rd1 = "";
                        }
                    }
                    else
                    {
                        rd1 = "";
                    }
                }
                else if (EvRnOffset.Text.Length > 5)
                {
                    rd1 = EvRnOffset.Text.Substring(2);
                }
                else
                {
                    rd1 = "";
                }
                if (rd1.Length <= 3)
                {
                    return;
                }
                h = Convert.ToInt32(rd1, 16);
                if (h < stf * 4 || h >= tds[25] || h % 4 != 0)
                {
                    return;
                }
                k = h / 4;
                if (EventTab.SelectedIndex == 0)
                {
                    if (EvSubaCbList.Items.Count < 4)
                    {
                        if (EvSpCbList.SelectedIndex == 0)
                        {
                            n = alm[dat + 4] / 4;
                        }
                        else
                        {
                            n = alm[dat + 5] / 4;
                        }
                    }
                    else if (EvSpCbList.SelectedIndex == 0)
                    {
                        n = alm[dat + 9] / 4;
                    }
                    else
                    {
                        n = alm[dat + 10] / 4;
                    }
                    i = n + EvSpCbID.SelectedIndex;
                }
                else if (EventTab.SelectedIndex == 1)
                {
                    g = EvSubaCbList.SelectedIndex;
                    if (g < 4)
                    {
                        n = alm[dat + 12 + g] / 4;
                    }
                    else
                    {
                        n = alm[dat + 27 + g] / 4;
                    }
                    i = n + EvSubaCbID.SelectedIndex;
                }
                else if (EventTab.SelectedIndex == 3)
                {
                    if (EvOvrCbList.SelectedIndex == 2)
                    {
                        i = alm[dat + 11] / 4 + EvOvrId.SelectedIndex;
                    }
                    else
                    {
                        if (EvOvrCbList.SelectedIndex == 0)
                        {
                            n = alm[dat + 20] / 4 + 1;
                        }
                        else
                        {
                            n = alm[dat + 21] / 4 + 1;
                        }
                        i = n + EvOvrId.SelectedIndex * 2;
                    }
                }
                else
                {
                    i = 0;
                }
                if (alm[k] == 0 || alm[k] == -86052851)
                {
                    if (alm[k] == 0)
                    {
                        alm[k] = -86052851;
                        alm[k + 1] = -86052851;
                    }
                    else
                    {
                        EvList.Items.Clear();
                    }
                    if (i > 0)
                    {
                        alm[i] = 0;
                        rmv = i * 4;
                        Delasc();
                    }
                    if (EventTab.SelectedIndex == 0)
                    {
                        EvSpOffset.Text = "0x0";
                    }
                    else if (EventTab.SelectedIndex == 1)
                    {
                        EvSubaOffset.Text = "0x0";
                    }
                    else if (EventTab.SelectedIndex == 3)
                    {
                        EvOvrOffset.Text = "0x0";
                    }
                    else
                    {
                        rd1 = EvRnOffset.Text;
                        EvRnOffset.Text = "0x0";
                        if (EvOffsetInterlock.Checked)
                        {
                            if (EvSpOffset.Text == rd1)
                            {
                                EvSpOffset.Text = "0x0";
                            }
                            if (EvSubaOffset.Text == rd1)
                            {
                                EvSubaOffset.Text = "0x0";
                            }
                            if (EvOvrOffset.Text == rd1)
                            {
                                EvOvrOffset.Text = "0x0";
                            }
                        }
                    }
                    if (EvOffsetInterlock.Checked)
                    {
                        for (i = stf; i < md; i++)
                        {
                            if (alm[i] == h)
                            {
                                DelILData();
                            }
                        }
                        rd2 = "0x" + rd1;
                        if (EvSpOffset.Text == rd2)
                        {
                            EvSpOffset.Text = "0x0";
                        }
                        if (EvSubaOffset.Text == rd2)
                        {
                            EvSubaOffset.Text = "0x0";
                        }
                        if (EvOvrOffset.Text == rd2)
                        {
                            EvOvrOffset.Text = "0x0";
                        }
                    }
                    minitxt.Text = "Empty Event List Cleared.";
                    Fixam();
                }
                else
                {
                    g = EvList.Items.Count * 2;
                    ListMoveB();
                    k = j * 4;
                    if (i >= stf)
                    {
                        alm[i] = k;
                    }
                    if (EventTab.SelectedIndex == 0)
                    {
                        EvSpOffset.Text = "0x" + k.ToString("X");
                    }
                    else if (EventTab.SelectedIndex == 1)
                    {
                        EvSubaOffset.Text = "0x" + k.ToString("X");
                    }
                    else if (EventTab.SelectedIndex == 3)
                    {
                        EvOvrOffset.Text = "0x" + k.ToString("X");
                    }
                    else
                    {
                        rd1 = EvRnOffset.Text;
                        rd2 = "0x" + k.ToString("X");
                        EvRnOffset.Text = rd2;
                        if (EvOffsetInterlock.Checked)
                        {
                            if (EvSpOffset.Text == rd1)
                            {
                                EvSpOffset.Text = rd2;
                            }
                            if (EvSubaOffset.Text == rd1)
                            {
                                EvSubaOffset.Text = rd2;
                            }
                            if (EvOvrOffset.Text == rd1)
                            {
                                EvOvrOffset.Text = rd2;
                            }
                            if (ArtActOffset.Text == rd1)
                            {
                                ArtActOffset.Text = rd2;
                            }
                            if (ArtSubaOffset.Text == rd1)
                            {
                                ArtSubaOffset.Text = rd2;
                            }
                        }
                    }
                    if (EvOffsetInterlock.Checked)
                    {
                        i = EvList.Items.Count;
                        g = h + i * 8;
                        for (i = stf; i < md; i++)
                        {
                            if (alm[i] >= h && alm[i] <= g)
                            {
                                n = i * 4;
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == n)
                                    {
                                        if (alm[i] == h)
                                        {
                                            alm[i] = k;
                                            break;
                                        }
                                        m = alm[i] - h;
                                        if (m % 8 == 0)
                                        {
                                            alm[i] = k + m;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    Fixam();
                    minitxt.Text = "Moved 1 Data.";
                }
                if (qe)
                {
                    Qsave.Enabled = true;
                }
            }
            else if (ArticleTab.SelectedIndex == 0)
            {
                if (ArtActOffset.Text.Length <= 5 || ArtActId.SelectedIndex == -1)
                {
                    return;
                }
                rd1 = ArtActOffset.Text.Substring(2);
                h = Convert.ToInt32(rd1, 16);
                if (h >= stf * 4 && h < tds[25] && h % 4 == 0)
                {
                    k = h / 4;
                    if (!ArtActCbList.Visible)
                    {
                        n = alm[artdt + 5] / 4;
                    }
                    else if (ArtActCbList.SelectedIndex == 0)
                    {
                        n = alm[artdt + 5] / 4;
                    }
                    else if (ArtActCbList.SelectedIndex == 1)
                    {
                        n = alm[artdt + 13] / 4;
                    }
                    else
                    {
                        n = 0;
                    }
                    if (n < stf)
                    {
                        return;
                    }
                    i = ArtActId.SelectedIndex;
                    g = n + i;
                    if (alm[k] == 0 || alm[k] == -86052851)
                    {
                        if (alm[k] == 0)
                        {
                            j = alm[g] / 4;
                            alm[j] = -86052851;
                            alm[j + 1] = -86052851;
                        }
                        else
                        {
                            ArtActList.Items.Clear();
                        }
                        alm[g] = 0;
                        rmv = g * 4;
                        Delasc();
                        ArtActOffset.Text = "0x0";
                        if (EvOffsetInterlock.Checked)
                        {
                            for (i = stf; i < md; i++)
                            {
                                if (alm[i] == h)
                                {
                                    DelILData();
                                }
                            }
                        }
                        minitxt.Text = "Empty Event List Cleared.";
                        Fixam();
                    }
                    else
                    {
                        i = n + ArtActId.SelectedIndex;
                        g = ArtActList.Items.Count * 2;
                        ListMoveB();
                        k = j * 4;
                        alm[i] = k;
                        ArtActOffset.Text = "0x" + k.ToString("X");
                        if (EvOffsetInterlock.Checked)
                        {
                            i = ArtActList.Items.Count;
                            g = h + i * 8;
                            for (i = stf; i < md; i++)
                            {
                                if (alm[i] >= h && alm[i] <= g)
                                {
                                    n = i * 4;
                                    for (mov = 0; mov < par; mov++)
                                    {
                                        if (asc[mov] == n)
                                        {
                                            if (alm[i] == h)
                                            {
                                                alm[i] = k;
                                                break;
                                            }
                                            m = alm[i] - h;
                                            if (m % 8 == 0)
                                            {
                                                alm[i] = k + m;
                                            }
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        Fixam();
                        minitxt.Text = "Moved 1 Data.";
                    }
                    if (qe)
                    {
                        Qsave.Enabled = true;
                    }
                }
                else
                {
                    minitxt.Text = "invalid Command.";
                }
            }
            else
            {
                if (ArtSubaOffset.Text.Length <= 5 || ArtSubaId.SelectedIndex == -1 || ArtSubaCbList.SelectedIndex == -1)
                {
                    return;
                }
                rd1 = ArtSubaOffset.Text.Substring(2);
                h = Convert.ToInt32(rd1, 16);
                if (h >= stf * 4 && h < tds[25] && h % 4 == 0)
                {
                    k = h / 4;
                    g = ArtSubaCbList.SelectedIndex;
                    if (alm[artdt + 6] == 0 && alm[artdt + 7] != 0)
                    {
                        g++;
                    }
                    if (g < 3 && alm[artdt + 6 + g] != 0)
                    {
                        n = alm[artdt + 6 + g] / 4;
                    }
                    else
                    {
                        j = ArtDataList.Items.Count;
                        rd3 = ArtDataList.Items[13].ToString();
                        rd1 = rd3.Substring(6, 10);
                        if (rd1 != "SubAction ")
                        {
                            g++;
                        }
                        if (j > 12 + g)
                        {
                            rd2 = ArtDataList.Items[13 + g].ToString();
                            rd1 = rd2.Substring(2, 3);
                            j = Convert.ToInt32(rd1, 16);
                            n = alm[artdt + j / 4] / 4;
                        }
                    }
                    if (alm[k] == 0 || alm[k] == -86052851)
                    {
                        g = n + ArtSubaId.SelectedIndex;
                        if (alm[k] == 0)
                        {
                            i = alm[g] / 4;
                            alm[i] = -86052851;
                            alm[i + 1] = -86052851;
                        }
                        else
                        {
                            ArtSubaList.Items.Clear();
                        }
                        alm[g] = 0;
                        rmv = g * 4;
                        Delasc();
                        ArtSubaList.Items.Clear();
                        ArtSubaOffset.Text = "0x0";
                        if (EvOffsetInterlock.Checked)
                        {
                            for (i = stf; i < md; i++)
                            {
                                if (alm[i] == h)
                                {
                                    DelILData();
                                }
                            }
                        }
                        minitxt.Text = "Empty Event List Cleared.";
                        Fixam();
                    }
                    else
                    {
                        i = n + ArtSubaId.SelectedIndex;
                        g = ArtSubaList.Items.Count * 2;
                        ListMoveB();
                        k = j * 4;
                        alm[i] = k;
                        ArtSubaOffset.Text = "0x" + k.ToString("X");
                        if (EvOffsetInterlock.Checked)
                        {
                            i = ArtSubaList.Items.Count;
                            g = h + i * 8;
                            for (i = stf; i < md; i++)
                            {
                                if (alm[i] >= h && alm[i] <= g)
                                {
                                    n = i * 4;
                                    for (mov = 0; mov < par; mov++)
                                    {
                                        if (asc[mov] == n)
                                        {
                                            if (alm[i] == h)
                                            {
                                                alm[i] = k;
                                                break;
                                            }
                                            m = alm[i] - h;
                                            if (m % 8 == 0)
                                            {
                                                alm[i] = k + m;
                                            }
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        Fixam();
                        minitxt.Text = "Moved 1 Data.";
                    }
                    if (qe)
                    {
                        Qsave.Enabled = true;
                    }
                }
                else
                {
                    minitxt.Text = "invalid Command.";
                }
            }
        }

        private void EvParMoveF_Click(object sender, EventArgs e)
        {
            if (ModeChange.SelectedIndex == 1)
            {
                if (EvList.SelectedIndex == -1)
                {
                    return;
                }
                if (EventTab.SelectedIndex == 0)
                {
                    rd1 = EvSpOffset.Text.Substring(2);
                }
                else if (EventTab.SelectedIndex == 1)
                {
                    rd1 = EvSubaOffset.Text.Substring(2);
                }
                else if (EventTab.SelectedIndex == 3)
                {
                    rd1 = EvOvrOffset.Text.Substring(2);
                }
                else
                {
                    rd1 = EvRnOffset.Text.Substring(2);
                }
                h = Convert.ToInt32(rd1, 16);
                j = h / 4;
                g = EvList.Items.Count;
                an5 = 0;
                for (i = 0; i < g; i++)
                {
                    if (EvList.GetSelected(i))
                    {
                        ParMoveF();
                    }
                }
                if (an5 > 0)
                {
                    minitxt.Text = "Moved " + an5 + " Data.";
                    Fixam();
                    if (qe)
                    {
                        Qsave.Enabled = true;
                    }
                }
                else
                {
                    minitxt.Text = "No Moved.";
                }
            }
            else if (ArticleTab.SelectedIndex == 0)
            {
                if (ArtActList.SelectedIndex == -1)
                {
                    return;
                }
                rd1 = ArtActOffset.Text.Substring(2);
                h = Convert.ToInt32(rd1, 16);
                j = h / 4;
                g = ArtActList.Items.Count;
                an5 = 0;
                for (i = 0; i < g; i++)
                {
                    if (ArtActList.GetSelected(i))
                    {
                        ParMoveF();
                    }
                }
                if (an5 > 0)
                {
                    minitxt.Text = "Moved " + an5 + " Data.";
                    Fixam();
                    if (qe)
                    {
                        Qsave.Enabled = true;
                    }
                }
                else
                {
                    minitxt.Text = "No Moved.";
                }
            }
            else
            {
                if (ArtSubaList.SelectedIndex == -1)
                {
                    return;
                }
                rd1 = ArtSubaOffset.Text.Substring(2);
                h = Convert.ToInt32(rd1, 16);
                j = h / 4;
                g = ArtSubaList.Items.Count;
                an5 = 0;
                for (i = 0; i < g; i++)
                {
                    if (ArtSubaList.GetSelected(i))
                    {
                        ParMoveF();
                    }
                }
                if (an5 > 0)
                {
                    minitxt.Text = "Moved " + an5 + " Data.";
                    Fixam();
                    if (qe)
                    {
                        Qsave.Enabled = true;
                    }
                }
                else
                {
                    minitxt.Text = "No Moved.";
                }
            }
        }

        private void EvParMoveB_Click(object sender, EventArgs e)
        {
            if (ModeChange.SelectedIndex == 1)
            {
                if (EvList.SelectedIndex == -1)
                {
                    return;
                }
                if (EventTab.SelectedIndex == 0)
                {
                    rd1 = EvSpOffset.Text.Substring(2);
                }
                else if (EventTab.SelectedIndex == 1)
                {
                    rd1 = EvSubaOffset.Text.Substring(2);
                }
                else if (EventTab.SelectedIndex == 3)
                {
                    rd1 = EvOvrOffset.Text.Substring(2);
                }
                else
                {
                    rd1 = EvRnOffset.Text.Substring(2);
                }
                h = Convert.ToInt32(rd1, 16);
                j = h / 4;
                g = EvList.Items.Count;
                an5 = 0;
                for (i = 0; i < g; i++)
                {
                    if (EvList.GetSelected(i))
                    {
                        ParMoveB();
                    }
                }
                if (an5 > 0)
                {
                    minitxt.Text = "Moved " + an5 + " Data.";
                    Fixam();
                    if (qe)
                    {
                        Qsave.Enabled = true;
                    }
                }
                else
                {
                    minitxt.Text = "No Moved.";
                }
            }
            else if (ArticleTab.SelectedIndex == 0)
            {
                if (ArtActList.SelectedIndex == -1)
                {
                    return;
                }
                rd1 = ArtActOffset.Text.Substring(2);
                h = Convert.ToInt32(rd1, 16);
                j = h / 4;
                g = ArtActList.Items.Count;
                an5 = 0;
                for (i = 0; i < g; i++)
                {
                    if (ArtActList.GetSelected(i))
                    {
                        ParMoveB();
                    }
                }
                if (an5 > 0)
                {
                    minitxt.Text = "Moved " + an5 + " Data.";
                    Fixam();
                    if (qe)
                    {
                        Qsave.Enabled = true;
                    }
                }
                else
                {
                    minitxt.Text = "No Moved.";
                }
            }
            else
            {
                if (ArtSubaList.SelectedIndex == -1)
                {
                    return;
                }
                rd1 = ArtSubaOffset.Text.Substring(2);
                h = Convert.ToInt32(rd1, 16);
                j = h / 4;
                g = ArtSubaList.Items.Count;
                an5 = 0;
                for (i = 0; i < g; i++)
                {
                    if (ArtSubaList.GetSelected(i))
                    {
                        ParMoveB();
                    }
                }
                if (an5 > 0)
                {
                    minitxt.Text = "Moved " + an5 + " Data.";
                    Fixam();
                }
                else
                {
                    minitxt.Text = "No Moved.";
                }
            }
        }

        private void EvMoveOffset_Click(object sender, EventArgs e)
        {
            if (ModeChange.SelectedIndex == 1)
            {
                if (EventTab.SelectedIndex == 0)
                {
                    if (EvSpOffset.Text.Length > 2)
                    {
                        if (EvSpCbID.SelectedIndex == -1)
                        {
                            EvSpCbID.SelectedIndex = aid;
                        }
                        if (EvSpCbList.SelectedIndex == -1)
                        {
                            EvSpCbList.SelectedIndex = alist;
                        }
                        rd1 = EvSpOffset.Text.Substring(2);
                    }
                    else
                    {
                        rd1 = "";
                    }
                }
                else if (EventTab.SelectedIndex == 1)
                {
                    if (EvSubaOffset.Text.Length > 2)
                    {
                        if (EvSubaCbID.SelectedIndex == -1)
                        {
                            EvSubaCbID.SelectedIndex = sid;
                        }
                        if (EvSubaCbList.SelectedIndex == -1)
                        {
                            EvSubaCbList.SelectedIndex = slist;
                        }
                        rd1 = EvSubaOffset.Text.Substring(2);
                    }
                    else
                    {
                        rd1 = "";
                    }
                }
                else if (EventTab.SelectedIndex == 3)
                {
                    if (EvOvrOffset.Text.Length > 2)
                    {
                        if (EvOvrId.SelectedIndex != -1)
                        {
                            if (EvOvrCbList.SelectedIndex != -1)
                            {
                                rd1 = EvOvrOffset.Text.Substring(2);
                            }
                            else
                            {
                                rd1 = "";
                            }
                        }
                        else
                        {
                            rd1 = "";
                        }
                    }
                    else
                    {
                        rd1 = "";
                    }
                }
                else if (EvRnOffset.Text.Length > 5)
                {
                    rd1 = EvRnOffset.Text.Substring(2);
                }
                else
                {
                    rd1 = "";
                }
                if (rd1.Length > 3)
                {
                    h = Convert.ToInt32(rd1, 16);
                    if (h >= stf * 4 && h < tds[25] && h % 4 == 0)
                    {
                        k = h / 4;
                        if (EventTab.SelectedIndex == 0)
                        {
                            if (EvSubaCbList.Items.Count < 4)
                            {
                                if (EvSpCbList.SelectedIndex == 0)
                                {
                                    n = alm[dat + 4] / 4;
                                }
                                else
                                {
                                    n = alm[dat + 5] / 4;
                                }
                            }
                            else if (EvSpCbList.SelectedIndex == 0)
                            {
                                n = alm[dat + 9] / 4;
                            }
                            else
                            {
                                n = alm[dat + 10] / 4;
                            }
                            i = n + EvSpCbID.SelectedIndex;
                        }
                        else if (EventTab.SelectedIndex == 1)
                        {
                            g = EvSubaCbList.SelectedIndex;
                            if (g < 4)
                            {
                                n = alm[dat + 12 + g] / 4;
                            }
                            else
                            {
                                n = alm[dat + 27 + g] / 4;
                            }
                            i = n + EvSubaCbID.SelectedIndex;
                        }
                        else if (EventTab.SelectedIndex == 3)
                        {
                            if (EvOvrCbList.SelectedIndex == 2)
                            {
                                i = alm[dat + 11] / 4 + EvOvrId.SelectedIndex;
                            }
                            else
                            {
                                if (EvOvrCbList.SelectedIndex == 0)
                                {
                                    n = alm[dat + 20] / 4 + 1;
                                }
                                else
                                {
                                    n = alm[dat + 21] / 4 + 1;
                                }
                                i = n + EvOvrId.SelectedIndex * 2;
                            }
                        }
                        else
                        {
                            i = 0;
                        }
                        if (alm[k] == 0 || alm[k] == -86052851)
                        {
                            if (alm[k] == 0)
                            {
                                alm[k] = -86052851;
                                alm[k + 1] = -86052851;
                            }
                            else
                            {
                                EvList.Items.Clear();
                            }
                            if (i > 0)
                            {
                                alm[i] = 0;
                                rmv = i * 4;
                                Delasc();
                            }
                            if (EventTab.SelectedIndex == 0)
                            {
                                EvSpOffset.Text = "0x0";
                            }
                            else if (EventTab.SelectedIndex == 1)
                            {
                                EvSubaOffset.Text = "0x0";
                            }
                            else if (EventTab.SelectedIndex == 3)
                            {
                                EvOvrOffset.Text = "0x0";
                            }
                            else
                            {
                                rd1 = EvRnOffset.Text;
                                EvRnOffset.Text = "0x0";
                                if (EvOffsetInterlock.Checked)
                                {
                                    if (EvSpOffset.Text == rd1)
                                    {
                                        EvSpOffset.Text = "0x0";
                                    }
                                    if (EvSubaOffset.Text == rd1)
                                    {
                                        EvSubaOffset.Text = "0x0";
                                    }
                                    if (EvOvrOffset.Text == rd1)
                                    {
                                        EvOvrOffset.Text = "0x0";
                                    }
                                }
                            }
                            if (EvOffsetInterlock.Checked)
                            {
                                for (i = stf; i < md; i++)
                                {
                                    if (alm[i] == h)
                                    {
                                        DelILData();
                                    }
                                }
                                rd2 = "0x" + rd1;
                                if (EvSpOffset.Text == rd2)
                                {
                                    EvSpOffset.Text = "0x0";
                                }
                                if (EvSubaOffset.Text == rd2)
                                {
                                    EvSubaOffset.Text = "0x0";
                                }
                                if (EvOvrOffset.Text == rd2)
                                {
                                    EvOvrOffset.Text = "0x0";
                                }
                            }
                            minitxt.Text = "Empty Event List Cleared.";
                            Fixam();
                            if (qe)
                            {
                                Qsave.Enabled = true;
                            }
                        }
                        else
                        {
                            g = EvList.Items.Count * 2;
                            MoveOffsetData();
                            if (j < k)
                            {
                                k = j * 4;
                                if (i >= stf)
                                {
                                    alm[i] = k;
                                }
                                if (EventTab.SelectedIndex == 0)
                                {
                                    EvSpOffset.Text = "0x" + k.ToString("X");
                                }
                                else if (EventTab.SelectedIndex == 1)
                                {
                                    EvSubaOffset.Text = "0x" + k.ToString("X");
                                }
                                else if (EventTab.SelectedIndex == 3)
                                {
                                    EvOvrOffset.Text = "0x" + k.ToString("X");
                                }
                                else
                                {
                                    rd1 = EvRnOffset.Text;
                                    rd2 = "0x" + k.ToString("X");
                                    EvRnOffset.Text = rd2;
                                    if (EvOffsetInterlock.Checked)
                                    {
                                        if (EvSpOffset.Text == rd1)
                                        {
                                            EvSpOffset.Text = rd2;
                                        }
                                        if (EvSubaOffset.Text == rd1)
                                        {
                                            EvSubaOffset.Text = rd2;
                                        }
                                        if (EvOvrOffset.Text == rd1)
                                        {
                                            EvOvrOffset.Text = rd2;
                                        }
                                        if (ArtActOffset.Text == rd1)
                                        {
                                            ArtActOffset.Text = rd2;
                                        }
                                        if (ArtSubaOffset.Text == rd1)
                                        {
                                            ArtSubaOffset.Text = rd2;
                                        }
                                    }
                                }
                                if (EvOffsetInterlock.Checked)
                                {
                                    i = EvList.Items.Count;
                                    g = h + i * 8;
                                    for (i = stf; i < md; i++)
                                    {
                                        if (alm[i] >= h && alm[i] <= g)
                                        {
                                            n = i * 4;
                                            for (mov = 0; mov < par; mov++)
                                            {
                                                if (asc[mov] == n)
                                                {
                                                    if (alm[i] == h)
                                                    {
                                                        alm[i] = k;
                                                        break;
                                                    }
                                                    m = alm[i] - h;
                                                    if (m % 8 == 0)
                                                    {
                                                        alm[i] = k + m;
                                                    }
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (an5 > 0)
                            {
                                minitxt.Text = "Moved " + an5 + " Data.";
                                Fixam();
                                if (qe)
                                {
                                    Qsave.Enabled = true;
                                }
                            }
                            else
                            {
                                minitxt.Text = "No Moved.";
                            }
                        }
                    }
                }
            }
            else if (ArticleTab.SelectedIndex == 0)
            {
                if (ArtActOffset.Text.Length > 5 && ArtActId.SelectedIndex != -1)
                {
                    rd1 = ArtActOffset.Text.Substring(2);
                    h = Convert.ToInt32(rd1, 16);
                    if (h >= stf * 4 && h < tds[25] && h % 4 == 0)
                    {
                        k = h / 4;
                        if (!ArtActCbList.Visible)
                        {
                            n = alm[artdt + 5] / 4;
                        }
                        else if (ArtActCbList.SelectedIndex == 0)
                        {
                            n = alm[artdt + 5] / 4;
                        }
                        else if (ArtActCbList.SelectedIndex == 1)
                        {
                            n = alm[artdt + 13] / 4;
                        }
                        else
                        {
                            n = 0;
                        }
                        if (n >= stf)
                        {
                            i = ArtActId.SelectedIndex;
                            g = n + i;
                            if (alm[k] == 0 || alm[k] == -86052851)
                            {
                                if (alm[k] == 0)
                                {
                                    j = alm[g] / 4;
                                    alm[j] = -86052851;
                                    alm[j + 1] = -86052851;
                                }
                                else
                                {
                                    ArtActList.Items.Clear();
                                }
                                alm[g] = 0;
                                rmv = g * 4;
                                Delasc();
                                ArtActOffset.Text = "0x0";
                                if (EvOffsetInterlock.Checked)
                                {
                                    for (i = stf; i < md; i++)
                                    {
                                        if (alm[i] == h)
                                        {
                                            DelILData();
                                        }
                                    }
                                }
                                minitxt.Text = "Empty Event List Cleared.";
                                Fixam();
                                if (qe)
                                {
                                    Qsave.Enabled = true;
                                }
                            }
                            else
                            {
                                i = n + ArtActId.SelectedIndex;
                                g = ArtActList.Items.Count * 2;
                                MoveOffsetData();
                                if (j < k)
                                {
                                    k = j * 4;
                                    alm[i] = k;
                                    ArtActOffset.Text = "0x" + k.ToString("X");
                                    if (EvOffsetInterlock.Checked)
                                    {
                                        i = ArtActList.Items.Count;
                                        g = h + i * 8;
                                        for (i = stf; i < md; i++)
                                        {
                                            if (alm[i] >= h && alm[i] <= g)
                                            {
                                                n = i * 4;
                                                for (mov = 0; mov < par; mov++)
                                                {
                                                    if (asc[mov] == n)
                                                    {
                                                        if (alm[i] == h)
                                                        {
                                                            alm[i] = k;
                                                            break;
                                                        }
                                                        m = alm[i] - h;
                                                        if (m % 8 == 0)
                                                        {
                                                            alm[i] = k + m;
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (an5 > 0)
                                {
                                    minitxt.Text = "Moved " + an5 + " Data.";
                                    Fixam();
                                    if (qe)
                                    {
                                        Qsave.Enabled = true;
                                    }
                                }
                                else
                                {
                                    minitxt.Text = "No Moved.";
                                }
                            }
                        }
                    }
                    else
                    {
                        minitxt.Text = "invalid Command.";
                    }
                }
            }
            else if (ArtSubaOffset.Text.Length > 5 && ArtSubaId.SelectedIndex != -1 && ArtSubaCbList.SelectedIndex != -1)
            {
                rd1 = ArtSubaOffset.Text.Substring(2);
                h = Convert.ToInt32(rd1, 16);
                if (h >= stf * 4 && h < tds[25] && h % 4 == 0)
                {
                    k = h / 4;
                    g = ArtSubaCbList.SelectedIndex;
                    if (alm[artdt + 6] == 0 && alm[artdt + 7] != 0)
                    {
                        g++;
                    }
                    if (g < 3 && alm[artdt + 6 + g] != 0)
                    {
                        n = alm[artdt + 6 + g] / 4;
                    }
                    else
                    {
                        j = ArtDataList.Items.Count;
                        rd3 = ArtDataList.Items[13].ToString();
                        rd1 = rd3.Substring(6, 10);
                        if (rd1 != "SubAction ")
                        {
                            g++;
                        }
                        if (j > 12 + g)
                        {
                            rd2 = ArtDataList.Items[13 + g].ToString();
                            rd1 = rd2.Substring(2, 3);
                            j = Convert.ToInt32(rd1, 16);
                            n = alm[artdt + j / 4] / 4;
                        }
                    }
                    if (alm[k] == 0 || alm[k] == -86052851)
                    {
                        g = n + ArtSubaId.SelectedIndex;
                        if (alm[k] == 0)
                        {
                            i = alm[g] / 4;
                            alm[i] = -86052851;
                            alm[i + 1] = -86052851;
                        }
                        else
                        {
                            ArtSubaList.Items.Clear();
                        }
                        alm[g] = 0;
                        rmv = g * 4;
                        Delasc();
                        ArtSubaList.Items.Clear();
                        ArtSubaOffset.Text = "0x0";
                        if (EvOffsetInterlock.Checked)
                        {
                            for (i = stf; i < md; i++)
                            {
                                if (alm[i] == h)
                                {
                                    DelILData();
                                }
                            }
                        }
                        minitxt.Text = "Empty Event List Cleared.";
                        Fixam();
                        if (qe)
                        {
                            Qsave.Enabled = true;
                        }
                    }
                    else
                    {
                        i = n + ArtSubaId.SelectedIndex;
                        g = ArtSubaList.Items.Count * 2;
                        MoveOffsetData();
                        if (j < k)
                        {
                            k = j * 4;
                            alm[i] = k;
                            ArtSubaOffset.Text = "0x" + k.ToString("X");
                            if (EvOffsetInterlock.Checked)
                            {
                                i = ArtSubaList.Items.Count;
                                g = h + i * 8;
                                for (i = stf; i < md; i++)
                                {
                                    if (alm[i] >= h && alm[i] <= g)
                                    {
                                        n = i * 4;
                                        for (mov = 0; mov < par; mov++)
                                        {
                                            if (asc[mov] == n)
                                            {
                                                if (alm[i] == h)
                                                {
                                                    alm[i] = k;
                                                    break;
                                                }
                                                m = alm[i] - h;
                                                if (m % 8 == 0)
                                                {
                                                    alm[i] = k + m;
                                                }
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (an5 > 0)
                        {
                            minitxt.Text = "Moved " + an5 + " Data.";
                            Fixam();
                            if (qe)
                            {
                                Qsave.Enabled = true;
                            }
                        }
                        else
                        {
                            minitxt.Text = "No Moved.";
                        }
                    }
                }
                else
                {
                    minitxt.Text = "invalid Command.";
                }
            }
            EvStrip.Close();
        }

        private void EvSeleExrn_Click(object sender, EventArgs e)
        {
            if (ModeChange.SelectedIndex == 1)
            {
                if (EvList.SelectedIndex == -1)
                {
                    return;
                }
                if (minitxt.Text == "invalid Command.")
                {
                    minitxt.Text = "";
                }
                if (EventTab.SelectedIndex == 0)
                {
                    rd1 = EvSpOffset.Text.Substring(2);
                }
                else if (EventTab.SelectedIndex == 1)
                {
                    rd1 = EvSubaOffset.Text.Substring(2);
                }
                else if (EventTab.SelectedIndex == 3)
                {
                    rd1 = EvOvrOffset.Text.Substring(2);
                }
                else
                {
                    rd1 = EvRnOffset.Text.Substring(2);
                }
                g = Convert.ToInt32(rd1, 16);
                h = EvList.SelectedIndex;
                i = g / 4 + h * 2;
                if (alm[i] != 459008 && alm[i] != 218104320)
                {
                    return;
                }
                if (alm[i] == 459008)
                {
                    n = alm[i + 1] / 4;
                    h = alm[i + 1] + 4;
                }
                else
                {
                    n = alm[i + 1] / 4 + 2;
                    h = alm[i + 1] + 12;
                }
                if (n < stf || n >= md)
                {
                    return;
                }
                if (alm[n] == 2)
                {
                    for (j = 0; j < tds[28]; j++)
                    {
                        g = rnext[(tds[27] + j) * 2];
                        if (g >= 8096 && g < tds[25])
                        {
                            if (h == g)
                            {
                                break;
                            }
                            if (g >= 8096 && g < tds[25])
                            {
                                an5 = 0;
                                while (an5 < 100)
                                {
                                    k = g / 4;
                                    g = alm[k];
                                    if (g >= 8096 && g < tds[25])
                                    {
                                        if (h == g)
                                        {
                                            an5 = 16777216;
                                        }
                                        an5++;
                                        continue;
                                    }
                                    break;
                                }
                                if (an5 >= 16777216)
                                {
                                    break;
                                }
                            }
                        }
                    }
                }
                else
                {
                    j = tds[28];
                }
                g = 5;
                k = j;
                string[] eclis = DataExrnList.Items.Cast<string>().ToArray();
                using (EvChangeForm evChangeForm = new EvChangeForm())
                {
                    evChangeForm.ecid = k;
                    evChangeForm.ecdn = g;
                    evChangeForm.ecwf = ExrFW;
                    evChangeForm.echf = ExrFH;
                    evChangeForm.eclis = eclis;
                    evChangeForm.ShowDialog(this);
                    k = evChangeForm.ecid;
                    g = evChangeForm.ecdn;
                    ExrFW = evChangeForm.ecwf;
                    ExrFH = evChangeForm.echf;
                }
                if (g <= 5 || j == k)
                {
                    return;
                }
                if (j < tds[28])
                {
                    an2 = (tds[27] + j) * 2;
                    g = rnext[an2];
                    if (g == h)
                    {
                        if (alm[n + 1] >= 8096 && alm[n + 1] < tds[25])
                        {
                            rnext[an2] = alm[n + 1];
                        }
                        else
                        {
                            rnext[an2] = -1;
                            minitxt.Text = "Unused External Sub Routine data has occurred.";
                        }
                    }
                    else
                    {
                        for (an5 = 0; an5 < 100; an5++)
                        {
                            m = g / 4;
                            if (alm[m] == h)
                            {
                                alm[m] = alm[n + 1];
                                break;
                            }
                            g = alm[m];
                        }
                    }
                }
                else
                {
                    rmv = n * 4 + 4;
                    Delasc();
                }
                if (k >= tds[28])
                {
                    alm[n] = 0;
                    alm[n + 1] = 0;
                    Fixam();
                }
                else
                {
                    an5 = 0;
                    an4 = rnext[(tds[27] + k) * 2];
                    while (an5 < 101 && an4 >= 8096 && an4 < tds[25])
                    {
                        an1 = an4 / 4;
                        an4 = alm[an1];
                        an5++;
                    }
                    if (an5 < 100)
                    {
                        if (an5 > 0)
                        {
                            alm[an1] = n * 4 + 4;
                            alm[n] = 2;
                            alm[n + 1] = -1;
                        }
                        else
                        {
                            alm[n] = 2;
                            alm[n + 1] = -1;
                            i = (tds[27] + k) * 2;
                            rnext[i] = n * 4 + 4;
                        }
                    }
                    else
                    {
                        minitxt.Text = "Cannot use Selected Data.";
                        alm[n] = 0;
                        alm[n + 1] = 0;
                    }
                    rmv = n * 4 + 4;
                    Delasc();
                    Fixam();
                }
                if (EventTab.SelectedIndex == 0)
                {
                    rd1 = EvSpOffset.Text.Substring(2);
                }
                else if (EventTab.SelectedIndex == 1)
                {
                    rd1 = EvSubaOffset.Text.Substring(2);
                }
                else if (EventTab.SelectedIndex == 3)
                {
                    rd1 = EvOvrOffset.Text.Substring(2);
                }
                else
                {
                    rd1 = EvRnOffset.Text.Substring(2);
                }
                h = Convert.ToInt32(rd1, 16);
                EvList.Items.Clear();
                if (h > 0 && h < tds[25])
                {
                    j = h / 4;
                    mov = 0;
                    while (alm[j] != 0 && j < md)
                    {
                        EveListstring();
                        EvList.Items.Add(rd1);
                        j += 2;
                    }
                }
                if (qe)
                {
                    Qsave.Enabled = true;
                }
            }
            else
            {
                minitxt.Text = "invalid Command.";
            }
        }

        private void EvCopyOffsetRn_Click(object sender, EventArgs e)
        {
            if (ModeChange.SelectedIndex == 1)
            {
                if (EventTab.SelectedIndex == 0)
                {
                    if (EvSpCbID.SelectedIndex != -1 && EvSpCbList.SelectedIndex != -1)
                    {
                        if (EvSpCbList.SelectedIndex == 0)
                        {
                            rd1 = "E=00070100:SpA:En=" + (EvSpCbID.SelectedIndex + 274).ToString("X3") + ",";
                        }
                        else
                        {
                            rd1 = "E=00070100:SpA:Ex=" + (EvSpCbID.SelectedIndex + 274).ToString("X3") + ",";
                        }
                        Clipboard.SetText(rd1);
                    }
                }
                else if (EventTab.SelectedIndex == 1)
                {
                    if (EvSubaCbID.SelectedIndex != -1 && EvSubaCbList.SelectedIndex != -1)
                    {
                        if (EvSubaCbList.SelectedIndex == 0)
                        {
                            rd1 = "E=00070100:SubA:M=" + EvSubaCbID.SelectedIndex.ToString("X3") + ",";
                        }
                        else if (EvSubaCbList.SelectedIndex == 1)
                        {
                            rd1 = "E=00070100:SubA:G=" + EvSubaCbID.SelectedIndex.ToString("X3") + ",";
                        }
                        else if (EvSubaCbList.SelectedIndex == 2)
                        {
                            rd1 = "E=00070100:SubA:S=" + EvSubaCbID.SelectedIndex.ToString("X3") + ",";
                        }
                        else if (EvSubaCbList.SelectedIndex == 3)
                        {
                            rd1 = "E=00070100:SubA:O=" + EvSubaCbID.SelectedIndex.ToString("X3") + ",";
                        }
                        else if (EvSubaCbList.SelectedIndex == 4)
                        {
                            rd1 = "E=00070100:SubANM=" + EvSubaCbID.SelectedIndex.ToString("X3") + ",";
                        }
                        else if (EvSubaCbList.SelectedIndex == 5)
                        {
                            rd1 = "E=00070100:SubANG=" + EvSubaCbID.SelectedIndex.ToString("X3") + ",";
                        }
                        else if (EvSubaCbList.SelectedIndex == 6)
                        {
                            rd1 = "E=00070100:SubANS=" + EvSubaCbID.SelectedIndex.ToString("X3") + ",";
                        }
                        else
                        {
                            rd1 = "E=00070100:SubANO=" + EvSubaCbID.SelectedIndex.ToString("X3") + ",";
                        }
                        Clipboard.SetText(rd1);
                    }
                }
                else if (EventTab.SelectedIndex == 3)
                {
                    if (EvOvrCbList.SelectedIndex == -1 || EvOvrId.SelectedIndex == -1)
                    {
                        return;
                    }
                    if (EvOvrCbList.SelectedIndex == 0)
                    {
                        if (alm[dat + 20] >= 8096 && alm[dat + 20] < tds[25])
                        {
                            j = alm[dat + 20] / 4;
                            i = EvOvrId.SelectedIndex * 2;
                            if (alm[j + i] >= 0 || alm[j + i] < 4096)
                            {
                                rd1 = "E=00070100:SOR:En=" + alm[j + i].ToString("X3") + ",";
                                Clipboard.SetText(rd1);
                            }
                        }
                    }
                    else if (EvOvrCbList.SelectedIndex == 1)
                    {
                        if (alm[dat + 21] >= 8096 && alm[dat + 21] < tds[25])
                        {
                            j = alm[dat + 21] / 4;
                            i = EvOvrId.SelectedIndex * 2;
                            if (alm[j + i] >= 0 || alm[j + i] < 4096)
                            {
                                rd1 = "E=00070100:SOR:Ex=" + alm[j + i].ToString("X3") + ",";
                                Clipboard.SetText(rd1);
                            }
                        }
                    }
                    else
                    {
                        rd1 = "E=00070100:SOR:Pr=" + EvOvrId.SelectedIndex.ToString("X3") + ",";
                        Clipboard.SetText(rd1);
                    }
                }
                else if (EvRnOffset.Text.Length == 6)
                {
                    rd1 = "E=00070100:2-0000" + EvRnOffset.Text.Substring(2) + ",";
                    Clipboard.SetText(rd1);
                }
                else if (EvRnOffset.Text.Length == 7)
                {
                    rd1 = "E=00070100:2-000" + EvRnOffset.Text.Substring(2) + ",";
                    Clipboard.SetText(rd1);
                }
            }
            else if (ArticleTab.SelectedIndex == 0)
            {
                if (ArtActOffset.Text.Length == 6)
                {
                    rd1 = "E=00070100:2-0000" + ArtActOffset.Text.Substring(2) + ",";
                    Clipboard.SetText(rd1);
                }
                else if (ArtActOffset.Text.Length == 7)
                {
                    rd1 = "E=00070100:2-000" + ArtActOffset.Text.Substring(2) + ",";
                    Clipboard.SetText(rd1);
                }
            }
            else if (ArtSubaOffset.Text.Length == 6)
            {
                rd1 = "E=00070100:2-0000" + ArtSubaOffset.Text.Substring(2) + ",";
                Clipboard.SetText(rd1);
            }
            else if (ArtSubaOffset.Text.Length == 7)
            {
                rd1 = "E=00070100:2-000" + ArtSubaOffset.Text.Substring(2) + ",";
                Clipboard.SetText(rd1);
            }
        }

        private void EvSeleParamEqualize_Click(object sender, EventArgs e)
        {
            rd1 = "";
            if (ModeChange.SelectedIndex == 1)
            {
                if (EvList.SelectedItems.Count >= 2)
                {
                    if (EventTab.SelectedIndex == 0)
                    {
                        rd1 = EvSpOffset.Text.Substring(2);
                    }
                    else if (EventTab.SelectedIndex == 1)
                    {
                        rd1 = EvSubaOffset.Text.Substring(2);
                    }
                    else if (EventTab.SelectedIndex == 3)
                    {
                        rd1 = EvOvrOffset.Text.Substring(2);
                    }
                    else
                    {
                        rd1 = EvRnOffset.Text.Substring(2);
                    }
                    if (EvList.SelectedItems.Count < 510)
                    {
                        k = 0;
                        h = 255;
                        g = Convert.ToInt32(rd1, 16);
                        j = g / 4;
                        g = EvList.Items.Count;
                        for (i = 0; i < g; i++)
                        {
                            if (EvList.GetSelected(i))
                            {
                                n = j + i * 2;
                                if (alm[n] <= 65535)
                                {
                                    rd1 = "";
                                    break;
                                }
                                if (((alm[n] >> 8) & 0xFF) <= 0)
                                {
                                    rd1 = "";
                                    break;
                                }
                                if (alm[n + 1] < 8096 || alm[n + 1] >= tds[25])
                                {
                                    rd1 = "";
                                    break;
                                }
                                nonam[k] = i;
                                k++;
                                if (((alm[n] >> 8) & 0xFF) < h)
                                {
                                    h = ((alm[n] >> 8) & 0xFF);
                                }
                            }
                        }
                    }
                    else
                    {
                        rd1 = "";
                    }
                }
            }
            else if (ArticleTab.SelectedIndex == 0)
            {
                if (ArtActList.SelectedItems.Count >= 2)
                {
                    rd1 = ArtActOffset.Text.Substring(2);
                    if (ArtActList.SelectedItems.Count < 510)
                    {
                        k = 0;
                        h = 255;
                        g = Convert.ToInt32(rd1, 16);
                        j = g / 4;
                        g = ArtActList.Items.Count;
                        for (i = 0; i < g; i++)
                        {
                            if (ArtActList.GetSelected(i))
                            {
                                n = j + i * 2;
                                if (alm[n] <= 65535)
                                {
                                    rd1 = "";
                                    break;
                                }
                                if (((alm[n] >> 8) & 0xFF) <= 0)
                                {
                                    rd1 = "";
                                    break;
                                }
                                if (alm[n + 1] < 8096 || alm[n + 1] >= tds[25])
                                {
                                    rd1 = "";
                                    break;
                                }
                                nonam[k] = i;
                                k++;
                                if (((alm[n] >> 8) & 0xFF) < h)
                                {
                                    h = ((alm[n] >> 8) & 0xFF);
                                }
                            }
                        }
                    }
                    else
                    {
                        rd1 = "";
                    }
                }
            }
            else if (ArtSubaList.SelectedItems.Count >= 2)
            {
                rd1 = ArtSubaOffset.Text.Substring(2);
                if (ArtSubaList.SelectedItems.Count < 510)
                {
                    k = 0;
                    h = 255;
                    g = Convert.ToInt32(rd1, 16);
                    j = g / 4;
                    g = ArtSubaList.Items.Count;
                    for (i = 0; i < g; i++)
                    {
                        if (ArtSubaList.GetSelected(i))
                        {
                            n = j + i * 2;
                            if (alm[n] <= 65535)
                            {
                                rd1 = "";
                                break;
                            }
                            if (((alm[n] >> 8) & 0xFF) <= 0)
                            {
                                rd1 = "";
                                break;
                            }
                            if (alm[n + 1] < 8096 || alm[n + 1] >= tds[25])
                            {
                                rd1 = "";
                                break;
                            }
                            nonam[k] = i;
                            k++;
                            if (((alm[n] >> 8) & 0xFF) < h)
                            {
                                h = ((alm[n] >> 8) & 0xFF);
                            }
                        }
                    }
                }
                else
                {
                    rd1 = "";
                }
            }
            if (!(rd1 != ""))
            {
                return;
            }
            n = alm[j + nonam[0] * 2];
            rd1 = "";
            i = 0;
            while (ParEtid[i] != 0)
            {
                if (ParEtid[i] == n)
                {
                    rd1 = ParEtxd[i];
                    break;
                }
                if (i >= 499)
                {
                    break;
                }
                i++;
            }
            if (rd1 == "")
            {
                i = 0;
                m = 16777216;
                g = (n | 0xFFFF) - 65280;
                while (ParEtid[i] != 0)
                {
                    if (ParEtid[i] > g && ParEtid[i] < n)
                    {
                        g = ParEtid[i];
                        m = i;
                    }
                    i++;
                    if (i >= 500)
                    {
                        i = 0;
                        break;
                    }
                }
                if (m < 500)
                {
                    rd1 = ParEtxd[m];
                }
            }
            i = 4;
            using (SubaAnimFlagsForm subaAnimFlagsForm = new SubaAnimFlagsForm())
            {
                subaAnimFlagsForm.afdat = h;
                subaAnimFlagsForm.afrn = i;
                subaAnimFlagsForm.afanm = rd1;
                subaAnimFlagsForm.ShowDialog(this);
                h = subaAnimFlagsForm.afdat;
                i = subaAnimFlagsForm.afrn;
                rd1 = subaAnimFlagsForm.afanm;
            }
            if (i < 7)
            {
                return;
            }
            an1 = j + nonam[0] * 2 + 1;
            m = alm[an1] / 4;
            if (i == 7)
            {
                for (i = 0; i < rd1.Length; i++)
                {
                    if (rd1[i] == '1')
                    {
                        an5 = i * 2;
                        an3 = alm[m + an5];
                        an4 = alm[m + an5 + 1];
                        if (an3 == 1)
                        {
                            for (n = 1; n < k; n++)
                            {
                                an1 = j + nonam[n] * 2 + 1;
                                an2 = alm[an1] / 4;
                                alm[an2 + an5] = an3;
                                alm[an2 + an5 + 1] = an4 + n * 60000;
                            }
                        }
                        else if (an3 == 2 || an3 == 3 || an3 == 6)
                        {
                            for (n = 1; n < k; n++)
                            {
                                an1 = j + nonam[n] * 2 + 1;
                                an2 = alm[an1] / 4;
                                alm[an2 + an5] = an3;
                                alm[an2 + an5 + 1] = an4;
                            }
                        }
                        else
                        {
                            for (n = 1; n < k; n++)
                            {
                                an1 = j + nonam[n] * 2 + 1;
                                an2 = alm[an1] / 4;
                                alm[an2 + an5] = an3;
                                alm[an2 + an5 + 1] = an4 + n;
                            }
                        }
                    }
                }
            }
            else
            {
                for (i = 0; i < rd1.Length; i++)
                {
                    if (rd1[i] == '1')
                    {
                        an5 = i * 2;
                        an3 = alm[m + an5];
                        an4 = alm[m + an5 + 1];
                        for (n = 1; n < k; n++)
                        {
                            an1 = j + nonam[n] * 2 + 1;
                            an2 = alm[an1] / 4;
                            alm[an2 + an5] = an3;
                            alm[an2 + an5 + 1] = an4;
                        }
                    }
                }
            }
            mov = 0;
            nonam[k] = 1048575;
            if (ModeChange.SelectedIndex == 1)
            {
                EvList.Items.Clear();
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    EvList.Items.Add(rd1);
                    j += 2;
                }
                EvDesText.Enabled = false;
                g = EvList.Items.Count;
                k = 0;
                for (i = 0; i < g; i++)
                {
                    if (i == nonam[k])
                    {
                        EvList.SetSelected(i, value: true);
                        k++;
                    }
                }
                EvDesText.Enabled = true;
            }
            else if (ArticleTab.SelectedIndex == 0)
            {
                ArtActList.Items.Clear();
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    ArtActList.Items.Add(rd1);
                    j += 2;
                }
                ArtActText.Enabled = false;
                g = ArtActList.Items.Count;
                k = 0;
                for (i = 0; i < g; i++)
                {
                    if (i == nonam[k])
                    {
                        ArtActList.SetSelected(i, value: true);
                        k++;
                    }
                }
                ArtActText.Enabled = true;
            }
            else
            {
                ArtSubaList.Items.Clear();
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    ArtSubaList.Items.Add(rd1);
                    j += 2;
                }
                ArtSubaText.Enabled = false;
                g = ArtSubaList.Items.Count;
                k = 0;
                for (i = 0; i < g; i++)
                {
                    if (i == nonam[k])
                    {
                        ArtSubaList.SetSelected(i, value: true);
                        k++;
                    }
                }
                ArtSubaText.Enabled = true;
            }
            if (qe)
            {
                Qsave.Enabled = true;
            }
        }

        private void EvMultiPaste_Click(object sender, EventArgs e)
        {
            rd1 = "";
            if (EvSubaCbList.Items.Count >= 4)
            {
                if (EventTab.SelectedIndex == 0)
                {
                    if (EvSpCbID.SelectedIndex != -1 && EvSpCbList.SelectedIndex != -1)
                    {
                        rd1 = (EvSpCbID.SelectedIndex + 274).ToString("X") + ",";
                        n = dat + 9 + EvSpCbList.SelectedIndex;
                    }
                }
                else if (EventTab.SelectedIndex == 1)
                {
                    if (EvSubaCbID.SelectedIndex != -1 && EvSubaCbList.SelectedIndex != -1)
                    {
                        rd1 = EvSubaCbID.SelectedIndex.ToString("X") + ",";
                        if (EvSubaCbList.SelectedIndex < 4)
                        {
                            n = dat + 12 + EvSubaCbList.SelectedIndex;
                        }
                        else
                        {
                            n = dat + 27 + EvSubaCbList.SelectedIndex;
                        }
                    }
                }
                else if (EventTab.SelectedIndex == 3 && EvOvrId.SelectedIndex != -1)
                {
                    if (EvOvrCbList.SelectedIndex == 0)
                    {
                        rd1 = EvOvrId.Text + ",";
                        n = 0;
                        an5 = EvOvrId.Items.Count * 2;
                    }
                    else if (EvOvrCbList.SelectedIndex == 1)
                    {
                        rd1 = EvOvrId.Text + ",";
                        n = 1;
                        an5 = EvOvrId.Items.Count * 2;
                    }
                }
            }
            if (rd1 != "")
            {
                k = 0;
                i = 3;
                if (Clipboard.ContainsText())
                {
                    rd2 = Clipboard.GetText();
                    if (rd2.Length >= 22)
                    {
                        rd3 = rd2.Substring(2, 8);
                        if (rd3 == "00070100")
                        {
                            if (rd2[11] == '2')
                            {
                                for (j = 13; j < 21; j++)
                                {
                                    if (!Uri.IsHexDigit(rd2[j]))
                                    {
                                        j = 100;
                                    }
                                }
                                if (j == 21)
                                {
                                    rd3 = rd2.Substring(13, 8);
                                    k = Convert.ToInt32(rd3, 16);
                                }
                            }
                            else if (rd2[11] == 'S')
                            {
                                for (j = 18; j < 21; j++)
                                {
                                    if (!Uri.IsHexDigit(rd2[j]))
                                    {
                                        j = 100;
                                    }
                                }
                                if (j == 21)
                                {
                                    rd3 = rd2.Substring(18, 3);
                                    j = Convert.ToInt32(rd3, 16);
                                    if (rd2[12] == 'p')
                                    {
                                        j -= 274;
                                        if (j >= 0 && j < spas)
                                        {
                                            if (rd2[16] != 'x')
                                            {
                                                an1 = alm[dat + 9] / 4;
                                            }
                                            else
                                            {
                                                an1 = alm[dat + 10] / 4;
                                            }
                                            if (alm[an1 + j] >= 8096 && alm[an1 + j] < tds[25])
                                            {
                                                k = alm[an1 + j];
                                            }
                                        }
                                    }
                                    else if (rd2[12] == 'O')
                                    {
                                        if (rd2[16] == 'n')
                                        {
                                            if (alm[dat + 20] >= 8096 && alm[dat + 20] < tds[25])
                                            {
                                                an1 = alm[dat + 20] / 4;
                                                while (an1 < md && alm[an1] >= 0)
                                                {
                                                    if (alm[an1] == j)
                                                    {
                                                        if (alm[an1 + 1] >= 8096 && alm[an1 + 1] < tds[25])
                                                        {
                                                            k = alm[an1 + 1];
                                                        }
                                                        break;
                                                    }
                                                    an1 += 2;
                                                }
                                            }
                                        }
                                        else if (rd2[16] == 'x')
                                        {
                                            if (alm[dat + 21] >= 8096 && alm[dat + 21] < tds[25])
                                            {
                                                an1 = alm[dat + 21] / 4;
                                                while (an1 < md && alm[an1] >= 0)
                                                {
                                                    if (alm[an1] == j)
                                                    {
                                                        if (alm[an1 + 1] >= 8096 && alm[an1 + 1] < tds[25])
                                                        {
                                                            k = alm[an1 + 1];
                                                        }
                                                        break;
                                                    }
                                                    an1 += 2;
                                                }
                                            }
                                        }
                                        else if (j >= 0 && j < 274 + spas)
                                        {
                                            an1 = alm[dat + 11] / 4;
                                            if (alm[an1 + j] >= 8096 && alm[an1 + j] < tds[25])
                                            {
                                                k = alm[an1 + j];
                                            }
                                        }
                                    }
                                    else if (j < suba)
                                    {
                                        if (rd2[15] == 'N' && EvSubaCbList.Items.Count == 8)
                                        {
                                            if (rd2[16] == 'M')
                                            {
                                                an1 = alm[dat + 31] / 4;
                                            }
                                            else if (rd2[16] == 'G')
                                            {
                                                an1 = alm[dat + 32] / 4;
                                            }
                                            else if (rd2[16] == 'S')
                                            {
                                                an1 = alm[dat + 33] / 4;
                                            }
                                            else
                                            {
                                                an1 = alm[dat + 34] / 4;
                                            }
                                        }
                                        else if (rd2[16] == 'M')
                                        {
                                            an1 = alm[dat + 12] / 4;
                                        }
                                        else if (rd2[16] == 'G')
                                        {
                                            an1 = alm[dat + 13] / 4;
                                        }
                                        else if (rd2[16] == 'S')
                                        {
                                            an1 = alm[dat + 14] / 4;
                                        }
                                        else
                                        {
                                            an1 = alm[dat + 15] / 4;
                                        }
                                        if (alm[an1 + j] >= 8096 && alm[an1 + j] < tds[25])
                                        {
                                            k = alm[an1 + j];
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                using (SubaAnimFlagsForm subaAnimFlagsForm = new SubaAnimFlagsForm())
                {
                    subaAnimFlagsForm.afdat = k;
                    subaAnimFlagsForm.afrn = i;
                    subaAnimFlagsForm.afanm = rd1;
                    subaAnimFlagsForm.ShowDialog(this);
                    k = subaAnimFlagsForm.afdat;
                    i = subaAnimFlagsForm.afrn;
                    rd1 = subaAnimFlagsForm.afanm;
                }
                if (i != 7 || !(rd1 != ""))
                {
                    return;
                }
                if (k >= 8096 && k < tds[25] && k % 4 == 0)
                {
                    EvPaste.Enabled = false;
                    an3 = rd1.Length + 1;
                    rd1 += ",  ";
                    rd2 = "";
                    rd3 = "";
                    rd4 = "";
                    for (i = 0; i < an3; i++)
                    {
                        if (Uri.IsHexDigit(rd1[i]))
                        {
                            if (Uri.IsHexDigit(rd1[i + 1]))
                            {
                                if (Uri.IsHexDigit(rd1[i + 2]))
                                {
                                    if (!Uri.IsHexDigit(rd1[i + 3]))
                                    {
                                        rd3 = rd1.Substring(i, 3);
                                        i += 2;
                                    }
                                }
                                else
                                {
                                    rd3 = "0" + rd1.Substring(i, 2);
                                    i++;
                                }
                            }
                            else
                            {
                                rd3 = "00" + rd1.Substring(i, 1);
                            }
                        }
                        else if (rd1[i] == ',' || rd1[i] == '、')
                        {
                            if (rd3 != "")
                            {
                                if (rd4 != "" && rd3 != rd4)
                                {
                                    string text = rd2;
                                    rd2 = text + rd4 + "-" + rd3 + ",";
                                }
                                else
                                {
                                    rd2 = rd2 + rd3 + ",";
                                }
                                rd3 = "";
                                rd4 = "";
                            }
                        }
                        else if (rd1[i] == '-' || rd1[i] == '~' || rd1[i] == '～')
                        {
                            rd4 = rd3;
                        }
                    }
                    if (rd2 != "")
                    {
                        an3 = rd2.Length;
                        nonam[0] = k;
                        fnt = 0;
                        if (n > 1)
                        {
                            if (n < dat + 11)
                            {
                                m = alm[n] / 4;
                                for (i = 0; i < an3; i += 4)
                                {
                                    rd1 = rd2.Substring(i, 3);
                                    h = Convert.ToInt32(rd1, 16);
                                    if (rd2[i + 3] == '-')
                                    {
                                        rd1 = rd2.Substring(i + 4, 3);
                                        an1 = Convert.ToInt32(rd1, 16);
                                        i += 4;
                                        if (h < an1)
                                        {
                                            if (an1 >= 274)
                                            {
                                                if (h < 274)
                                                {
                                                    h = 274;
                                                }
                                                if (an1 >= 274 + spas)
                                                {
                                                    an1 = 273 + spas;
                                                }
                                            }
                                            else if (h < 274 + spas)
                                            {
                                                if (an1 >= 274 + spas)
                                                {
                                                    an1 = 273 + spas;
                                                }
                                                if (h < 274)
                                                {
                                                    h = 274;
                                                }
                                            }
                                            if (an1 >= 274 && h < 274 + spas)
                                            {
                                                h -= 274;
                                                an1 -= 274;
                                                for (fnt = 1; h <= an1; h++)
                                                {
                                                    MltPasteData();
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (h >= 274)
                                            {
                                                if (an1 < 274)
                                                {
                                                    an1 = 274;
                                                }
                                                if (h >= 274 + spas)
                                                {
                                                    h = 273 + spas;
                                                }
                                            }
                                            else if (an1 < 274 + spas)
                                            {
                                                if (h >= 274 + spas)
                                                {
                                                    h = 273 + spas;
                                                }
                                                if (an1 < 274)
                                                {
                                                    an1 = 274;
                                                }
                                            }
                                            if (h >= 274 && an1 < 274 + spas)
                                            {
                                                h -= 274;
                                                an1 -= 274;
                                                for (fnt = 1; h >= an1; h--)
                                                {
                                                    MltPasteData();
                                                }
                                            }
                                        }
                                    }
                                    else if (h >= 274 && h < 274 + spas)
                                    {
                                        h -= 274;
                                        fnt = 1;
                                        MltPasteData();
                                    }
                                }
                            }
                            else
                            {
                                m = alm[n] / 4;
                                for (i = 0; i < an3; i += 4)
                                {
                                    rd1 = rd2.Substring(i, 3);
                                    h = Convert.ToInt32(rd1, 16);
                                    if (rd2[i + 3] == '-')
                                    {
                                        rd1 = rd2.Substring(i + 4, 3);
                                        an1 = Convert.ToInt32(rd1, 16);
                                        i += 4;
                                        if (h < an1)
                                        {
                                            if (h < suba)
                                            {
                                                fnt = 1;
                                                if (an1 >= suba)
                                                {
                                                    an1 = suba - 1;
                                                }
                                                while (h <= an1)
                                                {
                                                    MltPasteData();
                                                    h++;
                                                }
                                            }
                                        }
                                        else if (an1 < suba)
                                        {
                                            fnt = 1;
                                            if (h >= suba)
                                            {
                                                h = suba - 1;
                                            }
                                            while (h >= an1)
                                            {
                                                MltPasteData();
                                                h--;
                                            }
                                        }
                                    }
                                    else if (h < suba)
                                    {
                                        fnt = 1;
                                        MltPasteData();
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (n == 0)
                            {
                                m = alm[dat + 20] / 4;
                            }
                            else
                            {
                                m = alm[dat + 21] / 4;
                            }
                            for (i = 0; i < an3; i += 4)
                            {
                                rd1 = rd2.Substring(i, 3);
                                an1 = Convert.ToInt32(rd1, 16);
                                if (rd2[i + 3] == '-')
                                {
                                    rd1 = rd2.Substring(i + 4, 3);
                                    nonam[1] = Convert.ToInt32(rd1, 16);
                                    i += 4;
                                    if (an1 < nonam[1])
                                    {
                                        if (an1 < 274 + spas)
                                        {
                                            fnt = 1;
                                            if (an1 >= 274 + spas)
                                            {
                                                an1 = 273 + spas;
                                            }
                                            while (an1 <= nonam[1])
                                            {
                                                for (h = 0; h < an5; h += 2)
                                                {
                                                    if (alm[m + h] == an1)
                                                    {
                                                        h++;
                                                        MltPasteData();
                                                    }
                                                }
                                                an1++;
                                            }
                                        }
                                    }
                                    else if (nonam[1] < 274 + spas)
                                    {
                                        if (an1 >= 274 + spas)
                                        {
                                            an1 = 273 + spas;
                                        }
                                        while (an1 >= nonam[1])
                                        {
                                            for (h = 0; h < an5; h += 2)
                                            {
                                                if (alm[m + h] == an1)
                                                {
                                                    h++;
                                                    fnt = 1;
                                                    MltPasteData();
                                                }
                                            }
                                            an1--;
                                        }
                                    }
                                }
                                else if (an1 < 274 + spas)
                                {
                                    for (h = 0; h < an5; h += 2)
                                    {
                                        if (alm[m + h] == an1)
                                        {
                                            h++;
                                            fnt = 1;
                                            MltPasteData();
                                        }
                                    }
                                }
                            }
                        }
                        if (fnt == 1)
                        {
                            if (minitxt.Text == "Cannot Paste.")
                            {
                                minitxt.Text = "";
                            }
                            Fixam();
                        }
                        else
                        {
                            minitxt.Text = "Cannot Paste.";
                        }
                        if (EventTab.SelectedIndex == 0)
                        {
                            if (EvSpCbID.SelectedIndex != -1 && EvSpCbList.SelectedIndex != -1)
                            {
                                n = dat + 9 + EvSpCbList.SelectedIndex;
                                m = alm[n] / 4 + EvSpCbID.SelectedIndex;
                                EvSpOffset.Text = "0x" + alm[m].ToString("X");
                                EvList.Items.Clear();
                                if (alm[m] > 0 && alm[m] < tds[25])
                                {
                                    j = alm[m] / 4;
                                    mov = 0;
                                    while (alm[j] != 0 && j < md)
                                    {
                                        EveListstring();
                                        EvList.Items.Add(rd1);
                                        j += 2;
                                    }
                                }
                            }
                        }
                        else if (EventTab.SelectedIndex == 1)
                        {
                            if (EvSubaCbID.SelectedIndex != -1 && EvSubaCbList.SelectedIndex != -1)
                            {
                                if (EvSubaCbList.SelectedIndex < 4)
                                {
                                    n = dat + 12 + EvSubaCbList.SelectedIndex;
                                }
                                else
                                {
                                    n = dat + 27 + EvSubaCbList.SelectedIndex;
                                }
                                m = alm[n] / 4 + EvSubaCbID.SelectedIndex;
                                EvSubaOffset.Text = "0x" + alm[m].ToString("X");
                                EvList.Items.Clear();
                                if (alm[m] > 0 && alm[m] < tds[25])
                                {
                                    j = alm[m] / 4;
                                    mov = 0;
                                    while (alm[j] != 0 && j < md)
                                    {
                                        EveListstring();
                                        EvList.Items.Add(rd1);
                                        j += 2;
                                    }
                                }
                            }
                        }
                        else if (EventTab.SelectedIndex == 3 && EvOvrId.SelectedIndex != -1 && (EvOvrCbList.SelectedIndex == 0 || EvOvrCbList.SelectedIndex == 1))
                        {
                            n = dat + 20 + EvOvrCbList.SelectedIndex;
                            m = alm[n] / 4 + 1 + EvOvrId.SelectedIndex * 2;
                            EvOvrOffset.Text = "0x" + alm[m].ToString("X");
                            EvList.Items.Clear();
                            if (alm[m] > 0 && alm[m] < tds[25])
                            {
                                j = alm[m] / 4;
                                mov = 0;
                                while (alm[j] != 0 && j < md)
                                {
                                    EveListstring();
                                    EvList.Items.Add(rd1);
                                    j += 2;
                                }
                            }
                        }
                        if (qe)
                        {
                            Qsave.Enabled = true;
                        }
                    }
                    else
                    {
                        minitxt.Text = "Cannot Paste.";
                    }
                    EvPaste.Enabled = true;
                }
                else
                {
                    minitxt.Text = "Cannot Paste.";
                }
            }
            else
            {
                minitxt.Text = "Cannot Paste.";
            }
        }

        private void AtrIntFloat_Click(object sender, EventArgs e)
        {
            i = AtrEdList.CurrentCell.RowIndex;
            rd1 = AtrEdList[0, i].Value.ToString();
            AtrEdList.Enabled = false;
            if (rd1[0] == '*')
            {
                if (rd1.Length > 2)
                {
                    AtrEdList[0, i].Value = rd1.Substring(1);
                }
                else
                {
                    AtrEdList[0, i].Value = "0x" + (i * 4).ToString("X3");
                }
                if (!AtrHexView.Checked)
                {
                    k = alm[i];
                    bitf = BitConverter.GetBytes(k);
                    rdfr = BitConverter.ToSingle(bitf, 0);
                    AtrEdList[1, i].Value = rdfr.ToString();
                    k = alm[i + 185];
                    bitf = BitConverter.GetBytes(k);
                    rdfr = BitConverter.ToSingle(bitf, 0);
                    AtrEdList[2, i].Value = rdfr.ToString();
                }
            }
            else
            {
                rd2 = "*" + rd1;
                AtrEdList[0, i].Value = rd2;
                if (!AtrHexView.Checked)
                {
                    AtrEdList[1, i].Value = alm[i].ToString();
                    AtrEdList[2, i].Value = alm[i + 185].ToString();
                }
            }
            AtrEdList.Enabled = true;
        }

        private void AtrHexView_Click(object sender, EventArgs e)
        {
            AtrEdList.Enabled = false;
            if (AtrHexView.Checked)
            {
                AtrHexView.Checked = false;
                for (i = 0; i < 185; i++)
                {
                    rd1 = AtrEdList[0, i].Value.ToString();
                    if (rd1[0] == '*')
                    {
                        AtrEdList[1, i].Value = alm[i].ToString();
                        AtrEdList[2, i].Value = alm[i + 185].ToString();
                    }
                    else
                    {
                        bitf = BitConverter.GetBytes(alm[i]);
                        rdfr = BitConverter.ToSingle(bitf, 0);
                        AtrEdList[1, i].Value = rdfr.ToString();
                        bitf = BitConverter.GetBytes(alm[i + 185]);
                        rdfr = BitConverter.ToSingle(bitf, 0);
                        AtrEdList[2, i].Value = rdfr.ToString();
                    }
                }
            }
            else
            {
                AtrHexView.Checked = true;
                for (i = 0; i < 185; i++)
                {
                    AtrEdList[1, i].Value = alm[i].ToString("X");
                    AtrEdList[2, i].Value = alm[i + 185].ToString("X");
                }
            }
            AtrEdList.Enabled = true;
        }

        private void ArtIntFloat_Click(object sender, EventArgs e)
        {
            if (ArtParList.Rows.Count <= 0)
            {
                return;
            }
            i = ArtParList.CurrentCell.RowIndex;
            rd1 = ArtParList[0, i].Value.ToString();
            if (rd1[0] == 'O' || rd1[0] == 'F')
            {
                return;
            }
            ArtParList.Enabled = false;
            if (rd1[0] == '*')
            {
                if (rd1.Length > 2)
                {
                    ArtParList[0, i].Value = rd1.Substring(1);
                }
                else
                {
                    ArtParList[0, i].Value = "0x" + (i * 4).ToString("X");
                }
                if (!ArtHexView.Checked)
                {
                    k = alm[artpo + i];
                    bitf = BitConverter.GetBytes(k);
                    rdfr = BitConverter.ToSingle(bitf, 0);
                    ArtParList[1, i].Value = rdfr.ToString();
                }
            }
            else
            {
                rd2 = "*" + rd1;
                ArtParList[0, i].Value = rd2;
                if (!ArtHexView.Checked)
                {
                    ArtParList[1, i].Value = alm[artpo + i].ToString();
                }
            }
            ArtParList.Enabled = true;
        }

        private void ArtHexView_Click(object sender, EventArgs e)
        {
            if (ArtHexView.Checked)
            {
                ArtHexView.Checked = false;
            }
            else
            {
                ArtHexView.Checked = true;
            }
            h = ArtParList.Rows.Count;
            if (h <= 0)
            {
                return;
            }
            ArtParList.Enabled = false;
            if (ArtHexView.Checked)
            {
                for (i = 0; i < h; i++)
                {
                    ArtParList[1, i].Value = alm[artpo + i].ToString("X");
                }
            }
            else
            {
                for (i = 0; i < h; i++)
                {
                    rd1 = ArtParList[0, i].Value.ToString();
                    if (rd1[0] == '*')
                    {
                        ArtParList[1, i].Value = alm[artpo + i].ToString();
                    }
                    else if (rd1[0] != 'O' && rd1[0] != 'F')
                    {
                        k = alm[artpo + i];
                        bitf = BitConverter.GetBytes(k);
                        rdfr = BitConverter.ToSingle(bitf, 0);
                        ArtParList[1, i].Value = rdfr.ToString();
                    }
                }
            }
            ArtParList.Enabled = true;
        }

        private void ArtParAddressOpen_Click(object sender, EventArgs e)
        {
            rd1 = ArtParValuetxt.Text;
            h = 1;
            if (rd1.Length > 2)
            {
                if (rd1[0] == 'D' && rd1[1] == 'x')
                {
                    rd1 = rd1.Substring(2);
                    if (int.TryParse(rd1, out i))
                    {
                        h = int.Parse(rd1);
                    }
                }
                else
                {
                    if (rd1[0] == '0' && rd1[1] == 'x')
                    {
                        rd1 = rd1.Substring(2);
                    }
                    j = rd1.Length;
                    for (i = 0; i < j; i++)
                    {
                        if (!Uri.IsHexDigit(rd1[i]))
                        {
                            h = 0;
                        }
                    }
                    if (h != 0)
                    {
                        h = Convert.ToInt32(rd1, 16);
                    }
                }
            }
            if (h > 127 && h < tds[25] + 128 && h % 4 == 0)
            {
                if (minitxt.Text == "Cannot Read Address")
                {
                    minitxt.Text = "";
                }
                ArtParOffset.Text = "0x" + (h - 128).ToString("X");
                ArtParCbList.Text = "";
                artpr = 0;
                ArtParList.Enabled = false;
                ArtParList.Rows.Clear();
                artpo = h / 4 - 32;
                if (ArtParOffOpenSize.SelectedIndex > 0)
                {
                    n = ArtParOffOpenSize.SelectedIndex;
                }
                else
                {
                    k = artpo * 4;
                    m = k + 3;
                    g = k + 1023;
                    if (g > tds[25])
                    {
                        g = tds[25];
                    }
                    for (j = stf; j < md; j++)
                    {
                        if (alm[j] > m && alm[j] < g)
                        {
                            rmv = j * 4;
                            for (mov = 0; mov < par; mov++)
                            {
                                if (asc[mov] == rmv)
                                {
                                    g = alm[j];
                                    break;
                                }
                            }
                        }
                    }
                    n = (g - k) / 4;
                    if (n > 1)
                    {
                        for (j = 1; j < n; j++)
                        {
                            if (alm[artpo + j] == -86052851)
                            {
                                n = j;
                                break;
                            }
                        }
                    }
                }
                for (i = 0; i < n; i++)
                {
                    g = alm[artpo + i];
                    if (g > 268435455 || g < -268435455)
                    {
                        rd2 = "Address:0x" + (i * 4 + h).ToString("X");
                    }
                    else
                    {
                        rd2 = "*Address:0x" + (i * 4 + h).ToString("X");
                    }
                    if (ArtHexView.Checked)
                    {
                        ArtParList.Rows.Add(rd2, g.ToString("X"));
                    }
                    else if (rd2[0] == '*')
                    {
                        ArtParList.Rows.Add(rd2, g.ToString());
                    }
                    else
                    {
                        bitf = BitConverter.GetBytes(g);
                        rdfr = BitConverter.ToSingle(bitf, 0);
                        ArtParList.Rows.Add(rd2, rdfr.ToString());
                    }
                }
                if (n > 4)
                {
                    ArtParList.ScrollBars = ScrollBars.None;
                    ArtParList.ScrollBars = ScrollBars.Vertical;
                }
                ArtParList.Enabled = true;
            }
            else
            {
                minitxt.Text = "Cannot Read Address";
            }
        }

        private void ArtParOffsetOpen_Click(object sender, EventArgs e)
        {
            rd1 = ArtParValuetxt.Text;
            h = 1;
            if (rd1.Length > 2)
            {
                if (rd1[0] == 'D' && rd1[1] == 'x')
                {
                    rd1 = rd1.Substring(2);
                    if (int.TryParse(rd1, out i))
                    {
                        h = int.Parse(rd1);
                    }
                }
                else
                {
                    if (rd1[0] == '0' && rd1[1] == 'x')
                    {
                        rd1 = rd1.Substring(2);
                    }
                    j = rd1.Length;
                    for (i = 0; i < j; i++)
                    {
                        if (!Uri.IsHexDigit(rd1[i]))
                        {
                            h = 0;
                        }
                    }
                    if (h != 0)
                    {
                        h = Convert.ToInt32(rd1, 16);
                    }
                }
            }
            if (h >= 0 && h < tds[25] && h % 4 == 0)
            {
                if (minitxt.Text == "Cannot Read Offset")
                {
                    minitxt.Text = "";
                }
                ArtParOffset.Text = "0x" + h.ToString("X");
                ArtParCbList.Text = "";
                artpr = 0;
                ArtParList.Enabled = false;
                ArtParList.Rows.Clear();
                artpo = h / 4;
                if (ArtParOffOpenSize.SelectedIndex > 0)
                {
                    n = ArtParOffOpenSize.SelectedIndex;
                }
                else
                {
                    k = artpo * 4;
                    m = k + 3;
                    g = k + 1023;
                    if (g > tds[25])
                    {
                        g = tds[25];
                    }
                    for (j = stf; j < md; j++)
                    {
                        if (alm[j] > m && alm[j] < g)
                        {
                            rmv = j * 4;
                            for (mov = 0; mov < par; mov++)
                            {
                                if (asc[mov] == rmv)
                                {
                                    g = alm[j];
                                    break;
                                }
                            }
                        }
                    }
                    n = (g - k) / 4;
                    if (n > 1)
                    {
                        for (j = 1; j < n; j++)
                        {
                            if (alm[artpo + j] == -86052851)
                            {
                                n = j;
                                break;
                            }
                        }
                    }
                }
                for (i = 0; i < n; i++)
                {
                    g = alm[artpo + i];
                    if (g > 268435455 || g < -268435455)
                    {
                        rd2 = "0x" + (i * 4).ToString("X");
                    }
                    else
                    {
                        rd2 = "*0x" + (i * 4).ToString("X");
                    }
                    if (ArtHexView.Checked)
                    {
                        ArtParList.Rows.Add(rd2, g.ToString("X"));
                    }
                    else if (rd2[0] == '*')
                    {
                        ArtParList.Rows.Add(rd2, g.ToString());
                    }
                    else
                    {
                        bitf = BitConverter.GetBytes(g);
                        rdfr = BitConverter.ToSingle(bitf, 0);
                        ArtParList.Rows.Add(rd2, rdfr.ToString());
                    }
                }
                if (n > 4)
                {
                    ArtParList.ScrollBars = ScrollBars.None;
                    ArtParList.ScrollBars = ScrollBars.Vertical;
                }
                ArtParList.Enabled = true;
            }
            else
            {
                minitxt.Text = "Cannot Read Offset";
            }
        }

        private void EvOvrStrip_Opening(object sender, CancelEventArgs e)
        {
            if (EvOvrCbList.SelectedIndex != 0 && EvOvrCbList.SelectedIndex != 1)
            {
                e.Cancel = true;
            }
        }

        private void EvOvrEdit_Click(object sender, EventArgs e)
        {
            if (EvOvrCbList.SelectedIndex != 0 && EvOvrCbList.SelectedIndex != 1)
            {
                return;
            }
            if (EvOvrCbList.SelectedIndex == 0)
            {
                n = alm[dat + 20];
            }
            else
            {
                n = alm[dat + 21];
            }
            if (n == 0)
            {
                if (pacname.Text.Length > 3)
                {
                    rd2 = pacname.Text.Substring(3);
                    if (EvOvrCbList.SelectedIndex == 0)
                    {
                        rd1 = "statusAnimCmdDisguiseList__10ft" + rd2 + "Node";
                    }
                    else
                    {
                        rd1 = "statusAnimCmdExitDisguiseList__10ft" + rd2 + "Node";
                    }
                }
                else
                {
                    rd1 = "";
                }
                nonam[0] = 0;
                nonam[1] = -1;
            }
            else if (n >= 8096 && n < tds[25])
            {
                rd1 = "";
                for (i = 0; i < tds[27]; i++)
                {
                    if (n == rnext[i * 2])
                    {
                        rd1 = DataDTList.Items[i].ToString();
                        an1 = i;
                        break;
                    }
                }
                j = n / 4;
                for (i = 0; i < 500; i++)
                {
                    nonam[i] = alm[j + i * 2];
                    if (nonam[i] < 0 || j + i * 2 >= md)
                    {
                        break;
                    }
                }
            }
            else
            {
                n = 1;
            }
            if (n == 1)
            {
                return;
            }
            nonam[510] = 0;
            rd2 = rd1;
            using (EdOvrForm edOvrForm = new EdOvrForm())
            {
                edOvrForm.eodt = nonam;
                edOvrForm.eonm = rd1;
                edOvrForm.eow = OvrFW;
                edOvrForm.eoh = OvrFH;
                edOvrForm.ShowDialog(this);
                nonam = edOvrForm.eodt;
                rd1 = edOvrForm.eonm;
                OvrFW = edOvrForm.eow;
                OvrFH = edOvrForm.eoh;
            }
            if (nonam[510] <= 0)
            {
                return;
            }
            h = nonam[510] * 2 + 2;
            if (n == 0)
            {
                for (j = stf; j < md; j++)
                {
                    if (alm[j] == -86052851)
                    {
                        for (i = j + 1; i < j + h; i++)
                        {
                            if (alm[i] != -86052851)
                            {
                                j = i;
                                break;
                            }
                        }
                        if (i == j + h)
                        {
                            break;
                        }
                    }
                }
                if (j >= md)
                {
                    j = md;
                    md += h;
                }
                h = nonam[510];
                for (i = 0; i < h; i++)
                {
                    alm[j + i * 2] = nonam[i];
                    alm[j + i * 2 + 1] = 0;
                    EvOvrId.Items.Add(nonam[i].ToString("X"));
                }
                alm[j + h * 2] = -1;
                alm[j + h * 2 + 1] = 0;
                if (EvOvrCbList.SelectedIndex == 0)
                {
                    alm[dat + 20] = j * 4;
                    m = dat * 4 + 80;
                    DataOffsetList.Items[20] = "EntryActionOverride\t - 0x" + alm[dat + 20].ToString("X");
                }
                else
                {
                    alm[dat + 21] = j * 4;
                    m = dat * 4 + 84;
                    DataOffsetList.Items[21] = "ExitActionOverride\t - 0x" + alm[dat + 21].ToString("X");
                }
                asc[par] = m;
                par++;
                tds[26]++;
                if (rd1.Length > 0)
                {
                    g = tds[27] * 2 + 1;
                    an5 = rnext[g];
                    g = tds[27] * 2;
                    for (i = rnexsize; i >= g; i--)
                    {
                        rnext[i + 2] = rnext[i];
                    }
                    m = rd1.Length + 1;
                    g = tds[27] + tds[28] + 1;
                    for (i = 0; i < g; i++)
                    {
                        if (rnext[i * 2 + 1] >= an5)
                        {
                            rnext[i * 2 + 1] += m;
                        }
                    }
                    rnext[tds[27] * 2] = j * 4;
                    rnext[tds[27] * 2 + 1] = an5;
                    tds[27]++;
                    tds[24] += m + 8;
                    rnexsize = (tds[24] + 3) / 4 - (tds[25] / 4 + par) - 7;
                    an2 = (tds[27] + tds[28]) * 2;
                    byte[] array = new byte[8000];
                    for (i = 0; i < an5; i++)
                    {
                        if (i % 4 == 0)
                        {
                            array[i] = (byte)((rnext[an2] >> 24) & 0xFF);
                        }
                        else if (i % 4 == 1)
                        {
                            array[i] = (byte)((rnext[an2] >> 16) & 0xFF);
                        }
                        else if (i % 4 == 2)
                        {
                            array[i] = (byte)((rnext[an2] >> 8) & 0xFF);
                        }
                        else
                        {
                            array[i] = (byte)(rnext[an2] & 0xFF);
                            an2++;
                        }
                    }
                    k = m - 1;
                    byte[] bytes = Encoding.UTF8.GetBytes(rd1);
                    for (i = 0; i < k; i++)
                    {
                        array[an5 + i] = bytes[i];
                    }
                    i = an5;
                    for (an5 = (rnexsize - (tds[27] + tds[28]) * 2) * 4; i < an5; i++)
                    {
                        if (i % 4 == 0)
                        {
                            array[m + i] = (byte)((rnext[an2] >> 24) & 0xFF);
                        }
                        else if (i % 4 == 1)
                        {
                            array[m + i] = (byte)((rnext[an2] >> 16) & 0xFF);
                        }
                        else if (i % 4 == 2)
                        {
                            array[m + i] = (byte)((rnext[an2] >> 8) & 0xFF);
                        }
                        else
                        {
                            array[m + i] = (byte)(rnext[an2] & 0xFF);
                            an2++;
                        }
                    }
                    an2 = (tds[27] + tds[28]) * 2;
                    for (i = 0; i < an5; i += 4)
                    {
                        rnext[an2 + i / 4] = array[i] * 16777216 + array[i + 1] * 65536 + array[i + 2] * 256 + array[i + 3];
                    }
                    i = tds[27] * 2 - 2;
                    DataDTList.Items.Add(rd1);
                }
                Fixam();
            }
            else
            {
                g = EvOvrId.Items.Count * 2 + 2;
                if (h > g)
                {
                    fnt = 0;
                    an4 = j + g;
                    mov = h - g;
                    if (an4 + 3 > md)
                    {
                        if (alm[md - 2] == -86110838)
                        {
                            alm[md + mov - 2] = alm[md - 2];
                            alm[md + mov - 1] = alm[md - 1];
                            fnt = 1;
                        }
                        else if (an4 >= md)
                        {
                            fnt = 1;
                        }
                    }
                    if (fnt == 0)
                    {
                        m = j + h;
                        for (i = an4 + 1; i < m; i++)
                        {
                            if (alm[i] != -86052851)
                            {
                                i = m + 8;
                            }
                        }
                        if (i != m)
                        {
                            m = j;
                            for (j = stf; j < md; j++)
                            {
                                if (alm[j] == -86052851)
                                {
                                    for (i = j + 1; i < j + h; i++)
                                    {
                                        if (alm[i] != -86052851)
                                        {
                                            j = i;
                                            break;
                                        }
                                    }
                                    if (i == j + h)
                                    {
                                        break;
                                    }
                                }
                            }
                            if (j >= md)
                            {
                                j = md;
                                md += h;
                            }
                            g -= 2;
                            for (n = 0; n < g; n++)
                            {
                                alm[j + n] = alm[m + n];
                                alm[m + n] = -86052851;
                                n++;
                                if (alm[m + n] != 0)
                                {
                                    rmv = (m + n) * 4;
                                    for (mov = 0; mov < par; mov++)
                                    {
                                        if (asc[mov] == rmv)
                                        {
                                            asc[mov] = (j + n) * 4;
                                            break;
                                        }
                                    }
                                }
                                alm[j + n] = alm[m + n];
                                alm[m + n] = -86052851;
                            }
                            alm[m + n] = -86052851;
                            alm[m + n + 1] = -86052851;
                            if (EvOvrCbList.SelectedIndex == 0)
                            {
                                alm[dat + 20] = j * 4;
                                DataOffsetList.Items[20] = "EntryActionOverride\t - 0x" + alm[dat + 20].ToString("X");
                                if (rd2 != "")
                                {
                                    rnext[an1 * 2] = j * 4;
                                }
                            }
                            else
                            {
                                alm[dat + 21] = j * 4;
                                DataOffsetList.Items[21] = "ExitActionOverride\t - 0x" + alm[dat + 21].ToString("X");
                                if (rd2 != "")
                                {
                                    rnext[an1 * 2] = j * 4;
                                }
                            }
                        }
                    }
                    else
                    {
                        md += mov * 2;
                    }
                    h = nonam[510];
                    an5 = EvOvrId.Items.Count;
                    EvOvrId.Items.Clear();
                    for (i = 0; i < h; i++)
                    {
                        alm[j + i * 2] = nonam[i];
                        if (i >= an5)
                        {
                            alm[j + i * 2 + 1] = 0;
                        }
                        EvOvrId.Items.Add(nonam[i].ToString("X"));
                    }
                    alm[j + h * 2] = -1;
                    alm[j + h * 2 + 1] = 0;
                    Fixam();
                }
                else
                {
                    h = nonam[510];
                    EvOvrId.Items.Clear();
                    for (i = 0; i < h; i++)
                    {
                        alm[j + i * 2] = nonam[i];
                        EvOvrId.Items.Add(nonam[i].ToString("X"));
                    }
                }
                if (rd1 != rd2)
                {
                    if (rd2 != "")
                    {
                        an5 = rnext[an1 * 2 + 1];
                        if (rd1 != "")
                        {
                            g = rd1.Length - rd2.Length;
                        }
                        else
                        {
                            g = -1 - rd2.Length;
                        }
                        an2 = (tds[27] + tds[28]) * 2;
                        if (g != 0)
                        {
                            for (i = 1; i < an2; i += 2)
                            {
                                if (rnext[i] > an5)
                                {
                                    rnext[i] += g;
                                }
                            }
                        }
                        tds[24] += g;
                        h = (rnexsize - (tds[27] + tds[28]) * 2 - 8) * 4;
                        rnexsize = (tds[24] + 3) / 4 - (tds[25] / 4 + par) - 8;
                        byte[] array = new byte[8000];
                        for (i = 0; i < an5; i++)
                        {
                            if (i % 4 == 0)
                            {
                                array[i] = (byte)((rnext[an2] >> 24) & 0xFF);
                            }
                            else if (i % 4 == 1)
                            {
                                array[i] = (byte)((rnext[an2] >> 16) & 0xFF);
                            }
                            else if (i % 4 == 2)
                            {
                                array[i] = (byte)((rnext[an2] >> 8) & 0xFF);
                            }
                            else
                            {
                                array[i] = (byte)(rnext[an2] & 0xFF);
                                an2++;
                            }
                        }
                        m = (tds[27] + tds[28]) * 8 + (an5 + rd2.Length + 1);
                        an2 = m / 4;
                        if (rd1 != "")
                        {
                            k = rd1.Length;
                            byte[] bytes = Encoding.UTF8.GetBytes(rd1);
                            for (i = 0; i < k; i++)
                            {
                                array[an5 + i] = bytes[i];
                            }
                            i = an5 + k + 1;
                            h += 31;
                            while (i < h)
                            {
                                if (m % 4 == 0)
                                {
                                    array[i] = (byte)((rnext[m / 4] >> 24) & 0xFF);
                                }
                                else if (m % 4 == 1)
                                {
                                    array[i] = (byte)((rnext[m / 4] >> 16) & 0xFF);
                                }
                                else if (m % 4 == 2)
                                {
                                    array[i] = (byte)((rnext[m / 4] >> 8) & 0xFF);
                                }
                                else
                                {
                                    array[i] = (byte)(rnext[m / 4] & 0xFF);
                                }
                                m++;
                                i++;
                            }
                            an2 = (tds[27] + tds[28]) * 2;
                            for (i = 0; i < h; i += 4)
                            {
                                rnext[an2 + i / 4] = array[i] * 16777216 + array[i + 1] * 65536 + array[i + 2] * 256 + array[i + 3];
                            }
                            DataDTList.Items[an1] = rd1;
                        }
                        else
                        {
                            i = an5;
                            h -= 8;
                            while (i < h)
                            {
                                if (m % 4 == 0)
                                {
                                    array[i] = (byte)((rnext[m / 4] >> 24) & 0xFF);
                                }
                                else if (m % 4 == 1)
                                {
                                    array[i] = (byte)((rnext[m / 4] >> 16) & 0xFF);
                                }
                                else if (m % 4 == 2)
                                {
                                    array[i] = (byte)((rnext[m / 4] >> 8) & 0xFF);
                                }
                                else
                                {
                                    array[i] = (byte)(rnext[m / 4] & 0xFF);
                                }
                                m++;
                                i++;
                            }
                            an2 = (tds[27] + tds[28]) * 2;
                            for (i = an1 * 2; i < an2; i++)
                            {
                                rnext[i] = rnext[i + 2];
                            }
                            tds[27]--;
                            an2 -= 2;
                            rnexsize -= 2;
                            for (i = 0; i < h; i += 4)
                            {
                                rnext[an2 + i / 4] = array[i] * 16777216 + array[i + 1] * 65536 + array[i + 2] * 256 + array[i + 3];
                            }
                            DataDTList.Items.RemoveAt(an1);
                        }
                    }
                    else
                    {
                        g = tds[27] * 2 + 1;
                        an5 = rnext[g];
                        g = tds[27] * 2;
                        for (i = rnexsize; i >= g; i--)
                        {
                            rnext[i + 2] = rnext[i];
                        }
                        m = rd1.Length + 1;
                        g = tds[27] + tds[28] + 1;
                        for (i = 0; i < g; i++)
                        {
                            if (rnext[i * 2 + 1] >= an5)
                            {
                                rnext[i * 2 + 1] += m;
                            }
                        }
                        rnext[tds[27] * 2] = j * 4;
                        rnext[tds[27] * 2 + 1] = an5;
                        tds[27]++;
                        tds[24] += m + 8;
                        rnexsize = (tds[24] + 3) / 4 - (tds[25] / 4 + par) - 8;
                        an2 = (tds[27] + tds[28]) * 2;
                        byte[] array = new byte[8000];
                        for (i = 0; i < an5; i++)
                        {
                            if (i % 4 == 0)
                            {
                                array[i] = (byte)((rnext[an2] >> 24) & 0xFF);
                            }
                            else if (i % 4 == 1)
                            {
                                array[i] = (byte)((rnext[an2] >> 16) & 0xFF);
                            }
                            else if (i % 4 == 2)
                            {
                                array[i] = (byte)((rnext[an2] >> 8) & 0xFF);
                            }
                            else
                            {
                                array[i] = (byte)(rnext[an2] & 0xFF);
                                an2++;
                            }
                        }
                        k = m - 1;
                        byte[] bytes = Encoding.UTF8.GetBytes(rd1);
                        for (i = 0; i < k; i++)
                        {
                            array[an5 + i] = bytes[i];
                        }
                        i = an5;
                        for (an5 = (rnexsize - (tds[27] + tds[28]) * 2) * 4; i < an5; i++)
                        {
                            if (i % 4 == 0)
                            {
                                array[m + i] = (byte)((rnext[an2] >> 24) & 0xFF);
                            }
                            else if (i % 4 == 1)
                            {
                                array[m + i] = (byte)((rnext[an2] >> 16) & 0xFF);
                            }
                            else if (i % 4 == 2)
                            {
                                array[m + i] = (byte)((rnext[an2] >> 8) & 0xFF);
                            }
                            else
                            {
                                array[m + i] = (byte)(rnext[an2] & 0xFF);
                                an2++;
                            }
                        }
                        an2 = (tds[27] + tds[28]) * 2;
                        for (i = 0; i < an5; i += 4)
                        {
                            rnext[an2 + i / 4] = array[i] * 16777216 + array[i + 1] * 65536 + array[i + 2] * 256 + array[i + 3];
                        }
                        i = tds[27] * 2 - 2;
                        DataDTList.Items.Add(rd1);
                    }
                    Fixam();
                }
                EvOvrId.SelectedIndex = 0;
            }
            if (qe)
            {
                Qsave.Enabled = true;
            }
        }

        private void EvOvrRemove_Click(object sender, EventArgs e)
        {
            if (EvOvrCbList.SelectedIndex == 0 || EvOvrCbList.SelectedIndex == 1)
            {
                if (EvOvrId.SelectedIndex != -1)
                {
                    if (EvOvrId.Items.Count > 1)
                    {
                        if (minitxt.Text == "invalid Command.")
                        {
                            minitxt.Text = "";
                        }
                        if (EvOvrOffset.Text.Length > 5)
                        {
                            rd1 = EvOvrOffset.Text.Substring(2);
                            h = Convert.ToInt32(rd1, 16);
                            if (h >= 8096 && h < tds[25])
                            {
                                j = h / 4;
                                g = EvList.Items.Count;
                                RemoveAllEv();
                                if (EvOvrCbList.SelectedIndex == 0)
                                {
                                    n = alm[dat + 20] / 4 + 1;
                                }
                                else
                                {
                                    n = alm[dat + 21] / 4 + 1;
                                }
                                i = EvOvrId.SelectedIndex * 2;
                                alm[n + i] = 0;
                                rmv = (n + i) * 4;
                                Delasc();
                                if (EvOffsetInterlock.Checked)
                                {
                                    k = h + g * 8;
                                    for (i = stf; i < md; i++)
                                    {
                                        if (alm[i] >= h && alm[i] <= k)
                                        {
                                            DelILData();
                                        }
                                    }
                                }
                            }
                        }
                        if (EvOvrCbList.SelectedIndex == 0)
                        {
                            n = alm[dat + 20] / 4;
                        }
                        else
                        {
                            n = alm[dat + 21] / 4;
                        }
                        k = EvOvrId.Items.Count * 2 - 2;
                        for (i = EvOvrId.SelectedIndex * 2; i < k; i += 2)
                        {
                            if (alm[n + i + 3] != 0)
                            {
                                rmv = (n + i) * 4 + 12;
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == rmv)
                                    {
                                        asc[mov] -= 8;
                                        break;
                                    }
                                }
                            }
                            alm[n + i] = alm[n + i + 2];
                            alm[n + i + 1] = alm[n + i + 3];
                        }
                        alm[n + i] = -1;
                        alm[n + i + 1] = 0;
                        alm[n + i + 2] = -86052851;
                        alm[n + i + 3] = -86052851;
                        k = EvOvrId.SelectedIndex;
                        if (k + 1 >= EvOvrId.Items.Count)
                        {
                            k--;
                        }
                        EvOvrId.Items.Clear();
                        while (alm[n] >= 0)
                        {
                            EvOvrId.Items.Add(alm[n].ToString("X"));
                            n += 2;
                            if (n >= md)
                            {
                                break;
                            }
                        }
                        EvOvrId.SelectedIndex = k;
                        Fixam();
                        if (qe)
                        {
                            Qsave.Enabled = true;
                        }
                    }
                    else
                    {
                        minitxt.Text = "invalid Command.";
                    }
                }
                else
                {
                    minitxt.Text = "invalid Command.";
                }
            }
            else
            {
                minitxt.Text = "invalid Command.";
            }
        }

        private void EvOvrUp_Click(object sender, EventArgs e)
        {
            if (EvOvrCbList.SelectedIndex == 0 || EvOvrCbList.SelectedIndex == 1)
            {
                if (EvOvrId.SelectedIndex != -1)
                {
                    if (EvOvrId.Items.Count > 1)
                    {
                        if (EvOvrId.SelectedIndex != 0)
                        {
                            if (EvOvrCbList.SelectedIndex == 0)
                            {
                                n = alm[dat + 20] / 4;
                            }
                            else
                            {
                                n = alm[dat + 21] / 4;
                            }
                            i = EvOvrId.SelectedIndex * 2;
                            if (alm[n + i + 1] == 0)
                            {
                                if (alm[n + i - 1] != 0)
                                {
                                    rmv = (n + i) * 4 - 4;
                                    for (mov = 0; mov < par; mov++)
                                    {
                                        if (asc[mov] == rmv)
                                        {
                                            asc[mov] += 8;
                                            alm[mov + md] += 8;
                                            break;
                                        }
                                    }
                                }
                            }
                            else if (alm[n + i - 1] == 0)
                            {
                                rmv = (n + i) * 4 + 4;
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == rmv)
                                    {
                                        asc[mov] -= 8;
                                        alm[mov + md] -= 8;
                                        break;
                                    }
                                }
                            }
                            h = alm[n + i];
                            alm[n + i] = alm[n + i - 2];
                            alm[n + i - 2] = h;
                            h = alm[n + i + 1];
                            alm[n + i + 1] = alm[n + i - 1];
                            alm[n + i - 1] = h;
                            i = EvOvrId.SelectedIndex;
                            EvOvrId.Items.Clear();
                            while (alm[n] >= 0)
                            {
                                EvOvrId.Items.Add(alm[n].ToString("X"));
                                n += 2;
                                if (n >= md)
                                {
                                    break;
                                }
                            }
                            EvOvrId.SelectedIndex = i - 1;
                            if (qe)
                            {
                                Qsave.Enabled = true;
                            }
                        }
                        else
                        {
                            minitxt.Text = "invalid Command.";
                        }
                    }
                    else
                    {
                        minitxt.Text = "invalid Command.";
                    }
                }
                else
                {
                    minitxt.Text = "invalid Command.";
                }
            }
            else
            {
                minitxt.Text = "invalid Command.";
            }
        }

        private void EvOvrDown_Click(object sender, EventArgs e)
        {
            if (EvOvrCbList.SelectedIndex == 0 || EvOvrCbList.SelectedIndex == 1)
            {
                if (EvOvrId.SelectedIndex != -1)
                {
                    if (EvOvrId.Items.Count > 1)
                    {
                        if (EvOvrId.SelectedIndex != EvOvrId.Items.Count - 1)
                        {
                            if (EvOvrCbList.SelectedIndex == 0)
                            {
                                n = alm[dat + 20] / 4;
                            }
                            else
                            {
                                n = alm[dat + 21] / 4;
                            }
                            i = EvOvrId.SelectedIndex * 2;
                            if (alm[n + i + 1] == 0)
                            {
                                if (alm[n + i + 3] != 0)
                                {
                                    rmv = (n + i) * 4 + 12;
                                    for (mov = 0; mov < par; mov++)
                                    {
                                        if (asc[mov] == rmv)
                                        {
                                            asc[mov] -= 8;
                                            alm[mov + md] -= 8;
                                            break;
                                        }
                                    }
                                }
                            }
                            else if (alm[n + i + 3] == 0)
                            {
                                rmv = (n + i) * 4 + 4;
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == rmv)
                                    {
                                        asc[mov] += 8;
                                        alm[mov + md] += 8;
                                        break;
                                    }
                                }
                            }
                            h = alm[n + i];
                            alm[n + i] = alm[n + i + 2];
                            alm[n + i + 2] = h;
                            h = alm[n + i + 1];
                            alm[n + i + 1] = alm[n + i + 3];
                            alm[n + i + 3] = h;
                            i = EvOvrId.SelectedIndex;
                            EvOvrId.Items.Clear();
                            while (alm[n] >= 0)
                            {
                                EvOvrId.Items.Add(alm[n].ToString("X"));
                                n += 2;
                                if (n >= md)
                                {
                                    break;
                                }
                            }
                            EvOvrId.SelectedIndex = i + 1;
                            if (qe)
                            {
                                Qsave.Enabled = true;
                            }
                        }
                        else
                        {
                            minitxt.Text = "invalid Command.";
                        }
                    }
                    else
                    {
                        minitxt.Text = "invalid Command.";
                    }
                }
                else
                {
                    minitxt.Text = "invalid Command.";
                }
            }
            else
            {
                minitxt.Text = "invalid Command.";
            }
        }

        private void EvOvrListMoveOffset_Click(object sender, EventArgs e)
        {
            if (EvOvrCbList.SelectedIndex == 0 || EvOvrCbList.SelectedIndex == 1)
            {
                if (EvOvrCbList.SelectedIndex == 0)
                {
                    i = alm[dat + 20];
                }
                else
                {
                    i = alm[dat + 21];
                }
                if (i >= 8096 && i < tds[25])
                {
                    k = i / 4;
                    an5 = 0;
                    g = EvOvrId.Items.Count * 2 + 2;
                    for (j = stf; j < k; j++)
                    {
                        if (alm[j] == -86052851)
                        {
                            for (m = j + 1; m < j + g; m++)
                            {
                                if (alm[m] != -86052851)
                                {
                                    j = m;
                                    break;
                                }
                            }
                            if (m == j + g)
                            {
                                an5 = 1;
                                g -= 2;
                                for (n = 0; n < g; n++)
                                {
                                    alm[j + n] = alm[k + n];
                                    alm[k + n] = -86052851;
                                    n++;
                                    if (alm[k + n] != 0)
                                    {
                                        rmv = (k + n) * 4;
                                        for (mov = 0; mov < par; mov++)
                                        {
                                            if (asc[mov] == rmv)
                                            {
                                                asc[mov] = (j + n) * 4;
                                                break;
                                            }
                                        }
                                    }
                                    alm[j + n] = alm[k + n];
                                    alm[k + n] = -86052851;
                                }
                                alm[j + n] = -1;
                                alm[k + n] = -86052851;
                                alm[j + n + 1] = 0;
                                alm[k + n + 1] = -86052851;
                                if (EvOvrCbList.SelectedIndex == 0)
                                {
                                    alm[dat + 20] = j * 4;
                                    DataOffsetList.Items[20] = "EntryActionOverride\t - 0x" + alm[dat + 20].ToString("X");
                                }
                                else
                                {
                                    alm[dat + 21] = j * 4;
                                    DataOffsetList.Items[21] = "ExitActionOverride\t - 0x" + alm[dat + 21].ToString("X");
                                }
                                for (k = 0; k < tds[27]; k++)
                                {
                                    if (i == rnext[k * 2])
                                    {
                                        rnext[k * 2] = j * 4;
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                    }
                    if (an5 > 0)
                    {
                        minitxt.Text = "Moved 1 Data.";
                        Fixam();
                        if (qe)
                        {
                            Qsave.Enabled = true;
                        }
                    }
                    else
                    {
                        minitxt.Text = "No Moved.";
                    }
                }
                else
                {
                    minitxt.Text = "invalid Command.";
                }
            }
            else
            {
                minitxt.Text = "invalid Command.";
            }
        }

        private void EvOvrListMoveB_Click(object sender, EventArgs e)
        {
            if (EvOvrCbList.SelectedIndex == 0 || EvOvrCbList.SelectedIndex == 1)
            {
                if (EvOvrCbList.SelectedIndex == 0)
                {
                    i = alm[dat + 20];
                }
                else
                {
                    i = alm[dat + 21];
                }
                if (i >= 8096 && i < tds[25])
                {
                    k = i / 4;
                    an5 = 0;
                    g = EvOvrId.Items.Count * 2 + 2;
                    for (j = k; j < md; j++)
                    {
                        if (alm[j] == -86052851)
                        {
                            for (m = j + 1; m < j + g; m++)
                            {
                                if (alm[m] != -86052851)
                                {
                                    j = m;
                                    break;
                                }
                            }
                            if (m == j + g)
                            {
                                g -= 2;
                                for (n = 0; n < g; n++)
                                {
                                    alm[j + n] = alm[k + n];
                                    alm[k + n] = -86052851;
                                    n++;
                                    if (alm[k + n] != 0)
                                    {
                                        rmv = (k + n) * 4;
                                        for (mov = 0; mov < par; mov++)
                                        {
                                            if (asc[mov] == rmv)
                                            {
                                                asc[mov] = (j + n) * 4;
                                                break;
                                            }
                                        }
                                    }
                                    alm[j + n] = alm[k + n];
                                    alm[k + n] = -86052851;
                                }
                                alm[j + n] = -1;
                                alm[k + n] = -86052851;
                                alm[j + n + 1] = 0;
                                alm[k + n + 1] = -86052851;
                                if (EvOvrCbList.SelectedIndex == 0)
                                {
                                    alm[dat + 20] = j * 4;
                                    DataOffsetList.Items[20] = "EntryActionOverride\t - 0x" + alm[dat + 20].ToString("X");
                                }
                                else
                                {
                                    alm[dat + 21] = j * 4;
                                    DataOffsetList.Items[21] = "ExitActionOverride\t - 0x" + alm[dat + 21].ToString("X");
                                }
                                for (k = 0; k < tds[27]; k++)
                                {
                                    if (i == rnext[k * 2])
                                    {
                                        rnext[k * 2] = j * 4;
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                    }
                    if (j >= md)
                    {
                        j = md;
                        md += g;
                        g -= 2;
                        for (n = 0; n < g; n++)
                        {
                            alm[j + n] = alm[k + n];
                            alm[k + n] = -86052851;
                            n++;
                            if (alm[k + n] != 0)
                            {
                                rmv = (k + n) * 4;
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == rmv)
                                    {
                                        asc[mov] = (j + n) * 4;
                                        break;
                                    }
                                }
                            }
                            alm[j + n] = alm[k + n];
                            alm[k + n] = -86052851;
                        }
                        alm[j + n] = -1;
                        alm[k + n] = -86052851;
                        alm[j + n + 1] = 0;
                        alm[k + n + 1] = -86052851;
                        if (EvOvrCbList.SelectedIndex == 0)
                        {
                            alm[dat + 20] = j * 4;
                            DataOffsetList.Items[20] = "EntryActionOverride\t - 0x" + alm[dat + 20].ToString("X");
                        }
                        else
                        {
                            alm[dat + 21] = j * 4;
                            DataOffsetList.Items[21] = "ExitActionOverride\t - 0x" + alm[dat + 21].ToString("X");
                        }
                        for (k = 0; k < tds[27]; k++)
                        {
                            if (i == rnext[k * 2])
                            {
                                rnext[k * 2] = j * 4;
                                break;
                            }
                        }
                    }
                    minitxt.Text = "Moved 1 Data.";
                    Fixam();
                    if (qe)
                    {
                        Qsave.Enabled = true;
                    }
                }
                else
                {
                    minitxt.Text = "invalid Command.";
                }
            }
            else
            {
                minitxt.Text = "invalid Command.";
            }
        }

        private void EvOvrListCount_Click(object sender, EventArgs e)
        {
            if (EvOvrCbList.SelectedIndex == 0)
            {
                minitxt.Text = "Override List Count(Entry):" + EvOvrId.Items.Count;
            }
            else if (EvOvrCbList.SelectedIndex == 1)
            {
                minitxt.Text = "Override List Count(Exit):" + EvOvrId.Items.Count;
            }
        }

        private void EvOvrListSort_Click(object sender, EventArgs e)
        {
            n = EvOvrId.Items.Count;
            if (n > 1 && n < 513)
            {
                if (EvOvrCbList.SelectedIndex == 0)
                {
                    k = alm[dat + 20];
                }
                else
                {
                    k = alm[dat + 21];
                }
                if (k >= 8096 && k < tds[25])
                {
                    h = k / 4;
                    g = h + n * 2;
                    k = 0;
                    i = h;
                    while (i < g && alm[i] >= k)
                    {
                        k = alm[i];
                        i += 2;
                    }
                    if (i < g)
                    {
                        i = h;
                        while (i < g && (alm[i] >= 0 || alm[i] < 4095))
                        {
                            i += 2;
                        }
                        if (i == g)
                        {
                            for (i = h + 1; i < g; i++)
                            {
                                if (alm[i] >= 8096 && alm[i] < tds[25])
                                {
                                    rmv = i * 4;
                                    Delasc();
                                }
                            }
                            for (i = 0; i < n; i++)
                            {
                                nonam[i] = (alm[h + i * 2] << 12) + i;
                            }
                            while (i < 512)
                            {
                                nonam[i] = 268435456;
                                i++;
                            }
                            Array.Sort(nonam);
                            int[] array = new int[n];
                            for (i = 0; i < n; i++)
                            {
                                k = (nonam[i] & 0xFFF);
                                array[i] = alm[h + k * 2 + 1];
                            }
                            for (i = 0; i < n; i++)
                            {
                                alm[h + i * 2] = ((nonam[i] >> 12) & 0xFFF);
                                alm[h + i * 2 + 1] = array[i];
                            }
                            for (i = h + 1; i < g; i++)
                            {
                                if (alm[i] >= 8096 && alm[i] < tds[25])
                                {
                                    asc[par] = i * 4;
                                    par++;
                                    tds[26]++;
                                }
                            }
                            EvOvrId.Items.Clear();
                            while (alm[h] >= 0)
                            {
                                EvOvrId.Items.Add(alm[h].ToString("X"));
                                h += 2;
                                if (h >= md)
                                {
                                    break;
                                }
                            }
                            Fixam();
                            minitxt.Text = "Sort Successed.";
                            EvOvrId.SelectedIndex = 0;
                            if (qe)
                            {
                                Qsave.Enabled = true;
                            }
                        }
                        else
                        {
                            minitxt.Text = "Sort Failed.";
                        }
                    }
                    else
                    {
                        minitxt.Text = "Sort Failed.";
                    }
                }
                else
                {
                    minitxt.Text = "Sort Failed.";
                }
            }
            else
            {
                minitxt.Text = "invalid Command.";
            }
        }

        private void DataOffsetList_DoubleClick(object sender, EventArgs e)
        {
            if (DataOffsetList.SelectedIndex <= 0)
            {
                return;
            }
            if (EvSubaCbList.Items.Count < 4)
            {
                if (DataOffsetList.SelectedIndex == 4)
                {
                    if (EventTab.SelectedIndex == 2)
                    {
                        if (EvRnOffset.Text.Length > 5)
                        {
                            rd1 = EvRnOffset.Text;
                            EvRnOffset.Text = "";
                            ModeChange.SelectedIndex = 1;
                            EvRnOffset.Text = rd1;
                        }
                        else
                        {
                            ModeChange.SelectedIndex = 1;
                        }
                    }
                    else
                    {
                        ModeChange.SelectedIndex = 1;
                    }
                    if (EventTab.SelectedIndex != 0)
                    {
                        EventTab.SelectedIndex = 0;
                    }
                    if (EvSpCbList.SelectedIndex != 0)
                    {
                        EvSpCbList.SelectedIndex = 0;
                    }
                }
                else
                {
                    if (DataOffsetList.SelectedIndex != 5)
                    {
                        return;
                    }
                    if (EventTab.SelectedIndex == 2)
                    {
                        if (EvRnOffset.Text.Length > 5)
                        {
                            rd1 = EvRnOffset.Text;
                            EvRnOffset.Text = "";
                            ModeChange.SelectedIndex = 1;
                            EvRnOffset.Text = rd1;
                        }
                        else
                        {
                            ModeChange.SelectedIndex = 1;
                        }
                    }
                    else
                    {
                        ModeChange.SelectedIndex = 1;
                    }
                    if (EventTab.SelectedIndex != 0)
                    {
                        EventTab.SelectedIndex = 0;
                    }
                    if (EvSpCbList.SelectedIndex != 1)
                    {
                        EvSpCbList.SelectedIndex = 1;
                    }
                }
            }
            else if (DataOffsetList.SelectedIndex == 2 || DataOffsetList.SelectedIndex == 3)
            {
                ModeChange.SelectedIndex = 2;
            }
            else if (DataOffsetList.SelectedIndex >= 9 && DataOffsetList.SelectedIndex <= 15)
            {
                if (EventTab.SelectedIndex == 2)
                {
                    if (EvRnOffset.Text.Length > 5)
                    {
                        rd1 = EvRnOffset.Text;
                        EvRnOffset.Text = "";
                        ModeChange.SelectedIndex = 1;
                        EvRnOffset.Text = rd1;
                    }
                    else
                    {
                        ModeChange.SelectedIndex = 1;
                    }
                }
                else
                {
                    ModeChange.SelectedIndex = 1;
                }
                if (DataOffsetList.SelectedIndex < 11)
                {
                    if (DataOffsetList.SelectedIndex == 9)
                    {
                        if (EvSpCbList.SelectedIndex != 0)
                        {
                            EvSpCbList.SelectedIndex = 0;
                        }
                    }
                    else if (EvSpCbList.SelectedIndex != 1)
                    {
                        EvSpCbList.SelectedIndex = 1;
                    }
                    if (EventTab.SelectedIndex != 0)
                    {
                        EventTab.SelectedIndex = 0;
                    }
                    return;
                }
                if (DataOffsetList.SelectedIndex == 11)
                {
                    if (EvOvrCbList.SelectedIndex != 2)
                    {
                        EvOvrCbList.SelectedIndex = 2;
                    }
                    if (EventTab.SelectedIndex != 3)
                    {
                        EventTab.SelectedIndex = 3;
                    }
                    return;
                }
                if (DataOffsetList.SelectedIndex == 12)
                {
                    if (EvSubaCbList.SelectedIndex != 0)
                    {
                        EvSubaCbList.SelectedIndex = 0;
                    }
                }
                else if (DataOffsetList.SelectedIndex == 13)
                {
                    if (EvSubaCbList.SelectedIndex != 1)
                    {
                        EvSubaCbList.SelectedIndex = 1;
                    }
                }
                else if (DataOffsetList.SelectedIndex == 14)
                {
                    if (EvSubaCbList.SelectedIndex != 2)
                    {
                        EvSubaCbList.SelectedIndex = 2;
                    }
                }
                else if (EvSubaCbList.SelectedIndex != 3)
                {
                    EvSubaCbList.SelectedIndex = 3;
                }
                if (EventTab.SelectedIndex != 1)
                {
                    EventTab.SelectedIndex = 1;
                }
            }
            else if (DataOffsetList.SelectedIndex == 20 || DataOffsetList.SelectedIndex == 21)
            {
                if (EventTab.SelectedIndex == 2)
                {
                    if (EvRnOffset.Text.Length > 5)
                    {
                        rd1 = EvRnOffset.Text;
                        EvRnOffset.Text = "";
                        ModeChange.SelectedIndex = 1;
                        EvRnOffset.Text = rd1;
                    }
                    else
                    {
                        ModeChange.SelectedIndex = 1;
                    }
                }
                else
                {
                    ModeChange.SelectedIndex = 1;
                }
                if (DataOffsetList.SelectedIndex == 20)
                {
                    if (EvOvrCbList.SelectedIndex != 0)
                    {
                        EvOvrCbList.SelectedIndex = 0;
                    }
                }
                else if (EvOvrCbList.SelectedIndex != 1)
                {
                    EvOvrCbList.SelectedIndex = 1;
                }
                if (EventTab.SelectedIndex != 3)
                {
                    EventTab.SelectedIndex = 3;
                }
            }
            else if (DataOffsetList.SelectedIndex < 27)
            {
                if (DMiscList.SelectedNode == null)
                {
                    rd1 = "null";
                    rd2 = "null";
                }
                else
                {
                    rd1 = DMiscList.SelectedNode.FullPath;
                    rd2 = rd1.Substring(0, 3);
                }
                if (DataOffsetList.SelectedIndex == 1)
                {
                    if (rd2 != "Mod")
                    {
                        if (DMiscList.Nodes[0].Text == "ModelVisibility")
                        {
                            DataTab.SelectedIndex = 3;
                            DMiscList.SelectedNode = DMiscList.Nodes[0];
                        }
                    }
                    else
                    {
                        DataTab.SelectedIndex = 3;
                    }
                }
                else if (DataOffsetList.SelectedIndex == 4)
                {
                    if (rd2 != "Mis")
                    {
                        g = DMiscList.GetNodeCount(includeSubTrees: false);
                        i = 0;
                        while (true)
                        {
                            if (i < g)
                            {
                                if (DMiscList.Nodes[i].Text == "MiscSection")
                                {
                                    break;
                                }
                                i++;
                                continue;
                            }
                            return;
                        }
                        DataTab.SelectedIndex = 3;
                        DMiscList.SelectedNode = DMiscList.Nodes[i];
                    }
                    else
                    {
                        DataTab.SelectedIndex = 3;
                    }
                }
                else if (DataOffsetList.SelectedIndex == 5)
                {
                    if (rd2 != "Com")
                    {
                        g = DMiscList.GetNodeCount(includeSubTrees: false);
                        i = 0;
                        while (true)
                        {
                            if (i < g)
                            {
                                if (DMiscList.Nodes[i].Text == "CommonActionFlags")
                                {
                                    break;
                                }
                                i++;
                                continue;
                            }
                            return;
                        }
                        DataTab.SelectedIndex = 3;
                        DMiscList.SelectedNode = DMiscList.Nodes[i];
                    }
                    else
                    {
                        DataTab.SelectedIndex = 3;
                    }
                }
                else if (DataOffsetList.SelectedIndex == 6)
                {
                    if (rd2 != "Spe")
                    {
                        g = DMiscList.GetNodeCount(includeSubTrees: false);
                        i = 0;
                        while (true)
                        {
                            if (i < g)
                            {
                                if (DMiscList.Nodes[i].Text == "SpecialActionFlags")
                                {
                                    break;
                                }
                                i++;
                                continue;
                            }
                            return;
                        }
                        DataTab.SelectedIndex = 3;
                        DMiscList.SelectedNode = DMiscList.Nodes[i];
                    }
                    else
                    {
                        DataTab.SelectedIndex = 3;
                    }
                }
                else if (DataOffsetList.SelectedIndex == 7)
                {
                    if (rd2 != "Ext")
                    {
                        g = DMiscList.GetNodeCount(includeSubTrees: false);
                        i = 0;
                        while (true)
                        {
                            if (i < g)
                            {
                                if (DMiscList.Nodes[i].Text == "ExtraActionFlags")
                                {
                                    break;
                                }
                                i++;
                                continue;
                            }
                            return;
                        }
                        DataTab.SelectedIndex = 3;
                        DMiscList.SelectedNode = DMiscList.Nodes[i];
                    }
                    else if (rd1[11] != 'F')
                    {
                        g = DMiscList.GetNodeCount(includeSubTrees: false);
                        i = 0;
                        while (true)
                        {
                            if (i < g)
                            {
                                if (DMiscList.Nodes[i].Text == "ExtraActionFlags")
                                {
                                    break;
                                }
                                i++;
                                continue;
                            }
                            return;
                        }
                        DataTab.SelectedIndex = 3;
                        DMiscList.SelectedNode = DMiscList.Nodes[i];
                    }
                    else
                    {
                        DataTab.SelectedIndex = 3;
                    }
                }
                else if (DataOffsetList.SelectedIndex == 8)
                {
                    if (rd2 != "Act")
                    {
                        g = DMiscList.GetNodeCount(includeSubTrees: false);
                        i = 0;
                        while (true)
                        {
                            if (i < g)
                            {
                                if (DMiscList.Nodes[i].Text == "ActionInterrupts")
                                {
                                    break;
                                }
                                i++;
                                continue;
                            }
                            return;
                        }
                        DataTab.SelectedIndex = 3;
                        DMiscList.SelectedNode = DMiscList.Nodes[i];
                    }
                    else
                    {
                        DataTab.SelectedIndex = 3;
                    }
                }
                else if (DataOffsetList.SelectedIndex == 16)
                {
                    if (rd2 != "Bon")
                    {
                        g = DMiscList.GetNodeCount(includeSubTrees: false);
                        i = 0;
                        while (true)
                        {
                            if (i < g)
                            {
                                if (DMiscList.Nodes[i].Text == "BoneFloats1")
                                {
                                    break;
                                }
                                i++;
                                continue;
                            }
                            return;
                        }
                        DataTab.SelectedIndex = 3;
                        DMiscList.SelectedNode = DMiscList.Nodes[i];
                    }
                    else if (rd1[10] != '1')
                    {
                        g = DMiscList.GetNodeCount(includeSubTrees: false);
                        i = 0;
                        while (true)
                        {
                            if (i < g)
                            {
                                if (DMiscList.Nodes[i].Text == "BoneFloats1")
                                {
                                    break;
                                }
                                i++;
                                continue;
                            }
                            return;
                        }
                        DataTab.SelectedIndex = 3;
                        DMiscList.SelectedNode = DMiscList.Nodes[i];
                    }
                    else
                    {
                        DataTab.SelectedIndex = 3;
                    }
                }
                else if (DataOffsetList.SelectedIndex == 17)
                {
                    if (rd2 != "Bon")
                    {
                        g = DMiscList.GetNodeCount(includeSubTrees: false);
                        i = 0;
                        while (true)
                        {
                            if (i < g)
                            {
                                if (DMiscList.Nodes[i].Text == "BoneFloats2")
                                {
                                    break;
                                }
                                i++;
                                continue;
                            }
                            return;
                        }
                        DataTab.SelectedIndex = 3;
                        DMiscList.SelectedNode = DMiscList.Nodes[i];
                    }
                    else if (rd1[10] != '2')
                    {
                        g = DMiscList.GetNodeCount(includeSubTrees: false);
                        i = 0;
                        while (true)
                        {
                            if (i < g)
                            {
                                if (DMiscList.Nodes[i].Text == "BoneFloats2")
                                {
                                    break;
                                }
                                i++;
                                continue;
                            }
                            return;
                        }
                        DataTab.SelectedIndex = 3;
                        DMiscList.SelectedNode = DMiscList.Nodes[i];
                    }
                    else
                    {
                        DataTab.SelectedIndex = 3;
                    }
                }
                else if (DataOffsetList.SelectedIndex == 18)
                {
                    if (rd2 != "Bon")
                    {
                        g = DMiscList.GetNodeCount(includeSubTrees: false);
                        i = 0;
                        while (true)
                        {
                            if (i < g)
                            {
                                if (DMiscList.Nodes[i].Text == "BoneReferences")
                                {
                                    break;
                                }
                                i++;
                                continue;
                            }
                            return;
                        }
                        DataTab.SelectedIndex = 3;
                        DMiscList.SelectedNode = DMiscList.Nodes[i];
                    }
                    else if (rd1[5] != 'R')
                    {
                        g = DMiscList.GetNodeCount(includeSubTrees: false);
                        i = 0;
                        while (true)
                        {
                            if (i < g)
                            {
                                if (DMiscList.Nodes[i].Text == "BoneReferences")
                                {
                                    break;
                                }
                                i++;
                                continue;
                            }
                            return;
                        }
                        DataTab.SelectedIndex = 3;
                        DMiscList.SelectedNode = DMiscList.Nodes[i];
                    }
                    else
                    {
                        DataTab.SelectedIndex = 3;
                    }
                }
                else if (DataOffsetList.SelectedIndex == 19)
                {
                    if (rd2 != "Han")
                    {
                        g = DMiscList.GetNodeCount(includeSubTrees: false);
                        i = 0;
                        while (true)
                        {
                            if (i < g)
                            {
                                if (DMiscList.Nodes[i].Text == "HandBones")
                                {
                                    break;
                                }
                                i++;
                                continue;
                            }
                            return;
                        }
                        DataTab.SelectedIndex = 3;
                        DMiscList.SelectedNode = DMiscList.Nodes[i];
                    }
                    else
                    {
                        DataTab.SelectedIndex = 3;
                    }
                }
                else if (DataOffsetList.SelectedIndex == 22)
                {
                    if (rd2 != "Ext")
                    {
                        g = DMiscList.GetNodeCount(includeSubTrees: false);
                        i = 0;
                        while (true)
                        {
                            if (i < g)
                            {
                                if (DMiscList.Nodes[i].Text == "ExtraActionInterrupts")
                                {
                                    break;
                                }
                                i++;
                                continue;
                            }
                            return;
                        }
                        DataTab.SelectedIndex = 3;
                        DMiscList.SelectedNode = DMiscList.Nodes[i];
                    }
                    else if (rd1[11] != 'I')
                    {
                        g = DMiscList.GetNodeCount(includeSubTrees: false);
                        i = 0;
                        while (true)
                        {
                            if (i < g)
                            {
                                if (DMiscList.Nodes[i].Text == "ExtraActionInterrupts")
                                {
                                    break;
                                }
                                i++;
                                continue;
                            }
                            return;
                        }
                        DataTab.SelectedIndex = 3;
                        DMiscList.SelectedNode = DMiscList.Nodes[i];
                    }
                    else
                    {
                        DataTab.SelectedIndex = 3;
                    }
                }
                else if (DataOffsetList.SelectedIndex == 23)
                {
                    if (rd2 != "Bon")
                    {
                        g = DMiscList.GetNodeCount(includeSubTrees: false);
                        i = 0;
                        while (true)
                        {
                            if (i < g)
                            {
                                if (DMiscList.Nodes[i].Text == "BoneFloats3")
                                {
                                    break;
                                }
                                i++;
                                continue;
                            }
                            return;
                        }
                        DataTab.SelectedIndex = 3;
                        DMiscList.SelectedNode = DMiscList.Nodes[i];
                    }
                    else if (rd1[10] != '3')
                    {
                        g = DMiscList.GetNodeCount(includeSubTrees: false);
                        i = 0;
                        while (true)
                        {
                            if (i < g)
                            {
                                if (DMiscList.Nodes[i].Text == "BoneFloats3")
                                {
                                    break;
                                }
                                i++;
                                continue;
                            }
                            return;
                        }
                        DataTab.SelectedIndex = 3;
                        DMiscList.SelectedNode = DMiscList.Nodes[i];
                    }
                    else
                    {
                        DataTab.SelectedIndex = 3;
                    }
                }
                else if (DataOffsetList.SelectedIndex == 24)
                {
                    if (rd2 != "Unk")
                    {
                        g = DMiscList.GetNodeCount(includeSubTrees: false);
                        i = 0;
                        while (true)
                        {
                            if (i < g)
                            {
                                if (DMiscList.Nodes[i].Text == "Unknown24")
                                {
                                    break;
                                }
                                i++;
                                continue;
                            }
                            return;
                        }
                        DataTab.SelectedIndex = 3;
                        DMiscList.SelectedNode = DMiscList.Nodes[i];
                    }
                    else
                    {
                        DataTab.SelectedIndex = 3;
                    }
                }
                else if (DataOffsetList.SelectedIndex == 25)
                {
                    if (rd2 != "Sta")
                    {
                        g = DMiscList.GetNodeCount(includeSubTrees: false);
                        i = 0;
                        while (true)
                        {
                            if (i < g)
                            {
                                if (DMiscList.Nodes[i].Text == "StaticArticles")
                                {
                                    break;
                                }
                                i++;
                                continue;
                            }
                            return;
                        }
                        DataTab.SelectedIndex = 3;
                        DMiscList.SelectedNode = DMiscList.Nodes[i];
                    }
                    else
                    {
                        DataTab.SelectedIndex = 3;
                    }
                }
                else
                {
                    if (DataOffsetList.SelectedIndex != 26)
                    {
                        return;
                    }
                    if (rd2 != "Ent")
                    {
                        g = DMiscList.GetNodeCount(includeSubTrees: false);
                        i = 0;
                        while (true)
                        {
                            if (i < g)
                            {
                                if (DMiscList.Nodes[i].Text == "EntryArticle")
                                {
                                    break;
                                }
                                i++;
                                continue;
                            }
                            return;
                        }
                        DataTab.SelectedIndex = 3;
                        DMiscList.SelectedNode = DMiscList.Nodes[i];
                    }
                    else
                    {
                        DataTab.SelectedIndex = 3;
                    }
                }
            }
            else if (EvSubaCbList.Items.Count >= 8)
            {
                if (DataOffsetList.SelectedIndex < 31)
                {
                    if (EventTab.SelectedIndex == 2)
                    {
                        if (EvRnOffset.Text.Length > 5)
                        {
                            rd1 = EvRnOffset.Text;
                            EvRnOffset.Text = "";
                            ModeChange.SelectedIndex = 1;
                            EvRnOffset.Text = rd1;
                        }
                        else
                        {
                            ModeChange.SelectedIndex = 1;
                        }
                    }
                    else
                    {
                        ModeChange.SelectedIndex = 1;
                    }
                    if (DataOffsetList.SelectedIndex == 27)
                    {
                        if (EvSubaCbList.SelectedIndex != 4)
                        {
                            EvSubaCbList.SelectedIndex = 4;
                        }
                    }
                    else if (DataOffsetList.SelectedIndex == 28)
                    {
                        if (EvSubaCbList.SelectedIndex != 5)
                        {
                            EvSubaCbList.SelectedIndex = 5;
                        }
                    }
                    else if (DataOffsetList.SelectedIndex == 29)
                    {
                        if (EvSubaCbList.SelectedIndex != 6)
                        {
                            EvSubaCbList.SelectedIndex = 6;
                        }
                    }
                    else if (EvSubaCbList.SelectedIndex != 7)
                    {
                        EvSubaCbList.SelectedIndex = 7;
                    }
                    if (EventTab.SelectedIndex != 1)
                    {
                        EventTab.SelectedIndex = 1;
                    }
                }
                else
                {
                    if (DataOffsetList.SelectedIndex <= 31)
                    {
                        return;
                    }
                    DataTab.SelectedIndex = 3;
                    if (DMiscList.SelectedNode == null)
                    {
                        g = DMiscList.GetNodeCount(includeSubTrees: false);
                        DMiscList.SelectedNode = DMiscList.Nodes[g - 1];
                        return;
                    }
                    rd1 = DMiscList.SelectedNode.FullPath;
                    if (rd1 != "DataFlags")
                    {
                        g = DMiscList.GetNodeCount(includeSubTrees: false);
                        DMiscList.SelectedNode = DMiscList.Nodes[g - 1];
                    }
                }
            }
            else
            {
                if (DataOffsetList.SelectedIndex <= 27)
                {
                    return;
                }
                DataTab.SelectedIndex = 3;
                if (DMiscList.SelectedNode == null)
                {
                    g = DMiscList.GetNodeCount(includeSubTrees: false);
                    DMiscList.SelectedNode = DMiscList.Nodes[g - 1];
                    return;
                }
                rd1 = DMiscList.SelectedNode.FullPath;
                if (rd1 != "DataFlags")
                {
                    g = DMiscList.GetNodeCount(includeSubTrees: false);
                    DMiscList.SelectedNode = DMiscList.Nodes[g - 1];
                }
            }
        }

        private void DataExrnAdd_Click(object sender, EventArgs e)
        {
            if (DataTab.SelectedIndex == 3)
            {
                rd1 = DMiscList.SelectedNode.FullPath;
                if (rd1 == "ModelVisibility")
                {
                    if (alm[dat + 1] < 8096 || alm[dat + 1] >= tds[25])
                    {
                        return;
                    }
                    k = alm[dat + 1] / 4 + 2;
                    if (alm[k + 1] < 0 || alm[k + 1] >= 255)
                    {
                        return;
                    }
                    if (alm[k] >= 8096 && alm[k] < tds[25] && alm[k + 1] > 0)
                    {
                        h = alm[k] / 4;
                        g = alm[k + 1] * 2;
                        if (alm[h + g] == -86052851 && alm[h + g + 1] == -86052851)
                        {
                            alm[h + g] = alm[k + 1] + 1;
                            alm[h + g + 1] = 0;
                            DMiscList.Nodes[0].Nodes.Add("Data" + alm[k + 1]);
                            alm[k + 1]++;
                            DMiscParam.Items[2].SubItems[1].Text = "0x" + alm[k].ToString("X");
                            DMiscParam.Items[3].SubItems[1].Text = alm[k + 1].ToString();
                        }
                        else
                        {
                            n = g + 2;
                            if (h + n > md)
                            {
                                alm[h + g] = alm[k + 1] + 1;
                                alm[h + g + 1] = 0;
                                md += 2;
                            }
                            else
                            {
                                for (j = stf; j < md; j++)
                                {
                                    if (alm[j] == -86052851)
                                    {
                                        for (m = j + 1; m < j + n; m++)
                                        {
                                            if (alm[m] != -86052851)
                                            {
                                                j = m;
                                                break;
                                            }
                                        }
                                        if (m == j + n)
                                        {
                                            for (i = 0; i < g; i++)
                                            {
                                                alm[j + i] = alm[h + i];
                                                alm[h + i] = -86052851;
                                            }
                                            alm[j + g] = alm[k + 1] + 1;
                                            alm[j + g + 1] = 0;
                                            alm[k] = j * 4;
                                            break;
                                        }
                                    }
                                }
                                if (j >= md)
                                {
                                    j = md;
                                    for (i = 0; i < g; i++)
                                    {
                                        alm[j + i] = alm[h + i];
                                        alm[h + i] = -86052851;
                                    }
                                    alm[j + g] = alm[k + 1] + 1;
                                    alm[j + g + 1] = 0;
                                    alm[k] = j * 4;
                                    md += n;
                                }
                            }
                            DMiscList.Nodes[0].Nodes.Add("Data" + alm[k + 1]);
                            alm[k + 1]++;
                            DMiscParam.Items[2].SubItems[1].Text = "0x" + alm[k].ToString("X");
                            DMiscParam.Items[3].SubItems[1].Text = alm[k + 1].ToString();
                            Fixam();
                        }
                    }
                    else
                    {
                        for (j = stf; j < md; j++)
                        {
                            if (alm[j] == -86052851)
                            {
                                if (alm[j + 1] == -86052851)
                                {
                                    break;
                                }
                                j++;
                            }
                        }
                        if (j >= md)
                        {
                            j = md;
                            md += 2;
                        }
                        alm[j] = 1;
                        alm[j + 1] = 0;
                        alm[k] = j * 4;
                        alm[k + 1] = 1;
                        asc[par] = k * 4;
                        tds[26]++;
                        DMiscParam.Items[2].SubItems[1].Text = "0x" + alm[k].ToString("X");
                        DMiscParam.Items[3].SubItems[1].Text = alm[k + 1].ToString();
                        DMiscList.Nodes[0].Nodes.Add("Data0");
                        Fixam();
                    }
                    if (qe)
                    {
                        Qsave.Enabled = true;
                    }
                }
                else if (rd1 == "ExtraActionInterrupts")
                {
                    if (alm[dat + 22] < 8096 || alm[dat + 22] >= tds[25])
                    {
                        return;
                    }
                    k = alm[dat + 22] / 4 + 2;
                    if (alm[k] >= 8096 && alm[k] < tds[25])
                    {
                        EvRnOffset.Text = "";
                        ModeChange.SelectedIndex = 1;
                        if (EventTab.SelectedIndex != 2)
                        {
                            EventTab.SelectedIndex = 2;
                        }
                        if (!EvOffsetInterlock.Checked)
                        {
                            EvOffsetInterlock.Checked = true;
                        }
                        if (minitxt.Text == "Cannot Open Offset")
                        {
                            minitxt.Text = "";
                        }
                        EvRnOfSele.Text = alm[k].ToString("X");
                        EvRnOffset.Text = "0x" + alm[k].ToString("X");
                        EvList.Items.Clear();
                        j = alm[k] / 4;
                        mov = 0;
                        while (alm[j] != 0 && j < md)
                        {
                            EveListstring();
                            EvList.Items.Add(rd1);
                            j += 2;
                        }
                    }
                }
                else
                {
                    if (rd1[0] != 'M')
                    {
                        return;
                    }
                    if (rd1[1] == 'o')
                    {
                        if (alm[dat + 1] < 8096 || alm[dat + 1] >= tds[25])
                        {
                            return;
                        }
                        if (rd1[16] == 'D')
                        {
                            k = alm[dat + 1] / 4 + 2;
                            if (alm[k] >= 8096 && alm[k] < tds[25] && alm[k + 1] > 0 && alm[k + 1] < 255)
                            {
                                h = alm[k] / 4;
                                g = alm[k + 1] * 2;
                                if (alm[h + g] == -86052851 && alm[h + g + 1] == -86052851)
                                {
                                    alm[h + g] = alm[k + 1] + 1;
                                    alm[h + g + 1] = 0;
                                    DMiscList.Nodes[0].Nodes.Add("Data" + alm[k + 1]);
                                    alm[k + 1]++;
                                }
                                else
                                {
                                    n = g + 2;
                                    if (h + n > md)
                                    {
                                        alm[h + g] = alm[k + 1] + 1;
                                        alm[h + g + 1] = 0;
                                        md += 2;
                                    }
                                    else
                                    {
                                        for (j = stf; j < md; j++)
                                        {
                                            if (alm[j] == -86052851)
                                            {
                                                for (m = j + 1; m < j + n; m++)
                                                {
                                                    if (alm[m] != -86052851)
                                                    {
                                                        j = m;
                                                        break;
                                                    }
                                                }
                                                if (m == j + n)
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                        if (j >= md)
                                        {
                                            j = md;
                                            md += n;
                                        }
                                        for (i = 0; i < g; i++)
                                        {
                                            alm[j + i] = alm[h + i];
                                            alm[h + i] = -86052851;
                                        }
                                        alm[j + g] = alm[k + 1] + 1;
                                        alm[j + g + 1] = 0;
                                        alm[k] = j * 4;
                                    }
                                    DMiscList.Nodes[0].Nodes.Add("Data" + alm[k + 1]);
                                    alm[k + 1]++;
                                    Fixam();
                                }
                            }
                        }
                        else
                        {
                            rd2 = DMiscList.SelectedNode.Text;
                            k = alm[dat + 1] / 4;
                            if (alm[k] >= 8096 && alm[k] < tds[25] && alm[k + 1] > 0)
                            {
                                if (rd2 == "List")
                                {
                                    if (rd1[16] == 'H')
                                    {
                                        h = alm[k] / 4;
                                    }
                                    else
                                    {
                                        h = alm[k] / 4 + 1;
                                    }
                                    if (alm[h] >= 8096 && alm[h] < tds[25])
                                    {
                                        m = DMiscList.SelectedNode.Parent.Parent.Index;
                                        n = DMiscList.SelectedNode.Parent.Index;
                                        g = alm[h] / 4 + m * 2;
                                        if (alm[g] >= 8096 && alm[g] < tds[25])
                                        {
                                            k = alm[g] / 4 + n * 2;
                                            if (alm[k] >= 8096 && alm[k] < tds[25])
                                            {
                                                g = alm[k + 1];
                                                h = alm[k] / 4;
                                                if (g > 0 && g < 255)
                                                {
                                                    string[] array = new string[2];
                                                    if (alm[h + g] == -86052851)
                                                    {
                                                        alm[h + g] = 0;
                                                    }
                                                    else
                                                    {
                                                        n = g + 1;
                                                        if (h + n >= md)
                                                        {
                                                            alm[h + g] = 0;
                                                            md++;
                                                        }
                                                        else
                                                        {
                                                            for (j = stf; j < md; j++)
                                                            {
                                                                if (alm[j] == -86052851)
                                                                {
                                                                    for (m = j + 1; m < j + n; m++)
                                                                    {
                                                                        if (alm[m] != -86052851)
                                                                        {
                                                                            j = m;
                                                                            break;
                                                                        }
                                                                    }
                                                                    if (m == j + n)
                                                                    {
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                            if (j >= md)
                                                            {
                                                                j = md;
                                                                md += n;
                                                            }
                                                            for (i = 0; i < g; i++)
                                                            {
                                                                alm[j + i] = alm[h + i];
                                                                alm[h + i] = -86052851;
                                                            }
                                                            alm[j + g] = 0;
                                                            alm[k] = j * 4;
                                                        }
                                                        DMiscOffset.Text = "0x" + alm[k].ToString("X");
                                                    }
                                                    array[0] = "Data" + g;
                                                    array[1] = "0x0";
                                                    DMiscParam.Items.Add(new ListViewItem(array));
                                                    alm[k + 1]++;
                                                    Fixam();
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (rd2[0] == 'B')
                                {
                                    if (rd1[16] == 'H')
                                    {
                                        h = alm[k] / 4;
                                    }
                                    else
                                    {
                                        h = alm[k] / 4 + 1;
                                    }
                                    if (alm[h] >= 8096 && alm[h] < tds[25])
                                    {
                                        if (rd2[4] == 'S')
                                        {
                                            m = DMiscList.SelectedNode.Index;
                                            k = alm[h] / 4 + m * 2;
                                            if (alm[k + 1] >= 0 && alm[k + 1] < 255)
                                            {
                                                if (alm[k] >= 8096 && alm[k] < tds[25] && alm[k + 1] > 0)
                                                {
                                                    n = alm[k] / 4;
                                                    g = alm[k + 1] * 2;
                                                    DMiscList.SelectedNode.Nodes.Add("BoneGroup" + alm[k + 1]);
                                                    alm[k + 1]++;
                                                    DMiscParam.Items[1].SubItems[1].Text = alm[k + 1].ToString();
                                                    if (alm[n + g] == -86052851 && alm[n + g + 1] == -86052851)
                                                    {
                                                        alm[n + g] = 0;
                                                        alm[n + g + 1] = 0;
                                                    }
                                                    else
                                                    {
                                                        mov = g + 2;
                                                        if (n + mov > md)
                                                        {
                                                            alm[n + g] = 0;
                                                            alm[n + g + 1] = 0;
                                                            md += 2;
                                                        }
                                                        else
                                                        {
                                                            for (j = stf; j < md; j++)
                                                            {
                                                                if (alm[j] == -86052851)
                                                                {
                                                                    for (m = j + 1; m < j + mov; m++)
                                                                    {
                                                                        if (alm[m] != -86052851)
                                                                        {
                                                                            j = m;
                                                                            break;
                                                                        }
                                                                    }
                                                                    if (m == j + mov)
                                                                    {
                                                                        for (i = 0; i < g; i += 2)
                                                                        {
                                                                            if (alm[n + i] >= 8096)
                                                                            {
                                                                                rmv = (n + i) * 4;
                                                                                for (an1 = 0; an1 < par; an1++)
                                                                                {
                                                                                    if (asc[an1] == rmv)
                                                                                    {
                                                                                        asc[an1] = (j + i) * 4;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            alm[j + i] = alm[n + i];
                                                                            alm[j + i + 1] = alm[n + i + 1];
                                                                            alm[n + i] = -86052851;
                                                                            alm[n + i + 1] = -86052851;
                                                                        }
                                                                        alm[k] = j * 4;
                                                                        alm[j + i] = 0;
                                                                        alm[j + i + 1] = 0;
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                            if (j >= md)
                                                            {
                                                                j = md;
                                                                for (i = 0; i < g; i += 2)
                                                                {
                                                                    if (alm[n + i] >= 8096)
                                                                    {
                                                                        rmv = (n + i) * 4;
                                                                        for (an1 = 0; an1 < par; an1++)
                                                                        {
                                                                            if (asc[an1] == rmv)
                                                                            {
                                                                                asc[an1] = (j + i) * 4;
                                                                                break;
                                                                            }
                                                                        }
                                                                    }
                                                                    alm[j + i] = alm[n + i];
                                                                    alm[j + i + 1] = alm[n + i + 1];
                                                                    alm[n + i] = -86052851;
                                                                    alm[n + i + 1] = -86052851;
                                                                }
                                                                alm[k] = j * 4;
                                                                alm[j + i] = 0;
                                                                alm[j + i + 1] = 0;
                                                                md += mov;
                                                            }
                                                            DMiscParam.Items[0].SubItems[1].Text = "0x" + alm[k].ToString("X");
                                                        }
                                                        Fixam();
                                                    }
                                                }
                                                else
                                                {
                                                    alm[k + 1] = 1;
                                                    for (j = stf; j < md; j++)
                                                    {
                                                        if (alm[j] == -86052851)
                                                        {
                                                            if (alm[j + 1] == -86052851)
                                                            {
                                                                break;
                                                            }
                                                            j++;
                                                        }
                                                    }
                                                    if (j >= md)
                                                    {
                                                        j = md;
                                                        md += 2;
                                                    }
                                                    alm[k] = j * 4;
                                                    alm[j] = 0;
                                                    alm[j + 1] = 0;
                                                    asc[par] = k * 4;
                                                    tds[26]++;
                                                    DMiscParam.Items[0].SubItems[1].Text = "0x" + alm[k].ToString("X");
                                                    DMiscParam.Items[1].SubItems[1].Text = alm[k + 1].ToString();
                                                    DMiscList.SelectedNode.Nodes.Add("BoneGroup0");
                                                    Fixam();
                                                }
                                            }
                                        }
                                        else if (alm[h] >= 8096 && alm[h] < tds[25])
                                        {
                                            m = DMiscList.SelectedNode.Parent.Index;
                                            n = DMiscList.SelectedNode.Index;
                                            g = alm[h] / 4 + m * 2;
                                            if (alm[g] >= 8096 && alm[g] < tds[25])
                                            {
                                                k = alm[g] / 4 + n * 2;
                                                g = alm[k + 1];
                                                if (g >= 0 && g < 255)
                                                {
                                                    if (alm[k] >= 8096 && alm[k] < tds[25] && g > 0)
                                                    {
                                                        g = alm[k + 1];
                                                        h = alm[k] / 4;
                                                        if (alm[h + g] == -86052851)
                                                        {
                                                            alm[h + g] = 0;
                                                        }
                                                        else
                                                        {
                                                            n = g + 1;
                                                            if (h + n >= md)
                                                            {
                                                                alm[h + g] = 0;
                                                                md++;
                                                            }
                                                            else
                                                            {
                                                                for (j = stf; j < md; j++)
                                                                {
                                                                    if (alm[j] == -86052851)
                                                                    {
                                                                        for (m = j + 1; m < j + n; m++)
                                                                        {
                                                                            if (alm[m] != -86052851)
                                                                            {
                                                                                j = m;
                                                                                break;
                                                                            }
                                                                        }
                                                                        if (m == j + n)
                                                                        {
                                                                            for (i = 0; i < g; i++)
                                                                            {
                                                                                alm[j + i] = alm[h + i];
                                                                                alm[h + i] = -86052851;
                                                                            }
                                                                            alm[j + g] = 0;
                                                                            alm[k] = j * 4;
                                                                            break;
                                                                        }
                                                                    }
                                                                }
                                                                if (j >= md)
                                                                {
                                                                    j = md;
                                                                    for (i = 0; i < g; i++)
                                                                    {
                                                                        alm[j + i] = alm[h + i];
                                                                        alm[h + i] = -86052851;
                                                                    }
                                                                    alm[j + g] = 0;
                                                                    alm[k] = j * 4;
                                                                    md += n;
                                                                }
                                                            }
                                                        }
                                                        alm[k + 1]++;
                                                    }
                                                    else
                                                    {
                                                        j = stf;
                                                        while (j < md && alm[j] != -86052851)
                                                        {
                                                            j++;
                                                        }
                                                        if (j == md)
                                                        {
                                                            md++;
                                                        }
                                                        alm[j] = 0;
                                                        alm[k] = j * 4;
                                                        alm[k + 1] = 1;
                                                        asc[par] = k * 4;
                                                        tds[26]++;
                                                        DMiscList.SelectedNode.Nodes.Add("List");
                                                    }
                                                    DMiscParam.Items[0].SubItems[1].Text = "0x" + alm[k].ToString("X");
                                                    DMiscParam.Items[1].SubItems[1].Text = alm[k + 1].ToString();
                                                    Fixam();
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (alm[k + 1] < 255)
                                {
                                    h = alm[k] / 4;
                                    if (alm[h] >= 8096 && alm[h] < tds[25] && alm[h + 1] >= 8096 && alm[h + 1] < tds[25])
                                    {
                                        g = alm[k + 1] * 2;
                                        mov = g + 2;
                                        n = alm[h] / 4;
                                        if (alm[n + g] == -86052851 && alm[n + g + 1] == -86052851)
                                        {
                                            alm[n + g] = 0;
                                            alm[n + g + 1] = 0;
                                        }
                                        else if (n + mov > md)
                                        {
                                            alm[n + g] = 0;
                                            alm[n + g + 1] = 0;
                                            md += 2;
                                        }
                                        else
                                        {
                                            for (j = stf; j < md; j++)
                                            {
                                                if (alm[j] == -86052851)
                                                {
                                                    for (m = j + 1; m < j + mov; m++)
                                                    {
                                                        if (alm[m] != -86052851)
                                                        {
                                                            j = m;
                                                            break;
                                                        }
                                                    }
                                                    if (m == j + mov)
                                                    {
                                                        for (i = 0; i < g; i += 2)
                                                        {
                                                            if (alm[n + i] >= 8096)
                                                            {
                                                                rmv = (n + i) * 4;
                                                                for (an1 = 0; an1 < par; an1++)
                                                                {
                                                                    if (asc[an1] == rmv)
                                                                    {
                                                                        asc[an1] = (j + i) * 4;
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                            alm[j + i] = alm[n + i];
                                                            alm[j + i + 1] = alm[n + i + 1];
                                                            alm[n + i] = -86052851;
                                                            alm[n + i + 1] = -86052851;
                                                        }
                                                        alm[h] = j * 4;
                                                        alm[j + i] = 0;
                                                        alm[j + i + 1] = 0;
                                                        break;
                                                    }
                                                }
                                            }
                                            if (j >= md)
                                            {
                                                j = md;
                                                for (i = 0; i < g; i += 2)
                                                {
                                                    if (alm[n + i] >= 8096)
                                                    {
                                                        rmv = (n + i) * 4;
                                                        for (an1 = 0; an1 < par; an1++)
                                                        {
                                                            if (asc[an1] == rmv)
                                                            {
                                                                asc[an1] = (j + i) * 4;
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    alm[j + i] = alm[n + i];
                                                    alm[j + i + 1] = alm[n + i + 1];
                                                    alm[n + i] = -86052851;
                                                    alm[n + i + 1] = -86052851;
                                                }
                                                alm[h] = j * 4;
                                                alm[j + i] = 0;
                                                alm[j + i + 1] = 0;
                                                md += mov;
                                            }
                                            if (rd2 == "Hidden")
                                            {
                                                DMiscParam.Items[0].SubItems[1].Text = "0x" + alm[h].ToString("X");
                                            }
                                        }
                                        n = alm[h + 1] / 4;
                                        if (alm[n + g] == -86052851 && alm[n + g + 1] == -86052851)
                                        {
                                            alm[n + g] = 0;
                                            alm[n + g + 1] = 0;
                                        }
                                        else if (n + mov >= md)
                                        {
                                            alm[n + g] = 0;
                                            alm[n + g + 1] = 0;
                                            md += 2;
                                        }
                                        else
                                        {
                                            for (j = stf; j < md; j++)
                                            {
                                                if (alm[j] == -86052851)
                                                {
                                                    for (m = j + 1; m < j + mov; m++)
                                                    {
                                                        if (alm[m] != -86052851)
                                                        {
                                                            j = m;
                                                            break;
                                                        }
                                                    }
                                                    if (m == j + mov)
                                                    {
                                                        for (i = 0; i < g; i += 2)
                                                        {
                                                            if (alm[n + i] >= 8096)
                                                            {
                                                                rmv = (n + i) * 4;
                                                                for (an1 = 0; an1 < par; an1++)
                                                                {
                                                                    if (asc[an1] == rmv)
                                                                    {
                                                                        asc[an1] = (j + i) * 4;
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                            alm[j + i] = alm[n + i];
                                                            alm[j + i + 1] = alm[n + i + 1];
                                                            alm[n + i] = -86052851;
                                                            alm[n + i + 1] = -86052851;
                                                        }
                                                        alm[h + 1] = j * 4;
                                                        alm[j + i] = 0;
                                                        alm[j + i + 1] = 0;
                                                        break;
                                                    }
                                                }
                                            }
                                            if (j >= md)
                                            {
                                                j = md;
                                                for (i = 0; i < g; i += 2)
                                                {
                                                    if (alm[n + i] >= 8096)
                                                    {
                                                        rmv = (n + i) * 4;
                                                        for (an1 = 0; an1 < par; an1++)
                                                        {
                                                            if (asc[an1] == rmv)
                                                            {
                                                                asc[an1] = (j + i) * 4;
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    alm[j + i] = alm[n + i];
                                                    alm[j + i + 1] = alm[n + i + 1];
                                                    alm[n + i] = -86052851;
                                                    alm[n + i + 1] = -86052851;
                                                }
                                                alm[h + 1] = j * 4;
                                                alm[j + i] = 0;
                                                alm[j + i + 1] = 0;
                                                md += mov;
                                            }
                                            if (rd2 == "Visible")
                                            {
                                                DMiscParam.Items[0].SubItems[1].Text = "0x" + alm[h + 1].ToString("X");
                                            }
                                        }
                                        DMiscList.Nodes[0].Nodes[0].Nodes.Add("BoneSwitch" + alm[k + 1]);
                                        DMiscList.Nodes[0].Nodes[1].Nodes.Add("BoneSwitch" + alm[k + 1]);
                                        alm[k + 1]++;
                                        Fixam();
                                    }
                                }
                            }
                        }
                        if (qe)
                        {
                            Qsave.Enabled = true;
                        }
                    }
                    else if (rd1[12] == 'F')
                    {
                        if (alm[dat + 4] < 8096 || alm[dat + 4] >= tds[25])
                        {
                            return;
                        }
                        h = alm[dat + 4] / 4 + 1;
                        if (alm[h + 1] < 0 || alm[h + 1] >= 255)
                        {
                            return;
                        }
                        if (alm[h] >= 8096 && alm[h] < tds[25])
                        {
                            n = alm[h] / 4;
                            g = alm[h + 1] * 5;
                            i = 1;
                            if (alm[n + g] == -86052851)
                            {
                                while (i < 5)
                                {
                                    if (alm[n + g + i] == -86052851)
                                    {
                                        i = 999;
                                    }
                                    i++;
                                }
                                if (i == 5)
                                {
                                    for (i = 0; i < 5; i++)
                                    {
                                        alm[n + g + i] = 0;
                                    }
                                }
                            }
                            if (i != 5)
                            {
                                if (n + g + 1 >= md)
                                {
                                    for (i = 0; i < 5; i++)
                                    {
                                        alm[n + g + i] = 0;
                                    }
                                    md += 5;
                                }
                                else
                                {
                                    mov = g + 5;
                                    for (j = stf; j < md; j++)
                                    {
                                        if (alm[j] == -86052851)
                                        {
                                            for (m = j + 1; m < j + mov; m++)
                                            {
                                                if (alm[m] != -86052851)
                                                {
                                                    j = m;
                                                    break;
                                                }
                                            }
                                            if (m == j + mov)
                                            {
                                                for (i = 0; i < g; i++)
                                                {
                                                    alm[j + i] = alm[n + i];
                                                    alm[n + i] = -86052851;
                                                }
                                                alm[h] = j * 4;
                                                for (i = 0; i < 5; i++)
                                                {
                                                    alm[j + g + i] = 0;
                                                }
                                                break;
                                            }
                                        }
                                    }
                                    if (j >= md)
                                    {
                                        j = md;
                                        for (i = 0; i < g; i++)
                                        {
                                            alm[j + i] = alm[n + i];
                                            alm[n + i] = -86052851;
                                        }
                                        alm[h] = j * 4;
                                        for (i = 0; i < 5; i++)
                                        {
                                            alm[j + g + i] = 0;
                                        }
                                        md += mov;
                                    }
                                }
                            }
                            alm[h + 1]++;
                        }
                        else
                        {
                            for (j = stf; j < md; j++)
                            {
                                if (alm[j] == -86052851)
                                {
                                    for (m = j + 1; m < j + 5; m++)
                                    {
                                        if (alm[m] != -86052851)
                                        {
                                            j = m;
                                            break;
                                        }
                                    }
                                    if (m == j + 5)
                                    {
                                        alm[h] = j * 4;
                                        for (i = 0; i < 5; i++)
                                        {
                                            alm[j + i] = 0;
                                        }
                                        break;
                                    }
                                }
                            }
                            if (j >= md)
                            {
                                j = md;
                                alm[h] = j * 4;
                                for (i = 0; i < 5; i++)
                                {
                                    alm[j + i] = 0;
                                }
                                md += 5;
                            }
                            alm[h + 1] = 1;
                        }
                        if (rd1.Length <= 29)
                        {
                            DMiscOffset.Text = "0x" + alm[h].ToString("X");
                            string[] array = new string[2]
                            {
                                "Data" + (alm[h + 1] - 1) + " Bone",
                                "0x0"
                            };
                            DMiscParam.Items.Add(new ListViewItem(array));
                            DMiscList.SelectedNode.Nodes.Add("Data" + (alm[h + 1] - 1));
                        }
                        else
                        {
                            i = DMiscList.SelectedNode.Index;
                            DMiscOffset.Text = "0x" + (alm[h] + i * 20).ToString("X");
                            m = DMiscList.SelectedNode.Parent.Parent.Index;
                            n = DMiscList.SelectedNode.Parent.Index;
                            DMiscList.Nodes[m].Nodes[n].Nodes.Add("Data" + (alm[h + 1] - 1));
                        }
                        Fixam();
                        if (qe)
                        {
                            Qsave.Enabled = true;
                        }
                    }
                    else
                    {
                        if (rd1[12] != 'H' || alm[dat + 4] < 8096 || alm[dat + 4] >= tds[25])
                        {
                            return;
                        }
                        h = alm[dat + 4] / 4 + 3;
                        if (alm[h + 1] < 0 || alm[h + 1] >= 255)
                        {
                            return;
                        }
                        if (alm[h] >= 8096 && alm[h] < tds[25])
                        {
                            n = alm[h] / 4;
                            g = alm[h + 1] * 8;
                            i = 1;
                            if (alm[n + g] == -86052851)
                            {
                                while (i < 8)
                                {
                                    if (alm[n + g + i] == -86052851)
                                    {
                                        i = 999;
                                    }
                                    i++;
                                }
                                if (i == 8)
                                {
                                    for (i = 0; i < 8; i++)
                                    {
                                        alm[n + g + i] = 0;
                                    }
                                }
                            }
                            if (i != 8)
                            {
                                if (n + g + 1 >= md)
                                {
                                    for (i = 0; i < 8; i++)
                                    {
                                        alm[n + g + i] = 0;
                                    }
                                    md += 8;
                                }
                                else
                                {
                                    mov = g + 8;
                                    for (j = stf; j < md; j++)
                                    {
                                        if (alm[j] == -86052851)
                                        {
                                            for (m = j + 1; m < j + mov; m++)
                                            {
                                                if (alm[m] != -86052851)
                                                {
                                                    j = m;
                                                    break;
                                                }
                                            }
                                            if (m == j + mov)
                                            {
                                                for (i = 0; i < g; i++)
                                                {
                                                    alm[j + i] = alm[n + i];
                                                    alm[n + i] = -86052851;
                                                }
                                                alm[h] = j * 4;
                                                for (i = 0; i < 8; i++)
                                                {
                                                    alm[j + g + i] = 0;
                                                }
                                                break;
                                            }
                                        }
                                    }
                                    if (j >= md)
                                    {
                                        j = md;
                                        for (i = 0; i < g; i++)
                                        {
                                            alm[j + i] = alm[n + i];
                                            alm[n + i] = -86052851;
                                        }
                                        alm[h] = j * 4;
                                        for (i = 0; i < 8; i++)
                                        {
                                            alm[j + g + i] = 0;
                                        }
                                        md += mov;
                                    }
                                }
                            }
                            alm[h + 1]++;
                        }
                        else
                        {
                            for (j = stf; j < md; j++)
                            {
                                if (alm[j] == -86052851)
                                {
                                    for (m = j + 1; m < j + 8; m++)
                                    {
                                        if (alm[m] != -86052851)
                                        {
                                            j = m;
                                            break;
                                        }
                                    }
                                    if (m == j + 8)
                                    {
                                        alm[h] = j * 4;
                                        for (i = 0; i < 8; i++)
                                        {
                                            alm[j + i] = 0;
                                        }
                                        break;
                                    }
                                }
                            }
                            if (j >= md)
                            {
                                j = md;
                                alm[h] = j * 4;
                                for (i = 0; i < 8; i++)
                                {
                                    alm[j + i] = 0;
                                }
                                md += 8;
                            }
                            alm[h + 1] = 1;
                        }
                        if (rd1.Length <= 23)
                        {
                            DMiscOffset.Text = "0x" + alm[h].ToString("X");
                            string[] array = new string[2]
                            {
                                "Data" + (alm[h + 1] - 1) + " Bone",
                                "0x0"
                            };
                            DMiscParam.Items.Add(new ListViewItem(array));
                            DMiscList.SelectedNode.Nodes.Add("Data" + (alm[h + 1] - 1));
                        }
                        else
                        {
                            i = DMiscList.SelectedNode.Index;
                            DMiscOffset.Text = "0x" + (alm[h] + i * 32).ToString("X");
                            m = DMiscList.SelectedNode.Parent.Parent.Index;
                            n = DMiscList.SelectedNode.Parent.Index;
                            DMiscList.Nodes[m].Nodes[n].Nodes.Add("Data" + (alm[h + 1] - 1));
                        }
                        Fixam();
                        if (qe)
                        {
                            Qsave.Enabled = true;
                        }
                    }
                }
                return;
            }
            i = 2;
            rd1 = "";
            using (SubaAnimFlagsForm subaAnimFlagsForm = new SubaAnimFlagsForm())
            {
                subaAnimFlagsForm.afdat = g;
                subaAnimFlagsForm.afrn = i;
                subaAnimFlagsForm.afanm = rd1;
                subaAnimFlagsForm.ShowDialog(this);
                g = subaAnimFlagsForm.afdat;
                i = subaAnimFlagsForm.afrn;
                rd1 = subaAnimFlagsForm.afanm;
            }
            if (i != 7)
            {
                return;
            }
            for (i = 0; i < tds[28]; i++)
            {
                rd3 = DataExrnList.Items[i].ToString();
                if (rd1 == rd3)
                {
                    break;
                }
            }
            if (i < tds[28])
            {
                minitxt.Text = "A resource with that name already exists!";
                return;
            }
            if (minitxt.Text == "A resource with that name already exists!")
            {
                minitxt.Text = "";
            }
            h = (tds[27] + tds[28]) * 2 - 1;
            an5 = rnext[h];
            h--;
            for (i = rnexsize; i >= h; i--)
            {
                rnext[i + 2] = rnext[i];
            }
            m = rd1.Length + 1;
            g = tds[27] + tds[28] + 1;
            for (i = 0; i < g; i++)
            {
                if (rnext[i * 2 + 1] >= an5)
                {
                    rnext[i * 2 + 1] += m;
                }
            }
            rnext[h + 2] = -1;
            rnext[h + 3] = an5;
            tds[28]++;
            tds[24] += m + 8;
            rnexsize = (tds[24] + 3) / 4 - (tds[25] / 4 + par) - 8;
            an2 = (tds[27] + tds[28]) * 2;
            byte[] array2 = new byte[8000];
            for (i = 0; i < an5; i++)
            {
                if (i % 4 == 0)
                {
                    array2[i] = (byte)((rnext[an2] >> 24) & 0xFF);
                }
                else if (i % 4 == 1)
                {
                    array2[i] = (byte)((rnext[an2] >> 16) & 0xFF);
                }
                else if (i % 4 == 2)
                {
                    array2[i] = (byte)((rnext[an2] >> 8) & 0xFF);
                }
                else
                {
                    array2[i] = (byte)(rnext[an2] & 0xFF);
                    an2++;
                }
            }
            k = m - 1;
            byte[] bytes = Encoding.UTF8.GetBytes(rd1);
            for (i = 0; i < k; i++)
            {
                array2[an5 + i] = bytes[i];
            }
            i = an5;
            for (an5 = (rnexsize - (tds[27] + tds[28]) * 2) * 4; i < an5; i++)
            {
                if (i % 4 == 0)
                {
                    array2[m + i] = (byte)((rnext[an2] >> 24) & 0xFF);
                }
                else if (i % 4 == 1)
                {
                    array2[m + i] = (byte)((rnext[an2] >> 16) & 0xFF);
                }
                else if (i % 4 == 2)
                {
                    array2[m + i] = (byte)((rnext[an2] >> 8) & 0xFF);
                }
                else
                {
                    array2[m + i] = (byte)(rnext[an2] & 0xFF);
                    an2++;
                }
            }
            an2 = (tds[27] + tds[28]) * 2;
            for (i = 0; i < an5; i += 4)
            {
                rnext[an2 + i / 4] = array2[i] * 16777216 + array2[i + 1] * 65536 + array2[i + 2] * 256 + array2[i + 3];
            }
            DataExrnList.Items.Add(rd1);
            Fixam();
            if (qe)
            {
                Qsave.Enabled = true;
            }
        }

        private void DataExrnRemove_Click(object sender, EventArgs e)
        {
            if (DataTab.SelectedIndex == 3)
            {
                rd1 = DMiscList.SelectedNode.FullPath;
                if (rd1 == "ExtraActionInterrupts")
                {
                    if (alm[dat + 22] >= 8096 && alm[dat + 22] < tds[25])
                    {
                        h = alm[dat + 22] / 4 + 2;
                        if (alm[h] >= 8096 && alm[h] < tds[25])
                        {
                            j = alm[h] / 4;
                            rd1 = alm[h].ToString("X");
                            if (EvRnOffset.Text == "0x" + rd1)
                            {
                                EvRnOffset.Text = "";
                                if (EventTab.SelectedIndex == 2)
                                {
                                    EvList.Items.Clear();
                                }
                            }
                            if (EvRnOfSele.Text == rd1)
                            {
                                EvRnOfSele.Text = "";
                            }
                            if (alm[j] == 0)
                            {
                                alm[j] = -86052851;
                                alm[j + 1] = -86052851;
                            }
                            else
                            {
                                k = j;
                                g = 0;
                                while (alm[k] != 0 && k < md)
                                {
                                    k += 2;
                                    g++;
                                }
                                RemoveAllEv();
                            }
                        }
                        rmv = h * 4;
                        Delasc();
                        alm[h - 2] = -86052851;
                        alm[h - 1] = -86052851;
                        alm[h] = -86052851;
                        alm[dat + 22] = 0;
                        rmv = dat * 4 + 88;
                        Delasc();
                        DataOffsetList.Items[22] = "ExtraActionInterrupts\t - 0x" + alm[dat + 22].ToString("X");
                        DMiscParam.Items.Clear();
                        DMiscOffset.Text = "";
                        Fixam();
                    }
                    else
                    {
                        EvRnOffset.Text = "";
                        ModeChange.SelectedIndex = 1;
                        if (EventTab.SelectedIndex != 2)
                        {
                            EventTab.SelectedIndex = 2;
                        }
                        if (!EvOffsetInterlock.Checked)
                        {
                            EvOffsetInterlock.Checked = true;
                        }
                        EvList.Items.Clear();
                        for (j = stf; j < md; j++)
                        {
                            if (alm[j] == -86052851)
                            {
                                for (i = j + 1; i < j + 4; i++)
                                {
                                    if (alm[i] != -86052851)
                                    {
                                        j = i;
                                        break;
                                    }
                                }
                                if (i == j + 4)
                                {
                                    alm[j] = 131072;
                                    alm[j + 1] = 0;
                                    alm[j + 2] = 0;
                                    alm[j + 3] = 0;
                                    break;
                                }
                            }
                        }
                        if (j >= md)
                        {
                            j = md;
                            alm[j] = 131072;
                            alm[j + 1] = 0;
                            alm[j + 2] = 0;
                            alm[j + 3] = 0;
                            md += 4;
                        }
                        h = j * 4;
                        mov = 0;
                        EvRnOffset.Text = "0x" + h.ToString("X");
                        EvRnOfSele.Text = h.ToString("X");
                        EveListstring();
                        EvList.Items.Add(rd1);
                        for (j = stf; j < md; j++)
                        {
                            if (alm[j] == -86052851)
                            {
                                for (i = j + 1; i < j + 3; i++)
                                {
                                    if (alm[i] != -86052851)
                                    {
                                        j = i;
                                        break;
                                    }
                                }
                                if (i == j + 3)
                                {
                                    alm[j] = 0;
                                    alm[j + 1] = 0;
                                    alm[j + 2] = h;
                                    break;
                                }
                            }
                        }
                        if (j >= md)
                        {
                            j = md;
                            alm[j] = 0;
                            alm[j + 1] = 0;
                            alm[j + 2] = h;
                            md += 3;
                        }
                        g = j * 4;
                        alm[dat + 22] = g;
                        asc[par] = j * 4 + 8;
                        par++;
                        asc[par] = dat * 4 + 88;
                        tds[26] += 2;
                        DataOffsetList.Items[22] = "ExtraActionInterrupts\t - 0x" + alm[dat + 22].ToString("X");
                        DMiscParam.Items.Clear();
                        string[] array = new string[2];
                        DMiscOffset.Text = "0x" + alm[dat + 22].ToString("X");
                        k = alm[dat + 22] / 4;
                        array[0] = "Unknown0";
                        array[1] = "0x" + alm[k].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Unknown1";
                        array[1] = "0x" + alm[k + 1].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "DataOffset";
                        array[1] = "0x" + alm[k + 2].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        Fixam();
                    }
                }
                else if (rd1[0] == 'M')
                {
                    if (rd1[1] == 'o')
                    {
                        if (alm[dat + 1] >= 8096 && alm[dat + 1] < tds[25])
                        {
                            if (rd1[16] == 'D')
                            {
                                k = alm[dat + 1] / 4 + 2;
                                if (alm[k] >= 8096 && alm[k] < tds[25] && alm[k + 1] > 0 && alm[k + 1] < 256)
                                {
                                    h = alm[k] / 4;
                                    alm[k + 1]--;
                                    g = alm[k + 1] * 2;
                                    alm[h + g] = -86052851;
                                    alm[h + g + 1] = -86052851;
                                    if (alm[k + 1] == 0)
                                    {
                                        alm[k] = 0;
                                        rmv = k * 4;
                                        Delasc();
                                    }
                                    Fixam();
                                }
                                g = DMiscList.Nodes[0].GetNodeCount(includeSubTrees: false);
                                DMiscList.Nodes[0].Nodes[g - 1].Remove();
                            }
                            else
                            {
                                rd2 = DMiscList.SelectedNode.Text;
                                k = alm[dat + 1] / 4;
                                h = alm[k] / 4;
                                if (alm[h] >= 8096 && alm[h] < tds[25] && alm[h + 1] >= 8096 && alm[h + 1] < tds[25])
                                {
                                    if (rd2 == "List")
                                    {
                                        if (rd1[16] == 'H')
                                        {
                                            h = alm[k] / 4;
                                        }
                                        else
                                        {
                                            h = alm[k] / 4 + 1;
                                        }
                                        m = DMiscList.SelectedNode.Parent.Parent.Index;
                                        n = DMiscList.SelectedNode.Parent.Index;
                                        g = alm[h] / 4 + m * 2;
                                        if (alm[g] >= 8096 && alm[g] < tds[25])
                                        {
                                            k = alm[g] / 4 + n * 2;
                                            if (alm[k] >= 8096 && alm[k] < tds[25])
                                            {
                                                g = alm[k + 1];
                                                h = alm[k] / 4;
                                                if (g > 0 && g < 256)
                                                {
                                                    if (g == 1)
                                                    {
                                                        alm[h] = -86052851;
                                                        alm[k] = 0;
                                                        alm[k + 1] = 0;
                                                        rmv = k * 4;
                                                        Delasc();
                                                        DMiscList.SelectedNode.Remove();
                                                        Fixam();
                                                    }
                                                    else if (DMiscParam.SelectedItems.Count > 0)
                                                    {
                                                        i = DMiscParam.SelectedItems[0].Index;
                                                        for (j = i; j < g; j++)
                                                        {
                                                            alm[h + j] = alm[h + j + 1];
                                                            DMiscParam.Items[j].SubItems[0].Text = "Data" + (j - 1);
                                                        }
                                                        g--;
                                                        alm[h + g] = -86052851;
                                                        alm[k + 1]--;
                                                        DMiscParam.Items[i].Remove();
                                                        if (h + g + 2 >= md)
                                                        {
                                                            Fixam();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (rd2[0] == 'B')
                                    {
                                        if (rd2[4] == 'S')
                                        {
                                            g = DMiscList.Nodes[0].Nodes[0].GetNodeCount(includeSubTrees: false);
                                            if (g > 1)
                                            {
                                                m = DMiscList.SelectedNode.Index * 2;
                                                an3 = g * 2 - 2;
                                                h = alm[k] / 4;
                                                n = alm[h] / 4;
                                                if (alm[n + m] >= 8096 && alm[n + m] < tds[25])
                                                {
                                                    rmv = (n + m) * 4;
                                                    Delasc();
                                                    if (alm[n + m + 1] > 0 && alm[n + m + 1] < 256)
                                                    {
                                                        j = alm[n + m] / 4;
                                                        for (an1 = alm[n + m + 1] * 2 - 2; an1 >= 0; an1 -= 2)
                                                        {
                                                            if (alm[j + an1] >= 8096 && alm[j + an1] < tds[25])
                                                            {
                                                                rmv = (j + an1) * 4;
                                                                Delasc();
                                                                if (alm[j + an1 + 1] > 0 && alm[j + an1 + 1] < 256)
                                                                {
                                                                    an2 = alm[j + an1] / 4;
                                                                    for (i = alm[j + an1 + 1] - 1; i >= 0; i--)
                                                                    {
                                                                        alm[an2 + i] = -86052851;
                                                                    }
                                                                }
                                                            }
                                                            alm[j + an1] = -86052851;
                                                            alm[j + an1 + 1] = -86052851;
                                                        }
                                                    }
                                                }
                                                for (i = m; i < an3; i += 2)
                                                {
                                                    if (alm[n + i + 2] >= 8096)
                                                    {
                                                        rmv = (n + i + 2) * 4;
                                                        for (mov = 0; mov < par; mov++)
                                                        {
                                                            if (asc[mov] == rmv)
                                                            {
                                                                asc[mov] -= 8;
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    alm[n + i] = alm[n + i + 2];
                                                    alm[n + i + 1] = alm[n + i + 3];
                                                }
                                                alm[n + an3] = -86052851;
                                                alm[n + an3 + 1] = -86052851;
                                                h = alm[k] / 4 + 1;
                                                n = alm[h] / 4;
                                                if (alm[n + m] >= 8096 && alm[n + m] < tds[25])
                                                {
                                                    rmv = (n + m) * 4;
                                                    Delasc();
                                                    if (alm[n + m + 1] > 0 && alm[n + m + 1] < 256)
                                                    {
                                                        j = alm[n + m] / 4;
                                                        for (an1 = alm[n + m + 1] * 2 - 2; an1 >= 0; an1 -= 2)
                                                        {
                                                            if (alm[j + an1] >= 8096 && alm[j + an1] < tds[25])
                                                            {
                                                                rmv = (j + an1) * 4;
                                                                Delasc();
                                                                if (alm[j + an1 + 1] > 0 && alm[j + an1 + 1] < 256)
                                                                {
                                                                    an2 = alm[j + an1] / 4;
                                                                    for (i = alm[j + an1 + 1] - 1; i >= 0; i--)
                                                                    {
                                                                        alm[an2 + i] = -86052851;
                                                                    }
                                                                }
                                                            }
                                                            alm[j + an1] = -86052851;
                                                            alm[j + an1 + 1] = -86052851;
                                                        }
                                                    }
                                                }
                                                for (i = m; i < an3; i += 2)
                                                {
                                                    if (alm[n + i + 2] >= 8096)
                                                    {
                                                        rmv = (n + i + 2) * 4;
                                                        for (mov = 0; mov < par; mov++)
                                                        {
                                                            if (asc[mov] == rmv)
                                                            {
                                                                asc[mov] -= 8;
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    alm[n + i] = alm[n + i + 2];
                                                    alm[n + i + 1] = alm[n + i + 3];
                                                }
                                                alm[n + an3] = -86052851;
                                                alm[n + an3 + 1] = -86052851;
                                                alm[k + 1] = g - 1;
                                                for (i = DMiscList.SelectedNode.Index; i < g; i++)
                                                {
                                                    DMiscList.Nodes[0].Nodes[0].Nodes[i].Text = "BoneSwitch" + (i - 1);
                                                    DMiscList.Nodes[0].Nodes[1].Nodes[i].Text = "BoneSwitch" + (i - 1);
                                                }
                                                i = DMiscList.SelectedNode.Index;
                                                DMiscList.Nodes[0].Nodes[0].Nodes[i].Remove();
                                                DMiscList.Nodes[0].Nodes[1].Nodes[i].Remove();
                                                Fixam();
                                            }
                                        }
                                        else
                                        {
                                            if (rd1[16] == 'H')
                                            {
                                                h = alm[k] / 4;
                                            }
                                            else
                                            {
                                                h = alm[k] / 4 + 1;
                                            }
                                            m = DMiscList.SelectedNode.Parent.Index;
                                            n = DMiscList.SelectedNode.Index;
                                            g = alm[h] / 4 + m * 2;
                                            if (alm[g] >= 8096 && alm[g] < tds[25])
                                            {
                                                i = DMiscList.SelectedNode.Parent.Parent.Index;
                                                an1 = DMiscList.Nodes[0].Nodes[i].Nodes[m].GetNodeCount(includeSubTrees: false);
                                                k = alm[g] / 4 + n * 2;
                                                if (alm[k] >= 8096 && alm[k] < tds[25])
                                                {
                                                    rmv = k * 4;
                                                    Delasc();
                                                    h = alm[k] / 4;
                                                    m = alm[k + 1];
                                                    for (i = 0; i < m; i++)
                                                    {
                                                        alm[h + i] = -86052851;
                                                    }
                                                }
                                                if (an1 == 1)
                                                {
                                                    alm[g] = 0;
                                                    alm[g + 1] = 0;
                                                    rmv = g * 4;
                                                    Delasc();
                                                }
                                                else
                                                {
                                                    for (m = alm[g] / 4 + an1 * 2 - 2; k < m; k += 2)
                                                    {
                                                        if (alm[k + 2] >= 8096)
                                                        {
                                                            rmv = (k + 2) * 4;
                                                            for (mov = 0; mov < par; mov++)
                                                            {
                                                                if (asc[mov] == rmv)
                                                                {
                                                                    asc[mov] -= 8;
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        alm[k] = alm[k + 2];
                                                        alm[k + 1] = alm[k + 3];
                                                    }
                                                    alm[g + 1] = an1 - 1;
                                                }
                                                alm[k] = -86052851;
                                                alm[k + 1] = -86052851;
                                                n = DMiscList.SelectedNode.Parent.Parent.Index;
                                                m = DMiscList.SelectedNode.Parent.Index;
                                                for (i = DMiscList.SelectedNode.Index + 1; i < an1; i++)
                                                {
                                                    DMiscList.Nodes[0].Nodes[n].Nodes[m].Nodes[i].Text = "BoneGroup" + (i - 1);
                                                }
                                                DMiscList.SelectedNode.Remove();
                                                Fixam();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else if (alm[dat + 4] >= 8096 && alm[dat + 4] < tds[25])
                    {
                        h = alm[dat + 4] / 4;
                        if (rd1[12] == 'F')
                        {
                            if (alm[h + 1] >= 8096 && alm[h + 1] < tds[25])
                            {
                                i = DMiscList.SelectedNode.Parent.Parent.Index;
                                n = DMiscList.SelectedNode.Parent.Index;
                                g = DMiscList.Nodes[i].Nodes[n].GetNodeCount(includeSubTrees: false);
                                k = alm[h + 1] / 4;
                                if (g == 1)
                                {
                                    alm[h + 1] = 0;
                                    alm[h + 2] = 0;
                                    for (i = 0; i < 5; i++)
                                    {
                                        alm[k + i] = -86052851;
                                    }
                                    rmv = h * 4 + 4;
                                    Delasc();
                                }
                                else
                                {
                                    n = DMiscList.SelectedNode.Index;
                                    mov = g * 5 - 5;
                                    for (i = n * 5; i < mov; i++)
                                    {
                                        alm[k + i] = alm[k + i + 5];
                                    }
                                    for (i = 0; i < 5; i++)
                                    {
                                        alm[k + mov + i] = -86052851;
                                    }
                                    alm[h + 2] = g - 1;
                                    i = DMiscList.SelectedNode.Parent.Parent.Index;
                                    for (m = DMiscList.SelectedNode.Parent.Index; n < g; n++)
                                    {
                                        DMiscList.Nodes[i].Nodes[m].Nodes[n].Text = "Data" + (n - 1);
                                    }
                                }
                                DMiscList.SelectedNode.Remove();
                                Fixam();
                            }
                        }
                        else if (rd1[12] == 'H' && alm[h + 3] >= 8096 && alm[h + 3] < tds[25])
                        {
                            i = DMiscList.SelectedNode.Parent.Parent.Index;
                            n = DMiscList.SelectedNode.Parent.Index;
                            g = DMiscList.Nodes[i].Nodes[n].GetNodeCount(includeSubTrees: false);
                            k = alm[h + 3] / 4;
                            if (g == 1)
                            {
                                alm[h + 3] = 0;
                                alm[h + 4] = 0;
                                for (i = 0; i < 8; i++)
                                {
                                    alm[k + i] = -86052851;
                                }
                                rmv = h * 4 + 12;
                                Delasc();
                            }
                            else
                            {
                                n = DMiscList.SelectedNode.Index;
                                mov = g * 8 - 8;
                                for (i = n * 8; i < mov; i++)
                                {
                                    alm[k + i] = alm[k + i + 8];
                                }
                                for (i = 0; i < 8; i++)
                                {
                                    alm[k + mov + i] = -86052851;
                                }
                                alm[h + 4] = g - 1;
                                i = DMiscList.SelectedNode.Parent.Parent.Index;
                                for (m = DMiscList.SelectedNode.Parent.Index; n < g; n++)
                                {
                                    DMiscList.Nodes[i].Nodes[m].Nodes[n].Text = "Data" + (n - 1);
                                }
                            }
                            DMiscList.SelectedNode.Remove();
                            Fixam();
                        }
                    }
                }
                if (qe)
                {
                    Qsave.Enabled = true;
                }
            }
            else
            {
                if (DataExrnList.SelectedIndex == -1)
                {
                    return;
                }
                if (minitxt.Text == "Unused External Sub Routine data has occurred.")
                {
                    minitxt.Text = "";
                }
                j = DataExrnList.SelectedIndex;
                g = rnext[(tds[27] + j) * 2];
                h = g / 4;
                if (g < 8096 || g >= tds[25])
                {
                    g = 0;
                }
                if (g >= 8096)
                {
                    if (MessageBox.Show("this data is Using. Delete this Data?", "Caution", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        g = 0;
                        fnt = 1;
                        an2 = alm[dat + 11] / 4;
                        an5 = an2 + 274 + spas;
                        for (i = 0; i < 100; i++)
                        {
                            if (h >= an2 && h < an5)
                            {
                                an1 = alm[h];
                                alm[h] = 0;
                                if (an1 < 8096 || an1 >= tds[25])
                                {
                                    break;
                                }
                                h = an1 / 4;
                            }
                            else
                            {
                                if (alm[h - 1] != 2)
                                {
                                    break;
                                }
                                an1 = alm[h];
                                alm[h - 1] = -86052851;
                                alm[h] = -86052851;
                                k = h * 4 - 4;
                                for (n = stf; n < md; n++)
                                {
                                    if (alm[n] == k && alm[n - 1] == 459008)
                                    {
                                        alm[n - 1] = 131072;
                                        alm[n] = 0;
                                        rmv = n * 4;
                                        Delasc();
                                        break;
                                    }
                                }
                                if (an1 < 8096 || an1 >= tds[25])
                                {
                                    break;
                                }
                                h = an1 / 4;
                            }
                        }
                    }
                }
                else
                {
                    fnt = 0;
                }
                if (g != 0)
                {
                    return;
                }
                if (minitxt.Text == "A resource with that name already exists!")
                {
                    minitxt.Text = "";
                }
                rd3 = DataExrnList.Items[j].ToString();
                an1 = (tds[27] + j) * 2;
                h = rd3.Length + 1;
                an5 = rnext[an1 + 1];
                an2 = (tds[27] + tds[28]) * 2;
                for (i = 1; i < an2; i += 2)
                {
                    if (rnext[i] > an5)
                    {
                        rnext[i] -= h;
                    }
                }
                m = (tds[27] + tds[28]) * 8 + (an5 + h);
                tds[24] -= h;
                h = (rnexsize - (tds[27] + tds[28]) * 2 - 8) * 4;
                rnexsize = (tds[24] + 3) / 4 - (tds[25] / 4 + par) - 8;
                byte[] array2 = new byte[8000];
                for (i = 0; i < an5; i++)
                {
                    if (i % 4 == 0)
                    {
                        array2[i] = (byte)((rnext[an2] >> 24) & 0xFF);
                    }
                    else if (i % 4 == 1)
                    {
                        array2[i] = (byte)((rnext[an2] >> 16) & 0xFF);
                    }
                    else if (i % 4 == 2)
                    {
                        array2[i] = (byte)((rnext[an2] >> 8) & 0xFF);
                    }
                    else
                    {
                        array2[i] = (byte)(rnext[an2] & 0xFF);
                        an2++;
                    }
                }
                an2 = m / 4;
                i = an5;
                h += 24;
                while (i < h)
                {
                    if (m % 4 == 0)
                    {
                        array2[i] = (byte)((rnext[m / 4] >> 24) & 0xFF);
                    }
                    else if (m % 4 == 1)
                    {
                        array2[i] = (byte)((rnext[m / 4] >> 16) & 0xFF);
                    }
                    else if (m % 4 == 2)
                    {
                        array2[i] = (byte)((rnext[m / 4] >> 8) & 0xFF);
                    }
                    else
                    {
                        array2[i] = (byte)(rnext[m / 4] & 0xFF);
                    }
                    m++;
                    i++;
                }
                an2 = (tds[27] + tds[28]) * 2;
                for (i = an1; i < an2; i++)
                {
                    rnext[i] = rnext[i + 2];
                }
                tds[28]--;
                an2 -= 2;
                rnexsize -= 2;
                for (i = 0; i < h; i += 4)
                {
                    rnext[an2 + i / 4] = array2[i] * 16777216 + array2[i + 1] * 65536 + array2[i + 2] * 256 + array2[i + 3];
                }
                DataExrnList.Items.RemoveAt(j);
                Fixam();
                if (fnt == 1 && EvList.Items.Count > 0)
                {
                    EvList.Items.Clear();
                    mov = 0;
                    EvDesText.Text = "";
                    if (EventTab.SelectedIndex == 0)
                    {
                        if (EvSpOffset.Text.Length > 2)
                        {
                            rd1 = EvSpOffset.Text.Substring(2);
                            h = Convert.ToInt32(rd1, 16);
                            if (h > 0 && h < tds[25])
                            {
                                j = h / 4;
                                mov = 0;
                                while (alm[j] != 0 && j < md)
                                {
                                    EveListstring();
                                    EvList.Items.Add(rd1);
                                    j += 2;
                                }
                            }
                        }
                    }
                    else if (EventTab.SelectedIndex == 1)
                    {
                        if (EvSubaOffset.Text.Length > 2)
                        {
                            rd1 = EvSubaOffset.Text.Substring(2);
                            h = Convert.ToInt32(rd1, 16);
                            if (h > 0 && h < tds[25])
                            {
                                j = h / 4;
                                mov = 0;
                                while (alm[j] != 0 && j < md)
                                {
                                    EveListstring();
                                    EvList.Items.Add(rd1);
                                    j += 2;
                                }
                            }
                        }
                    }
                    else if (EventTab.SelectedIndex == 3)
                    {
                        if (EvOvrOffset.Text.Length > 2)
                        {
                            rd1 = EvOvrOffset.Text.Substring(2);
                            h = Convert.ToInt32(rd1, 16);
                            if (h > 0 && h < tds[25])
                            {
                                j = h / 4;
                                mov = 0;
                                while (alm[j] != 0 && j < md)
                                {
                                    EveListstring();
                                    EvList.Items.Add(rd1);
                                    j += 2;
                                }
                            }
                        }
                    }
                    else if (EvRnOffset.Text.Length > 5)
                    {
                        rd1 = EvRnOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                        j = h / 4;
                        mov = 0;
                        while (alm[j] != 0 && j < md)
                        {
                            EveListstring();
                            EvList.Items.Add(rd1);
                            j += 2;
                        }
                    }
                }
                if (qe)
                {
                    Qsave.Enabled = true;
                }
            }
        }

        private void DataExrnRename_Click(object sender, EventArgs e)
        {
            if (DataTab.SelectedIndex != 2 || DataExrnList.SelectedIndex == -1)
            {
                return;
            }
            j = DataExrnList.SelectedIndex;
            rd1 = DataExrnList.Items[j].ToString();
            g = 0;
            i = 2;
            rd2 = rd1;
            using (SubaAnimFlagsForm subaAnimFlagsForm = new SubaAnimFlagsForm())
            {
                subaAnimFlagsForm.afdat = g;
                subaAnimFlagsForm.afrn = i;
                subaAnimFlagsForm.afanm = rd1;
                subaAnimFlagsForm.ShowDialog(this);
                g = subaAnimFlagsForm.afdat;
                i = subaAnimFlagsForm.afrn;
                rd1 = subaAnimFlagsForm.afanm;
            }
            if (i != 7 || !(rd1 != rd2))
            {
                return;
            }
            for (i = 0; i < tds[28]; i++)
            {
                rd3 = DataExrnList.Items[i].ToString();
                if (rd1 == rd3)
                {
                    break;
                }
            }
            if (i < tds[28])
            {
                minitxt.Text = "A resource with that name already exists!";
                return;
            }
            if (minitxt.Text == "A resource with that name already exists!")
            {
                minitxt.Text = "";
            }
            an1 = (tds[27] + j) * 2;
            h = rd1.Length - rd2.Length;
            an5 = rnext[an1 + 1];
            an2 = (tds[27] + tds[28]) * 2;
            if (h != 0)
            {
                for (i = 1; i < an2; i += 2)
                {
                    if (rnext[i] > an5)
                    {
                        rnext[i] += h;
                    }
                }
            }
            tds[24] += h;
            h += (rnexsize - (tds[27] + tds[28]) * 2 - 8) * 4 + 34;
            rnexsize = (tds[24] + 3) / 4 - (tds[25] / 4 + par) - 8;
            byte[] array = new byte[8000];
            for (i = 0; i < an5; i++)
            {
                if (i % 4 == 0)
                {
                    array[i] = (byte)((rnext[an2] >> 24) & 0xFF);
                }
                else if (i % 4 == 1)
                {
                    array[i] = (byte)((rnext[an2] >> 16) & 0xFF);
                }
                else if (i % 4 == 2)
                {
                    array[i] = (byte)((rnext[an2] >> 8) & 0xFF);
                }
                else
                {
                    array[i] = (byte)(rnext[an2] & 0xFF);
                    an2++;
                }
            }
            m = (tds[27] + tds[28]) * 8 + (an5 + rd2.Length + 1);
            k = rd1.Length;
            byte[] bytes = Encoding.UTF8.GetBytes(rd1);
            for (i = 0; i < k; i++)
            {
                array[an5 + i] = bytes[i];
            }
            for (i = k + an5 + 1; i < h; i++)
            {
                if (m % 4 == 0)
                {
                    array[i] = (byte)((rnext[m / 4] >> 24) & 0xFF);
                }
                else if (m % 4 == 1)
                {
                    array[i] = (byte)((rnext[m / 4] >> 16) & 0xFF);
                }
                else if (m % 4 == 2)
                {
                    array[i] = (byte)((rnext[m / 4] >> 8) & 0xFF);
                }
                else
                {
                    array[i] = (byte)(rnext[m / 4] & 0xFF);
                }
                m++;
            }
            an2 = (tds[27] + tds[28]) * 2;
            for (i = 0; i < h; i += 4)
            {
                rnext[an2 + i / 4] = array[i] * 16777216 + array[i + 1] * 65536 + array[i + 2] * 256 + array[i + 3];
            }
            DataExrnList.Items[j] = rd1;
            Fixam();
            if (qe)
            {
                Qsave.Enabled = true;
            }
        }

        private void DataExrnUp_Click(object sender, EventArgs e)
        {
            if (DataTab.SelectedIndex == 3)
            {
                if (!(DMiscOffset.Text != ""))
                {
                    return;
                }
                rd1 = DMiscList.SelectedNode.FullPath;
                if (rd1[0] != 'M')
                {
                    return;
                }
                if (rd1[1] == 'o')
                {
                    rd2 = DMiscList.SelectedNode.Text;
                    if (rd2 == "List")
                    {
                        if (DMiscParam.SelectedItems.Count > 0)
                        {
                            i = DMiscParam.SelectedItems[0].Index;
                            if (i > 0)
                            {
                                rd1 = DMiscOffset.Text.Substring(2);
                                h = Convert.ToInt32(rd1, 16);
                                j = h / 4 + i;
                                k = alm[j - 1];
                                alm[j - 1] = alm[j];
                                alm[j] = k;
                                DMiscParam.Items[i - 1].SubItems[1].Text = "0x" + alm[j - 1].ToString("X");
                                DMiscParam.Items[i].SubItems[1].Text = "0x" + alm[j].ToString("X");
                                DMiscParam.SelectedItems.Clear();
                                DMiscParam.Items[i - 1].Selected = true;
                            }
                        }
                    }
                    else if (rd2[4] == 'S')
                    {
                        an2 = DMiscList.SelectedNode.Index;
                        if (an2 > 0)
                        {
                            rd1 = DMiscOffset.Text.Substring(2);
                            h = Convert.ToInt32(rd1, 16);
                            j = h / 4;
                            if (alm[j] >= 8096 && alm[j] < tds[25])
                            {
                                if (alm[j - 2] < 8096 || alm[j - 2] >= tds[25])
                                {
                                    for (mov = 0; mov < par; mov++)
                                    {
                                        if (asc[mov] == h)
                                        {
                                            asc[mov] -= 8;
                                            alm[mov + md] -= 8;
                                            break;
                                        }
                                    }
                                }
                            }
                            else if (alm[j - 2] >= 8096 && alm[j - 2] < tds[25])
                            {
                                h -= 8;
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == h)
                                    {
                                        asc[mov] += 8;
                                        alm[mov + md] += 8;
                                        break;
                                    }
                                }
                            }
                            g = alm[j - 2];
                            alm[j - 2] = alm[j];
                            alm[j] = g;
                            g = alm[j - 1];
                            alm[j - 1] = alm[j + 1];
                            alm[j + 1] = g;
                            an1 = DMiscList.SelectedNode.Parent.Index;
                            g = DMiscList.Nodes[0].Nodes[an1].Nodes[an2].GetNodeCount(includeSubTrees: false);
                            for (i = 0; i < g; i++)
                            {
                                DMiscList.Nodes[0].Nodes[an1].Nodes[an2].Nodes[0].Remove();
                            }
                            if (alm[j] >= 8096 && alm[j] < tds[25] && alm[j + 1] > 0 && alm[j + 1] < 256)
                            {
                                k = alm[j] / 4;
                                n = alm[j + 1];
                                for (i = 0; i < n; i++)
                                {
                                    DMiscList.Nodes[0].Nodes[an1].Nodes[an2].Nodes.Add("BoneGroup" + i);
                                    if (alm[k + i * 2] >= 8096 && alm[k + i * 2] < tds[25] && alm[k + i * 2 + 1] > 0 && alm[k + i * 2 + 1] < 256)
                                    {
                                        DMiscList.Nodes[0].Nodes[an1].Nodes[an2].Nodes[i].Nodes.Add("List");
                                    }
                                }
                            }
                            g = DMiscList.Nodes[0].Nodes[an1].Nodes[an2 - 1].GetNodeCount(includeSubTrees: false);
                            for (i = 0; i < g; i++)
                            {
                                DMiscList.Nodes[0].Nodes[an1].Nodes[an2 - 1].Nodes[0].Remove();
                            }
                            if (alm[j - 2] >= 8096 && alm[j - 2] < tds[25] && alm[j - 1] > 0 && alm[j - 1] < 256)
                            {
                                k = alm[j - 2] / 4;
                                n = alm[j - 1];
                                for (i = 0; i < n; i++)
                                {
                                    DMiscList.Nodes[0].Nodes[an1].Nodes[an2 - 1].Nodes.Add("BoneGroup" + i);
                                    if (alm[k + i * 2] >= 8096 && alm[k + i * 2] < tds[25] && alm[k + i * 2 + 1] > 0 && alm[k + i * 2 + 1] < 256)
                                    {
                                        DMiscList.Nodes[0].Nodes[an1].Nodes[an2 - 1].Nodes[i].Nodes.Add("List");
                                    }
                                }
                            }
                            DMiscList.SelectedNode = DMiscList.Nodes[0].Nodes[an1].Nodes[an2 - 1];
                        }
                    }
                    else
                    {
                        i = DMiscList.SelectedNode.Index;
                        if (i > 0)
                        {
                            rd1 = DMiscOffset.Text.Substring(2);
                            h = Convert.ToInt32(rd1, 16);
                            j = h / 4;
                            m = DMiscList.SelectedNode.Parent.Parent.Index;
                            n = DMiscList.SelectedNode.Parent.Index;
                            if (alm[j] >= 8096 && alm[j] < tds[25])
                            {
                                if (alm[j - 2] < 8096 || alm[j - 2] >= tds[25])
                                {
                                    for (mov = 0; mov < par; mov++)
                                    {
                                        if (asc[mov] == h)
                                        {
                                            asc[mov] -= 8;
                                            alm[mov + md] -= 8;
                                            break;
                                        }
                                    }
                                    DMiscList.Nodes[0].Nodes[m].Nodes[n].Nodes[i].Nodes[0].Remove();
                                    DMiscList.Nodes[0].Nodes[m].Nodes[n].Nodes[i - 1].Nodes.Add("List");
                                }
                            }
                            else if (alm[j - 2] >= 8096 && alm[j - 2] < tds[25])
                            {
                                h -= 8;
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == h)
                                    {
                                        asc[mov] += 8;
                                        alm[mov + md] += 8;
                                        break;
                                    }
                                }
                                DMiscList.Nodes[0].Nodes[m].Nodes[n].Nodes[i - 1].Nodes[0].Remove();
                                DMiscList.Nodes[0].Nodes[m].Nodes[n].Nodes[i].Nodes.Add("List");
                            }
                            g = alm[j - 2];
                            alm[j - 2] = alm[j];
                            alm[j] = g;
                            g = alm[j - 1];
                            alm[j - 1] = alm[j + 1];
                            alm[j + 1] = g;
                            DMiscList.SelectedNode = DMiscList.Nodes[0].Nodes[m].Nodes[n].Nodes[i - 1];
                        }
                    }
                }
                else if (rd1[12] == 'F')
                {
                    i = DMiscList.SelectedNode.Index;
                    if (i > 0)
                    {
                        rd1 = DMiscOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                        j = h / 4;
                        for (k = j + 5; j < k; j++)
                        {
                            g = alm[j - 5];
                            alm[j - 5] = alm[j];
                            alm[j] = g;
                        }
                        n = DMiscList.SelectedNode.Parent.Parent.Index;
                        m = DMiscList.SelectedNode.Parent.Index;
                        DMiscList.SelectedNode = DMiscList.Nodes[n].Nodes[m].Nodes[i - 1];
                    }
                }
                else if (rd1[12] == 'H')
                {
                    i = DMiscList.SelectedNode.Index;
                    if (i > 0)
                    {
                        rd1 = DMiscOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                        j = h / 4;
                        for (k = j + 8; j < k; j++)
                        {
                            g = alm[j - 8];
                            alm[j - 8] = alm[j];
                            alm[j] = g;
                        }
                        n = DMiscList.SelectedNode.Parent.Parent.Index;
                        m = DMiscList.SelectedNode.Parent.Index;
                        DMiscList.SelectedNode = DMiscList.Nodes[n].Nodes[m].Nodes[i - 1];
                    }
                }
                if (qe)
                {
                    Qsave.Enabled = true;
                }
            }
            else
            {
                if (DataExrnList.SelectedIndex == -1)
                {
                    return;
                }
                j = DataExrnList.SelectedIndex;
                if (j > 0)
                {
                    h = (tds[27] + j) * 2;
                    g = rnext[h];
                    rnext[h] = rnext[h - 2];
                    rnext[h - 2] = g;
                    g = rnext[h + 1];
                    rnext[h + 1] = rnext[h - 1];
                    rnext[h - 1] = g;
                    rd1 = DataExrnList.Items[j].ToString();
                    rd2 = DataExrnList.Items[j - 1].ToString();
                    DataExrnList.Items[j] = rd2;
                    DataExrnList.Items[j - 1] = rd1;
                    DataExrnList.SelectedIndex = j - 1;
                    Fixam();
                    if (qe)
                    {
                        Qsave.Enabled = true;
                    }
                }
            }
        }

        private void DataExrnDown_Click(object sender, EventArgs e)
        {
            if (DataTab.SelectedIndex == 3)
            {
                if (!(DMiscOffset.Text != ""))
                {
                    return;
                }
                rd1 = DMiscList.SelectedNode.FullPath;
                if (rd1[0] != 'M')
                {
                    return;
                }
                if (rd1[1] == 'o')
                {
                    rd2 = DMiscList.SelectedNode.Text;
                    if (rd2 == "List")
                    {
                        if (DMiscParam.SelectedItems.Count > 0)
                        {
                            i = DMiscParam.SelectedItems[0].Index;
                            g = DMiscParam.Items.Count - 1;
                            if (i < g)
                            {
                                rd1 = DMiscOffset.Text.Substring(2);
                                h = Convert.ToInt32(rd1, 16);
                                j = h / 4 + i;
                                g = alm[j];
                                alm[j] = alm[j + 1];
                                alm[j + 1] = g;
                                DMiscParam.Items[i].SubItems[1].Text = "0x" + alm[j].ToString("X");
                                DMiscParam.Items[i + 1].SubItems[1].Text = "0x" + alm[j + 1].ToString("X");
                                DMiscParam.SelectedItems.Clear();
                                DMiscParam.Items[i + 1].Selected = true;
                            }
                        }
                    }
                    else if (rd2[4] == 'S')
                    {
                        an2 = DMiscList.SelectedNode.Index;
                        g = DMiscList.Nodes[0].Nodes[0].GetNodeCount(includeSubTrees: false);
                        if (an2 + 1 < g)
                        {
                            rd1 = DMiscOffset.Text.Substring(2);
                            h = Convert.ToInt32(rd1, 16);
                            j = h / 4;
                            if (alm[j + 2] >= 8096 && alm[j + 2] < tds[25])
                            {
                                if (alm[j] < 8096 || alm[j] >= tds[25])
                                {
                                    h += 8;
                                    for (mov = 0; mov < par; mov++)
                                    {
                                        if (asc[mov] == h)
                                        {
                                            asc[mov] -= 8;
                                            alm[mov + md] -= 8;
                                            break;
                                        }
                                    }
                                }
                            }
                            else if (alm[j] >= 8096 && alm[j] < tds[25])
                            {
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == h)
                                    {
                                        asc[mov] += 8;
                                        alm[mov + md] += 8;
                                        break;
                                    }
                                }
                            }
                            g = alm[j];
                            alm[j] = alm[j + 2];
                            alm[j + 2] = g;
                            g = alm[j + 1];
                            alm[j + 1] = alm[j + 3];
                            alm[j + 3] = g;
                            an1 = DMiscList.SelectedNode.Parent.Index;
                            g = DMiscList.Nodes[0].Nodes[an1].Nodes[an2].GetNodeCount(includeSubTrees: false);
                            for (i = 0; i < g; i++)
                            {
                                DMiscList.Nodes[0].Nodes[an1].Nodes[an2].Nodes[0].Remove();
                            }
                            if (alm[j] >= 8096 && alm[j] < tds[25] && alm[j + 1] > 0 && alm[j + 1] < 256)
                            {
                                k = alm[j] / 4;
                                n = alm[j + 1];
                                for (i = 0; i < n; i++)
                                {
                                    DMiscList.Nodes[0].Nodes[an1].Nodes[an2].Nodes.Add("BoneGroup" + i);
                                    if (alm[k + i * 2] >= 8096 && alm[k + i * 2] < tds[25] && alm[k + i * 2 + 1] > 0 && alm[k + i * 2 + 1] < 256)
                                    {
                                        DMiscList.Nodes[0].Nodes[an1].Nodes[an2].Nodes[i].Nodes.Add("List");
                                    }
                                }
                            }
                            g = DMiscList.Nodes[0].Nodes[an1].Nodes[an2 + 1].GetNodeCount(includeSubTrees: false);
                            for (i = 0; i < g; i++)
                            {
                                DMiscList.Nodes[0].Nodes[an1].Nodes[an2 + 1].Nodes[0].Remove();
                            }
                            if (alm[j + 2] >= 8096 && alm[j + 2] < tds[25] && alm[j + 3] > 0 && alm[j + 3] < 256)
                            {
                                k = alm[j + 2] / 4;
                                n = alm[j + 3];
                                for (i = 0; i < n; i++)
                                {
                                    DMiscList.Nodes[0].Nodes[an1].Nodes[an2 + 1].Nodes.Add("BoneGroup" + i);
                                    if (alm[k + i * 2] >= 8096 && alm[k + i * 2] < tds[25] && alm[k + i * 2 + 1] > 0 && alm[k + i * 2 + 1] < 256)
                                    {
                                        DMiscList.Nodes[0].Nodes[an1].Nodes[an2 + 1].Nodes[i].Nodes.Add("List");
                                    }
                                }
                            }
                            DMiscList.SelectedNode = DMiscList.Nodes[0].Nodes[an1].Nodes[an2 + 1];
                        }
                    }
                    else
                    {
                        i = DMiscList.SelectedNode.Index;
                        m = DMiscList.SelectedNode.Parent.Parent.Index;
                        n = DMiscList.SelectedNode.Parent.Index;
                        g = DMiscList.Nodes[0].Nodes[m].Nodes[n].GetNodeCount(includeSubTrees: false);
                        if (i + 1 < g)
                        {
                            rd1 = DMiscOffset.Text.Substring(2);
                            h = Convert.ToInt32(rd1, 16);
                            j = h / 4;
                            if (alm[j + 2] >= 8096 && alm[j + 2] < tds[25])
                            {
                                if (alm[j] < 8096 || alm[j] >= tds[25])
                                {
                                    h += 8;
                                    for (mov = 0; mov < par; mov++)
                                    {
                                        if (asc[mov] == h)
                                        {
                                            asc[mov] -= 8;
                                            alm[mov + md] -= 8;
                                            break;
                                        }
                                    }
                                    DMiscList.Nodes[0].Nodes[m].Nodes[n].Nodes[i + 1].Nodes[0].Remove();
                                    DMiscList.Nodes[0].Nodes[m].Nodes[n].Nodes[i].Nodes.Add("List");
                                }
                            }
                            else if (alm[j] >= 8096 && alm[j] < tds[25])
                            {
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == h)
                                    {
                                        asc[mov] += 8;
                                        alm[mov + md] += 8;
                                        break;
                                    }
                                }
                                DMiscList.Nodes[0].Nodes[m].Nodes[n].Nodes[i].Nodes[0].Remove();
                                DMiscList.Nodes[0].Nodes[m].Nodes[n].Nodes[i + 1].Nodes.Add("List");
                            }
                            g = alm[j];
                            alm[j] = alm[j + 2];
                            alm[j + 2] = g;
                            g = alm[j + 1];
                            alm[j + 1] = alm[j + 3];
                            alm[j + 3] = g;
                            DMiscList.SelectedNode = DMiscList.Nodes[0].Nodes[m].Nodes[n].Nodes[i + 1];
                        }
                    }
                }
                else if (rd1[12] == 'F')
                {
                    i = DMiscList.SelectedNode.Index;
                    n = DMiscList.SelectedNode.Parent.Parent.Index;
                    m = DMiscList.SelectedNode.Parent.Index;
                    g = DMiscList.Nodes[n].Nodes[m].GetNodeCount(includeSubTrees: false);
                    if (i + 1 < g)
                    {
                        rd1 = DMiscOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                        j = h / 4;
                        for (k = j + 5; j < k; j++)
                        {
                            g = alm[j];
                            alm[j] = alm[j + 5];
                            alm[j + 5] = g;
                        }
                        DMiscList.SelectedNode = DMiscList.Nodes[n].Nodes[m].Nodes[i + 1];
                    }
                }
                else if (rd1[12] == 'H')
                {
                    i = DMiscList.SelectedNode.Index;
                    n = DMiscList.SelectedNode.Parent.Parent.Index;
                    m = DMiscList.SelectedNode.Parent.Index;
                    g = DMiscList.Nodes[n].Nodes[m].GetNodeCount(includeSubTrees: false);
                    if (i + 1 < g)
                    {
                        rd1 = DMiscOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                        j = h / 4;
                        for (k = j + 8; j < k; j++)
                        {
                            g = alm[j];
                            alm[j] = alm[j + 8];
                            alm[j + 8] = g;
                        }
                        DMiscList.SelectedNode = DMiscList.Nodes[n].Nodes[m].Nodes[i + 1];
                    }
                }
                if (qe)
                {
                    Qsave.Enabled = true;
                }
            }
            else
            {
                if (DataExrnList.SelectedIndex == -1)
                {
                    return;
                }
                j = DataExrnList.SelectedIndex;
                if (j < DataExrnList.Items.Count - 1)
                {
                    h = (tds[27] + j) * 2;
                    g = rnext[h];
                    rnext[h] = rnext[h + 2];
                    rnext[h + 2] = g;
                    g = rnext[h + 1];
                    rnext[h + 1] = rnext[h + 3];
                    rnext[h + 3] = g;
                    rd1 = DataExrnList.Items[j].ToString();
                    rd2 = DataExrnList.Items[j + 1].ToString();
                    DataExrnList.Items[j] = rd2;
                    DataExrnList.Items[j + 1] = rd1;
                    DataExrnList.SelectedIndex = j + 1;
                    Fixam();
                    if (qe)
                    {
                        Qsave.Enabled = true;
                    }
                }
            }
        }

        private void DataExrnOffsetView_Click(object sender, EventArgs e)
        {
            if (DataTab.SelectedIndex == 3)
            {
                rd1 = DMiscList.SelectedNode.FullPath;
                if (rd1 == "ExtraActionInterrupts")
                {
                    if (alm[dat + 22] >= 8096 && alm[dat + 22] < tds[25])
                    {
                        h = alm[dat + 22] / 4;
                        for (j = stf; j < h; j++)
                        {
                            if (alm[j] == -86052851)
                            {
                                for (m = j + 1; m < j + 3; m++)
                                {
                                    if (alm[m] != -86052851)
                                    {
                                        j = m;
                                        break;
                                    }
                                }
                                if (m == j + 3)
                                {
                                    if (alm[h + 2] >= 8096 && alm[h + 2] < tds[25])
                                    {
                                        rmv = h * 4 + 8;
                                        for (mov = 0; mov < par; mov++)
                                        {
                                            if (asc[mov] == rmv)
                                            {
                                                asc[mov] = j * 4 + 8;
                                                break;
                                            }
                                        }
                                    }
                                    for (i = 0; i < 3; i++)
                                    {
                                        alm[j + i] = alm[h + i];
                                        alm[h + i] = -86052851;
                                    }
                                    alm[dat + 22] = j * 4;
                                    DMiscOffset.Text = "0x" + alm[dat + 22].ToString("X");
                                    Fixam();
                                    break;
                                }
                            }
                        }
                    }
                }
                else if (rd1[0] == 'M')
                {
                    if (rd1[1] == 'o')
                    {
                        if (alm[dat + 1] >= 8096 && alm[dat + 1] < tds[25])
                        {
                            if (rd1[16] == 'D')
                            {
                                k = alm[dat + 1] / 4 + 2;
                                if (alm[k] >= 8096 && alm[k] < tds[25])
                                {
                                    h = alm[k] / 4;
                                    n = DMiscList.Nodes[0].GetNodeCount(includeSubTrees: false);
                                    g = n * 2 - 4;
                                    for (j = stf; j < h; j++)
                                    {
                                        if (alm[j] == -86052851)
                                        {
                                            for (m = j + 1; m < j + g; m++)
                                            {
                                                if (alm[m] != -86052851)
                                                {
                                                    j = m;
                                                    break;
                                                }
                                            }
                                            if (m == j + g)
                                            {
                                                for (i = 0; i < g; i++)
                                                {
                                                    alm[j + i] = alm[h + i];
                                                    alm[h + i] = -86052851;
                                                }
                                                alm[k] = j * 4;
                                                i = DMiscList.SelectedNode.Index;
                                                DMiscOffset.Text = "0x" + (alm[k] + i * 8 - 16).ToString("X");
                                                if (h + g >= md)
                                                {
                                                    Fixam();
                                                }
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            else if (rd1.Length < 25)
                            {
                                n = alm[dat + 1] / 4;
                                if (alm[n] >= 8096 && alm[n] < tds[25])
                                {
                                    k = DMiscList.Nodes[0].Nodes[0].GetNodeCount(includeSubTrees: false);
                                    g = k * 2;
                                    k = alm[n] / 4 + DMiscList.SelectedNode.Index;
                                    if (alm[k] >= 8096 && alm[k] < tds[25])
                                    {
                                        h = alm[k] / 4;
                                        for (j = stf; j < h; j++)
                                        {
                                            if (alm[j] == -86052851)
                                            {
                                                for (m = j + 1; m < j + g; m++)
                                                {
                                                    if (alm[m] != -86052851)
                                                    {
                                                        j = m;
                                                        break;
                                                    }
                                                }
                                                if (m == j + g)
                                                {
                                                    for (i = 0; i < g; i += 2)
                                                    {
                                                        if (alm[h + i] >= 8096 && alm[h + i] < tds[25])
                                                        {
                                                            rmv = (h + i) * 4;
                                                            for (mov = 0; mov < par; mov++)
                                                            {
                                                                if (asc[mov] == rmv)
                                                                {
                                                                    asc[mov] = (j + i) * 4;
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        alm[j + i] = alm[h + i];
                                                        alm[j + i + 1] = alm[h + i + 1];
                                                        alm[h + i] = -86052851;
                                                        alm[h + i + 1] = -86052851;
                                                    }
                                                    alm[k] = j * 4;
                                                    DMiscParam.Items[0].SubItems[1].Text = "0x" + alm[k].ToString("X");
                                                    Fixam();
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                k = alm[dat + 1] / 4;
                                if (alm[k] >= 8096 && alm[k] < tds[25])
                                {
                                    if (rd1[16] == 'H')
                                    {
                                        h = alm[k] / 4;
                                    }
                                    else
                                    {
                                        h = alm[k] / 4 + 1;
                                    }
                                    if (alm[h] >= 8096 && alm[h] < tds[25])
                                    {
                                        rd2 = DMiscList.SelectedNode.Text;
                                        if (rd2 == "List")
                                        {
                                            k = alm[h] / 4 + DMiscList.SelectedNode.Parent.Parent.Index * 2;
                                            if (alm[k] >= 8096 && alm[k] < tds[25])
                                            {
                                                h = alm[k] / 4 + DMiscList.SelectedNode.Parent.Index * 2;
                                                if (alm[h] >= 8096 && alm[h] < tds[25])
                                                {
                                                    n = alm[h] / 4;
                                                    g = alm[h + 1];
                                                    if (g > 0 && g < 128)
                                                    {
                                                        for (j = stf; j < n; j++)
                                                        {
                                                            if (alm[j] == -86052851)
                                                            {
                                                                for (m = j + 1; m < j + g; m++)
                                                                {
                                                                    if (alm[m] != -86052851)
                                                                    {
                                                                        j = m;
                                                                        break;
                                                                    }
                                                                }
                                                                if (m == j + g)
                                                                {
                                                                    for (i = 0; i < g; i++)
                                                                    {
                                                                        alm[j + i] = alm[n + i];
                                                                        alm[n + i] = -86052851;
                                                                    }
                                                                    alm[h] = j * 4;
                                                                    DMiscOffset.Text = "0x" + alm[h].ToString("X");
                                                                    if (n + g >= md)
                                                                    {
                                                                        Fixam();
                                                                    }
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else if (rd2[4] == 'S')
                                        {
                                            j = DMiscList.SelectedNode.Parent.Index;
                                            i = DMiscList.SelectedNode.Index;
                                            n = DMiscList.Nodes[0].Nodes[j].Nodes[i].GetNodeCount(includeSubTrees: false);
                                            g = n * 2;
                                            k = alm[h] / 4 + i * 2;
                                            if (alm[k] >= 8096 && alm[k] < tds[25])
                                            {
                                                h = alm[k] / 4;
                                                for (j = stf; j < h; j++)
                                                {
                                                    if (alm[j] == -86052851)
                                                    {
                                                        for (m = j + 1; m < j + g; m++)
                                                        {
                                                            if (alm[m] != -86052851)
                                                            {
                                                                j = m;
                                                                break;
                                                            }
                                                        }
                                                        if (m == j + g)
                                                        {
                                                            for (i = 0; i < g; i += 2)
                                                            {
                                                                if (alm[h + i] >= 8096 && alm[h + i] < tds[25])
                                                                {
                                                                    rmv = (h + i) * 4;
                                                                    for (mov = 0; mov < par; mov++)
                                                                    {
                                                                        if (asc[mov] == rmv)
                                                                        {
                                                                            asc[mov] = (j + i) * 4;
                                                                            break;
                                                                        }
                                                                    }
                                                                }
                                                                alm[j + i] = alm[h + i];
                                                                alm[j + i + 1] = alm[h + i + 1];
                                                                alm[h + i] = -86052851;
                                                                alm[h + i + 1] = -86052851;
                                                            }
                                                            alm[k] = j * 4;
                                                            DMiscParam.Items[0].SubItems[1].Text = "0x" + alm[k].ToString("X");
                                                            Fixam();
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            k = alm[h] / 4 + DMiscList.SelectedNode.Parent.Index * 2;
                                            if (alm[k] >= 8096 && alm[k] < tds[25])
                                            {
                                                h = alm[k] / 4 + DMiscList.SelectedNode.Index * 2;
                                                if (alm[h] >= 8096 && alm[h] < tds[25])
                                                {
                                                    n = alm[h] / 4;
                                                    g = alm[h + 1];
                                                    if (g > 0 && g < 128)
                                                    {
                                                        for (j = stf; j < n; j++)
                                                        {
                                                            if (alm[j] == -86052851)
                                                            {
                                                                for (m = j + 1; m < j + g; m++)
                                                                {
                                                                    if (alm[m] != -86052851)
                                                                    {
                                                                        j = m;
                                                                        break;
                                                                    }
                                                                }
                                                                if (m == j + g)
                                                                {
                                                                    for (i = 0; i < g; i++)
                                                                    {
                                                                        alm[j + i] = alm[n + i];
                                                                        alm[n + i] = -86052851;
                                                                    }
                                                                    alm[h] = j * 4;
                                                                    DMiscParam.Items[0].SubItems[1].Text = "0x" + alm[h].ToString("X");
                                                                    if (n + g >= md)
                                                                    {
                                                                        Fixam();
                                                                    }
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else if (rd1[12] == 'F')
                    {
                        if (alm[dat + 4] >= 8096 && alm[dat + 4] < tds[25])
                        {
                            k = alm[dat + 4] / 4 + 1;
                            if (alm[k] >= 8096 && alm[k] < tds[25])
                            {
                                i = DMiscList.SelectedNode.Parent.Index;
                                j = DMiscList.SelectedNode.Index;
                                n = DMiscList.Nodes[i].Nodes[j].GetNodeCount(includeSubTrees: false);
                                g = n * 5;
                                h = alm[k] / 4;
                                for (j = stf; j < h; j++)
                                {
                                    if (alm[j] == -86052851)
                                    {
                                        for (m = j + 1; m < j + g; m++)
                                        {
                                            if (alm[m] != -86052851)
                                            {
                                                j = m;
                                                break;
                                            }
                                        }
                                        if (m == j + g)
                                        {
                                            for (i = 0; i < g; i++)
                                            {
                                                alm[j + i] = alm[h + i];
                                                alm[h + i] = -86052851;
                                            }
                                            alm[k] = j * 4;
                                            DMiscOffset.Text = "0x" + alm[k].ToString("X");
                                            if (h + g >= md)
                                            {
                                                Fixam();
                                            }
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else if (rd1[12] == 'H' && alm[dat + 4] >= 8096 && alm[dat + 4] < tds[25])
                    {
                        k = alm[dat + 4] / 4 + 3;
                        if (alm[k] >= 8096 && alm[k] < tds[25])
                        {
                            i = DMiscList.SelectedNode.Parent.Index;
                            j = DMiscList.SelectedNode.Index;
                            n = DMiscList.Nodes[i].Nodes[j].GetNodeCount(includeSubTrees: false);
                            g = n * 8;
                            h = alm[k] / 4;
                            for (j = stf; j < h; j++)
                            {
                                if (alm[j] == -86052851)
                                {
                                    for (m = j + 1; m < j + g; m++)
                                    {
                                        if (alm[m] != -86052851)
                                        {
                                            j = m;
                                            break;
                                        }
                                    }
                                    if (m == j + g)
                                    {
                                        for (i = 0; i < g; i++)
                                        {
                                            alm[j + i] = alm[h + i];
                                            alm[h + i] = -86052851;
                                        }
                                        alm[k] = j * 4;
                                        DMiscOffset.Text = "0x" + alm[k].ToString("X");
                                        if (h + g >= md)
                                        {
                                            Fixam();
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                if (qe)
                {
                    Qsave.Enabled = true;
                }
            }
            else
            {
                if (DataExrnList.SelectedIndex == -1)
                {
                    return;
                }
                j = DataExrnList.SelectedIndex;
                g = rnext[(tds[27] + j) * 2];
                rd1 = DataExrnList.Items[j].ToString() + " No.0x" + j.ToString("X") + " Offset: " + g.ToString("X");
                if (g >= stf * 4 && g < tds[25] && g % 4 == 0)
                {
                    h = g / 4;
                    j = alm[dat + 11] / 4;
                    g = j + 274 + spas;
                    if (h >= j && h < g)
                    {
                        rd1 = rd1 + " Using:Action Pre " + (h - j).ToString("X");
                    }
                    else
                    {
                        j = alm[dat + 8] / 4;
                        if (j >= stf && j < md)
                        {
                            i = alm[j + 1];
                            if (i >= 0 && i < 256)
                            {
                                g = alm[j] / 4;
                                if (h >= g && h < g + i)
                                {
                                    rd1 += " Using:ActionInterrupts";
                                    h = 0;
                                }
                            }
                        }
                        if (h > stf && alm[h - 1] == 2)
                        {
                            g = h * 4 - 4;
                            for (i = stf; i < md; i++)
                            {
                                if (alm[i] == g)
                                {
                                    i--;
                                    rd1 = rd1 + " Using:Sub Routine 0x" + (i * 4).ToString("X");
                                    break;
                                }
                            }
                            if (i == md)
                            {
                                g -= 8;
                                for (i = stf; i < md; i++)
                                {
                                    if (alm[i] == g)
                                    {
                                        i--;
                                        rd1 = rd1 + " Using:Sub Routine 0x" + (i * 4).ToString("X");
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                minitxt.Text = rd1;
            }
        }

        private void DataExrnCopytxt_Click(object sender, EventArgs e)
        {
            if (DataTab.SelectedIndex == 3)
            {
                rd1 = DMiscList.SelectedNode.FullPath;
                if (rd1 == "ExtraActionInterrupts")
                {
                    if (alm[dat + 22] >= 8096 && alm[dat + 22] < tds[25])
                    {
                        h = alm[dat + 22] / 4;
                        for (j = h; j < md; j++)
                        {
                            if (alm[j] == -86052851)
                            {
                                for (m = j + 1; m < j + 3; m++)
                                {
                                    if (alm[m] != -86052851)
                                    {
                                        j = m;
                                        break;
                                    }
                                }
                                if (m == j + 3)
                                {
                                    if (alm[h + 2] >= 8096 && alm[h + 2] < tds[25])
                                    {
                                        rmv = h * 4 + 8;
                                        for (mov = 0; mov < par; mov++)
                                        {
                                            if (asc[mov] == rmv)
                                            {
                                                asc[mov] = j * 4 + 8;
                                                break;
                                            }
                                        }
                                    }
                                    for (i = 0; i < 3; i++)
                                    {
                                        alm[j + i] = alm[h + i];
                                        alm[h + i] = -86052851;
                                    }
                                    alm[dat + 22] = j * 4;
                                    DMiscOffset.Text = "0x" + alm[dat + 22].ToString("X");
                                    Fixam();
                                    break;
                                }
                            }
                        }
                        if (j >= md)
                        {
                            j = md;
                            if (alm[h + 2] >= 8096 && alm[h + 2] < tds[25])
                            {
                                rmv = h * 4 + 8;
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == rmv)
                                    {
                                        asc[mov] = j * 4 + 8;
                                        break;
                                    }
                                }
                            }
                            for (i = 0; i < 3; i++)
                            {
                                alm[j + i] = alm[h + i];
                                alm[h + i] = -86052851;
                            }
                            alm[dat + 22] = j * 4;
                            DMiscOffset.Text = "0x" + alm[dat + 22].ToString("X");
                            md += 3;
                            Fixam();
                        }
                    }
                }
                else if (rd1[0] == 'M')
                {
                    if (rd1[1] == 'o')
                    {
                        if (alm[dat + 1] >= 8096 && alm[dat + 1] < tds[25])
                        {
                            if (rd1[16] == 'D')
                            {
                                k = alm[dat + 1] / 4 + 2;
                                if (alm[k] >= 8096 && alm[k] < tds[25])
                                {
                                    h = alm[k] / 4;
                                    n = DMiscList.Nodes[0].GetNodeCount(includeSubTrees: false);
                                    g = n * 2 - 4;
                                    for (j = h; j < md; j++)
                                    {
                                        if (alm[j] == -86052851)
                                        {
                                            for (m = j + 1; m < j + g; m++)
                                            {
                                                if (alm[m] != -86052851)
                                                {
                                                    j = m;
                                                    break;
                                                }
                                            }
                                            if (m == j + g)
                                            {
                                                for (i = 0; i < g; i++)
                                                {
                                                    alm[j + i] = alm[h + i];
                                                    alm[h + i] = -86052851;
                                                }
                                                alm[k] = j * 4;
                                                i = DMiscList.SelectedNode.Index;
                                                DMiscOffset.Text = "0x" + (alm[k] + i * 8 - 16).ToString("X");
                                                break;
                                            }
                                        }
                                    }
                                    if (j >= md)
                                    {
                                        j = md;
                                        for (i = 0; i < g; i++)
                                        {
                                            alm[j + i] = alm[h + i];
                                            alm[h + i] = -86052851;
                                        }
                                        alm[k] = j * 4;
                                        i = DMiscList.SelectedNode.Index;
                                        DMiscOffset.Text = "0x" + (alm[k] + i * 8 - 16).ToString("X");
                                        md += g;
                                        Fixam();
                                    }
                                }
                            }
                            else if (rd1.Length < 25)
                            {
                                n = alm[dat + 1] / 4;
                                if (alm[n] >= 8096 && alm[n] < tds[25])
                                {
                                    k = DMiscList.Nodes[0].Nodes[0].GetNodeCount(includeSubTrees: false);
                                    g = k * 2;
                                    k = alm[n] / 4 + DMiscList.SelectedNode.Index;
                                    if (alm[k] >= 8096 && alm[k] < tds[25])
                                    {
                                        h = alm[k] / 4;
                                        for (j = h; j < md; j++)
                                        {
                                            if (alm[j] == -86052851)
                                            {
                                                for (m = j + 1; m < j + g; m++)
                                                {
                                                    if (alm[m] != -86052851)
                                                    {
                                                        j = m;
                                                        break;
                                                    }
                                                }
                                                if (m == j + g)
                                                {
                                                    for (i = 0; i < g; i += 2)
                                                    {
                                                        if (alm[h + i] >= 8096 && alm[h + i] < tds[25])
                                                        {
                                                            rmv = (h + i) * 4;
                                                            for (mov = 0; mov < par; mov++)
                                                            {
                                                                if (asc[mov] == rmv)
                                                                {
                                                                    asc[mov] = (j + i) * 4;
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        alm[j + i] = alm[h + i];
                                                        alm[j + i + 1] = alm[h + i + 1];
                                                        alm[h + i] = -86052851;
                                                        alm[h + i + 1] = -86052851;
                                                    }
                                                    alm[k] = j * 4;
                                                    DMiscParam.Items[0].SubItems[1].Text = "0x" + alm[k].ToString("X");
                                                    Fixam();
                                                    break;
                                                }
                                            }
                                        }
                                        if (j >= md)
                                        {
                                            j = md;
                                            for (i = 0; i < g; i += 2)
                                            {
                                                if (alm[h + i] >= 8096 && alm[h + i] < tds[25])
                                                {
                                                    rmv = (h + i) * 4;
                                                    for (mov = 0; mov < par; mov++)
                                                    {
                                                        if (asc[mov] == rmv)
                                                        {
                                                            asc[mov] = (j + i) * 4;
                                                            break;
                                                        }
                                                    }
                                                }
                                                alm[j + i] = alm[h + i];
                                                alm[j + i + 1] = alm[h + i + 1];
                                                alm[h + i] = -86052851;
                                                alm[h + i + 1] = -86052851;
                                            }
                                            alm[k] = j * 4;
                                            DMiscParam.Items[0].SubItems[1].Text = "0x" + alm[k].ToString("X");
                                            md += g;
                                            Fixam();
                                        }
                                    }
                                }
                            }
                            else
                            {
                                k = alm[dat + 1] / 4;
                                if (alm[k] >= 8096 && alm[k] < tds[25])
                                {
                                    if (rd1[16] == 'H')
                                    {
                                        h = alm[k] / 4;
                                    }
                                    else
                                    {
                                        h = alm[k] / 4 + 1;
                                    }
                                    if (alm[h] >= 8096 && alm[h] < tds[25])
                                    {
                                        rd2 = DMiscList.SelectedNode.Text;
                                        if (rd2 == "List")
                                        {
                                            k = alm[h] / 4 + DMiscList.SelectedNode.Parent.Parent.Index * 2;
                                            if (alm[k] >= 8096 && alm[k] < tds[25])
                                            {
                                                h = alm[k] / 4 + DMiscList.SelectedNode.Parent.Index * 2;
                                                if (alm[h] >= 8096 && alm[h] < tds[25])
                                                {
                                                    n = alm[h] / 4;
                                                    g = alm[h + 1];
                                                    if (g > 0 && g < 128)
                                                    {
                                                        for (j = n; j < md; j++)
                                                        {
                                                            if (alm[j] == -86052851)
                                                            {
                                                                for (m = j + 1; m < j + g; m++)
                                                                {
                                                                    if (alm[m] != -86052851)
                                                                    {
                                                                        j = m;
                                                                        break;
                                                                    }
                                                                }
                                                                if (m == j + g)
                                                                {
                                                                    for (i = 0; i < g; i++)
                                                                    {
                                                                        alm[j + i] = alm[n + i];
                                                                        alm[n + i] = -86052851;
                                                                    }
                                                                    alm[h] = j * 4;
                                                                    DMiscOffset.Text = "0x" + alm[h].ToString("X");
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        if (j >= md)
                                                        {
                                                            j = md;
                                                            for (i = 0; i < g; i++)
                                                            {
                                                                alm[j + i] = alm[n + i];
                                                                alm[n + i] = -86052851;
                                                            }
                                                            alm[h] = j * 4;
                                                            DMiscOffset.Text = "0x" + alm[h].ToString("X");
                                                            md += g;
                                                            Fixam();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else if (rd2[4] == 'S')
                                        {
                                            j = DMiscList.SelectedNode.Parent.Index;
                                            i = DMiscList.SelectedNode.Index;
                                            n = DMiscList.Nodes[0].Nodes[j].Nodes[i].GetNodeCount(includeSubTrees: false);
                                            g = n * 2;
                                            k = alm[h] / 4 + i * 2;
                                            if (alm[k] >= 8096 && alm[k] < tds[25])
                                            {
                                                h = alm[k] / 4;
                                                for (j = h; j < md; j++)
                                                {
                                                    if (alm[j] == -86052851)
                                                    {
                                                        for (m = j + 1; m < j + g; m++)
                                                        {
                                                            if (alm[m] != -86052851)
                                                            {
                                                                j = m;
                                                                break;
                                                            }
                                                        }
                                                        if (m == j + g)
                                                        {
                                                            for (i = 0; i < g; i += 2)
                                                            {
                                                                if (alm[h + i] >= 8096 && alm[h + i] < tds[25])
                                                                {
                                                                    rmv = (h + i) * 4;
                                                                    for (mov = 0; mov < par; mov++)
                                                                    {
                                                                        if (asc[mov] == rmv)
                                                                        {
                                                                            asc[mov] = (j + i) * 4;
                                                                            break;
                                                                        }
                                                                    }
                                                                }
                                                                alm[j + i] = alm[h + i];
                                                                alm[j + i + 1] = alm[h + i + 1];
                                                                alm[h + i] = -86052851;
                                                                alm[h + i + 1] = -86052851;
                                                            }
                                                            alm[k] = j * 4;
                                                            DMiscParam.Items[0].SubItems[1].Text = "0x" + alm[k].ToString("X");
                                                            Fixam();
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (j >= md)
                                                {
                                                    j = md;
                                                    for (i = 0; i < g; i += 2)
                                                    {
                                                        if (alm[h + i] >= 8096 && alm[h + i] < tds[25])
                                                        {
                                                            rmv = (h + i) * 4;
                                                            for (mov = 0; mov < par; mov++)
                                                            {
                                                                if (asc[mov] == rmv)
                                                                {
                                                                    asc[mov] = (j + i) * 4;
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        alm[j + i] = alm[h + i];
                                                        alm[j + i + 1] = alm[h + i + 1];
                                                        alm[h + i] = -86052851;
                                                        alm[h + i + 1] = -86052851;
                                                    }
                                                    alm[k] = j * 4;
                                                    DMiscParam.Items[0].SubItems[1].Text = "0x" + alm[k].ToString("X");
                                                    md += g;
                                                    Fixam();
                                                }
                                            }
                                        }
                                        else
                                        {
                                            k = alm[h] / 4 + DMiscList.SelectedNode.Parent.Index * 2;
                                            if (alm[k] >= 8096 && alm[k] < tds[25])
                                            {
                                                h = alm[k] / 4 + DMiscList.SelectedNode.Index * 2;
                                                if (alm[h] >= 8096 && alm[h] < tds[25])
                                                {
                                                    n = alm[h] / 4;
                                                    g = alm[h + 1];
                                                    if (g > 0 && g < 128)
                                                    {
                                                        for (j = n; j < md; j++)
                                                        {
                                                            if (alm[j] == -86052851)
                                                            {
                                                                for (m = j + 1; m < j + g; m++)
                                                                {
                                                                    if (alm[m] != -86052851)
                                                                    {
                                                                        j = m;
                                                                        break;
                                                                    }
                                                                }
                                                                if (m == j + g)
                                                                {
                                                                    for (i = 0; i < g; i++)
                                                                    {
                                                                        alm[j + i] = alm[n + i];
                                                                        alm[n + i] = -86052851;
                                                                    }
                                                                    alm[h] = j * 4;
                                                                    DMiscParam.Items[0].SubItems[1].Text = "0x" + alm[h].ToString("X");
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        if (j >= md)
                                                        {
                                                            j = md;
                                                            for (i = 0; i < g; i++)
                                                            {
                                                                alm[j + i] = alm[n + i];
                                                                alm[n + i] = -86052851;
                                                            }
                                                            alm[h] = j * 4;
                                                            DMiscParam.Items[0].SubItems[1].Text = "0x" + alm[h].ToString("X");
                                                            md += g;
                                                            Fixam();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else if (rd1[12] == 'F')
                    {
                        if (alm[dat + 4] >= 8096 && alm[dat + 4] < tds[25])
                        {
                            k = alm[dat + 4] / 4 + 1;
                            if (alm[k] >= 8096 && alm[k] < tds[25])
                            {
                                i = DMiscList.SelectedNode.Parent.Index;
                                j = DMiscList.SelectedNode.Index;
                                n = DMiscList.Nodes[i].Nodes[j].GetNodeCount(includeSubTrees: false);
                                g = n * 5;
                                h = alm[k] / 4;
                                for (j = h; j < md; j++)
                                {
                                    if (alm[j] == -86052851)
                                    {
                                        for (m = j + 1; m < j + g; m++)
                                        {
                                            if (alm[m] != -86052851)
                                            {
                                                j = m;
                                                break;
                                            }
                                        }
                                        if (m == j + g)
                                        {
                                            for (i = 0; i < g; i++)
                                            {
                                                alm[j + i] = alm[h + i];
                                                alm[h + i] = -86052851;
                                            }
                                            alm[k] = j * 4;
                                            DMiscOffset.Text = "0x" + alm[k].ToString("X");
                                            break;
                                        }
                                    }
                                }
                                if (j >= md)
                                {
                                    j = md;
                                    for (i = 0; i < g; i++)
                                    {
                                        alm[j + i] = alm[h + i];
                                        alm[h + i] = -86052851;
                                    }
                                    alm[k] = j * 4;
                                    DMiscOffset.Text = "0x" + alm[k].ToString("X");
                                    md += g;
                                    Fixam();
                                }
                            }
                        }
                    }
                    else if (rd1[12] == 'H' && alm[dat + 4] >= 8096 && alm[dat + 4] < tds[25])
                    {
                        k = alm[dat + 4] / 4 + 3;
                        if (alm[k] >= 8096 && alm[k] < tds[25])
                        {
                            i = DMiscList.SelectedNode.Parent.Index;
                            j = DMiscList.SelectedNode.Index;
                            n = DMiscList.Nodes[i].Nodes[j].GetNodeCount(includeSubTrees: false);
                            g = n * 8;
                            h = alm[k] / 4;
                            for (j = h; j < md; j++)
                            {
                                if (alm[j] == -86052851)
                                {
                                    for (m = j + 1; m < j + g; m++)
                                    {
                                        if (alm[m] != -86052851)
                                        {
                                            j = m;
                                            break;
                                        }
                                    }
                                    if (m == j + g)
                                    {
                                        for (i = 0; i < g; i++)
                                        {
                                            alm[j + i] = alm[h + i];
                                            alm[h + i] = -86052851;
                                        }
                                        alm[k] = j * 4;
                                        DMiscOffset.Text = "0x" + alm[k].ToString("X");
                                        break;
                                    }
                                }
                            }
                            if (j >= md)
                            {
                                j = md;
                                for (i = 0; i < g; i++)
                                {
                                    alm[j + i] = alm[h + i];
                                    alm[h + i] = -86052851;
                                }
                                alm[k] = j * 4;
                                DMiscOffset.Text = "0x" + alm[k].ToString("X");
                                md += g;
                                Fixam();
                            }
                        }
                    }
                }
                if (qe)
                {
                    Qsave.Enabled = true;
                }
            }
            else if (DataExrnList.SelectedIndex != -1)
            {
                i = DataExrnList.SelectedIndex;
                rd1 = DataExrnList.Items[i].ToString();
                Clipboard.SetText(rd1);
            }
        }

        private void DataExrnStrip_Opening(object sender, CancelEventArgs e)
        {
            if (DataTab.SelectedIndex == 3)
            {
                if (DMiscList.SelectedNode == null)
                {
                    e.Cancel = true;
                    return;
                }
                rd1 = DMiscList.SelectedNode.FullPath;
                rd2 = DMiscList.SelectedNode.Text;
                if (rd1 == rd2)
                {
                    if (rd1 == "ModelVisibility")
                    {
                        DataExrnAdd.Text = "Add New Data";
                        DataExrnAdd.Enabled = true;
                        DataExrnRemove.Visible = false;
                        DataExrnRename.Visible = false;
                        DataExrnUp.Visible = false;
                        DataExrnDown.Visible = false;
                        DataExrnOffsetView.Visible = false;
                        DataExrnCopytxt.Visible = false;
                    }
                    else if (rd1 == "ExtraActionInterrupts")
                    {
                        DataExrnAdd.Text = "Open";
                        if (alm[dat + 22] >= 8096 && alm[dat + 22] < tds[25])
                        {
                            DataExrnAdd.Enabled = true;
                            DataExrnRemove.Text = "Delete";
                            DataExrnOffsetView.Text = "Move F Offset";
                            DataExrnOffsetView.Visible = true;
                            DataExrnCopytxt.Text = "Move B Offset";
                            DataExrnCopytxt.Visible = true;
                        }
                        else
                        {
                            DataExrnAdd.Enabled = false;
                            DataExrnRemove.Text = "Create";
                            DataExrnOffsetView.Visible = false;
                            DataExrnCopytxt.Visible = false;
                        }
                        DataExrnRemove.Visible = true;
                        DataExrnRename.Visible = false;
                        DataExrnUp.Visible = false;
                        DataExrnDown.Visible = false;
                    }
                    else
                    {
                        e.Cancel = true;
                    }
                }
                else if (rd1[0] == 'M')
                {
                    if (rd1[1] == 'o')
                    {
                        if (rd2 == "List")
                        {
                            DataExrnAdd.Text = "Add Data";
                            DataExrnAdd.Enabled = true;
                            DataExrnRemove.Text = "Delete Selected Data";
                            DataExrnRemove.Visible = true;
                            DataExrnRename.Visible = false;
                            DataExrnUp.Visible = true;
                            DataExrnDown.Visible = true;
                            DataExrnOffsetView.Text = "Move F Offset";
                            DataExrnOffsetView.Visible = true;
                            DataExrnCopytxt.Text = "Move B Offset";
                            DataExrnCopytxt.Visible = true;
                        }
                        else if (rd1[16] == 'D')
                        {
                            DataExrnAdd.Text = "Add New Data";
                            DataExrnAdd.Enabled = true;
                            DataExrnRemove.Text = "Delete";
                            DataExrnRemove.Visible = true;
                            DataExrnRename.Visible = false;
                            DataExrnUp.Visible = false;
                            DataExrnDown.Visible = false;
                            DataExrnOffsetView.Text = "Move F Offset";
                            DataExrnOffsetView.Visible = true;
                            DataExrnCopytxt.Text = "Move B Offset";
                            DataExrnCopytxt.Visible = true;
                        }
                        else if (rd2[0] == 'B')
                        {
                            if (rd2[4] == 'S')
                            {
                                DataExrnAdd.Text = "Add New Group";
                            }
                            else
                            {
                                DataExrnAdd.Text = "Add New Data";
                            }
                            DataExrnAdd.Enabled = true;
                            DataExrnRemove.Text = "Delete";
                            DataExrnRemove.Visible = true;
                            DataExrnRename.Visible = false;
                            DataExrnUp.Visible = true;
                            DataExrnDown.Visible = true;
                            DataExrnOffsetView.Text = "Move F Offset";
                            DataExrnOffsetView.Visible = true;
                            DataExrnCopytxt.Text = "Move B Offset";
                            DataExrnCopytxt.Visible = true;
                        }
                        else
                        {
                            DataExrnAdd.Text = "Add New Switch";
                            DataExrnAdd.Enabled = true;
                            DataExrnRemove.Visible = false;
                            DataExrnRename.Visible = false;
                            DataExrnUp.Visible = false;
                            DataExrnDown.Visible = false;
                            DataExrnOffsetView.Text = "Move F Offset";
                            DataExrnOffsetView.Visible = true;
                            DataExrnCopytxt.Text = "Move B Offset";
                            DataExrnCopytxt.Visible = true;
                        }
                    }
                    else if (rd1[12] == 'F')
                    {
                        DataExrnAdd.Text = "Add New Data";
                        DataExrnAdd.Enabled = true;
                        DataExrnRename.Visible = false;
                        if (rd1.Length > 29)
                        {
                            DataExrnRemove.Text = "Delete";
                            DataExrnRemove.Visible = true;
                            DataExrnUp.Visible = true;
                            DataExrnDown.Visible = true;
                            DataExrnOffsetView.Visible = false;
                            DataExrnCopytxt.Visible = false;
                        }
                        else
                        {
                            DataExrnRemove.Visible = false;
                            DataExrnUp.Visible = false;
                            DataExrnDown.Visible = false;
                            DataExrnOffsetView.Text = "Move F Offset";
                            DataExrnOffsetView.Visible = true;
                            DataExrnCopytxt.Text = "Move B Offset";
                            DataExrnCopytxt.Visible = true;
                        }
                    }
                    else if (rd1[12] == 'H')
                    {
                        DataExrnAdd.Text = "Add New Data";
                        DataExrnAdd.Enabled = true;
                        DataExrnRename.Visible = false;
                        if (rd1.Length > 23)
                        {
                            DataExrnRemove.Text = "Delete";
                            DataExrnRemove.Visible = true;
                            DataExrnUp.Visible = true;
                            DataExrnDown.Visible = true;
                            DataExrnOffsetView.Visible = false;
                            DataExrnCopytxt.Visible = false;
                        }
                        else
                        {
                            DataExrnRemove.Visible = false;
                            DataExrnUp.Visible = false;
                            DataExrnDown.Visible = false;
                            DataExrnOffsetView.Text = "Move F Offset";
                            DataExrnOffsetView.Visible = true;
                            DataExrnCopytxt.Text = "Move B Offset";
                            DataExrnCopytxt.Visible = true;
                        }
                    }
                    else
                    {
                        e.Cancel = true;
                    }
                }
                else
                {
                    e.Cancel = true;
                }
            }
            else if (DataExrnAdd.Text != "Add")
            {
                DataExrnAdd.Text = "Add";
                DataExrnAdd.Enabled = true;
                DataExrnRemove.Text = "Remove";
                DataExrnRemove.Visible = true;
                DataExrnRename.Visible = true;
                DataExrnUp.Visible = true;
                DataExrnDown.Visible = true;
                DataExrnOffsetView.Text = "Offset View";
                DataExrnOffsetView.Visible = true;
                DataExrnCopytxt.Text = "Copy Text";
                DataExrnCopytxt.Visible = true;
            }
        }

        private void DataDTStrip_Opening(object sender, CancelEventArgs e)
        {
            if (ModeChange.SelectedIndex == 3)
            {
                if (ArtDataList.SelectedIndex != -1)
                {
                    if (DataDTOffsetView.Text != "Copy Text")
                    {
                        DataDTOffsetView.Text = "Copy Text";
                        DataDTCopytxt.Text = "Copy All Text";
                    }
                }
                else
                {
                    e.Cancel = true;
                }
            }
            else if (DataTab.SelectedIndex == 0)
            {
                if (DataOffsetList.SelectedIndex != -1)
                {
                    if (DataDTOffsetView.Text != "Copy Text")
                    {
                        DataDTOffsetView.Text = "Copy Text";
                        DataDTCopytxt.Text = "Copy All Text";
                    }
                }
                else
                {
                    e.Cancel = true;
                }
            }
            else if (DataTab.SelectedIndex == 1)
            {
                if (DataDTList.SelectedIndex != -1)
                {
                    if (DataDTOffsetView.Text != "Offset View")
                    {
                        DataDTOffsetView.Text = "Offset View";
                        DataDTCopytxt.Text = "Copy Text";
                    }
                }
                else
                {
                    e.Cancel = true;
                }
            }
            else if (DMiscParam.Items.Count > 0)
            {
                if (DataDTOffsetView.Text != "Copy Text")
                {
                    DataDTOffsetView.Text = "Copy Text";
                    DataDTCopytxt.Text = "Copy All Text";
                }
            }
            else
            {
                e.Cancel = true;
            }
        }

        private void DataDTOffsetView_Click(object sender, EventArgs e)
        {
            if (ModeChange.SelectedIndex == 3)
            {
                if (ArtDataList.SelectedIndex == -1)
                {
                    return;
                }
                i = ArtDataList.SelectedIndex;
                rd2 = ArtDataList.Items[i].ToString();
                if (ArticleIDCb.SelectedIndex > 0 && i < 2)
                {
                    if (i == 0)
                    {
                        rd1 = "0x000 ArticleGroupID\t" + alm[artdt];
                    }
                    else
                    {
                        rd1 = "0x004 ARCEntryGroup\t" + alm[artdt + 1];
                    }
                    Clipboard.SetText(rd1);
                }
                else
                {
                    if (rd2[0] == '-')
                    {
                        return;
                    }
                    k = rd2.Length - 5;
                    while (true)
                    {
                        if (k > 5)
                        {
                            if (rd2[k] == '-')
                            {
                                break;
                            }
                            k--;
                            continue;
                        }
                        return;
                    }
                    rd3 = rd2.Substring(k + 2);
                    k--;
                    rd1 = rd2.Substring(0, k) + "\t" + rd3;
                    Clipboard.SetText(rd1);
                }
            }
            else if (DataTab.SelectedIndex == 1)
            {
                if (DataDTList.SelectedIndex != -1)
                {
                    i = DataDTList.SelectedIndex;
                    minitxt.Text = DataDTList.Items[i].ToString() + " Offset: " + rnext[i * 2].ToString("X");
                }
            }
            else if (DataTab.SelectedIndex == 0)
            {
                if (DataOffsetList.SelectedIndex == -1)
                {
                    return;
                }
                i = DataOffsetList.SelectedIndex;
                rd2 = DataOffsetList.Items[i].ToString();
                if (rd2[0] == '-')
                {
                    return;
                }
                k = rd2.Length - 5;
                while (true)
                {
                    if (k > 5)
                    {
                        if (rd2[k] == '-')
                        {
                            break;
                        }
                        k--;
                        continue;
                    }
                    return;
                }
                rd3 = rd2.Substring(k + 2);
                k -= 2;
                if (rd2[k - 2] == ' ')
                {
                    k -= 3;
                }
                rd1 = rd2.Substring(0, k) + "\t" + rd3;
                Clipboard.SetText(rd1);
            }
            else if (DMiscParam.SelectedItems.Count > 0)
            {
                i = DMiscParam.SelectedItems[0].Index;
                rd1 = DMiscParam.Items[i].SubItems[0].Text + "\t" + DMiscParam.Items[i].SubItems[1].Text;
                Clipboard.SetText(rd1);
            }
        }

        private void DataDTCopytxt_Click(object sender, EventArgs e)
        {
            if (ModeChange.SelectedIndex == 3)
            {
                i = ArticleIDCb.SelectedIndex;
                if (i == -1)
                {
                    return;
                }
                g = ArtDataList.Items.Count;
                if (i == 0)
                {
                    rd1 = Text.Substring(17) + "\r\n";
                    j = 0;
                }
                else
                {
                    if (g > 1)
                    {
                        rd1 = Text.Substring(17) + " Article" + ArticleIDCb.Items[i].ToString() + " (Offset:" + ArtOffset.Text + ")\r\n";
                        string text = rd1;
                        rd1 = text + "0x000 ArticleGroupID\t" + alm[artdt] + "\r\n0x004 ARCEntryGroup\t" + alm[artdt + 1] + "\r\n";
                    }
                    j = 2;
                }
                while (j < g)
                {
                    rd2 = ArtDataList.Items[j].ToString();
                    if (rd2[0] == '-')
                    {
                        rd1 = rd1 + rd2 + "\r\n";
                    }
                    else
                    {
                        for (k = rd2.Length - 5; k > 5; k--)
                        {
                            if (rd2[k] == '-')
                            {
                                rd3 = rd2.Substring(k + 2);
                                k--;
                                string text = rd1;
                                rd1 = text + rd2.Substring(0, k) + "\t" + rd3 + "\r\n";
                                break;
                            }
                        }
                    }
                    j++;
                }
                Clipboard.SetText(rd1);
                return;
            }
            if (DataTab.SelectedIndex == 1)
            {
                if (DataDTList.SelectedIndex != -1)
                {
                    i = DataDTList.SelectedIndex;
                    rd1 = DataDTList.Items[i].ToString();
                    Clipboard.SetText(rd1);
                }
                return;
            }
            if (DataTab.SelectedIndex == 0)
            {
                rd1 = Text.Substring(17) + "\r\n";
                g = DataOffsetList.Items.Count;
                for (i = 0; i < g; i++)
                {
                    rd2 = DataOffsetList.Items[i].ToString();
                    if (rd2[0] == '-')
                    {
                        rd1 = rd1 + rd2 + "\r\n";
                    }
                    else
                    {
                        for (k = rd2.Length - 5; k > 5; k--)
                        {
                            if (rd2[k] == '-')
                            {
                                rd3 = rd2.Substring(k + 2);
                                k -= 2;
                                if (rd2[k - 2] == ' ')
                                {
                                    k -= 3;
                                }
                                string text = rd1;
                                rd1 = text + rd2.Substring(0, k) + "\t" + rd3 + "\r\n";
                                break;
                            }
                        }
                    }
                }
                Clipboard.SetText(rd1);
                return;
            }
            g = DMiscParam.Items.Count;
            if (g > 0)
            {
                rd1 = DMiscList.SelectedNode.FullPath + "\r\n";
                for (i = 0; i < g; i++)
                {
                    string text = rd1;
                    rd1 = text + DMiscParam.Items[i].SubItems[0].Text + "\t" + DMiscParam.Items[i].SubItems[1].Text + "\r\n";
                }
                Clipboard.SetText(rd1);
            }
        }

        private void EvRnOffCbList_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (EvRnOffCbList.SelectedIndex == -1 || !EvRnOffCbList.Enabled)
            {
                return;
            }
            rd1 = EvRnOffCbList.Text.Substring(2);
            if (rd1.Length >= 7)
            {
                if (rd1[4] == ' ')
                {
                    rd1 = rd1.Substring(0, 4);
                }
                else if (rd1[5] == ' ')
                {
                    rd1 = rd1.Substring(0, 5);
                }
                else
                {
                    rd1 = "0";
                }
            }
            h = Convert.ToInt32(rd1, 16);
            if (h >= stf * 4 && h < tds[25] && h % 4 == 0)
            {
                if (minitxt.Text == "Cannot Open Offset")
                {
                    minitxt.Text = "";
                }
                EvRnOffset.Text = "0x" + h.ToString("X");
                EvList.Items.Clear();
                j = h / 4;
                mov = 0;
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    EvList.Items.Add(rd1);
                    j += 2;
                }
            }
            else
            {
                minitxt.Text = "Cannot Open Offset";
            }
        }

        private void EvRnGenDat_Click(object sender, EventArgs e)
        {
            if (EvRnGenDatCbList.SelectedIndex == -1)
            {
                return;
            }
            EvRnOffCbList.Items.Clear();
            if (EvRnGenDatCbList.SelectedIndex == 7)
            {
                EventTab.Enabled = false;
                if (Clipboard.ContainsText())
                {
                    rd1 = Clipboard.GetText();
                    if (rd1.Length < 11)
                    {
                        rd1 = "";
                    }
                }
                else
                {
                    rd1 = "";
                }
                this.i = 5;
                g = 0;
                using (SubaAnimFlagsForm subaAnimFlagsForm = new SubaAnimFlagsForm())
                {
                    subaAnimFlagsForm.afdat = g;
                    subaAnimFlagsForm.afrn = this.i;
                    subaAnimFlagsForm.afanm = rd1;
                    subaAnimFlagsForm.ShowDialog(this);
                    g = subaAnimFlagsForm.afdat;
                    this.i = subaAnimFlagsForm.afrn;
                    rd1 = subaAnimFlagsForm.afanm;
                }
                if (this.i >= 7 && g >= 10)
                {
                    if (g % 11 == 0)
                    {
                        if (g == rd1.Length)
                        {
                            rd2 = rd1;
                        }
                        else
                        {
                            rd2 = rd1.Substring(0, g);
                        }
                        n = g;
                    }
                    else
                    {
                        n = g - g % 11;
                        rd2 = rd1.Substring(0, g - g % 11);
                    }
                    EvDesText.Text = "Search: " + rd2;
                    h = 0;
                    for (k = 2; k < 10; k++)
                    {
                        if (!Uri.IsHexDigit(rd2[k]))
                        {
                            rd2 = rd2.Substring(0, k) + "X" + rd2.Substring(k + 1);
                            h++;
                        }
                    }
                    for (j = 11; j < n; j += 11)
                    {
                        if (!Uri.IsHexDigit(rd2[j]) && rd2[j] != 'X')
                        {
                            if (rd2[j] == '/' || rd2[j] == '\r')
                            {
                                rd2 = rd2.Substring(0, j) + "E" + rd2.Substring(j + 1);
                            }
                            else
                            {
                                rd2 = rd2.Substring(0, j) + "X" + rd2.Substring(j + 1);
                            }
                        }
                        for (k = 2; k < 10; k++)
                        {
                            if (!Uri.IsHexDigit(rd2[j + k]))
                            {
                                rd2 = rd2.Substring(0, j + k) + "X" + rd2.Substring(j + k + 1);
                                h++;
                            }
                        }
                    }
                    k = 8 * (n / 11);
                    if (k > h)
                    {
                        n -= 2;
                        rd2 = rd2.Substring(2) + "E";
                        an5 = 0;
                        for (j = 9; j < n; j += 11)
                        {
                            if (rd2[j] == 'E')
                            {
                                an5 += 2;
                            }
                        }
                        if (this.i == 7)
                        {
                            an4 = 999;
                        }
                        else
                        {
                            an4 = 0;
                        }
                        for (j = 0; j < 8; j++)
                        {
                            if (!Uri.IsHexDigit(rd2[j]))
                            {
                                j = 12;
                            }
                        }
                        m = md - an5 - 1;
                        if (j == 8)
                        {
                            nonam[510] = Convert.ToInt32(rd2.Substring(0, 8), 16);
                            if (nonam[510] > 255 || nonam[510] < -2)
                            {
                                for (j = stf; j < m; j++)
                                {
                                    if (alm[j] == nonam[510])
                                    {
                                        PartSearchS();
                                    }
                                }
                            }
                        }
                        else if (rd2.Substring(2, 8) == "XXXXXXXX")
                        {
                            for (j = stf; j < m; j++)
                            {
                                if (alm[j] > 65535)
                                {
                                    PartSearchS();
                                }
                            }
                        }
                        else
                        {
                            for (j = stf; j < m; j++)
                            {
                                if (alm[j] > 255 || alm[j] < -2)
                                {
                                    rd4 = alm[j].ToString("X8");
                                    for (k = 0; k < 8; k++)
                                    {
                                        if (rd2[k] != 'X' && rd2[k] != rd4[k])
                                        {
                                            k = 30;
                                        }
                                    }
                                    if (k == 8)
                                    {
                                        PartSearchS();
                                    }
                                }
                            }
                        }
                        if (EvRnOffCbList.Items.Count > 0)
                        {
                            minitxt.Text = "Found " + EvRnOffCbList.Items.Count + " Data.";
                            if (this.i >= 8)
                            {
                                rd3 = rd1.Substring(g);
                                if (rd3.Length < 11)
                                {
                                    rd2 = "";
                                    an3 = an5 + 2;
                                    an1 = an5 / 2 + 1;
                                }
                                else
                                {
                                    an3 = rd3.Length;
                                    if (an3 % 11 == 0)
                                    {
                                        rd2 = rd3;
                                    }
                                    else
                                    {
                                        an3 -= an3 % 11;
                                        rd2 = rd3.Substring(0, an3);
                                    }
                                    TextBox evDesText = EvDesText;
                                    evDesText.Text = evDesText.Text + "\r\nReplace:" + rd2;
                                    if (rd2[1] == '+' && rd2[0] != 'E')
                                    {
                                        rd2 = "E=" + rd2.Substring(2);
                                    }
                                    rd2 += "E";
                                    for (j = 2; j < an3; j += 11)
                                    {
                                        if (rd2[j - 1] == '+')
                                        {
                                            if (rd2[j - 2] != 'E')
                                            {
                                                for (k = 0; k < 8; k++)
                                                {
                                                    if (!Uri.IsHexDigit(rd2[j + k]))
                                                    {
                                                        rd2 = rd2.Substring(0, j + k) + "0" + rd2.Substring(j + k + 1);
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                for (k = 0; k < 8; k++)
                                                {
                                                    if (!Uri.IsHexDigit(rd2[j + k]))
                                                    {
                                                        rd2 = rd2.Substring(0, j + k) + "X" + rd2.Substring(j + k + 1);
                                                    }
                                                }
                                            }
                                        }
                                        else if (rd2[j - 1] == '*')
                                        {
                                            if (rd2[j - 2] != 'E')
                                            {
                                                if (Uri.IsHexDigit(rd2[j]))
                                                {
                                                    for (k = 0; k < 8; k++)
                                                    {
                                                        if (!Uri.IsHexDigit(rd2[j + k]))
                                                        {
                                                            rd2 = rd2.Substring(0, j + k) + "0" + rd2.Substring(j + k + 1);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    k = 2;
                                                    while (k < 7 && rd2[j + k] != '.')
                                                    {
                                                        k++;
                                                    }
                                                    if (k < 7 && float.TryParse(rd2.Substring(j + 1, 7), out rdfr))
                                                    {
                                                        k = 10;
                                                    }
                                                    if (k != 10)
                                                    {
                                                        for (k = 1; k < 8; k++)
                                                        {
                                                            if (!Uri.IsHexDigit(rd2[j + k]))
                                                            {
                                                                rd2 = rd2.Substring(0, j + k) + "0" + rd2.Substring(j + k + 1);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                for (k = 0; k < 8; k++)
                                                {
                                                    if (!Uri.IsHexDigit(rd2[j + k]))
                                                    {
                                                        rd2 = rd2.Substring(0, j + k) + "X" + rd2.Substring(j + k + 1);
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            for (k = 0; k < 8; k++)
                                            {
                                                if (!Uri.IsHexDigit(rd2[j + k]))
                                                {
                                                    rd2 = rd2.Substring(0, j + k) + "X" + rd2.Substring(j + k + 1);
                                                }
                                            }
                                        }
                                        if (!Uri.IsHexDigit(rd2[j + 9]) && rd2[j + 9] != 'X')
                                        {
                                            if (rd2[j + 9] == '/' || rd2[j + 9] == '\r')
                                            {
                                                rd2 = rd2.Substring(0, j + 9) + "E" + rd2.Substring(j + 10);
                                            }
                                            else
                                            {
                                                rd2 = rd2.Substring(0, j + 9) + "X" + rd2.Substring(j + 10);
                                            }
                                        }
                                    }
                                    an1 = 1;
                                    an2 = an5 / 2 + 1;
                                    for (j = 11; j < an3; j += 11)
                                    {
                                        if (rd2[j] == 'E')
                                        {
                                            an1++;
                                        }
                                    }
                                    if (an1 > an2)
                                    {
                                        an1 = 1;
                                        for (j = 11; j < an3; j += 11)
                                        {
                                            if (rd2[j] == 'E')
                                            {
                                                an1++;
                                                if (an1 > an2)
                                                {
                                                    k = 2;
                                                    while (k < 10 && rd2[j + k] != 'X')
                                                    {
                                                        k++;
                                                    }
                                                    if (k != 10)
                                                    {
                                                        an3 = j;
                                                        an1--;
                                                        rd2 = rd2.Substring(0, j) + "E";
                                                        break;
                                                    }
                                                    if (rd2[j + 6] != 0 || rd2[j + 7] != 0)
                                                    {
                                                        n = Convert.ToInt32(rd2.Substring(j + 6, 2), 16);
                                                        h = n * 11 + 11;
                                                        n = 11;
                                                        while (n < h && rd2[j + n] != 'E' && rd2[j + n] != 'X')
                                                        {
                                                            k = 2;
                                                            while (k < 10 && rd2[j + n + k] != 'X')
                                                            {
                                                                k++;
                                                            }
                                                            if (k != 10)
                                                            {
                                                                break;
                                                            }
                                                            n += 11;
                                                        }
                                                        if (n != h)
                                                        {
                                                            an3 = j;
                                                            an1--;
                                                            rd2 = rd2.Substring(0, j) + "E";
                                                            break;
                                                        }
                                                        j += h - 11;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    an1 *= 2;
                                    an3 = an2 * 2;
                                }
                                nonam[509] = an4;
                                if (this.i == 9)
                                {
                                    nonam[508] = 0;
                                    if (an1 == an3)
                                    {
                                        for (h = 0; h < nonam[509]; h++)
                                        {
                                            PReplace();
                                        }
                                    }
                                    else
                                    {
                                        h = 0;
                                        PReplace();
                                        for (h = 1; h < nonam[509]; h++)
                                        {
                                            rd1 = EvRnOffCbList.Items[h - 1].ToString();
                                            rd3 = EvRnOffCbList.Items[h].ToString();
                                            if (rd1 == rd3)
                                            {
                                                nonam[508]++;
                                            }
                                            else
                                            {
                                                PReplace();
                                            }
                                        }
                                    }
                                    TextBox textBox = minitxt;
                                    textBox.Text = textBox.Text + " Replaced " + (nonam[509] - nonam[508]) + " Data.";
                                }
                                else
                                {
                                    nonam[510] = an1;
                                    string text = rd2;
                                    EvDesText.Enabled = false;
                                    if (an1 == an3)
                                    {
                                        for (h = 0; h < nonam[509]; h++)
                                        {
                                            EvList.Items.Clear();
                                            rd1 = EvRnOffCbList.Items[h].ToString();
                                            EvRnOffset.Text = rd1;
                                            this.i = Convert.ToInt32(rd1.Substring(2), 16);
                                            j = this.i / 4;
                                            mov = 0;
                                            nonam[508] = j;
                                            while (alm[j] != 0 && j < md)
                                            {
                                                EveListstring();
                                                EvList.Items.Add(rd1);
                                                j += 2;
                                            }
                                            this.i = (nonam[h] - nonam[508]) / 2;
                                            n = this.i + an3 / 2;
                                            while (this.i < n)
                                            {
                                                EvList.SetSelected(this.i, value: true);
                                                this.i++;
                                            }
                                            switch (MessageBox.Show("Do you want to Replace?", "PSA Compressor", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question))
                                            {
                                                case DialogResult.Yes:
                                                    rd2 = text;
                                                    an1 = nonam[510];
                                                    PReplace();
                                                    continue;
                                                case DialogResult.No:
                                                    continue;
                                            }
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        h = 0;
                                        EvList.Items.Clear();
                                        rd1 = EvRnOffCbList.Items[0].ToString();
                                        EvRnOffset.Text = rd1;
                                        this.i = Convert.ToInt32(rd1.Substring(2), 16);
                                        j = this.i / 4;
                                        mov = 0;
                                        nonam[508] = j;
                                        while (alm[j] != 0 && j < md)
                                        {
                                            EveListstring();
                                            EvList.Items.Add(rd1);
                                            j += 2;
                                        }
                                        this.i = (nonam[0] - nonam[508]) / 2;
                                        n = this.i + an3 / 2;
                                        while (this.i < n)
                                        {
                                            EvList.SetSelected(this.i, value: true);
                                            this.i++;
                                        }
                                        switch (MessageBox.Show("Do you want to Replace?", "PSA Compressor", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question))
                                        {
                                            case DialogResult.Yes:
                                                rd2 = text;
                                                an1 = nonam[510];
                                                PReplace();
                                                break;
                                            default:
                                                h = -1;
                                                break;
                                            case DialogResult.No:
                                                break;
                                        }
                                        if (h == 0)
                                        {
                                            for (h = 1; h < nonam[509]; h++)
                                            {
                                                rd1 = EvRnOffCbList.Items[h - 1].ToString();
                                                rd2 = EvRnOffCbList.Items[h].ToString();
                                                if (rd1 != rd2)
                                                {
                                                    EvList.Items.Clear();
                                                    EvRnOffset.Text = rd2;
                                                    this.i = Convert.ToInt32(rd2.Substring(2), 16);
                                                    j = this.i / 4;
                                                    mov = 0;
                                                    nonam[508] = j;
                                                    while (alm[j] != 0 && j < md)
                                                    {
                                                        EveListstring();
                                                        EvList.Items.Add(rd1);
                                                        j += 2;
                                                    }
                                                    this.i = (nonam[h] - nonam[508]) / 2;
                                                    n = this.i + an3 / 2;
                                                    while (this.i < n)
                                                    {
                                                        EvList.SetSelected(this.i, value: true);
                                                        this.i++;
                                                    }
                                                    switch (MessageBox.Show("Replace?", "PSA Compressor", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question))
                                                    {
                                                        case DialogResult.Yes:
                                                            rd2 = text;
                                                            an1 = nonam[510];
                                                            PReplace();
                                                            continue;
                                                        case DialogResult.No:
                                                            continue;
                                                    }
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    EvDesText.Enabled = true;
                                    text = rd2;
                                }
                                Fixam();
                            }
                            else
                            {
                                nonam[509] = 0;
                            }
                            g = EvRnOffCbList.Items.Count;
                            this.i = 0;
                            while (this.i < g)
                            {
                                rd1 = EvRnOffCbList.Items[this.i].ToString();
                                j = this.i + 1;
                                while (j < g && rd1 == EvRnOffCbList.Items[j].ToString())
                                {
                                    EvRnOffCbList.Items.RemoveAt(j);
                                    g--;
                                }
                                this.i++;
                            }
                            if (nonam[509] != 0)
                            {
                                if (rd2 == "")
                                {
                                    g = EvRnOffCbList.Items.Count;
                                    this.i = 0;
                                    while (this.i < g)
                                    {
                                        rd1 = EvRnOffCbList.Items[this.i].ToString();
                                        k = Convert.ToInt32(rd1.Substring(2), 16);
                                        j = k / 4;
                                        if (j >= stf && j < md)
                                        {
                                            if (alm[j] == -86052851)
                                            {
                                                EvRnOffCbList.Items.RemoveAt(this.i);
                                                g--;
                                            }
                                            else
                                            {
                                                this.i++;
                                            }
                                        }
                                        else
                                        {
                                            EvRnOffCbList.Items.RemoveAt(this.i);
                                            g--;
                                        }
                                    }
                                    if (h == nonam[509])
                                    {
                                        if (g == 0)
                                        {
                                            EvRnOffset.Text = "";
                                            EvList.Items.Clear();
                                        }
                                        else
                                        {
                                            nonam[509] = 0;
                                        }
                                    }
                                }
                                else if (h == nonam[509])
                                {
                                    nonam[509] = 0;
                                }
                                if (EvSubaOffset.Text.Length > 5)
                                {
                                    if (EvSubaCbID.SelectedIndex == -1)
                                    {
                                        EvSubaCbID.SelectedIndex = sid;
                                    }
                                    else if (EvSubaCbList.SelectedIndex == -1)
                                    {
                                        EvSubaCbList.SelectedIndex = slist;
                                    }
                                    else
                                    {
                                        h = EvSubaCbID.SelectedIndex;
                                        g = EvSubaCbList.SelectedIndex;
                                        if (g < 4)
                                        {
                                            n = alm[dat + 12 + g] / 4;
                                        }
                                        else
                                        {
                                            n = alm[dat + 27 + g] / 4;
                                        }
                                        this.i = alm[n + h];
                                        EvSubaOffset.Text = "0x" + this.i.ToString("X");
                                    }
                                }
                                if (EvSpCbID.SelectedIndex == -1)
                                {
                                    EvSpCbID.SelectedIndex = aid;
                                }
                                else if (EvSpCbList.SelectedIndex == -1)
                                {
                                    EvSpCbList.SelectedIndex = alist;
                                }
                                else
                                {
                                    h = EvSpCbID.SelectedIndex;
                                    if (EvSpCbList.SelectedIndex == 0)
                                    {
                                        n = alm[dat + 9] / 4;
                                    }
                                    else
                                    {
                                        n = alm[dat + 10] / 4;
                                    }
                                    this.i = alm[n + h];
                                    EvSpOffset.Text = "0x" + this.i.ToString("X");
                                }
                                if (EvOvrCbList.SelectedIndex == -1)
                                {
                                    EvOvrCbList.Text = "";
                                    EvOvrId.Text = "";
                                }
                                else if (EvOvrCbList.SelectedIndex < 2)
                                {
                                    if (EvOvrId.SelectedIndex == -1)
                                    {
                                        EvOvrId.Text = "";
                                    }
                                    else
                                    {
                                        if (EvOvrCbList.SelectedIndex == 0)
                                        {
                                            n = alm[dat + 20] / 4;
                                        }
                                        else
                                        {
                                            n = alm[dat + 21] / 4;
                                        }
                                        this.i = EvOvrId.SelectedIndex;
                                        h = alm[n + this.i * 2 + 1];
                                        EvOvrOffset.Text = "0x" + h.ToString("X");
                                    }
                                }
                                if (ArticleIDCb.SelectedIndex > 0)
                                {
                                    if (ArtActId.SelectedIndex != -1)
                                    {
                                        ArtActList.Items.Clear();
                                        this.i = ArtActId.SelectedIndex;
                                        if (!ArtActCbList.Visible)
                                        {
                                            k = alm[artdt + 5] / 4;
                                        }
                                        else if (ArtActCbList.SelectedIndex == 1)
                                        {
                                            k = alm[artdt + 13] / 4;
                                        }
                                        else
                                        {
                                            k = alm[artdt + 5] / 4;
                                        }
                                        h = alm[k + this.i];
                                        ArtActOffset.Text = "0x" + h.ToString("X");
                                        if (h > 8096 && h < tds[25])
                                        {
                                            j = h / 4;
                                            mov = 0;
                                            while (alm[j] != 0 && j < md)
                                            {
                                                EveListstring();
                                                ArtActList.Items.Add(rd1);
                                                j += 2;
                                            }
                                        }
                                    }
                                    if (ArtSubaCbList.SelectedIndex != -1 && ArtSubaId.SelectedIndex != -1)
                                    {
                                        ArtSubaList.Items.Clear();
                                        this.i = ArtSubaId.SelectedIndex;
                                        g = ArtSubaCbList.SelectedIndex;
                                        if (alm[artdt + 6] == 0 && alm[artdt + 7] != 0)
                                        {
                                            g++;
                                        }
                                        if (g < 3 && alm[artdt + 6 + g] != 0)
                                        {
                                            k = alm[artdt + 6 + g] / 4;
                                            h = alm[k + this.i];
                                            ArtSubaOffset.Text = "0x" + h.ToString("X");
                                            if (h > 8096 && h < tds[25])
                                            {
                                                j = h / 4;
                                                mov = 0;
                                                while (alm[j] != 0 && j < md)
                                                {
                                                    EveListstring();
                                                    ArtSubaList.Items.Add(rd1);
                                                    j += 2;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            rd3 = ArtDataList.Items[13].ToString();
                                            rd1 = rd3.Substring(6, 10);
                                            if (rd1 != "SubAction ")
                                            {
                                                g++;
                                            }
                                            rd2 = ArtDataList.Items[13 + g].ToString();
                                            rd1 = rd2.Substring(2, 3);
                                            k = Convert.ToInt32(rd1, 16);
                                            g = alm[artdt + k / 4] / 4;
                                            h = alm[g + this.i];
                                            ArtSubaOffset.Text = "0x" + h.ToString("X");
                                            if (h > 8096 && h < tds[25])
                                            {
                                                j = h / 4;
                                                mov = 0;
                                                while (alm[j] != 0 && j < md)
                                                {
                                                    EveListstring();
                                                    ArtSubaList.Items.Add(rd1);
                                                    j += 2;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            h = EvRnOffCbList.Items.Count;
                            if (h > 0)
                            {
                                for (n = 0; n < h; n++)
                                {
                                    rd1 = EvRnOffCbList.Items[n].ToString();
                                    g = Convert.ToInt32(rd1.Substring(2), 16);
                                    GenTrace();
                                    if (rd1.Length > 8)
                                    {
                                        EvRnOffCbList.Items[n] = rd1;
                                    }
                                }
                                TextBox textBox2 = minitxt;
                                textBox2.Text = textBox2.Text + " Sub Routine List Count: " + h;
                                if (nonam[509] == 0)
                                {
                                    EvRnOffCbList.SelectedIndex = 0;
                                    rd1 = EvRnOffCbList.Text.Substring(2);
                                    if (rd1.Length >= 7)
                                    {
                                        if (rd1[4] == ' ')
                                        {
                                            rd1 = rd1.Substring(0, 4);
                                        }
                                        else if (rd1[5] == ' ')
                                        {
                                            rd1 = rd1.Substring(0, 5);
                                        }
                                        else
                                        {
                                            rd1 = "0";
                                        }
                                    }
                                    h = Convert.ToInt32(rd1, 16);
                                    if (h >= stf * 4 && h < tds[25] && h % 4 == 0)
                                    {
                                        EvRnOffset.Text = "0x" + h.ToString("X");
                                        EvList.Items.Clear();
                                        j = h / 4;
                                        mov = 0;
                                        while (alm[j] != 0 && j < md)
                                        {
                                            EveListstring();
                                            EvList.Items.Add(rd1);
                                            j += 2;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                TextBox textBox3 = minitxt;
                                textBox3.Text = textBox3.Text + " Sub Routine List Count: " + h;
                            }
                        }
                        else
                        {
                            minitxt.Text = "Data Not Found.";
                        }
                    }
                    else
                    {
                        minitxt.Text = "Too much indeterminate parts.";
                        EvDesText.Text = "Too much indeterminate parts.\r\n" + EvDesText.Text;
                    }
                }
                EventTab.Enabled = true;
            }
            else
            {
                if (EvRnGenDatCbList.SelectedIndex <= 0)
                {
                    return;
                }
                this.i = 0;
                while (this.i < 512)
                {
                    nonam[this.i] = 0;
                    this.i++;
                }
                rd1 = "";
                EventTab.Enabled = false;
                if (EvRnGenDatCbList.SelectedIndex <= 5)
                {
                    if (EvRnGenDatCbList.SelectedIndex != 3)
                    {
                        if (EvSubaCbList.Items.Count < 4)
                        {
                            this.i = alm[dat + 4] / 4;
                            g = this.i + 548;
                            while (this.i < g)
                            {
                                if (alm[this.i] >= 5996 && alm[this.i] < tds[25])
                                {
                                    j = alm[this.i] / 4;
                                    if (alm[j] != 0 && alm[j] != -86052851)
                                    {
                                        ScanRn();
                                    }
                                }
                                this.i++;
                            }
                        }
                        else
                        {
                            this.i = alm[dat + 12] / 4;
                            g = this.i + suba * 4;
                            while (this.i < g)
                            {
                                if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                {
                                    j = alm[this.i] / 4;
                                    if (alm[j] != 0 && alm[j] != -86052851)
                                    {
                                        ScanRn();
                                    }
                                }
                                this.i++;
                            }
                            if (EvSubaCbList.Items.Count == 8)
                            {
                                this.i = alm[dat + 31] / 4;
                                g = this.i + suba * 4;
                                while (this.i < g)
                                {
                                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                    {
                                        j = alm[this.i] / 4;
                                        if (alm[j] != 0 && alm[j] != -86052851)
                                        {
                                            ScanRn();
                                        }
                                    }
                                    this.i++;
                                }
                            }
                            this.i = alm[dat + 9] / 4;
                            g = this.i + spas * 2;
                            while (this.i < g)
                            {
                                if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                {
                                    j = alm[this.i] / 4;
                                    if (alm[j] != 0 && alm[j] != -86052851)
                                    {
                                        ScanRn();
                                    }
                                }
                                this.i++;
                            }
                            if (alm[dat + 20] >= 8096 && alm[dat + 20] < tds[25])
                            {
                                this.i = alm[dat + 20] / 4 + 1;
                                while (this.i < md && alm[this.i - 1] >= 0)
                                {
                                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                    {
                                        j = alm[this.i] / 4;
                                        if (alm[j] != 0 && alm[j] != -86052851)
                                        {
                                            ScanRn();
                                        }
                                    }
                                    this.i += 2;
                                }
                            }
                            if (alm[dat + 21] >= 8096 && alm[dat + 21] < tds[25])
                            {
                                this.i = alm[dat + 21] / 4 + 1;
                                while (this.i < md && alm[this.i - 1] >= 0)
                                {
                                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                    {
                                        j = alm[this.i] / 4;
                                        if (alm[j] != 0 && alm[j] != -86052851)
                                        {
                                            ScanRn();
                                        }
                                    }
                                    this.i += 2;
                                }
                            }
                        }
                    }
                    if (EvRnGenDatCbList.SelectedIndex >= 3)
                    {
                        if (EvSubaCbList.Items.Count < 4)
                        {
                            if (tds[27] > 1)
                            {
                                for (k = 0; k < tds[27]; k++)
                                {
                                    rd4 = DataDTList.Items[k].ToString();
                                    if (rd4 != "dataCommon" && rd4 != "itemSwingData" && rd4 != "patternPowerMul")
                                    {
                                        h = rnext[k * 2];
                                        if (h >= 5996 && h < tds[25])
                                        {
                                            EvRnOffCbList.Items.Add("0x" + h.ToString("X") + " - " + rd4);
                                            ScanRn();
                                        }
                                    }
                                }
                            }
                            else
                            {
                                minitxt.Text = "Data not Found.";
                            }
                        }
                        else if (ArticleIDCb.Items.Count > 1)
                        {
                            for (int i = 1; i < ArticleIDCb.Items.Count; i++)
                            {
                                an1 = 0;
                                this.i = 1;
                                while (CharPar[this.i].Length >= 7)
                                {
                                    rd4 = CharPar[this.i].Substring(4, 3);
                                    if (rd4 == "Art")
                                    {
                                        an1++;
                                        if (an1 == i)
                                        {
                                            rd4 = CharPar[this.i].Substring(4);
                                            an1 = 2;
                                            while (CharPar[an1] != null && !(CharPar[an1] == rd4))
                                            {
                                                an1++;
                                            }
                                            if (!(CharPar[an1] == rd4))
                                            {
                                                break;
                                            }
                                            rd4 = CharPar[this.i].Substring(0, 3);
                                            g = Convert.ToInt32(rd4, 16);
                                            int num = alm[dat + g / 4] / 4;
                                            if (CharPar[an1 + 1].Length > 5)
                                            {
                                                break;
                                            }
                                            rd4 = CharPar[an1 + 1];
                                            k = rd4.Length - 1;
                                            fnt = 1;
                                            for (h = 1; h < k; h++)
                                            {
                                                if (rd4[h] == '-')
                                                {
                                                    fnt = 0;
                                                    break;
                                                }
                                            }
                                            if (fnt == 0)
                                            {
                                                rd2 = rd4.Substring(0, h);
                                                rd3 = rd4.Substring(h + 1);
                                                for (k = 0; k < h; k++)
                                                {
                                                    if (!Uri.IsHexDigit(rd2[k]))
                                                    {
                                                        fnt = 1;
                                                        break;
                                                    }
                                                }
                                                if (fnt == 0)
                                                {
                                                    h = rd3.Length;
                                                    for (k = 0; k < h; k++)
                                                    {
                                                        if (!Uri.IsHexDigit(rd3[k]))
                                                        {
                                                            fnt = 1;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                            if (fnt != 0)
                                            {
                                                break;
                                            }
                                            h = Convert.ToInt32(rd2, 16);
                                            if (h > 0)
                                            {
                                                if (alm[num + 5] > 8096 && alm[num + 5] < tds[25])
                                                {
                                                    this.i = alm[num + 5] / 4;
                                                    g = this.i + h;
                                                    while (this.i < g)
                                                    {
                                                        if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                                        {
                                                            j = alm[this.i] / 4;
                                                            if (alm[j] != 0 && alm[j] != -86052851)
                                                            {
                                                                ScanRn();
                                                            }
                                                        }
                                                        this.i++;
                                                    }
                                                }
                                                if (CharPar[an1 + 2] == "034 ActionExit")
                                                {
                                                    this.i = alm[num + 13] / 4;
                                                    g = this.i + h;
                                                    while (this.i < g)
                                                    {
                                                        if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                                        {
                                                            j = alm[this.i] / 4;
                                                            if (alm[j] != 0 && alm[j] != -86052851)
                                                            {
                                                                ScanRn();
                                                            }
                                                        }
                                                        this.i++;
                                                    }
                                                }
                                            }
                                            h = Convert.ToInt32(rd3, 16);
                                            if (h <= 0 || alm[num + 4] <= 8096 || alm[num + 4] >= tds[25])
                                            {
                                                break;
                                            }
                                            if (alm[num + 6] > 8096 && alm[num + 6] < tds[25])
                                            {
                                                this.i = alm[num + 6] / 4;
                                                g = this.i + h;
                                                while (this.i < g)
                                                {
                                                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                                    {
                                                        j = alm[this.i] / 4;
                                                        if (alm[j] != 0 && alm[j] != -86052851)
                                                        {
                                                            ScanRn();
                                                        }
                                                    }
                                                    this.i++;
                                                }
                                            }
                                            if (alm[num + 7] > 8096 && alm[num + 7] < tds[25])
                                            {
                                                this.i = alm[num + 7] / 4;
                                                g = this.i + h;
                                                while (this.i < g)
                                                {
                                                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                                    {
                                                        j = alm[this.i] / 4;
                                                        if (alm[j] != 0 && alm[j] != -86052851)
                                                        {
                                                            ScanRn();
                                                        }
                                                    }
                                                    this.i++;
                                                }
                                            }
                                            if (alm[num + 8] > 8096 && alm[num + 8] < tds[25])
                                            {
                                                this.i = alm[num + 8] / 4;
                                                g = this.i + h;
                                                while (this.i < g)
                                                {
                                                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                                    {
                                                        j = alm[this.i] / 4;
                                                        if (alm[j] != 0 && alm[j] != -86052851)
                                                        {
                                                            ScanRn();
                                                        }
                                                    }
                                                    this.i++;
                                                }
                                            }
                                            an1 += 2;
                                            while (CharPar[an1] != null && CharPar[an1].Length >= 4)
                                            {
                                                rd2 = CharPar[an1].Substring(0, 3);
                                                fnt = 0;
                                                for (g = 0; g < 3; g++)
                                                {
                                                    if (!Uri.IsHexDigit(rd2[g]))
                                                    {
                                                        fnt = 1;
                                                        break;
                                                    }
                                                }
                                                if (fnt != 0)
                                                {
                                                    break;
                                                }
                                                n = Convert.ToInt32(rd2, 16);
                                                g = alm[num + n / 4];
                                                if (g <= 8096 || g > tds[25])
                                                {
                                                    n = 0;
                                                }
                                                if (n % 4 != 0)
                                                {
                                                    break;
                                                }
                                                g = CharPar[an1].Length - 1;
                                                fnt = 1;
                                                if (CharPar[an1].Length >= 7)
                                                {
                                                    rd2 = CharPar[an1].Substring(4, 3);
                                                    if (CharPar[an1].Length >= 17)
                                                    {
                                                        rd4 = CharPar[an1].Substring(4, 10);
                                                        if (rd4 == "SubAction ")
                                                        {
                                                            this.i = alm[num + n / 4] / 4;
                                                            g = this.i + h;
                                                            while (this.i < g)
                                                            {
                                                                if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                                                {
                                                                    j = alm[this.i] / 4;
                                                                    if (alm[j] != 0 && alm[j] != -86052851)
                                                                    {
                                                                        ScanRn();
                                                                    }
                                                                }
                                                                this.i++;
                                                            }
                                                        }
                                                    }
                                                }
                                                an1++;
                                            }
                                            break;
                                        }
                                    }
                                    this.i++;
                                }
                            }
                        }
                        else
                        {
                            minitxt.Text = "Articles not Found.";
                        }
                    }
                    if (EvRnGenDatCbList.SelectedIndex == 1 || EvRnGenDatCbList.SelectedIndex == 4)
                    {
                        for (h = 10; h < 512; h++)
                        {
                            if (nonam[h] == 0)
                            {
                                h++;
                                break;
                            }
                        }
                        if (EvSubaCbList.Items.Count < 4)
                        {
                            this.i = alm[dat + 4] / 4;
                            g = this.i + 548;
                            while (this.i < g)
                            {
                                if (alm[this.i] >= 5996 && alm[this.i] < tds[25])
                                {
                                    for (j = 10; j < h; j++)
                                    {
                                        if (nonam[j] == alm[this.i])
                                        {
                                            nonam[j] = 0;
                                            break;
                                        }
                                    }
                                }
                                this.i++;
                            }
                        }
                        else
                        {
                            this.i = alm[dat + 12] / 4;
                            g = this.i + suba * 4;
                            while (this.i < g)
                            {
                                if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                {
                                    for (j = 10; j < h; j++)
                                    {
                                        if (nonam[j] == alm[this.i])
                                        {
                                            nonam[j] = 0;
                                            break;
                                        }
                                    }
                                }
                                this.i++;
                            }
                            if (EvSubaCbList.Items.Count == 8)
                            {
                                this.i = alm[dat + 31] / 4;
                                g = this.i + suba * 4;
                                while (this.i < g)
                                {
                                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                    {
                                        for (j = 10; j < h; j++)
                                        {
                                            if (nonam[j] == alm[this.i])
                                            {
                                                nonam[j] = 0;
                                                break;
                                            }
                                        }
                                    }
                                    this.i++;
                                }
                            }
                            this.i = alm[dat + 9] / 4;
                            g = this.i + spas * 2;
                            while (this.i < g)
                            {
                                if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                {
                                    for (j = 10; j < h; j++)
                                    {
                                        if (nonam[j] == alm[this.i])
                                        {
                                            nonam[j] = 0;
                                            break;
                                        }
                                    }
                                }
                                this.i++;
                            }
                            if (alm[dat + 20] >= 8096 && alm[dat + 20] < tds[25])
                            {
                                this.i = alm[dat + 20] / 4 + 1;
                                while (this.i < md && alm[this.i - 1] >= 0)
                                {
                                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                    {
                                        for (j = 10; j < h; j++)
                                        {
                                            if (nonam[j] == alm[this.i])
                                            {
                                                nonam[j] = 0;
                                                break;
                                            }
                                        }
                                    }
                                    this.i += 2;
                                }
                            }
                            if (alm[dat + 21] >= 8096 && alm[dat + 21] < tds[25])
                            {
                                this.i = alm[dat + 21] / 4 + 1;
                                while (this.i < md && alm[this.i - 1] >= 0)
                                {
                                    if (alm[this.i] >= 8096 && alm[this.i] < tds[25])
                                    {
                                        for (j = 10; j < h; j++)
                                        {
                                            if (nonam[j] == alm[this.i])
                                            {
                                                nonam[j] = 0;
                                                break;
                                            }
                                        }
                                    }
                                    this.i += 2;
                                }
                            }
                        }
                    }
                    if (EvRnGenDatCbList.SelectedIndex >= 4 && EvSubaCbList.Items.Count < 4)
                    {
                        this.i = 10;
                        while (this.i < 512)
                        {
                            if (nonam[this.i] != 0)
                            {
                                for (k = 0; k < tds[27]; k++)
                                {
                                    if (nonam[this.i] == rnext[k * 2])
                                    {
                                        nonam[this.i] = 0;
                                        break;
                                    }
                                }
                            }
                            this.i++;
                        }
                    }
                    if (rd1 != "")
                    {
                        EvDesText.Text = "Found Error :" + rd1;
                    }
                    this.i = 10;
                    while (this.i < 512)
                    {
                        if (nonam[this.i] != 0)
                        {
                            rd1 = "0x" + nonam[this.i].ToString("X");
                            g = nonam[this.i];
                            GenTrace();
                            EvRnOffCbList.Items.Add(rd1);
                        }
                        this.i++;
                    }
                }
                else
                {
                    if (CharPar[0].Length > 11)
                    {
                        rd2 = CharPar[0].Substring(10);
                        k = Convert.ToInt32(rd2, 16);
                        if (k < 128)
                        {
                            g = dat;
                        }
                        else
                        {
                            g = dat + k / 4;
                        }
                    }
                    else
                    {
                        g = dat;
                    }
                    rd2 = "";
                    EvDesText.Text = "";
                    if (alm[md - 2] == -86110838)
                    {
                        this.i = md - 2;
                    }
                    else
                    {
                        this.i = md;
                    }
                    if (g < this.i)
                    {
                        h = 0;
                        for (k = g; k < this.i; k++)
                        {
                            if (alm[k] == -86052851)
                            {
                                h = k;
                                break;
                            }
                        }
                        if (h > 0)
                        {
                            for (k = this.i; k > h; k--)
                            {
                                if (alm[k] == -86052851)
                                {
                                    if (alm[k + 1] != -86052851)
                                    {
                                        g = k + 1;
                                        while (g < this.i)
                                        {
                                            m = g * 4;
                                            fnt = 0;
                                            for (n = stf; n < md; n++)
                                            {
                                                if (alm[n] == m)
                                                {
                                                    rmv = n * 4;
                                                    for (mov = 0; mov < par; mov++)
                                                    {
                                                        if (asc[mov] == rmv)
                                                        {
                                                            fnt = 1;
                                                            break;
                                                        }
                                                    }
                                                    if (fnt == 1)
                                                    {
                                                        break;
                                                    }
                                                }
                                            }
                                            if (alm[g] >= 0 && alm[g] < 7)
                                            {
                                                if (fnt == 1)
                                                {
                                                    j = ((alm[n - 1] >> 8) & 0xFF);
                                                    if (j > 0)
                                                    {
                                                        g += j * 2;
                                                        j = n - 1;
                                                        while (j >= stf && alm[j - 2] > 65535)
                                                        {
                                                            an1 = ((alm[j - 2] >> 8) & 0xFF) * 2;
                                                            if (an1 == 0)
                                                            {
                                                                if (alm[j - 1] != 0)
                                                                {
                                                                    break;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if (alm[j - 1] < 8096 || alm[j - 1] >= tds[25])
                                                                {
                                                                    break;
                                                                }
                                                                m = alm[j - 1] / 4;
                                                                n = 0;
                                                                while (n < an1 && alm[m + n] >= 0 && alm[m + n] < 7)
                                                                {
                                                                    n += 2;
                                                                }
                                                                if (n < an1)
                                                                {
                                                                    break;
                                                                }
                                                            }
                                                            j -= 2;
                                                        }
                                                        an1 = j * 4;
                                                        for (an2 = 0; an2 < 512; an2++)
                                                        {
                                                            if (nonam[an2] == 0)
                                                            {
                                                                nonam[an2] = an1;
                                                                while (j < this.i && alm[j] != 0)
                                                                {
                                                                    j += 2;
                                                                }
                                                                break;
                                                            }
                                                            if (nonam[an2] == an1)
                                                            {
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        rd2 = rd2 + m.ToString("X") + ",";
                                                        g += 65536;
                                                    }
                                                }
                                                else
                                                {
                                                    rd2 = rd2 + m.ToString("X") + ",";
                                                    g += 65536;
                                                }
                                                continue;
                                            }
                                            if (fnt == 0)
                                            {
                                                rd1 = rd1 + m.ToString("X") + ",";
                                            }
                                            an1 = g * 4;
                                            for (an2 = 0; an2 < 512; an2++)
                                            {
                                                if (nonam[an2] == 0)
                                                {
                                                    nonam[an2] = an1;
                                                    break;
                                                }
                                                if (nonam[an2] == an1)
                                                {
                                                    break;
                                                }
                                            }
                                            while (g < this.i && alm[g] != 0)
                                            {
                                                g += 2;
                                            }
                                            g += 2;
                                        }
                                        if (nonam[511] != 0)
                                        {
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        this.i = k;
                                    }
                                }
                            }
                            if (rd1 != "")
                            {
                                EvDesText.Text = "Found Unused Sub Routine Data :" + rd1;
                            }
                            if (rd2 != "")
                            {
                                if (rd1 != "")
                                {
                                    TextBox evDesText2 = EvDesText;
                                    evDesText2.Text = evDesText2.Text + "\r\nFound Unused Data :" + rd2;
                                }
                                else
                                {
                                    EvDesText.Text = "Found Unused Data :" + rd2;
                                }
                            }
                            this.i = 0;
                            while (this.i < 512)
                            {
                                if (nonam[this.i] != 0)
                                {
                                    rd1 = "0x" + nonam[this.i].ToString("X");
                                    g = nonam[this.i];
                                    GenTrace();
                                    EvRnOffCbList.Items.Add(rd1);
                                }
                                this.i++;
                            }
                        }
                        else
                        {
                            minitxt.Text = "Cannot Search.";
                        }
                    }
                    else
                    {
                        minitxt.Text = "Cannot More Compress.";
                    }
                }
                EventTab.Enabled = true;
            }
        }

        private void EvRnItmCount_Click(object sender, EventArgs e)
        {
            minitxt.Text = "Sub Routine Count:" + EvRnOffCbList.Items.Count + ",Trace Count:" + EvRnOffTrace.Items.Count;
        }

        private void EvRnSortDat_Click(object sender, EventArgs e)
        {
            if (EvRnOffCbList.Items.Count > 1 || EvRnOffTrace.Items.Count > 1)
            {
                if (EvRnOffCbList.Items.Count > 1)
                {
                    for (i = 0; i < 512; i++)
                    {
                        nonam[i] = 1048576;
                    }
                    if (EvRnOffCbList.Items.Count > 512)
                    {
                        i = EvRnOffCbList.Items.Count - 512;
                        for (j = 0; j < 512; j++)
                        {
                            rd1 = EvRnOffCbList.Items[i + j].ToString();
                            if (rd1.Length >= 9)
                            {
                                if (rd1[6] == ' ')
                                {
                                    rd2 = rd1.Substring(2, 4);
                                }
                                else if (rd1[7] == ' ')
                                {
                                    rd2 = rd1.Substring(2, 5);
                                }
                                else
                                {
                                    rd2 = "100000";
                                }
                            }
                            else
                            {
                                rd2 = rd1.Substring(2);
                            }
                            nonam[j] = Convert.ToInt32(rd2, 16);
                        }
                    }
                    else
                    {
                        i = EvRnOffCbList.Items.Count;
                        for (j = 0; j < i; j++)
                        {
                            rd1 = EvRnOffCbList.Items[j].ToString();
                            if (rd1.Length >= 9)
                            {
                                if (rd1[6] == ' ')
                                {
                                    rd2 = rd1.Substring(2, 4);
                                }
                                else if (rd1[7] == ' ')
                                {
                                    rd2 = rd1.Substring(2, 5);
                                }
                                else
                                {
                                    rd2 = "100000";
                                }
                            }
                            else
                            {
                                rd2 = rd1.Substring(2);
                            }
                            nonam[j] = Convert.ToInt32(rd2, 16);
                        }
                    }
                    Array.Sort(nonam);
                    EvRnOffCbList.Items.Clear();
                    n = 0;
                    while (n < 512 && nonam[n] < 1048576)
                    {
                        i = nonam[n] / 4;
                        if (i >= stf && i < md)
                        {
                            if (alm[i] >= 65536)
                            {
                                rd1 = "0x" + nonam[n].ToString("X");
                                g = nonam[n];
                                GenTraceS();
                                EvRnOffCbList.Items.Add(rd1);
                            }
                            else if (alm[i] != 0)
                            {
                                for (k = 0; k < 500; k++)
                                {
                                    if (EveEtid[k] == alm[i])
                                    {
                                        rd1 = "0x" + nonam[n].ToString("X");
                                        g = nonam[n];
                                        GenTraceS();
                                        EvRnOffCbList.Items.Add(rd1);
                                        break;
                                    }
                                    if (EveEtid[k] == 0)
                                    {
                                        break;
                                    }
                                }
                            }
                        }
                        n++;
                    }
                }
                if (EvRnOffTrace.Items.Count > 1)
                {
                    for (i = 0; i < 512; i++)
                    {
                        nonam[i] = 1048576;
                    }
                    if (EvRnOffTrace.Items.Count > 512)
                    {
                        for (j = 0; j < 512; j++)
                        {
                            rd1 = EvRnOffTrace.Items[j].ToString();
                            if (rd1.Length >= 9)
                            {
                                if (rd1[6] == ' ')
                                {
                                    rd2 = rd1.Substring(2, 4);
                                }
                                else if (rd1[7] == ' ')
                                {
                                    rd2 = rd1.Substring(2, 5);
                                }
                                else
                                {
                                    rd2 = "100000";
                                }
                            }
                            else
                            {
                                rd2 = rd1.Substring(2);
                            }
                            nonam[j] = Convert.ToInt32(rd2, 16);
                        }
                    }
                    else
                    {
                        i = EvRnOffTrace.Items.Count;
                        for (j = 0; j < i; j++)
                        {
                            rd1 = EvRnOffTrace.Items[j].ToString();
                            if (rd1.Length >= 9)
                            {
                                if (rd1[6] == ' ')
                                {
                                    rd2 = rd1.Substring(2, 4);
                                }
                                else if (rd1[7] == ' ')
                                {
                                    rd2 = rd1.Substring(2, 5);
                                }
                                else
                                {
                                    rd2 = "100000";
                                }
                            }
                            else
                            {
                                rd2 = rd1.Substring(2);
                            }
                            nonam[j] = Convert.ToInt32(rd2, 16);
                        }
                    }
                    Array.Sort(nonam);
                    EvRnOffTrace.Items.Clear();
                    n = 0;
                    while (n < 512 && nonam[n] < 1048576)
                    {
                        i = nonam[n] / 4;
                        if (i >= stf && i < md)
                        {
                            if (alm[i] >= 65536)
                            {
                                rd1 = "0x" + nonam[n].ToString("X");
                                g = nonam[n];
                                GenTraceS();
                                EvRnOffTrace.Items.Add(rd1);
                            }
                            else if (alm[i] != 0)
                            {
                                for (k = 0; k < 500; k++)
                                {
                                    if (EveEtid[k] == alm[i])
                                    {
                                        rd1 = "0x" + nonam[n].ToString("X");
                                        g = nonam[n];
                                        GenTraceS();
                                        EvRnOffTrace.Items.Add(rd1);
                                        break;
                                    }
                                    if (EveEtid[k] == 0)
                                    {
                                        break;
                                    }
                                }
                            }
                        }
                        n++;
                    }
                }
                if (minitxt.Text == "invalid Command.")
                {
                    minitxt.Text = "";
                }
            }
            else
            {
                minitxt.Text = "invalid Command.";
            }
        }

        private void EvRnTraceDat_Click(object sender, EventArgs e)
        {
            if (EvRnOffset.Text.Length > 5)
            {
                EvRnOffCbList.Enabled = false;
                rd2 = EvRnOffset.Text.Substring(2);
                h = Convert.ToInt32(rd2, 16);
                an1 = EvRnOffCbList.SelectedIndex;
                if (an1 >= 0)
                {
                    rd1 = EvRnOffCbList.Items[an1].ToString();
                    rd3 = "0x" + h.ToString("X");
                    if (rd1.Length >= 9)
                    {
                        if (rd1[6] == ' ')
                        {
                            rd1 = rd1.Substring(0, 6);
                        }
                        else if (rd1[7] == ' ')
                        {
                            rd1 = rd1.Substring(0, 7);
                        }
                        else
                        {
                            rd1 = "0";
                        }
                        if (rd1 == rd3)
                        {
                            EvRnOffCbList.Items[an1] = "0x" + h.ToString("X");
                        }
                        else
                        {
                            an1 = -1;
                        }
                    }
                    if (rd1 != rd3)
                    {
                        an1 = -1;
                    }
                }
                an5 = h + EvList.Items.Count * 8;
                rd2 = "";
                fnt = 1;
                if (minitxt.Text == "invalid Command.")
                {
                    minitxt.Text = "";
                }
                for (i = stf; i < md; i++)
                {
                    if (alm[i] >= h && alm[i] <= an5 && alm[i] % 4 == 0)
                    {
                        j = i * 4;
                        mov = 0;
                        while (mov < par && asc[mov] != j)
                        {
                            mov++;
                        }
                        if (asc[mov] == j)
                        {
                            if (fnt == 1)
                            {
                                fnt = 0;
                                EvRnOffTrace.Items.Clear();
                            }
                            if (alm[i - 1] == 2)
                            {
                                k = i * 4 - 4;
                                for (j = stf; j < md; j++)
                                {
                                    if (alm[j] == k)
                                    {
                                        m = j * 4;
                                        mov = 0;
                                        while (mov < par && asc[mov] != m)
                                        {
                                            mov++;
                                        }
                                        if (asc[mov] == m)
                                        {
                                            j--;
                                            while (j >= stf)
                                            {
                                                if (alm[j - 2] > 65535)
                                                {
                                                    k = ((alm[j - 2] >> 8) & 0xFF) * 2;
                                                    if (k == 0)
                                                    {
                                                        if (alm[j - 1] != 0)
                                                        {
                                                            break;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (alm[j - 1] < 8096 || alm[j - 1] >= tds[25])
                                                        {
                                                            break;
                                                        }
                                                        m = alm[j - 1] / 4;
                                                        n = 0;
                                                        while (n < k && alm[m + n] >= 0 && alm[m + n] < 7)
                                                        {
                                                            n += 2;
                                                        }
                                                        if (n < k)
                                                        {
                                                            break;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (alm[j - 2] >= 0 || alm[j - 2] == -86052851)
                                                    {
                                                        break;
                                                    }
                                                    k = 0;
                                                    n = alm[j - 2];
                                                    while (EveEtid[k] != 0 && n != EveEtid[k])
                                                    {
                                                        k++;
                                                        if (k >= 500)
                                                        {
                                                            k = 0;
                                                            break;
                                                        }
                                                    }
                                                    if (n == EveEtid[k])
                                                    {
                                                        k = -1;
                                                    }
                                                    else if (ViewEvPlus.Checked)
                                                    {
                                                        k = 0;
                                                        m = (n | 0xFFFF) - 65535;
                                                        while (EveEtid[k] != 0)
                                                        {
                                                            if (EveEtid[k] >= m && EveEtid[k] < n)
                                                            {
                                                                k = -1;
                                                                break;
                                                            }
                                                            k++;
                                                            if (k >= 500)
                                                            {
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    if (k != -1)
                                                    {
                                                        break;
                                                    }
                                                    k = ((alm[j - 2] >> 8) & 0xFF) * 2;
                                                    if (k == 0)
                                                    {
                                                        if (alm[j - 1] != 0)
                                                        {
                                                            break;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (alm[j - 1] < 8096 || alm[j - 1] >= tds[25])
                                                        {
                                                            break;
                                                        }
                                                        m = alm[j - 1] / 4;
                                                        n = 0;
                                                        while (n < k && alm[m + n] >= 0 && alm[m + n] < 7)
                                                        {
                                                            n += 2;
                                                        }
                                                        if (n < k)
                                                        {
                                                            break;
                                                        }
                                                    }
                                                }
                                                j -= 2;
                                            }
                                            g = j * 4;
                                            rd1 = "0x" + g.ToString("X");
                                            GenTrace();
                                            if (EvRnOffTrace.Items.Count > 0)
                                            {
                                                k = EvRnOffTrace.Items.Count;
                                                for (m = 0; m < k; m++)
                                                {
                                                    rd3 = EvRnOffTrace.Items[m].ToString();
                                                    if (rd1 == rd3)
                                                    {
                                                        break;
                                                    }
                                                }
                                                if (m >= EvRnOffTrace.Items.Count)
                                                {
                                                    EvRnOffTrace.Items.Add(rd1);
                                                }
                                            }
                                            else
                                            {
                                                EvRnOffTrace.Items.Add(rd1);
                                            }
                                            k = 0;
                                            break;
                                        }
                                    }
                                    else if (alm[j] == k - 8 && alm[j - 1] == 218104320)
                                    {
                                        m = j * 4;
                                        mov = 0;
                                        while (mov < par && asc[mov] != m)
                                        {
                                            mov++;
                                        }
                                        if (asc[mov] == m)
                                        {
                                            j--;
                                            while (j >= stf && alm[j - 2] > 65535)
                                            {
                                                k = ((alm[j - 2] >> 8) & 0xFF) * 2;
                                                if (k == 0)
                                                {
                                                    if (alm[j - 1] != 0)
                                                    {
                                                        break;
                                                    }
                                                }
                                                else
                                                {
                                                    if (alm[j - 1] < 8096 || alm[j - 1] >= tds[25])
                                                    {
                                                        break;
                                                    }
                                                    m = alm[j - 1] / 4;
                                                    n = 0;
                                                    while (n < k && alm[m + n] >= 0 && alm[m + n] < 7)
                                                    {
                                                        n += 2;
                                                    }
                                                    if (n < k)
                                                    {
                                                        break;
                                                    }
                                                }
                                                j -= 2;
                                            }
                                            rd1 = "0x" + (j * 4).ToString("X");
                                            k = 0;
                                            if (EvRnOffTrace.Items.Count > 0)
                                            {
                                                k = EvRnOffTrace.Items.Count;
                                                for (m = 0; m < k; m++)
                                                {
                                                    rd3 = EvRnOffTrace.Items[m].ToString();
                                                    if (rd1 == rd3)
                                                    {
                                                        break;
                                                    }
                                                }
                                                if (m >= EvRnOffTrace.Items.Count)
                                                {
                                                    EvRnOffTrace.Items.Add(rd1);
                                                }
                                            }
                                            else
                                            {
                                                EvRnOffTrace.Items.Add(rd1);
                                            }
                                            break;
                                        }
                                    }
                                }
                                if (k != 0)
                                {
                                    if (rd2 != "")
                                    {
                                        rd2 += ", ";
                                    }
                                    rd2 = rd2 + "Unknown Event Params(Offset:" + k.ToString("X") + ")";
                                }
                            }
                            else
                            {
                                if (rd2 != "")
                                {
                                    rd2 += ", ";
                                }
                                if (EvSubaCbList.Items.Count < 4)
                                {
                                    k = alm[dat + 4] / 4;
                                    if (i >= k && i < k + 274)
                                    {
                                        if (an1 >= 0)
                                        {
                                            rd1 = "0x" + h.ToString("X");
                                            for (n = 0; n < tds[27]; n++)
                                            {
                                                if (h == rnext[n * 2])
                                                {
                                                    rd1 = rd1 + " - " + DataDTList.Items[n].ToString();
                                                    break;
                                                }
                                            }
                                            if (n < tds[27])
                                            {
                                                EvRnOffCbList.Items[an1] = rd1 + " (Action Entry " + (i - k).ToString("X") + ")";
                                            }
                                            else
                                            {
                                                EvRnOffCbList.Items[an1] = rd1 + " Action Entry " + (i - k).ToString("X");
                                            }
                                            an1 = -1;
                                        }
                                        rd2 = rd2 + "Action Entry " + (i - k).ToString("X");
                                    }
                                    else if (i >= k + 274 && i < k + 548)
                                    {
                                        if (an1 >= 0)
                                        {
                                            rd1 = "0x" + h.ToString("X");
                                            for (n = 0; n < tds[27]; n++)
                                            {
                                                if (h == rnext[n * 2])
                                                {
                                                    rd1 = rd1 + " - " + DataDTList.Items[n].ToString();
                                                    break;
                                                }
                                            }
                                            if (n < tds[27])
                                            {
                                                EvRnOffCbList.Items[an1] = rd1 + " (Action Exit " + (i - k - 274).ToString("X") + ")";
                                            }
                                            else
                                            {
                                                EvRnOffCbList.Items[an1] = rd1 + " Action Exit " + (i - k - 274).ToString("X");
                                            }
                                            an1 = -1;
                                        }
                                        rd2 = rd2 + "Action Exit " + (i - k - 274).ToString("X");
                                    }
                                    else
                                    {
                                        rd2 = rd2 + "Unknown (Offset:" + (i * 4).ToString("X") + ")";
                                    }
                                }
                                else
                                {
                                    k = alm[dat + 9] / 4;
                                    if (i >= k && i < k + spas * 2)
                                    {
                                        if (i >= k && i < k + spas)
                                        {
                                            rd2 = rd2 + "Action Entry " + (i - k + 274).ToString("X");
                                            if (an1 >= 0)
                                            {
                                                EvRnOffCbList.Items[an1] = "0x" + h.ToString("X") + " Action Entry " + (i - k + 274).ToString("X");
                                                an1 = -1;
                                            }
                                        }
                                        else
                                        {
                                            rd2 = rd2 + "Action Exit " + (i - k - spas + 274).ToString("X");
                                            if (an1 >= 0)
                                            {
                                                EvRnOffCbList.Items[an1] = "0x" + h.ToString("X") + " Action Exit " + (i - k - spas + 274).ToString("X");
                                                an1 = -1;
                                            }
                                        }
                                        k = 0;
                                    }
                                    else
                                    {
                                        k = alm[dat + 12] / 4;
                                        if (i >= k && i < k + suba * 4)
                                        {
                                            if (i < k + suba)
                                            {
                                                rd2 = rd2 + "Sub Action Main " + (i - k).ToString("X");
                                                if (an1 >= 0)
                                                {
                                                    EvRnOffCbList.Items[an1] = "0x" + h.ToString("X") + " Sub Action Main " + (i - k).ToString("X");
                                                    an1 = -1;
                                                }
                                            }
                                            else if (i < k + suba * 2)
                                            {
                                                rd2 = rd2 + "Sub Action GFX " + (i - k - suba).ToString("X");
                                                if (an1 >= 0)
                                                {
                                                    EvRnOffCbList.Items[an1] = "0x" + h.ToString("X") + " Sub Action GFX " + (i - k - suba).ToString("X");
                                                    an1 = -1;
                                                }
                                            }
                                            else if (i < k + suba * 3)
                                            {
                                                rd2 = rd2 + "Sub Action SFX " + (i - k - suba * 2).ToString("X");
                                                if (an1 >= 0)
                                                {
                                                    EvRnOffCbList.Items[an1] = "0x" + h.ToString("X") + " Sub Action SFX " + (i - k - suba * 2).ToString("X");
                                                    an1 = -1;
                                                }
                                            }
                                            else
                                            {
                                                rd2 = rd2 + "Sub Action Other " + (i - k - suba * 3).ToString("X");
                                                if (an1 >= 0)
                                                {
                                                    EvRnOffCbList.Items[an1] = "0x" + h.ToString("X") + " Sub Action Other " + (i - k - suba * 3).ToString("X");
                                                    an1 = -1;
                                                }
                                            }
                                            k = 0;
                                        }
                                        else if (EvSubaCbList.Items.Count == 8)
                                        {
                                            k = alm[dat + 31] / 4;
                                            if (i >= k && i < k + suba * 4)
                                            {
                                                if (i < k + suba)
                                                {
                                                    rd2 = rd2 + "Sub Action NMain " + (i - k).ToString("X");
                                                    if (an1 >= 0)
                                                    {
                                                        EvRnOffCbList.Items[an1] = "0x" + h.ToString("X") + " Sub Action NMain " + (i - k).ToString("X");
                                                        an1 = -1;
                                                    }
                                                }
                                                else if (i < k + suba * 2)
                                                {
                                                    rd2 = rd2 + "Sub Action NGFX " + (i - k - suba).ToString("X");
                                                    if (an1 >= 0)
                                                    {
                                                        EvRnOffCbList.Items[an1] = "0x" + h.ToString("X") + " Sub Action NGFX " + (i - k - suba).ToString("X");
                                                        an1 = -1;
                                                    }
                                                }
                                                else if (i < k + suba * 3)
                                                {
                                                    rd2 = rd2 + "Sub Action NSFX " + (i - k - suba * 2).ToString("X");
                                                    if (an1 >= 0)
                                                    {
                                                        EvRnOffCbList.Items[an1] = "0x" + h.ToString("X") + " Sub Action NSFX " + (i - k - suba * 2).ToString("X");
                                                        an1 = -1;
                                                    }
                                                }
                                                else
                                                {
                                                    rd2 = rd2 + "Sub Action NOther " + (i - k - suba * 3).ToString("X");
                                                    if (an1 >= 0)
                                                    {
                                                        EvRnOffCbList.Items[an1] = "0x" + h.ToString("X") + " Sub Action NOther " + (i - k - suba * 3).ToString("X");
                                                        an1 = -1;
                                                    }
                                                }
                                                k = 0;
                                            }
                                        }
                                    }
                                    if (k != 0)
                                    {
                                        if (alm[dat + 20] >= 8096 && alm[dat + 20] < tds[25])
                                        {
                                            k = alm[dat + 20] / 4;
                                            n = k;
                                            while (n < md && alm[n] >= 0)
                                            {
                                                n += 2;
                                            }
                                            if (i > k && i < n)
                                            {
                                                m = (i - k) / 2;
                                                string text = rd2;
                                                rd2 = text + "Action Override Entry " + alm[k + m * 2].ToString("X") + "(No." + m + ")";
                                                if (an1 >= 0)
                                                {
                                                    EvRnOffCbList.Items[an1] = "0x" + h.ToString("X") + " Action Override Entry " + alm[k + m * 2].ToString("X") + "(No." + m + ")";
                                                    an1 = -1;
                                                }
                                                k = 0;
                                            }
                                        }
                                        if (k != 0)
                                        {
                                            if (alm[dat + 21] >= 8096 && alm[dat + 21] < tds[25])
                                            {
                                                k = alm[dat + 21] / 4;
                                                n = k;
                                                while (n < md && alm[n] >= 0)
                                                {
                                                    n += 2;
                                                }
                                                if (i > k && i < n)
                                                {
                                                    m = (i - k) / 2;
                                                    string text = rd2;
                                                    rd2 = text + "Action Override Exit " + alm[k + m * 2].ToString("X") + "(No." + m + ")";
                                                    if (an1 >= 0)
                                                    {
                                                        EvRnOffCbList.Items[an1] = "0x" + h.ToString("X") + " Action Override Exit " + alm[k + m * 2].ToString("X") + "(No." + m + ")";
                                                        an1 = -1;
                                                    }
                                                    k = 0;
                                                }
                                            }
                                            if (k != 0)
                                            {
                                                if (alm[dat + 11] >= 8096 && alm[dat + 11] < tds[25])
                                                {
                                                    k = alm[dat + 11] / 4;
                                                    if (i >= k && i < k + 274 + spas)
                                                    {
                                                        rd2 = rd2 + "Action Pre " + (i - k).ToString("X");
                                                        if (an1 >= 0)
                                                        {
                                                            EvRnOffCbList.Items[an1] = "0x" + h.ToString("X") + " Action Pre " + (i - k).ToString("X");
                                                            an1 = -1;
                                                        }
                                                        k = 0;
                                                    }
                                                }
                                                if (k != 0 && alm[dat + 22] >= 8096 && alm[dat + 22] < tds[25])
                                                {
                                                    k = alm[dat + 22] / 4 + 2;
                                                    if (k == i)
                                                    {
                                                        rd2 += "Extra Action Interrupts";
                                                        if (an1 >= 0)
                                                        {
                                                            EvRnOffCbList.Items[an1] = "0x" + h.ToString("X") + " Extra Action Interrupts";
                                                            an1 = -1;
                                                        }
                                                        k = 0;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (k != 0)
                                    {
                                        if (ArticleIDCb.Items.Count > 1)
                                        {
                                            for (an2 = 1; an2 < ArticleIDCb.Items.Count; an2++)
                                            {
                                                j = 0;
                                                g = 1;
                                                while (CharPar[g].Length >= 7)
                                                {
                                                    rd4 = CharPar[g].Substring(4, 3);
                                                    if (rd4 == "Art")
                                                    {
                                                        j++;
                                                        if (j == an2)
                                                        {
                                                            rd4 = CharPar[g].Substring(4);
                                                            j = 2;
                                                            while (CharPar[j] != null && !(CharPar[j] == rd4))
                                                            {
                                                                j++;
                                                            }
                                                            if (!(CharPar[j] == rd4))
                                                            {
                                                                break;
                                                            }
                                                            rd4 = CharPar[g].Substring(0, 3);
                                                            mov = Convert.ToInt32(rd4, 16);
                                                            an3 = alm[dat + mov / 4] / 4;
                                                            if (CharPar[j + 1].Length > 5)
                                                            {
                                                                break;
                                                            }
                                                            rd4 = CharPar[j + 1];
                                                            an4 = rd4.Length - 1;
                                                            fntb[0] = 1;
                                                            for (g = 1; g < an4; g++)
                                                            {
                                                                if (rd4[g] == '-')
                                                                {
                                                                    fntb[0] = 0;
                                                                    break;
                                                                }
                                                            }
                                                            if (fntb[0] == 0)
                                                            {
                                                                rd1 = rd4.Substring(0, g);
                                                                rd3 = rd4.Substring(g + 1);
                                                                for (an4 = 0; an4 < g; an4++)
                                                                {
                                                                    if (!Uri.IsHexDigit(rd1[an4]))
                                                                    {
                                                                        fntb[0] = 1;
                                                                        break;
                                                                    }
                                                                }
                                                                if (fntb[0] == 0)
                                                                {
                                                                    g = rd3.Length;
                                                                    for (an4 = 0; an4 < g; an4++)
                                                                    {
                                                                        if (!Uri.IsHexDigit(rd3[an4]))
                                                                        {
                                                                            fntb[0] = 1;
                                                                            break;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            if (fntb[0] != 0)
                                                            {
                                                                break;
                                                            }
                                                            g = Convert.ToInt32(rd1, 16);
                                                            if (g > 0)
                                                            {
                                                                if (alm[an3 + 5] > 8096 && alm[an3 + 5] < tds[25])
                                                                {
                                                                    mov = alm[an3 + 5] / 4;
                                                                    if (i >= mov && i < mov + g)
                                                                    {
                                                                        string text = rd2;
                                                                        rd2 = text + "Article" + ArticleIDCb.Items[an2].ToString() + " Action " + (i - mov).ToString("X");
                                                                        if (an1 >= 0)
                                                                        {
                                                                            EvRnOffCbList.Items[an1] = "0x" + h.ToString("X") + " Article" + ArticleIDCb.Items[an2].ToString() + " Action " + (i - mov).ToString("X");
                                                                            an1 = -1;
                                                                        }
                                                                        k = 0;
                                                                    }
                                                                }
                                                                if (k != 0 && CharPar[j + 2] == "034 ActionExit")
                                                                {
                                                                    mov = alm[an3 + 13] / 4;
                                                                    if (i >= mov && i < mov + g)
                                                                    {
                                                                        string text = rd2;
                                                                        rd2 = text + "Article" + ArticleIDCb.Items[an2].ToString() + " Action(Exit) " + (i - mov).ToString("X");
                                                                        if (an1 >= 0)
                                                                        {
                                                                            EvRnOffCbList.Items[an1] = "0x" + h.ToString("X") + " Article" + ArticleIDCb.Items[an2].ToString() + " Action(Exit) " + (i - mov).ToString("X");
                                                                            an1 = -1;
                                                                        }
                                                                        k = 0;
                                                                    }
                                                                }
                                                            }
                                                            g = Convert.ToInt32(rd3, 16);
                                                            if (g > 0 && k != 0 && alm[an3 + 4] > 8096 && alm[an3 + 4] < tds[25])
                                                            {
                                                                if (alm[an3 + 6] > 8096 && alm[an3 + 6] < tds[25])
                                                                {
                                                                    mov = alm[an3 + 6] / 4;
                                                                    if (i >= mov && i < mov + g)
                                                                    {
                                                                        string text = rd2;
                                                                        rd2 = text + "Article" + ArticleIDCb.Items[an2].ToString() + " Sub Action Main " + (i - mov).ToString("X");
                                                                        if (an1 >= 0)
                                                                        {
                                                                            EvRnOffCbList.Items[an1] = "0x" + h.ToString("X") + " Article" + ArticleIDCb.Items[an2].ToString() + " Sub Action Main " + (i - mov).ToString("X");
                                                                            an1 = -1;
                                                                        }
                                                                        k = 0;
                                                                    }
                                                                }
                                                                if (alm[an3 + 7] > 8096 && alm[an3 + 7] < tds[25] && k != 0)
                                                                {
                                                                    mov = alm[an3 + 7] / 4;
                                                                    if (i >= mov && i < mov + g)
                                                                    {
                                                                        string text = rd2;
                                                                        rd2 = text + "Article" + ArticleIDCb.Items[an2].ToString() + " Sub Action GFX " + (i - mov).ToString("X");
                                                                        if (an1 >= 0)
                                                                        {
                                                                            EvRnOffCbList.Items[an1] = "0x" + h.ToString("X") + " Article" + ArticleIDCb.Items[an2].ToString() + " Sub Action GFX " + (i - mov).ToString("X");
                                                                            an1 = -1;
                                                                        }
                                                                        k = 0;
                                                                    }
                                                                }
                                                                if (alm[an3 + 8] > 8096 && alm[an3 + 8] < tds[25] && k != 0)
                                                                {
                                                                    mov = alm[an3 + 8] / 4;
                                                                    if (i >= mov && i < mov + g)
                                                                    {
                                                                        string text = rd2;
                                                                        rd2 = text + "Article" + ArticleIDCb.Items[an2].ToString() + " Sub Action SFX " + (i - mov).ToString("X");
                                                                        if (an1 >= 0)
                                                                        {
                                                                            EvRnOffCbList.Items[an1] = "0x" + h.ToString("X") + " Article" + ArticleIDCb.Items[an2].ToString() + " Sub Action SFX " + (i - mov).ToString("X");
                                                                            an1 = -1;
                                                                        }
                                                                        k = 0;
                                                                    }
                                                                }
                                                                if (k != 0)
                                                                {
                                                                    j += 2;
                                                                    while (CharPar[j] != null && CharPar[j].Length >= 4)
                                                                    {
                                                                        rd1 = CharPar[j].Substring(0, 3);
                                                                        fntb[0] = 0;
                                                                        for (mov = 0; mov < 3; mov++)
                                                                        {
                                                                            if (!Uri.IsHexDigit(rd1[mov]))
                                                                            {
                                                                                fntb[0] = 1;
                                                                                break;
                                                                            }
                                                                        }
                                                                        if (fntb[0] != 0)
                                                                        {
                                                                            break;
                                                                        }
                                                                        n = Convert.ToInt32(rd1, 16);
                                                                        mov = alm[an3 + n / 4];
                                                                        if (mov <= 8096 || mov > tds[25])
                                                                        {
                                                                            n = 1;
                                                                        }
                                                                        if (n % 4 != 0)
                                                                        {
                                                                            break;
                                                                        }
                                                                        mov = CharPar[j].Length - 1;
                                                                        fntb[0] = 1;
                                                                        if (CharPar[j].Length >= 17)
                                                                        {
                                                                            rd4 = CharPar[j].Substring(4, 10);
                                                                            if (rd4 == "SubAction ")
                                                                            {
                                                                                mov = alm[an3 + n / 4] / 4;
                                                                                if (i >= mov && i < mov + g)
                                                                                {
                                                                                    k = 0;
                                                                                    rd4 = CharPar[j].Substring(14);
                                                                                    string text = rd2;
                                                                                    rd2 = text + "Article" + ArticleIDCb.Items[an2].ToString() + " Sub Action " + rd4 + " " + (i - mov).ToString("X");
                                                                                    if (an1 >= 0)
                                                                                    {
                                                                                        EvRnOffCbList.Items[an1] = "0x" + h.ToString("X") + " Article" + ArticleIDCb.Items[an2].ToString() + " Sub Action " + rd4 + " " + (i - mov).ToString("X");
                                                                                        an1 = -1;
                                                                                    }
                                                                                }
                                                                                if (k == 0)
                                                                                {
                                                                                    break;
                                                                                }
                                                                            }
                                                                        }
                                                                        j++;
                                                                    }
                                                                }
                                                            }
                                                            if (k != 0)
                                                            {
                                                            }
                                                            break;
                                                        }
                                                    }
                                                    g++;
                                                }
                                            }
                                        }
                                        if (k != 0)
                                        {
                                            rd2 = rd2 + "Unknown(Offset:" + (i * 4).ToString("X") + ")";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                for (k = 0; k < tds[27]; k++)
                {
                    if (h == rnext[k * 2])
                    {
                        if (rd2 != "")
                        {
                            rd2 += ", ";
                        }
                        rd2 += DataDTList.Items[k].ToString();
                        if (fnt == 1)
                        {
                            fnt = 0;
                            EvRnOffTrace.Items.Clear();
                        }
                        if (an1 >= 0)
                        {
                            EvRnOffCbList.Items[an1] = "0x" + h.ToString("X") + " - " + DataDTList.Items[k].ToString();
                            an1 = -1;
                        }
                    }
                }
                if (fnt == 1)
                {
                    minitxt.Text = "Sub Routine is Unused.";
                    EvDesText.Text = "Sub Routine is Unused.";
                }
                else if (rd2 != "")
                {
                    EvDesText.Text = "Using: " + rd2;
                }
                else
                {
                    EvDesText.Text = "";
                }
                EvRnOffCbList.Enabled = true;
            }
            else
            {
                minitxt.Text = "invalid Command.";
            }
        }

        private void EvRnFullItemTrace_Click(object sender, EventArgs e)
        {
            if (EvRnOffset.Text.Length > 5)
            {
                rd1 = EvRnOffset.Text.Substring(2);
                h = Convert.ToInt32(rd1, 16);
                i = h / 4;
                for (j = i; j >= stf; j -= 2)
                {
                    if (alm[j - 2] > 65535)
                    {
                        k = ((alm[j - 2] >> 8) & 0xFF) * 2;
                        if (k == 0)
                        {
                            if (alm[j - 1] != 0)
                            {
                                break;
                            }
                        }
                        else
                        {
                            if (alm[j - 1] < 8096 || alm[j - 1] >= tds[25])
                            {
                                break;
                            }
                            h = alm[j - 1] / 4;
                            n = 0;
                            while (n < k && alm[h + n] >= 0 && alm[h + n] < 7)
                            {
                                n += 2;
                            }
                            if (n < k)
                            {
                                break;
                            }
                        }
                    }
                    else
                    {
                        if (alm[j - 2] >= 0 || alm[j - 2] == -86052851)
                        {
                            break;
                        }
                        k = 0;
                        n = alm[j - 2];
                        while (EveEtid[k] != 0 && n != EveEtid[k])
                        {
                            k++;
                            if (k >= 500)
                            {
                                k = 0;
                                break;
                            }
                        }
                        if (n == EveEtid[k])
                        {
                            k = -1;
                        }
                        else if (ViewEvPlus.Checked)
                        {
                            k = 0;
                            h = (n | 0xFFFF) - 65535;
                            while (EveEtid[k] != 0)
                            {
                                if (EveEtid[k] >= h && EveEtid[k] < n)
                                {
                                    k = -1;
                                    break;
                                }
                                k++;
                                if (k >= 500)
                                {
                                    break;
                                }
                            }
                        }
                        if (k != -1)
                        {
                            break;
                        }
                        k = ((alm[j - 2] >> 8) & 0xFF) * 2;
                        if (k == 0)
                        {
                            if (alm[j - 1] != 0)
                            {
                                break;
                            }
                        }
                        else
                        {
                            if (alm[j - 1] < 8096 || alm[j - 1] >= tds[25])
                            {
                                break;
                            }
                            h = alm[j - 1] / 4;
                            n = 0;
                            while (n < k && alm[h + n] >= 0 && alm[h + n] < 7)
                            {
                                n += 2;
                            }
                            if (n < k)
                            {
                                break;
                            }
                        }
                    }
                }
                if (j != i)
                {
                    EvRnOffset.Text = "0x" + (j * 4).ToString("X");
                    mov = 0;
                    EvList.Items.Clear();
                    while (alm[j] != 0 && j < md)
                    {
                        EveListstring();
                        EvList.Items.Add(rd1);
                        j += 2;
                    }
                }
            }
            else
            {
                minitxt.Text = "invalid Command.";
            }
        }

        private void DMiscCb_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!DMiscCb.Visible)
            {
                return;
            }
            if (DMiscCb.Items.Count == 3)
            {
                if (DMiscCb.SelectedIndex == 2)
                {
                    DMiscPtxt.MaxLength = 8;
                    if (DMiscPtxt.Text.Length > 8)
                    {
                        rd1 = DMiscPtxt.Text;
                        DMiscPtxt.Text = rd1.Substring(0, 8);
                    }
                }
                else if (DMiscCb.SelectedIndex == 0)
                {
                    DMiscPtxt.MaxLength = 10;
                    if (DMiscPtxt.Text.Length > 10)
                    {
                        rd1 = DMiscPtxt.Text;
                        DMiscPtxt.Text = rd1.Substring(0, 10);
                    }
                }
                else if (DMiscCb.SelectedIndex == 1)
                {
                    DMiscPtxt.MaxLength = 25;
                }
            }
            else
            {
                if (DMiscParam.SelectedItems.Count <= 0 || DMiscList.SelectedNode == null || !(DMiscOffset.Text != ""))
                {
                    return;
                }
                i = DMiscParam.SelectedItems[0].Index;
                if (i < 10)
                {
                    return;
                }
                DMiscParam.Items[i].SubItems[1].Text = DMiscCb.Text;
                rd1 = DMiscOffset.Text.Substring(2);
                h = Convert.ToInt32(rd1, 16);
                j = h / 4 + 7;
                if (i == 10)
                {
                    if (DMiscCb.SelectedIndex == 0)
                    {
                        if (((alm[j] >> 16) & 1) == 1)
                        {
                            alm[j] -= 65536;
                        }
                    }
                    else if (((alm[j] >> 16) & 1) == 0)
                    {
                        alm[j] += 65536;
                    }
                }
                else if (i == 11)
                {
                    if (((alm[j] >> 19) & 1) == 1)
                    {
                        alm[j] -= 524288;
                    }
                    if (((alm[j] >> 20) & 1) == 1)
                    {
                        alm[j] -= 1048576;
                    }
                    if (DMiscCb.SelectedIndex == 1 || DMiscCb.SelectedIndex == 3)
                    {
                        alm[j] += 524288;
                    }
                    if (DMiscCb.SelectedIndex == 2 || DMiscCb.SelectedIndex == 3)
                    {
                        alm[j] += 1048576;
                    }
                }
                else
                {
                    if (((alm[j] >> 21) & 1) == 1)
                    {
                        alm[j] -= 2097152;
                    }
                    if (((alm[j] >> 22) & 1) == 1)
                    {
                        alm[j] -= 4194304;
                    }
                    if (DMiscCb.SelectedIndex == 1 || DMiscCb.SelectedIndex == 3)
                    {
                        alm[j] += 2097152;
                    }
                    if (DMiscCb.SelectedIndex == 2 || DMiscCb.SelectedIndex == 3)
                    {
                        alm[j] += 4194304;
                    }
                }
                DMiscParam.Items[7].SubItems[1].Text = alm[j].ToString("X8");
                if (qe)
                {
                    Qsave.Enabled = true;
                }
            }
        }

        private void EvRnCpy_Click(object sender, EventArgs e)
        {
            if (EvRnOffCbList.Items.Count > 0)
            {
                g = EvRnOffCbList.Items.Count;
                rd1 = "";
                for (i = 0; i < g; i++)
                {
                    rd1 = rd1 + EvRnOffCbList.Items[i].ToString() + "\r\n";
                }
                if (rd1 != "")
                {
                    Clipboard.SetText(rd1);
                }
            }
        }

        private void RnTraceCpy_Click(object sender, EventArgs e)
        {
            if (EvRnOffTrace.Items.Count > 0)
            {
                g = EvRnOffTrace.Items.Count;
                rd1 = "";
                for (i = 0; i < g; i++)
                {
                    rd1 = rd1 + EvRnOffTrace.Items[i].ToString() + "\r\n";
                }
                if (rd1 != "")
                {
                    Clipboard.SetText(rd1);
                }
            }
        }

        private void SearchSameDataNotFullRoutine_Click(object sender, EventArgs e)
        {
            if (EvRnOffset.Text.Length > 5)
            {
                rd1 = EvRnOffset.Text.Substring(2);
                j = Convert.ToInt32(rd1, 16);
                h = j / 4;
                if (h < md)
                {
                    if (alm[h] > 65535)
                    {
                        EvRnOffTrace.Items.Clear();
                        for (n = 0; n < 501; n++)
                        {
                            nonam[n] = alm[h + n * 2];
                            if (nonam[n] == 0)
                            {
                                break;
                            }
                            if (((nonam[n] >> 8) & 0xFF) > 0)
                            {
                                an2 = alm[h + n * 2 + 1];
                                if (an2 < 8096 || an2 >= tds[25] || an2 % 4 != 0)
                                {
                                    n = 1048575;
                                }
                                else if (nonam[n] == 459008 || nonam[n] == 590080)
                                {
                                    an3 = an2 / 4;
                                    if (alm[an3] == 2 && alm[an3 + 1] == -1)
                                    {
                                        n = 1048575;
                                    }
                                }
                                else if (nonam[n] == 218104320)
                                {
                                    an3 = an2 / 4 + 2;
                                    if (alm[an3] == 2 && alm[an3 + 1] == -1)
                                    {
                                        n = 1048575;
                                    }
                                }
                            }
                        }
                        if (n < 501)
                        {
                            for (i = stf; i < md; i++)
                            {
                                if (alm[i] == nonam[0])
                                {
                                    if (i == h)
                                    {
                                        i += n * 2;
                                    }
                                    else
                                    {
                                        for (j = 1; j < n; j++)
                                        {
                                            if (nonam[j] != alm[i + j * 2])
                                            {
                                                j = 16777216;
                                            }
                                        }
                                        if (j == n)
                                        {
                                            for (j = 0; j < n; j++)
                                            {
                                                if (((nonam[j] >> 8) & 0xFF) != 0)
                                                {
                                                    k = ((nonam[j] >> 8) & 0xFF) * 2;
                                                    g = alm[i + j * 2 + 1];
                                                    if (g >= 8096 && g < tds[25] && g % 4 == 0)
                                                    {
                                                        rd1 = "";
                                                        m = g / 4;
                                                        for (g = 0; g < k; g++)
                                                        {
                                                            rd1 += alm[m + g].ToString("X8");
                                                        }
                                                        g = alm[h + j * 2 + 1];
                                                        rd2 = "";
                                                        m = g / 4;
                                                        for (g = 0; g < k; g++)
                                                        {
                                                            rd2 += alm[m + g].ToString("X8");
                                                        }
                                                        if (rd1 != rd2)
                                                        {
                                                            j = 16777216;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        j = 16777216;
                                                    }
                                                }
                                            }
                                            if (j == n)
                                            {
                                                g = i * 4;
                                                rd1 = "0x" + g.ToString("X");
                                                GenTraceS();
                                                EvRnOffTrace.Items.Add(rd1);
                                            }
                                        }
                                    }
                                }
                            }
                            if (EvRnOffTrace.Items.Count > 0)
                            {
                                minitxt.Text = "Found " + EvRnOffTrace.Items.Count + " Data.";
                            }
                            else
                            {
                                minitxt.Text = "Data Not Found.";
                            }
                        }
                        else
                        {
                            minitxt.Text = "invalid Command.";
                        }
                    }
                    else
                    {
                        minitxt.Text = "invalid Command.";
                    }
                }
                else
                {
                    minitxt.Text = "invalid Command.";
                }
            }
            else
            {
                minitxt.Text = "invalid Command.";
            }
        }

        private void SearchSameDataRoutine_Click(object sender, EventArgs e)
        {
            if (EvRnOffset.Text.Length > 5)
            {
                rd1 = EvRnOffset.Text.Substring(2);
                j = Convert.ToInt32(rd1, 16);
                h = j / 4;
                if (h < md)
                {
                    if (alm[h] > 65535)
                    {
                        EvRnOffTrace.Items.Clear();
                        for (n = 0; n < 501; n++)
                        {
                            nonam[n] = alm[h + n * 2];
                            if (nonam[n] == 0)
                            {
                                break;
                            }
                            if (((nonam[n] >> 8) & 0xFF) > 0)
                            {
                                an2 = alm[h + n * 2 + 1];
                                if (an2 < 8096 || an2 >= tds[25] || an2 % 4 != 0)
                                {
                                    n = 1048575;
                                }
                                else if (nonam[n] == 459008 || nonam[n] == 590080)
                                {
                                    an3 = an2 / 4;
                                    if (alm[an3] == 2 && alm[an3 + 1] == -1)
                                    {
                                        n = 1048575;
                                    }
                                }
                                else if (nonam[n] == 218104320)
                                {
                                    an3 = an2 / 4 + 2;
                                    if (alm[an3] == 2 && alm[an3 + 1] == -1)
                                    {
                                        n = 1048575;
                                    }
                                }
                            }
                        }
                        if (n < 501)
                        {
                            for (i = stf; i < md; i++)
                            {
                                if (alm[i] == nonam[0])
                                {
                                    if (i == h)
                                    {
                                        i += n * 2;
                                    }
                                    else
                                    {
                                        for (j = 1; j < n; j++)
                                        {
                                            if (nonam[j] != alm[i + j * 2])
                                            {
                                                j = 16777216;
                                            }
                                        }
                                        if (j == n)
                                        {
                                            for (j = 0; j < n; j++)
                                            {
                                                if (((nonam[j] >> 8) & 0xFF) != 0)
                                                {
                                                    k = ((nonam[j] >> 8) & 0xFF) * 2;
                                                    g = alm[i + j * 2 + 1];
                                                    if (g >= 8096 && g < tds[25] && g % 4 == 0)
                                                    {
                                                        rd1 = "";
                                                        m = g / 4;
                                                        for (g = 0; g < k; g++)
                                                        {
                                                            rd1 += alm[m + g].ToString("X8");
                                                        }
                                                        g = alm[h + j * 2 + 1];
                                                        rd2 = "";
                                                        m = g / 4;
                                                        for (g = 0; g < k; g++)
                                                        {
                                                            rd2 += alm[m + g].ToString("X8");
                                                        }
                                                        if (rd1 != rd2)
                                                        {
                                                            j = 16777216;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        j = 16777216;
                                                    }
                                                }
                                            }
                                            if (j == n)
                                            {
                                                m = i;
                                                while (m >= stf && alm[m - 2] > 65535)
                                                {
                                                    k = ((alm[m - 2] >> 8) & 0xFF) * 2;
                                                    if (k == 0)
                                                    {
                                                        if (alm[m - 1] != 0)
                                                        {
                                                            break;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (alm[m - 1] < 8096 || alm[m - 1] >= tds[25])
                                                        {
                                                            break;
                                                        }
                                                        j = alm[m - 1] / 4;
                                                        g = 0;
                                                        while (g < k && alm[j + g] >= 0 && alm[j + g] < 7)
                                                        {
                                                            g += 2;
                                                        }
                                                        if (g < k)
                                                        {
                                                            break;
                                                        }
                                                    }
                                                    m -= 2;
                                                }
                                                g = m * 4;
                                                rd1 = "0x" + g.ToString("X");
                                                GenTrace();
                                                EvRnOffTrace.Items.Add(rd1);
                                                while (i < md && alm[i] != 0)
                                                {
                                                    i += 2;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (EvRnOffTrace.Items.Count > 0)
                            {
                                minitxt.Text = "Found " + EvRnOffTrace.Items.Count + " Data.";
                            }
                            else
                            {
                                minitxt.Text = "Data Not Found.";
                            }
                        }
                        else
                        {
                            minitxt.Text = "invalid Command.";
                        }
                    }
                    else
                    {
                        minitxt.Text = "invalid Command.";
                    }
                }
                else
                {
                    minitxt.Text = "invalid Command.";
                }
            }
            else
            {
                minitxt.Text = "invalid Command.";
            }
        }

        private void SearchPerfectMatchingDataRoutine_Click(object sender, EventArgs e)
        {
            if (EvRnOffset.Text.Length > 5)
            {
                rd1 = EvRnOffset.Text.Substring(2);
                j = Convert.ToInt32(rd1, 16);
                h = j / 4;
                if (h < md)
                {
                    if (alm[h] > 65535)
                    {
                        EvRnOffTrace.Items.Clear();
                        for (n = 0; n < 501; n++)
                        {
                            nonam[n] = alm[h + n * 2];
                            if (nonam[n] == 0)
                            {
                                break;
                            }
                            if (((nonam[n] >> 8) & 0xFF) > 0)
                            {
                                an2 = alm[h + n * 2 + 1];
                                if (an2 < 8096 || an2 >= tds[25] || an2 % 4 != 0)
                                {
                                    n = 1048575;
                                }
                                else if (nonam[n] == 459008 || nonam[n] == 590080)
                                {
                                    an3 = an2 / 4;
                                    if (alm[an3] == 2 && alm[an3 + 1] == -1)
                                    {
                                        n = 1048575;
                                    }
                                }
                                else if (nonam[n] == 218104320)
                                {
                                    an3 = an2 / 4 + 2;
                                    if (alm[an3] == 2 && alm[an3 + 1] == -1)
                                    {
                                        n = 1048575;
                                    }
                                }
                            }
                        }
                        if (n < 501)
                        {
                            for (i = stf; i < md; i++)
                            {
                                if (alm[i] == nonam[0])
                                {
                                    if (i == h)
                                    {
                                        i += n * 2;
                                    }
                                    else
                                    {
                                        for (j = 1; j < n; j++)
                                        {
                                            if (nonam[j] != alm[i + j * 2])
                                            {
                                                j = 16777216;
                                            }
                                        }
                                        if (j == n && alm[i + j * 2] == 0)
                                        {
                                            for (j = 0; j < n; j++)
                                            {
                                                if (((nonam[j] >> 8) & 0xFF) != 0)
                                                {
                                                    k = ((nonam[j] >> 8) & 0xFF) * 2;
                                                    g = alm[i + j * 2 + 1];
                                                    if (g >= 8096 && g < tds[25] && g % 4 == 0)
                                                    {
                                                        rd1 = "";
                                                        m = g / 4;
                                                        for (g = 0; g < k; g++)
                                                        {
                                                            rd1 += alm[m + g].ToString("X8");
                                                        }
                                                        g = alm[h + j * 2 + 1];
                                                        rd2 = "";
                                                        m = g / 4;
                                                        for (g = 0; g < k; g++)
                                                        {
                                                            rd2 += alm[m + g].ToString("X8");
                                                        }
                                                        if (rd1 != rd2)
                                                        {
                                                            j = 16777216;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        j = 16777216;
                                                    }
                                                }
                                            }
                                            if (j == n)
                                            {
                                                m = 0;
                                                if (alm[i - 2] > 65535)
                                                {
                                                    k = ((alm[i - 2] >> 8) & 0xFF) * 2;
                                                    if (k == 0)
                                                    {
                                                        if (alm[i - 1] == 0)
                                                        {
                                                            m = 1;
                                                        }
                                                    }
                                                    else if (alm[i - 1] >= 8096 && alm[i - 1] < tds[25])
                                                    {
                                                        j = alm[i - 1] / 4;
                                                        g = 0;
                                                        while (g < k && alm[j + g] >= 0 && alm[j + g] < 7)
                                                        {
                                                            g += 2;
                                                        }
                                                        if (g == k)
                                                        {
                                                            m = 1;
                                                        }
                                                    }
                                                }
                                                if (m == 0)
                                                {
                                                    g = i * 4;
                                                    rd1 = "0x" + g.ToString("X");
                                                    GenTrace();
                                                    EvRnOffTrace.Items.Add(rd1);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (EvRnOffTrace.Items.Count > 0)
                            {
                                minitxt.Text = "Found " + EvRnOffTrace.Items.Count + " Data.";
                            }
                            else
                            {
                                minitxt.Text = "Data Not Found.";
                            }
                        }
                        else
                        {
                            minitxt.Text = "invalid Command.";
                        }
                    }
                    else
                    {
                        minitxt.Text = "invalid Command.";
                    }
                }
                else
                {
                    minitxt.Text = "invalid Command.";
                }
            }
            else
            {
                minitxt.Text = "invalid Command.";
            }
        }

        private void EvRnOffTrace_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (EvRnOffTrace.SelectedIndex == -1)
            {
                return;
            }
            rd1 = EvRnOffTrace.Text.Substring(2);
            if (rd1.Length >= 7)
            {
                if (rd1[4] == ' ')
                {
                    rd1 = rd1.Substring(0, 4);
                }
                else if (rd1[5] == ' ')
                {
                    rd1 = rd1.Substring(0, 5);
                }
                else
                {
                    rd1 = "0";
                }
            }
            h = Convert.ToInt32(rd1, 16);
            if (h >= 8096 && h < tds[25] && h % 4 == 0)
            {
                if (minitxt.Text == "Cannot Open Offset")
                {
                    minitxt.Text = "";
                }
                EvRnOffset.Text = "0x" + h.ToString("X");
                EvList.Items.Clear();
                j = h / 4;
                mov = 0;
                while (alm[j] != 0 && j < md)
                {
                    EveListstring();
                    EvList.Items.Add(rd1);
                    j += 2;
                }
            }
            else
            {
                minitxt.Text = "Cannot Open Offset";
            }
        }

        private void EvRnCmpSameData_Click(object sender, EventArgs e)
        {
            if (EvRnOffset.Text.Length > 5)
            {
                rd1 = EvRnOffset.Text.Substring(2);
                an1 = Convert.ToInt32(rd1, 16);
                j = an1 / 4;
                if (j < md)
                {
                    if (alm[j] > 65535)
                    {
                        for (g = 0; g < 501; g++)
                        {
                            nonam[g] = alm[j + g * 2];
                            if (nonam[g] == 0)
                            {
                                break;
                            }
                            if (((nonam[g] >> 8) & 0xFF) > 0)
                            {
                                an4 = alm[j + g * 2 + 1];
                                if (an4 < 8096 || an4 >= tds[25] || an4 % 4 != 0)
                                {
                                    g = 1048575;
                                }
                                else if (nonam[g] == 459008 || nonam[n] == 590080)
                                {
                                    an3 = an4 / 4;
                                    if (alm[an3] == 2 && alm[an3 + 1] == -1)
                                    {
                                        g = 1048575;
                                    }
                                }
                                else if (nonam[g] == 218104320)
                                {
                                    an3 = an4 / 4 + 2;
                                    if (alm[an3] == 2 && alm[an3 + 1] == -1)
                                    {
                                        g = 1048575;
                                    }
                                }
                            }
                        }
                        if (g < 2 && ((nonam[0] >> 8) & 0xFF) < 2)
                        {
                            g = 1000;
                        }
                        if (g < 501)
                        {
                            fnt = 0;
                            for (i = stf; i < md; i++)
                            {
                                if (alm[i] == nonam[0])
                                {
                                    if (i == j)
                                    {
                                        i += g * 2;
                                    }
                                    else
                                    {
                                        for (h = 1; h < g; h++)
                                        {
                                            if (nonam[h] != alm[i + h * 2])
                                            {
                                                h = 16777216;
                                            }
                                        }
                                        if (h == g)
                                        {
                                            for (h = 0; h < g; h++)
                                            {
                                                if (((nonam[h] >> 8) & 0xFF) != 0)
                                                {
                                                    k = ((nonam[h] >> 8) & 0xFF) * 2;
                                                    n = alm[i + h * 2 + 1];
                                                    if (n >= 8096 && n < tds[25] && n % 4 == 0)
                                                    {
                                                        rd1 = "";
                                                        m = n / 4;
                                                        for (n = 0; n < k; n++)
                                                        {
                                                            rd1 += alm[m + n].ToString("X8");
                                                        }
                                                        n = alm[j + h * 2 + 1];
                                                        rd2 = "";
                                                        m = n / 4;
                                                        for (n = 0; n < k; n++)
                                                        {
                                                            rd2 += alm[m + n].ToString("X8");
                                                        }
                                                        if (rd1 != rd2)
                                                        {
                                                            h = 16777216;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        h = 16777216;
                                                    }
                                                }
                                            }
                                            if (h == g)
                                            {
                                                an3 = i;
                                                while (i < md && alm[i] != 0)
                                                {
                                                    i += 2;
                                                }
                                                an4 = 1048575;
                                                an5 = 1048575;
                                                m = an3 + g * 2;
                                                if (((alm[an3] >> 8) & 0xFF) > 0)
                                                {
                                                    rmv = an3 * 4 + 4;
                                                    for (mov = 0; mov < par; mov++)
                                                    {
                                                        if (asc[mov] == rmv)
                                                        {
                                                            an4 = mov;
                                                            break;
                                                        }
                                                    }
                                                    nonam[510] = ((alm[an3] >> 8) & 0xFF) * 2;
                                                    k = alm[an3 + 1] / 4;
                                                    for (h = 0; h < nonam[510]; h += 2)
                                                    {
                                                        if (alm[k + h] == 2)
                                                        {
                                                            rmv = (k + h) * 4 + 4;
                                                            Delasc();
                                                        }
                                                        alm[k + h] = -86052851;
                                                        alm[k + h + 1] = -86052851;
                                                    }
                                                }
                                                if (nonam[1] != 0)
                                                {
                                                    for (n = an3 + 2; n < m; n += 2)
                                                    {
                                                        if (((alm[n] >> 8) & 0xFF) > 0)
                                                        {
                                                            rmv = n * 4 + 4;
                                                            if (an5 != 1048575)
                                                            {
                                                                Delasc();
                                                            }
                                                            else
                                                            {
                                                                for (mov = 0; mov < par; mov++)
                                                                {
                                                                    if (asc[mov] == rmv)
                                                                    {
                                                                        if (an4 == 1048575)
                                                                        {
                                                                            an4 = mov;
                                                                        }
                                                                        else
                                                                        {
                                                                            an5 = mov;
                                                                        }
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                            nonam[510] = ((alm[n] >> 8) & 0xFF) * 2;
                                                            k = alm[n + 1] / 4;
                                                            for (h = 0; h < nonam[510]; h += 2)
                                                            {
                                                                if (alm[k + h] == 2)
                                                                {
                                                                    rmv = (k + h) * 4 + 4;
                                                                    Delasc();
                                                                }
                                                                alm[k + h] = -86052851;
                                                                alm[k + h + 1] = -86052851;
                                                            }
                                                        }
                                                    }
                                                    if (alm[m] == 0)
                                                    {
                                                        alm[an3 + 2] = 0;
                                                        alm[an3 + 3] = 0;
                                                        if (an3 + 4 < m)
                                                        {
                                                            for (n = an3 + 4; n < m; n++)
                                                            {
                                                                alm[n] = -86052851;
                                                            }
                                                        }
                                                        alm[m] = -86052851;
                                                        alm[m + 1] = -86052851;
                                                    }
                                                    else
                                                    {
                                                        n = an3 + 2;
                                                        while (n < md && alm[m] != 0)
                                                        {
                                                            if (((alm[m] >> 8) & 0xFF) > 0)
                                                            {
                                                                rmv = m * 4 + 4;
                                                                for (mov = 0; mov < par; mov++)
                                                                {
                                                                    if (asc[mov] == rmv)
                                                                    {
                                                                        asc[mov] = n * 4 + 4;
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                            alm[n] = alm[m];
                                                            alm[n + 1] = alm[m + 1];
                                                            m += 2;
                                                            n += 2;
                                                        }
                                                        alm[n] = 0;
                                                        alm[n + 1] = 0;
                                                        n += 2;
                                                        m += 2;
                                                        while (n < m)
                                                        {
                                                            alm[n] = -86052851;
                                                            n++;
                                                        }
                                                    }
                                                }
                                                alm[an3] = 459008;
                                                if (an4 != 1048575)
                                                {
                                                    asc[an4] = an3 * 4 + 4;
                                                }
                                                else
                                                {
                                                    asc[par] = an3 * 4 + 4;
                                                    par++;
                                                    tds[26]++;
                                                }
                                                for (n = stf; n < md; n++)
                                                {
                                                    if (alm[n] == -86052851)
                                                    {
                                                        if (alm[n + 1] == -86052851)
                                                        {
                                                            alm[an3 + 1] = n * 4;
                                                            alm[n] = 2;
                                                            alm[n + 1] = an1;
                                                            if (an5 != 1048575)
                                                            {
                                                                asc[an5] = n * 4 + 4;
                                                                break;
                                                            }
                                                            asc[par] = n * 4 + 4;
                                                            par++;
                                                            tds[26]++;
                                                            break;
                                                        }
                                                        n++;
                                                    }
                                                }
                                                fnt = 1;
                                            }
                                        }
                                    }
                                }
                            }
                            if (g >= 4)
                            {
                                an3 = j + g * 2;
                                an2 = an3 - 6;
                                for (k = j; k < an2; k += 2)
                                {
                                    if (((alm[k] >> 8) & 0xFF) > 0 && alm[k] == alm[k + 4] && alm[k + 2] == alm[k + 6])
                                    {
                                        h = ((alm[k] >> 8) & 0xFF) * 2;
                                        rd1 = "";
                                        m = alm[k + 1] / 4;
                                        for (n = 0; n < h; n++)
                                        {
                                            rd1 += alm[m + n].ToString("X8");
                                        }
                                        rd2 = "";
                                        m = alm[k + 5] / 4;
                                        for (n = 0; n < h; n++)
                                        {
                                            rd2 += alm[m + n].ToString("X8");
                                        }
                                        if (rd1 == rd2)
                                        {
                                            n = alm[k] >> 16;
                                            if (n != 4 && n != 5 && (n < 10 || n > 19))
                                            {
                                                n = alm[k + 2] >> 16;
                                                if (n != 4 && n != 5 && (n < 10 || n > 19) && ((alm[k + 2] >> 8) & 0xFF) > 0)
                                                {
                                                    an5 = ((alm[k + 2] >> 8) & 0xFF) * 2;
                                                    rd3 = "";
                                                    m = alm[k + 3] / 4;
                                                    for (n = 0; n < an5; n++)
                                                    {
                                                        rd3 += alm[m + n].ToString("X8");
                                                    }
                                                    rd2 = "";
                                                    m = alm[k + 7] / 4;
                                                    for (n = 0; n < an5; n++)
                                                    {
                                                        rd2 += alm[m + n].ToString("X8");
                                                    }
                                                    if (rd3 == rd2)
                                                    {
                                                        an4 = k + 10;
                                                        fnt = 2;
                                                        while (an4 < an3 && alm[k] == alm[an4 - 2] && alm[k + 2] == alm[an4])
                                                        {
                                                            rd2 = "";
                                                            m = alm[an4 - 1] / 4;
                                                            for (n = 0; n < h; n++)
                                                            {
                                                                rd2 += alm[m + n].ToString("X8");
                                                            }
                                                            if (rd1 == rd2)
                                                            {
                                                                rd2 = "";
                                                                m = alm[an4 + 1] / 4;
                                                                for (n = 0; n < an5; n++)
                                                                {
                                                                    rd2 += alm[m + n].ToString("X8");
                                                                }
                                                                if (rd3 == rd2)
                                                                {
                                                                    an4 += 4;
                                                                    continue;
                                                                }
                                                                break;
                                                            }
                                                            break;
                                                        }
                                                        m = alm[k + 5] / 4;
                                                        for (n = 0; n < h; n += 2)
                                                        {
                                                            if (alm[m + n] == 2)
                                                            {
                                                                rmv = (m + n) * 4 + 4;
                                                                Delasc();
                                                            }
                                                            alm[m + n] = -86052851;
                                                            alm[m + n + 1] = -86052851;
                                                        }
                                                        m = alm[k + 7] / 4;
                                                        rmv = k * 4 + 28;
                                                        Delasc();
                                                        for (n = 0; n < an5; n += 2)
                                                        {
                                                            if (alm[m + n] == 2)
                                                            {
                                                                rmv = (m + n) * 4 + 4;
                                                                Delasc();
                                                            }
                                                            alm[m + n] = -86052851;
                                                            alm[m + n + 1] = -86052851;
                                                        }
                                                        alm[k + 4] = alm[k + 2];
                                                        alm[k + 5] = alm[k + 3];
                                                        alm[k + 2] = alm[k];
                                                        alm[k + 3] = alm[k + 1];
                                                        for (n = stf; n < md; n++)
                                                        {
                                                            if (alm[n] == -86052851)
                                                            {
                                                                if (alm[n + 1] == -86052851)
                                                                {
                                                                    alm[k] = 262400;
                                                                    alm[k + 1] = n * 4;
                                                                    alm[n] = 0;
                                                                    alm[n + 1] = (an4 - k - 2) / 4;
                                                                    break;
                                                                }
                                                                n++;
                                                            }
                                                        }
                                                        alm[k + 6] = 327680;
                                                        alm[k + 7] = 0;
                                                        if (alm[n + 1] > 2)
                                                        {
                                                            nonam[0] = alm[n + 1];
                                                            if (alm[k + 2] == alm[k + 4] && rd1 == rd3)
                                                            {
                                                                alm[n + 1] += nonam[0];
                                                                m = alm[k + 5] / 4;
                                                                for (an5 = 0; an5 < h; an5 += 2)
                                                                {
                                                                    if (alm[m + an5] == 2)
                                                                    {
                                                                        rmv = (m + an5) * 4 + 4;
                                                                        Delasc();
                                                                    }
                                                                    alm[m + an5] = -86052851;
                                                                    alm[m + an5 + 1] = -86052851;
                                                                }
                                                                alm[k + 4] = 327680;
                                                                alm[k + 5] = 0;
                                                                alm[k + 6] = 131072;
                                                                alm[k + 7] = 0;
                                                                rmv = k * 4 + 20;
                                                                Delasc();
                                                                if (alm[k + 2] == alm[an4 - 2])
                                                                {
                                                                    rd2 = "";
                                                                    m = alm[an4 - 1] / 4;
                                                                    for (an5 = 0; an5 < h; an5++)
                                                                    {
                                                                        rd2 += alm[m + an5].ToString("X8");
                                                                    }
                                                                    if (rd1 == rd2)
                                                                    {
                                                                        alm[n + 1]++;
                                                                        for (an5 = 0; an5 < h; an5 += 2)
                                                                        {
                                                                            if (alm[m + an5] == 2)
                                                                            {
                                                                                rmv = (m + an5) * 4 + 4;
                                                                                Delasc();
                                                                            }
                                                                            alm[m + an5] = -86052851;
                                                                            alm[m + an5 + 1] = -86052851;
                                                                        }
                                                                        alm[an4 - 2] = 131072;
                                                                        alm[an4 - 1] = 0;
                                                                        rmv = an4 * 4 - 4;
                                                                        Delasc();
                                                                    }
                                                                }
                                                                an5 = h;
                                                            }
                                                            for (an4 = 2; an4 < nonam[0]; an4++)
                                                            {
                                                                m = alm[k + an4 * 4 + 1] / 4;
                                                                for (n = 0; n < h; n += 2)
                                                                {
                                                                    if (alm[m + n] == 2)
                                                                    {
                                                                        rmv = (m + n) * 4 + 4;
                                                                        Delasc();
                                                                    }
                                                                    alm[m + n] = -86052851;
                                                                    alm[m + n + 1] = -86052851;
                                                                }
                                                                alm[k + an4 * 4] = 131072;
                                                                alm[k + an4 * 4 + 1] = 0;
                                                                rmv = k * 4 + an4 * 16 + 4;
                                                                Delasc();
                                                                m = alm[k + an4 * 4 + 3] / 4;
                                                                for (n = 0; n < an5; n += 2)
                                                                {
                                                                    if (alm[m + n] == 2)
                                                                    {
                                                                        rmv = (m + n) * 4 + 4;
                                                                        Delasc();
                                                                    }
                                                                    alm[m + n] = -86052851;
                                                                    alm[m + n + 1] = -86052851;
                                                                }
                                                                alm[k + an4 * 4 + 2] = 131072;
                                                                alm[k + an4 * 4 + 3] = 0;
                                                                rmv = k * 4 + an4 * 16 + 12;
                                                                Delasc();
                                                            }
                                                            if (alm[k + 6] == 131072)
                                                            {
                                                                k -= 2;
                                                            }
                                                            n = k + 8;
                                                            while (n < an3)
                                                            {
                                                                if (alm[n] == 131072)
                                                                {
                                                                    for (m = n; m < an3; m += 2)
                                                                    {
                                                                        if (((alm[m + 2] >> 8) & 0xFF) != 0)
                                                                        {
                                                                            rmv = m * 4 + 12;
                                                                            for (mov = 0; mov < par; mov++)
                                                                            {
                                                                                if (asc[mov] == rmv)
                                                                                {
                                                                                    asc[mov] -= 8;
                                                                                    break;
                                                                                }
                                                                            }
                                                                        }
                                                                        alm[m] = alm[m + 2];
                                                                        alm[m + 1] = alm[m + 3];
                                                                    }
                                                                    alm[an3] = -86052851;
                                                                    alm[an3 + 1] = -86052851;
                                                                    an3 -= 2;
                                                                    alm[an3] = 0;
                                                                    alm[an3 + 1] = 0;
                                                                }
                                                                else
                                                                {
                                                                    n += 2;
                                                                }
                                                            }
                                                            an2 = an3 - 6;
                                                            k += 6;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (fnt == 0)
                            {
                                minitxt.Text = "Could not be Compressed.";
                                return;
                            }
                            if (fnt == 2)
                            {
                                EvList.Items.Clear();
                                mov = 0;
                                EvDesText.Text = "";
                                while (alm[j] != 0 && j < md)
                                {
                                    EveListstring();
                                    EvList.Items.Add(rd1);
                                    j += 2;
                                }
                            }
                            Fixam();
                            if (qe)
                            {
                                Qsave.Enabled = true;
                            }
                        }
                        else
                        {
                            minitxt.Text = "invalid Command.";
                        }
                    }
                    else
                    {
                        minitxt.Text = "invalid Command.";
                    }
                }
                else
                {
                    minitxt.Text = "invalid Command.";
                }
            }
            else
            {
                minitxt.Text = "invalid Command.";
            }
        }

        private void GenUsingUnkEvDt_Click(object sender, EventArgs e)
        {
            if (EveEtxd[0] != null)
            {
                GenUsingDt();
                k = rd2.Length;
                rd1 = "";
                m = 0;
                for (i = 0; i < k; i += 9)
                {
                    rd3 = rd2.Substring(i + 4, 5);
                    g = Convert.ToInt32(rd3, 16);
                    j = g / 4;
                    while (alm[j] != 0 && j < md)
                    {
                        if (alm[j] != -86052851)
                        {
                            h = 0;
                            n = alm[j];
                            while (EveEtid[h] != 0 && n != EveEtid[h])
                            {
                                h++;
                                if (h >= 500)
                                {
                                    h = 0;
                                    break;
                                }
                            }
                            if (n == EveEtid[h])
                            {
                                an5 = h;
                            }
                            else if (ViewEvPlus.Checked)
                            {
                                h = 0;
                                an5 = 16777216;
                                an1 = (n | 0xFFFF) - 65535;
                                while (EveEtid[h] != 0)
                                {
                                    if (EveEtid[h] >= an1 && EveEtid[h] < n)
                                    {
                                        an5 = h;
                                        break;
                                    }
                                    h++;
                                    if (h >= 500)
                                    {
                                        break;
                                    }
                                }
                            }
                            else
                            {
                                an5 = 16777216;
                            }
                            if (an5 > 500)
                            {
                                rd1 = rd1 + alm[j].ToString("X8") + m.ToString("X5") + rd2.Substring(i, 9);
                                m++;
                            }
                        }
                        j += 2;
                    }
                }
                if (m > 0)
                {
                    string[] array = new string[m];
                    if (m == 1)
                    {
                        array[0] = rd1;
                    }
                    else
                    {
                        for (i = 0; i < m; i++)
                        {
                            array[i] = rd1.Substring(i * 22, 22);
                        }
                        Array.Sort(array);
                    }
                    if (EvSubaCbList.Items.Count < 4)
                    {
                        for (i = 0; i < m; i++)
                        {
                            rd4 = array[i].Substring(0, 8);
                            rd2 = array[i].Substring(13);
                            GenUsingDtCommon();
                            array[i] = rd4 + rd3;
                        }
                    }
                    else
                    {
                        for (i = 0; i < m; i++)
                        {
                            rd4 = array[i].Substring(0, 8);
                            rd2 = array[i].Substring(13);
                            GenUsingDtNF();
                            array[i] = rd4 + rd3;
                        }
                    }
                    DataForm dataForm = new DataForm();
                    dataForm.dstr = array;
                    dataForm.Show(this);
                }
                else
                {
                    minitxt.Text = "Unknown Event Not Found.";
                }
            }
            else
            {
                minitxt.Text = "Cannot Search";
            }
        }

        private void GenUsingVarDt_Click(object sender, EventArgs e)
        {
            GenUsingDt();
            k = rd2.Length;
            rd1 = "";
            m = 0;
            for (i = 0; i < k; i += 9)
            {
                rd3 = rd2.Substring(i + 4, 5);
                g = Convert.ToInt32(rd3, 16);
                j = g / 4;
                while (alm[j] != 0 && j < md)
                {
                    if (alm[j] != -86052851)
                    {
                        h = ((alm[j] >> 8) & 0xFF);
                        if (h > 0 && alm[j + 1] >= 0 && alm[j + 1] < tds[25])
                        {
                            for (n = alm[j + 1] / 4; h > 0; h--)
                            {
                                if (alm[n] == 5)
                                {
                                    string text = rd1;
                                    rd1 = text + alm[n + 1].ToString("X8") + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                                    m++;
                                }
                                n += 2;
                            }
                        }
                    }
                    j += 2;
                }
            }
            if (m > 0)
            {
                string[] array = new string[m];
                if (m == 1)
                {
                    array[0] = rd1;
                }
                else
                {
                    for (i = 0; i < m; i++)
                    {
                        array[i] = rd1.Substring(i * 30, 30);
                    }
                    Array.Sort(array);
                }
                if (EvSubaCbList.Items.Count < 4)
                {
                    for (i = 0; i < m; i++)
                    {
                        rd4 = array[i].Substring(0, 8);
                        rd3 = array[i].Substring(13, 8);
                        h = 0;
                        n = -1;
                        while (EveEtxd[h] != null)
                        {
                            if (rd3 == EveEtxd[h])
                            {
                                n = h;
                                break;
                            }
                            h += 4;
                            if (h > 2000)
                            {
                                break;
                            }
                        }
                        if (n != -1)
                        {
                            rd3 = EveEtxd[n + 1];
                        }
                        else if (ViewEvPlus.Checked)
                        {
                            j = Convert.ToInt32(rd3, 16);
                            h = 0;
                            an5 = 16777216;
                            an1 = (j | 0xFFFF) - 65535;
                            while (EveEtid[h] != 0)
                            {
                                if (EveEtid[h] >= an1 && EveEtid[h] < j)
                                {
                                    an1 = EveEtid[h] + 1;
                                    an5 = h;
                                }
                                h++;
                                if (h >= 500)
                                {
                                    break;
                                }
                            }
                            if (an5 < 16777216)
                            {
                                rd3 = EveEtxd[an5 * 4 + 1] + "(+" + (j - EveEtid[an5]).ToString("X") + ")";
                            }
                        }
                        rd4 = rd4 + rd3 + "\r\n";
                        rd2 = array[i].Substring(21);
                        GenUsingDtCommon();
                        array[i] = rd4 + rd3;
                    }
                }
                else
                {
                    for (i = 0; i < m; i++)
                    {
                        rd4 = array[i].Substring(0, 8);
                        rd3 = array[i].Substring(13, 8);
                        h = 0;
                        n = -1;
                        while (EveEtxd[h] != null)
                        {
                            if (rd3 == EveEtxd[h])
                            {
                                n = h;
                                break;
                            }
                            h += 4;
                            if (h > 2000)
                            {
                                break;
                            }
                        }
                        if (n != -1)
                        {
                            rd3 = EveEtxd[n + 1];
                        }
                        else if (ViewEvPlus.Checked)
                        {
                            j = Convert.ToInt32(rd3, 16);
                            h = 0;
                            an5 = 16777216;
                            an1 = (j | 0xFFFF) - 65535;
                            while (EveEtid[h] != 0)
                            {
                                if (EveEtid[h] >= an1 && EveEtid[h] < j)
                                {
                                    an1 = EveEtid[h] + 1;
                                    an5 = h;
                                }
                                h++;
                                if (h >= 500)
                                {
                                    break;
                                }
                            }
                            if (an5 < 16777216)
                            {
                                rd3 = EveEtxd[an5 * 4 + 1] + "(+" + (j - EveEtid[an5]).ToString("X") + ")";
                            }
                        }
                        rd4 = rd4 + rd3 + "\r\n";
                        rd2 = array[i].Substring(21);
                        GenUsingDtNF();
                        array[i] = rd4 + rd3;
                    }
                }
                DataForm dataForm = new DataForm();
                dataForm.dstr = array;
                dataForm.Show(this);
            }
            else
            {
                minitxt.Text = "Using Variable Not Found.";
            }
        }

        private void GenBugDatas_Click(object sender, EventArgs e)
        {
            GenUsingDt();
            k = rd2.Length;
            rd1 = "";
            m = 0;
            an1 = 0;
            for (i = 10; i < 512; i++)
            {
                if (nonam[i] != 0)
                {
                    j = nonam[i] / 4;
                    if (alm[j] == -86052851)
                    {
                        string text = rd1;
                        rd1 = text + "0" + (m + 1046528).ToString("X5") + "FADEF00DZ100" + nonam[i].ToString("X5");
                        m++;
                    }
                }
            }
            for (i = 0; i < k; i += 9)
            {
                rd4 = rd2.Substring(i + 4, 5);
                g = Convert.ToInt32(rd4, 16);
                j = g / 4;
                rd4 = "";
                while (alm[j] != 0 && j < md)
                {
                    if (alm[j] == -86052851)
                    {
                        string text = rd1;
                        rd1 = text + "0" + m.ToString("X5") + "FADEF00D" + rd2.Substring(i, 9);
                        m++;
                        break;
                    }
                    if (alm[j] < 0)
                    {
                        h = 0;
                        n = alm[j];
                        while (EveEtid[h] != 0 && n != EveEtid[h])
                        {
                            h++;
                            if (h >= 500)
                            {
                                h = 0;
                                break;
                            }
                        }
                        if (n == EveEtid[h])
                        {
                            an5 = h;
                        }
                        else if (ViewEvPlus.Checked)
                        {
                            h = 0;
                            an5 = 16777216;
                            an3 = (n | 0xFFFF) - 65535;
                            while (EveEtid[h] != 0)
                            {
                                if (EveEtid[h] >= an3 && EveEtid[h] < n)
                                {
                                    an5 = h;
                                    break;
                                }
                                h++;
                                if (h >= 500)
                                {
                                    break;
                                }
                            }
                        }
                        else
                        {
                            an5 = 16777216;
                        }
                        if (an5 > 500)
                        {
                            string text = rd1;
                            rd1 = text + "1" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                            m++;
                        }
                    }
                    else if (alm[j] < 65536)
                    {
                        string text = rd1;
                        rd1 = text + "1" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                        m++;
                    }
                    n = ((alm[j] >> 16) & 0xFFFF);
                    if (n == 10)
                    {
                        rd4 += "0";
                    }
                    else if (n == 4)
                    {
                        rd4 += "1";
                    }
                    else if (n == 16)
                    {
                        rd4 += "2";
                    }
                    else if (n == 15)
                    {
                        h = rd4.Length;
                        if (h > 0)
                        {
                            if (rd4[h - 1] != '0')
                            {
                                string text = rd1;
                                rd1 = text + "4" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                                m++;
                            }
                            if (h > 1)
                            {
                                rd4 = rd4.Substring(0, h - 1);
                            }
                            else
                            {
                                rd4 = "";
                            }
                        }
                        else
                        {
                            string text = rd1;
                            rd1 = text + "4" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                            m++;
                        }
                    }
                    else if (n == 5)
                    {
                        h = rd4.Length;
                        if (h > 0)
                        {
                            if (rd4[h - 1] != '1')
                            {
                                string text = rd1;
                                rd1 = text + "4" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                                m++;
                            }
                            if (h > 1)
                            {
                                rd4 = rd4.Substring(0, h - 1);
                            }
                            else
                            {
                                rd4 = "";
                            }
                        }
                        else
                        {
                            string text = rd1;
                            rd1 = text + "4" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                            m++;
                        }
                    }
                    else if (n == 19)
                    {
                        h = rd4.Length;
                        if (h > 0)
                        {
                            if (rd4[h - 1] != '2')
                            {
                                string text = rd1;
                                rd1 = text + "4" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                                m++;
                            }
                            if (h > 1)
                            {
                                rd4 = rd4.Substring(0, h - 1);
                            }
                            else
                            {
                                rd4 = "";
                            }
                        }
                        else
                        {
                            string text = rd1;
                            rd1 = text + "4" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                            m++;
                        }
                    }
                    else if (n == 11 || n == 12 || n == 13 || n == 14)
                    {
                        h = rd4.Length;
                        if (h > 0)
                        {
                            if (rd4[h - 1] != '0')
                            {
                                string text = rd1;
                                rd1 = text + "4" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                                m++;
                            }
                        }
                        else
                        {
                            string text = rd1;
                            rd1 = text + "4" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                            m++;
                        }
                    }
                    else if (n == 17 || n == 18)
                    {
                        h = rd4.Length;
                        if (h > 0)
                        {
                            if (rd4[h - 1] != '2')
                            {
                                string text = rd1;
                                rd1 = text + "4" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                                m++;
                            }
                        }
                        else
                        {
                            string text = rd1;
                            rd1 = text + "4" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                            m++;
                        }
                    }
                    else if (alm[j] == 590080)
                    {
                        if (alm[j + 2] != 0)
                        {
                            h = rd4.Length;
                            for (an3 = j + 2; an3 < md; an3 += 2)
                            {
                                if (alm[an3] == 0)
                                {
                                    an3 = 0;
                                    break;
                                }
                                if (alm[an3] != 131072)
                                {
                                    if (h > 0)
                                    {
                                        n = ((alm[an3] >> 16) & 0xFFFF);
                                        if (n == 13 || n == 14 || n == 17 || n == 18 || n == 15 || n == 19)
                                        {
                                            an3 = 0;
                                        }
                                    }
                                    break;
                                }
                            }
                            if (an3 != 0)
                            {
                                string text = rd1;
                                rd1 = text + "9" + m.ToString("X5") + alm[an3].ToString("X8") + rd2.Substring(i, 9);
                                m++;
                            }
                        }
                    }
                    else if (alm[j] == 16842752)
                    {
                        for (h = g / 4; h < j; h += 2)
                        {
                            if (alm[h] == 459008)
                            {
                                n = alm[h + 1] / 4;
                                if (n >= stf && n < md)
                                {
                                    an4 = alm[n + 1] / 4;
                                    if (an4 >= stf && an4 < md)
                                    {
                                        rmv = alm[n + 1];
                                        for (mov = 0; mov < tds[28]; mov++)
                                        {
                                            an3 = rnext[(tds[27] + mov) * 2];
                                            if (an3 >= 8096 && an3 < tds[25])
                                            {
                                                if (rmv == an3)
                                                {
                                                    break;
                                                }
                                                if (an3 >= 8096 && an3 < tds[25])
                                                {
                                                    for (an5 = 0; an5 < 100; an5++)
                                                    {
                                                        n = an3 / 4;
                                                        an3 = alm[n];
                                                        if (an3 < 8096 || an3 >= tds[25] || rmv == an3)
                                                        {
                                                            break;
                                                        }
                                                    }
                                                    if (rmv == an3)
                                                    {
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        if (mov >= tds[28])
                                        {
                                            while (an4 < md)
                                            {
                                                if (alm[an4] >= 67174912 && alm[an4] < 67305472)
                                                {
                                                    an4 = 0;
                                                    break;
                                                }
                                                if (alm[an4] == 0)
                                                {
                                                    break;
                                                }
                                                an4 += 2;
                                            }
                                            if (an4 == 0)
                                            {
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            else if (alm[h] >= 67174912 && alm[h] < 67305472)
                            {
                                break;
                            }
                        }
                        if (h >= j)
                        {
                            string text = rd1;
                            rd1 = text + "9" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                            m++;
                        }
                    }
                    h = ((alm[j] >> 8) & 0xFF);
                    if (h > 0)
                    {
                        if (alm[j + 1] >= stf * 4 && alm[j + 1] < tds[25])
                        {
                            for (n = alm[j + 1] / 4; h > 0; h--)
                            {
                                if (alm[n] >= 0 && alm[n] < 7)
                                {
                                    if (alm[n] == 2)
                                    {
                                        rmv = n * 4 + 4;
                                        if (alm[n + 1] == 0)
                                        {
                                            Delasc();
                                            if (mov < par)
                                            {
                                                an1++;
                                            }
                                        }
                                        else
                                        {
                                            for (an3 = 0; an3 < tds[28]; an3++)
                                            {
                                                an4 = rnext[(tds[27] + an3) * 2];
                                                if (an4 >= 8096 && an4 < tds[25])
                                                {
                                                    if (rmv == an4)
                                                    {
                                                        break;
                                                    }
                                                    if (an4 >= 8096 && an4 < tds[25])
                                                    {
                                                        for (an5 = 0; an5 < 100; an5++)
                                                        {
                                                            mov = an4 / 4;
                                                            an4 = alm[mov];
                                                            if (an4 < 8096 || an4 >= tds[25] || rmv == an4)
                                                            {
                                                                break;
                                                            }
                                                        }
                                                        if (rmv == an4)
                                                        {
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                            if (an3 < tds[28])
                                            {
                                                Delasc();
                                                if (mov < par)
                                                {
                                                    an1++;
                                                }
                                            }
                                            else if (alm[n + 1] >= stf * 4 && alm[n + 1] < tds[25])
                                            {
                                                if (alm[n + 1] % 4 == 0)
                                                {
                                                    mov = 0;
                                                    while (mov < par && asc[mov] != rmv)
                                                    {
                                                        mov++;
                                                    }
                                                    if (mov >= par)
                                                    {
                                                        asc[par] = rmv;
                                                        par++;
                                                        tds[26]++;
                                                        an1++;
                                                    }
                                                }
                                                else
                                                {
                                                    string text = rd1;
                                                    rd1 = text + "3" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                                                    m++;
                                                }
                                            }
                                            else
                                            {
                                                string text = rd1;
                                                rd1 = text + "3" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                                                m++;
                                                if (alm[n + 1] < 1)
                                                {
                                                    Delasc();
                                                    if (mov < par)
                                                    {
                                                        an1++;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (alm[n] == 3)
                                    {
                                        if (alm[n + 1] != 0 && alm[n + 1] != 1)
                                        {
                                            string text = rd1;
                                            rd1 = text + "3" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                                            m++;
                                        }
                                    }
                                    else if (alm[n] == 4)
                                    {
                                        rmv = n * 4 + 4;
                                        if (alm[n + 1] >= stf * 4 && alm[n + 1] < tds[25])
                                        {
                                            if (alm[n + 1] % 4 == 0)
                                            {
                                                mov = 0;
                                                while (mov < par && asc[mov] != rmv)
                                                {
                                                    mov++;
                                                }
                                                if (mov >= par)
                                                {
                                                    asc[par] = rmv;
                                                    par++;
                                                    tds[26]++;
                                                    an1++;
                                                }
                                            }
                                            else
                                            {
                                                string text = rd1;
                                                rd1 = text + "3" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                                                m++;
                                            }
                                        }
                                        else
                                        {
                                            string text = rd1;
                                            rd1 = text + "3" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                                            m++;
                                        }
                                    }
                                    else if (alm[n] == 5)
                                    {
                                        if (((alm[n + 1] >> 28) & 0xF) > 2 || ((alm[n + 1] >> 24) & 0xF) > 2)
                                        {
                                            string text = rd1;
                                            rd1 = text + "3" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                                            m++;
                                        }
                                    }
                                    else if (alm[n] == 6)
                                    {
                                        an3 = ((alm[n + 1] >> 16) & 0xFFFF);
                                        an4 = (alm[n + 1] & 0xFFFF);
                                        if (an3 == 32768 || an3 == 0)
                                        {
                                            if (an4 >= 128 && (an4 < 9999 || an4 > 10021))
                                            {
                                                string text = rd1;
                                                rd1 = text + "3" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                                                m++;
                                            }
                                        }
                                        else
                                        {
                                            string text = rd1;
                                            rd1 = text + "3" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                                            m++;
                                        }
                                    }
                                }
                                else
                                {
                                    string text = rd1;
                                    rd1 = text + "2" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                                    m++;
                                }
                                n += 2;
                            }
                        }
                        else
                        {
                            string text = rd1;
                            rd1 = text + "7" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                            m++;
                        }
                    }
                    else if (alm[j + 1] != 0)
                    {
                        string text = rd1;
                        rd1 = text + "7" + m.ToString("X5") + alm[j].ToString("X8") + rd2.Substring(i, 9);
                        m++;
                    }
                    j += 2;
                }
                h = rd4.Length;
                if (h > 0)
                {
                    for (n = 0; n < h; n++)
                    {
                        if (rd4[n] == '1')
                        {
                            string text = rd1;
                            rd1 = text + "5" + m.ToString("X5") + "00000000" + rd2.Substring(i, 9);
                            m++;
                            break;
                        }
                    }
                }
            }
            an5 = stf * 4;
            if (EvSubaCbList.Items.Count < 4)
            {
                i = alm[dat + 4] / 4;
                g = i + 274;
                for (an2 = i; i < g; i++)
                {
                    GenUsingDtFix();
                    if (rmv == -1)
                    {
                        rd1 = rd1 + "K" + (i - an2).ToString("X3") + "00000";
                    }
                    else if (rmv == -2)
                    {
                        rd1 = rd1 + "K" + (i - an2).ToString("X3") + alm[i].ToString("X5");
                    }
                }
                i = alm[dat + 5] / 4;
                g = i + 274;
                for (an2 = i; i < g; i++)
                {
                    GenUsingDtFix();
                    if (rmv == -1)
                    {
                        rd1 = rd1 + "L" + (i - an2).ToString("X3") + "00000";
                    }
                    else if (rmv == -2)
                    {
                        rd1 = rd1 + "L" + (i - an2).ToString("X3") + alm[i].ToString("X5");
                    }
                }
            }
            else
            {
                i = alm[dat + 9] / 4;
                g = i + spas;
                for (an2 = i; i < g; i++)
                {
                    GenUsingDtFix();
                    if (rmv == -1)
                    {
                        rd1 = rd1 + "K" + (i - an2 + 274).ToString("X3") + "00000";
                    }
                    else if (rmv == -2)
                    {
                        rd1 = rd1 + "K" + (i - an2 + 274).ToString("X3") + alm[i].ToString("X5");
                    }
                }
                i = alm[dat + 10] / 4;
                g = i + spas;
                for (an2 = i; i < g; i++)
                {
                    GenUsingDtFix();
                    if (rmv == -1)
                    {
                        rd1 = rd1 + "L" + (i - an2 + 274).ToString("X3") + "00000";
                    }
                    else if (rmv == -2)
                    {
                        rd1 = rd1 + "L" + (i - an2 + 274).ToString("X3") + alm[i].ToString("X5");
                    }
                }
                i = alm[dat] / 4 + 1;
                for (g = i + suba * 2; i < g; i += 2)
                {
                    rmv = i * 4;
                    if (alm[i] >= an5 && alm[i] < tds[25])
                    {
                        mov = 0;
                        while (mov < par && asc[mov] != rmv)
                        {
                            mov++;
                        }
                        if (mov >= par)
                        {
                            asc[par] = rmv;
                            par++;
                            tds[26]++;
                            an1++;
                        }
                    }
                    else
                    {
                        Delasc();
                        if (mov < par)
                        {
                            an1++;
                        }
                        if (alm[i] != 0)
                        {
                            alm[i] = 0;
                            an1++;
                        }
                    }
                }
                i = alm[dat + 12] / 4;
                g = i + suba;
                for (an2 = i; i < g; i++)
                {
                    GenUsingDtFix();
                    if (rmv == -1)
                    {
                        rd1 = rd1 + "M" + (i - an2).ToString("X3") + "00000";
                    }
                    else if (rmv == -2)
                    {
                        rd1 = rd1 + "M" + (i - an2).ToString("X3") + alm[i].ToString("X5");
                    }
                }
                i = alm[dat + 13] / 4;
                g = i + suba;
                for (an2 = i; i < g; i++)
                {
                    GenUsingDtFix();
                    if (rmv == -1)
                    {
                        rd1 = rd1 + "N" + (i - an2).ToString("X3") + "00000";
                    }
                    else if (rmv == -2)
                    {
                        rd1 = rd1 + "N" + (i - an2).ToString("X3") + alm[i].ToString("X5");
                    }
                }
                i = alm[dat + 14] / 4;
                g = i + suba;
                for (an2 = i; i < g; i++)
                {
                    GenUsingDtFix();
                    if (rmv == -1)
                    {
                        rd1 = rd1 + "O" + (i - an2).ToString("X3") + "00000";
                    }
                    else if (rmv == -2)
                    {
                        rd1 = rd1 + "O" + (i - an2).ToString("X3") + alm[i].ToString("X5");
                    }
                }
                i = alm[dat + 15] / 4;
                g = i + suba;
                for (an2 = i; i < g; i++)
                {
                    GenUsingDtFix();
                    if (rmv == -1)
                    {
                        rd1 = rd1 + "P" + (i - an2).ToString("X3") + "00000";
                    }
                    else if (rmv == -2)
                    {
                        rd1 = rd1 + "P" + (i - an2).ToString("X3") + alm[i].ToString("X5");
                    }
                }
                if (EvSubaCbList.Items.Count == 8)
                {
                    i = alm[dat + 31] / 4;
                    g = i + suba;
                    for (an2 = i; i < g; i++)
                    {
                        GenUsingDtFix();
                        if (rmv == -1)
                        {
                            rd1 = rd1 + "Q" + (i - an2).ToString("X3") + "00000";
                        }
                        else if (rmv == -2)
                        {
                            rd1 = rd1 + "Q" + (i - an2).ToString("X3") + alm[i].ToString("X5");
                        }
                    }
                    i = alm[dat + 32] / 4;
                    g = i + suba;
                    for (an2 = i; i < g; i++)
                    {
                        GenUsingDtFix();
                        if (rmv == -1)
                        {
                            rd1 = rd1 + "R" + (i - an2).ToString("X3") + "00000";
                        }
                        else if (rmv == -2)
                        {
                            rd1 = rd1 + "R" + (i - an2).ToString("X3") + alm[i].ToString("X5");
                        }
                    }
                    i = alm[dat + 33] / 4;
                    g = i + suba;
                    for (an2 = i; i < g; i++)
                    {
                        GenUsingDtFix();
                        if (rmv == -1)
                        {
                            rd1 = rd1 + "S" + (i - an2).ToString("X3") + "00000";
                        }
                        else if (rmv == -2)
                        {
                            rd1 = rd1 + "S" + (i - an2).ToString("X3") + alm[i].ToString("X5");
                        }
                    }
                    i = alm[dat + 34] / 4;
                    g = i + suba;
                    for (an2 = i; i < g; i++)
                    {
                        GenUsingDtFix();
                        if (rmv == -1)
                        {
                            rd1 = rd1 + "T" + (i - an2).ToString("X3") + "00000";
                        }
                        else if (rmv == -2)
                        {
                            rd1 = rd1 + "T" + (i - an2).ToString("X3") + alm[i].ToString("X5");
                        }
                    }
                }
                an3 = 274 + spas;
                if (alm[dat + 20] >= 8096 && alm[dat + 20] < tds[25])
                {
                    i = alm[dat + 20] / 4 + 1;
                    n = i;
                    for (an2 = i; i < md; i += 2)
                    {
                        if (alm[i - 1] < 0)
                        {
                            if (alm[i - 1] != -1)
                            {
                                alm[i - 1] = -1;
                                alm[i] = 0;
                                an1++;
                                rmv = i * 4;
                                Delasc();
                            }
                            break;
                        }
                        if (alm[i - 1] >= an3)
                        {
                            string text = rd1;
                            rd1 = text + "A" + m.ToString("X5") + "00000000V" + (i - n).ToString("X8");
                            m++;
                        }
                        GenUsingDtFix();
                        if (rmv == -1)
                        {
                            rd1 = rd1 + "V" + (i - an2).ToString("X3") + "00000";
                        }
                        else if (rmv == -2)
                        {
                            rd1 = rd1 + "V" + (i - an2).ToString("X3") + alm[i].ToString("X5");
                        }
                    }
                }
                if (alm[dat + 21] >= 8096 && alm[dat + 21] < tds[25])
                {
                    i = alm[dat + 21] / 4 + 1;
                    n = i;
                    for (an2 = i; i < md; i += 2)
                    {
                        if (alm[i - 1] < 0)
                        {
                            if (alm[i - 1] != -1)
                            {
                                alm[i - 1] = -1;
                                alm[i] = 0;
                                an1++;
                                rmv = i * 4;
                                Delasc();
                            }
                            break;
                        }
                        if (alm[i - 1] >= an3)
                        {
                            string text = rd1;
                            rd1 = text + "A" + m.ToString("X5") + "00000000W" + (i - n).ToString("X8");
                            m++;
                        }
                        GenUsingDtFix();
                        if (rmv == -1)
                        {
                            rd1 = rd1 + "W" + (i - an2).ToString("X3") + "00000";
                        }
                        else if (rmv == -2)
                        {
                            rd1 = rd1 + "W" + (i - an2).ToString("X3") + alm[i].ToString("X5");
                        }
                    }
                }
                i = alm[dat + 11] / 4;
                g = i + 274 + spas;
                for (an2 = i; i < g; i++)
                {
                    n = i * 4;
                    for (h = 0; h < tds[28]; h++)
                    {
                        j = rnext[(tds[27] + h) * 2];
                        if (j >= an5 && j < tds[25])
                        {
                            if (n == j)
                            {
                                break;
                            }
                            if (j >= an5 && j < tds[25])
                            {
                                for (an3 = 0; an3 < 100; an3++)
                                {
                                    k = j / 4;
                                    j = alm[k];
                                    if (j < an5 || j >= tds[25] || n == j)
                                    {
                                        break;
                                    }
                                }
                                if (n == j)
                                {
                                    break;
                                }
                            }
                        }
                    }
                    if (n == j)
                    {
                        rmv = i * 4;
                        Delasc();
                        if (mov < par)
                        {
                            an1++;
                        }
                    }
                    else
                    {
                        GenUsingDtFix();
                        if (rmv == -1)
                        {
                            rd1 = rd1 + "X" + (i - an2).ToString("X3") + "00000";
                        }
                        else if (rmv == -2)
                        {
                            rd1 = rd1 + "X" + (i - an2).ToString("X3") + alm[i].ToString("X5");
                        }
                    }
                }
                if (ArticleIDCb.Items.Count > 1)
                {
                    for (an2 = 1; an2 < ArticleIDCb.Items.Count; an2++)
                    {
                        int num = 0;
                        i = 1;
                        while (CharPar[i].Length >= 7)
                        {
                            rd4 = CharPar[i].Substring(4, 3);
                            if (rd4 == "Art")
                            {
                                num++;
                                if (num == an2)
                                {
                                    rd4 = CharPar[i].Substring(4);
                                    for (num = 2; CharPar[num] != null && !(CharPar[num] == rd4); num++)
                                    {
                                    }
                                    if (!(CharPar[num] == rd4))
                                    {
                                        break;
                                    }
                                    rd4 = CharPar[i].Substring(0, 3);
                                    g = Convert.ToInt32(rd4, 16);
                                    an3 = alm[dat + g / 4] / 4;
                                    if (CharPar[num + 1].Length > 5)
                                    {
                                        break;
                                    }
                                    rd4 = CharPar[num + 1];
                                    k = rd4.Length - 1;
                                    fnt = 1;
                                    for (h = 1; h < k; h++)
                                    {
                                        if (rd4[h] == '-')
                                        {
                                            fnt = 0;
                                            break;
                                        }
                                    }
                                    if (fnt == 0)
                                    {
                                        rd2 = rd4.Substring(0, h);
                                        rd3 = rd4.Substring(h + 1);
                                        for (k = 0; k < h; k++)
                                        {
                                            if (!Uri.IsHexDigit(rd2[k]))
                                            {
                                                fnt = 1;
                                                break;
                                            }
                                        }
                                        if (fnt == 0)
                                        {
                                            h = rd3.Length;
                                            for (k = 0; k < h; k++)
                                            {
                                                if (!Uri.IsHexDigit(rd3[k]))
                                                {
                                                    fnt = 1;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    if (fnt != 0)
                                    {
                                        break;
                                    }
                                    h = Convert.ToInt32(rd2, 16);
                                    if (h > 0)
                                    {
                                        if (alm[an3 + 5] > 8096 && alm[an3 + 5] < tds[25])
                                        {
                                            i = alm[an3 + 5] / 4;
                                            g = i + h;
                                            for (an4 = i; i < g; i++)
                                            {
                                                GenUsingDtFix();
                                                if (rmv == -1)
                                                {
                                                    string text = rd1;
                                                    rd1 = text + (an2 - 1).ToString("X") + "K" + (i - an4).ToString("X2") + "00000";
                                                }
                                                else if (rmv == -2)
                                                {
                                                    string text = rd1;
                                                    rd1 = text + (an2 - 1).ToString("X") + "K" + (i - an4).ToString("X2") + alm[i].ToString("X5");
                                                }
                                            }
                                        }
                                        if (CharPar[num + 2] == "034 ActionExit")
                                        {
                                            i = alm[an3 + 13] / 4;
                                            g = i + h;
                                            for (an4 = i; i < g; i++)
                                            {
                                                GenUsingDtFix();
                                                if (rmv == -1)
                                                {
                                                    string text = rd1;
                                                    rd1 = text + (an2 - 1).ToString("X") + "L" + (i - an4).ToString("X2") + "00000";
                                                }
                                                else if (rmv == -2)
                                                {
                                                    string text = rd1;
                                                    rd1 = text + (an2 - 1).ToString("X") + "L" + (i - an4).ToString("X2") + alm[i].ToString("X5");
                                                }
                                            }
                                        }
                                    }
                                    h = Convert.ToInt32(rd3, 16);
                                    if (h <= 0 || alm[an3 + 4] <= 8096 || alm[an3 + 4] >= tds[25])
                                    {
                                        break;
                                    }
                                    if (alm[an3 + 6] > 8096 && alm[an3 + 6] < tds[25])
                                    {
                                        i = alm[an3 + 6] / 4;
                                        g = i + h;
                                        for (an4 = i; i < g; i++)
                                        {
                                            GenUsingDtFix();
                                            if (rmv == -1)
                                            {
                                                string text = rd1;
                                                rd1 = text + (an2 - 1).ToString("X") + "M" + (i - an4).ToString("X2") + "00000";
                                            }
                                            else if (rmv == -2)
                                            {
                                                string text = rd1;
                                                rd1 = text + (an2 - 1).ToString("X") + "M" + (i - an4).ToString("X2") + alm[i].ToString("X5");
                                            }
                                        }
                                    }
                                    if (alm[an3 + 7] > 8096 && alm[an3 + 7] < tds[25])
                                    {
                                        i = alm[an3 + 7] / 4;
                                        g = i + h;
                                        for (an4 = i; i < g; i++)
                                        {
                                            GenUsingDtFix();
                                            if (rmv == -1)
                                            {
                                                string text = rd1;
                                                rd1 = text + (an2 - 1).ToString("X") + "N" + (i - an4).ToString("X2") + "00000";
                                            }
                                            else if (rmv == -2)
                                            {
                                                string text = rd1;
                                                rd1 = text + (an2 - 1).ToString("X") + "N" + (i - an4).ToString("X2") + alm[i].ToString("X5");
                                            }
                                        }
                                    }
                                    if (alm[an3 + 8] > 8096 && alm[an3 + 8] < tds[25])
                                    {
                                        i = alm[an3 + 8] / 4;
                                        g = i + h;
                                        for (an4 = i; i < g; i++)
                                        {
                                            GenUsingDtFix();
                                            if (rmv == -1)
                                            {
                                                string text = rd1;
                                                rd1 = text + (an2 - 1).ToString("X") + "O" + (i - an4).ToString("X2") + "00000";
                                            }
                                            else if (rmv == -2)
                                            {
                                                string text = rd1;
                                                rd1 = text + (an2 - 1).ToString("X") + "O" + (i - an4).ToString("X2") + alm[i].ToString("X5");
                                            }
                                        }
                                    }
                                    for (num += 2; CharPar[num] != null && CharPar[num].Length >= 4; num++)
                                    {
                                        rd2 = CharPar[num].Substring(0, 3);
                                        fnt = 0;
                                        for (g = 0; g < 3; g++)
                                        {
                                            if (!Uri.IsHexDigit(rd2[g]))
                                            {
                                                fnt = 1;
                                                break;
                                            }
                                        }
                                        if (fnt != 0)
                                        {
                                            break;
                                        }
                                        n = Convert.ToInt32(rd2, 16);
                                        g = alm[an3 + n / 4];
                                        if (g <= 8096 || g > tds[25])
                                        {
                                            n = 0;
                                        }
                                        if (n % 4 != 0)
                                        {
                                            break;
                                        }
                                        g = CharPar[num].Length - 1;
                                        fnt = 1;
                                        if (CharPar[num].Length < 15)
                                        {
                                            continue;
                                        }
                                        rd4 = CharPar[num].Substring(4, 10);
                                        if (!(rd4 == "SubAction "))
                                        {
                                            continue;
                                        }
                                        i = alm[an3 + n / 4] / 4;
                                        g = i + h;
                                        for (an4 = i; i < g; i++)
                                        {
                                            GenUsingDtFix();
                                            if (rmv == -1)
                                            {
                                                string text = rd1;
                                                rd1 = text + (an2 - 1).ToString("X") + "V" + (i - an4).ToString("X2") + num.ToString("X5");
                                            }
                                            else if (rmv == -2)
                                            {
                                                string text = rd1;
                                                rd1 = text + (an2 - 1).ToString("X") + "V" + (i - an4).ToString("X2") + alm[i].ToString("X5");
                                            }
                                        }
                                    }
                                    break;
                                }
                            }
                            i++;
                        }
                    }
                }
                if (alm[dat + 22] >= an5 && alm[dat + 22] < tds[25])
                {
                    i = alm[dat + 22] / 4 + 2;
                    GenUsingDtFix();
                    if (rmv == -1)
                    {
                        rd1 += "Y00000000";
                    }
                    else if (rmv == -2)
                    {
                        rd1 = rd1 + "Y000" + alm[i].ToString("X5");
                    }
                }
                if (alm[dat + 25] >= an5 && alm[dat + 25] < tds[25])
                {
                    k = alm[dat + 25] / 4;
                    if (alm[k] >= an5 && alm[k] < tds[25])
                    {
                        h = alm[k] / 4;
                        g = alm[k + 1];
                        if (g > 0 && g < 21)
                        {
                            for (j = 0; j < g; j++)
                            {
                                if (alm[h + 13] > 0 && alm[h + 13] < 11)
                                {
                                    k = alm[h + 13];
                                    if (alm[h + 4] >= an5 && alm[h + 4] < tds[25])
                                    {
                                        i = alm[h + 4] / 4 + 1;
                                        for (n = i + k * 2; i < n; i += 2)
                                        {
                                            rmv = i * 4;
                                            if (alm[i] >= an5 && alm[i] < tds[25])
                                            {
                                                mov = 0;
                                                while (mov < par && asc[mov] != rmv)
                                                {
                                                    mov++;
                                                }
                                                if (mov >= par)
                                                {
                                                    asc[par] = rmv;
                                                    par++;
                                                    tds[26]++;
                                                    an1++;
                                                }
                                            }
                                            else
                                            {
                                                Delasc();
                                                if (mov < par)
                                                {
                                                    an1++;
                                                }
                                                if (alm[i] != 0)
                                                {
                                                    alm[i] = 0;
                                                    an1++;
                                                }
                                            }
                                        }
                                    }
                                    if (alm[h + 7] >= an5 && alm[h + 7] < tds[25])
                                    {
                                        i = alm[h + 7] / 4;
                                        for (n = i + k; i < n; i++)
                                        {
                                            rmv = i * 4;
                                            if (alm[i] >= an5 && alm[i] < tds[25])
                                            {
                                                mov = 0;
                                                while (mov < par && asc[mov] != rmv)
                                                {
                                                    mov++;
                                                }
                                                if (mov >= par)
                                                {
                                                    asc[par] = rmv;
                                                    par++;
                                                    tds[26]++;
                                                    an1++;
                                                }
                                            }
                                            else
                                            {
                                                Delasc();
                                                if (mov < par)
                                                {
                                                    an1++;
                                                }
                                                if (alm[i] != 0)
                                                {
                                                    alm[i] = 0;
                                                    an1++;
                                                }
                                            }
                                        }
                                    }
                                }
                                h += 14;
                            }
                        }
                    }
                }
                if (alm[dat + 26] >= an5 && alm[dat + 26] < tds[25])
                {
                    h = alm[dat + 26] / 4;
                    if (alm[h + 4] >= an5 && alm[h + 4] < tds[25])
                    {
                        i = alm[h + 4] / 4 + 1;
                        for (n = i + 4; i < n; i += 2)
                        {
                            rmv = i * 4;
                            if (alm[i] >= an5 && alm[i] < tds[25])
                            {
                                mov = 0;
                                while (mov < par && asc[mov] != rmv)
                                {
                                    mov++;
                                }
                                if (mov >= par)
                                {
                                    asc[par] = rmv;
                                    par++;
                                    tds[26]++;
                                    an1++;
                                }
                            }
                            else
                            {
                                Delasc();
                                if (mov < par)
                                {
                                    an1++;
                                }
                                if (alm[i] != 0)
                                {
                                    alm[i] = 0;
                                    an1++;
                                }
                            }
                        }
                    }
                    if (alm[h + 7] >= an5 && alm[h + 7] < tds[25])
                    {
                        i = alm[h + 7] / 4;
                        for (n = i + 2; i < n; i++)
                        {
                            rmv = i * 4;
                            if (alm[i] >= an5 && alm[i] < tds[25])
                            {
                                mov = 0;
                                while (mov < par && asc[mov] != rmv)
                                {
                                    mov++;
                                }
                                if (mov >= par)
                                {
                                    asc[par] = rmv;
                                    par++;
                                    tds[26]++;
                                    an1++;
                                }
                            }
                            else
                            {
                                Delasc();
                                if (mov < par)
                                {
                                    an1++;
                                }
                                if (alm[i] != 0)
                                {
                                    alm[i] = 0;
                                    an1++;
                                }
                            }
                        }
                    }
                }
            }
            Array.Sort(asc);
            par = tds[26];
            k = par - 1;
            for (i = 0; i < k; i++)
            {
                if (asc[i] == asc[i + 1])
                {
                    tds[26]--;
                    asc[i] = 16777216;
                    an1++;
                }
            }
            if (EvSubaCbList.Items.Count < 4)
            {
                an5 = 0;
            }
            for (i = 0; i < par; i++)
            {
                if (asc[i] != 16777216)
                {
                    if (asc[i] < an5 || asc[i] >= tds[25])
                    {
                        tds[26]--;
                        asc[i] = 16777216;
                        an1++;
                    }
                    else
                    {
                        j = asc[i] / 4;
                        if (alm[j] < 0 || alm[j] >= tds[25])
                        {
                            tds[26]--;
                            asc[i] = 16777216;
                            an1++;
                        }
                    }
                }
            }
            if (an1 > 0)
            {
                minitxt.Text = "Fixed " + an1 + " Data.";
                if (qe)
                {
                    Qsave.Enabled = true;
                }
            }
            else
            {
                minitxt.Text = "";
            }
            an3 = m;
            if (EvSubaCbList.Items.Count >= 4)
            {
                g = alm[dat + 8] / 4;
                if (g >= stf && g < md)
                {
                    m = alm[g];
                    n = alm[g] + alm[g + 1] * 4;
                }
                else
                {
                    m = 0;
                    n = 0;
                }
                k = alm[dat + 11] + 1095 + spas * 4;
                g = 0;
                for (i = 0; i < tds[28]; i++)
                {
                    h = rnext[(tds[27] + i) * 2];
                    if (h % 4 != 0)
                    {
                        if (h != -1)
                        {
                            rnext[(tds[27] + i) * 2] = -1;
                            g++;
                        }
                    }
                    else if (h >= an5 && h < tds[25])
                    {
                        j = h / 4;
                        if (alm[j] >= an5 && alm[j] < tds[25])
                        {
                            for (an4 = 0; an4 < 100; an4++)
                            {
                                an1 = alm[j];
                                an2 = j;
                                if (an1 >= an5 && an1 < tds[25] && an1 % 4 == 0)
                                {
                                    j = an1 / 4;
                                    if (alm[j - 1] != 2 && (an1 < alm[dat + 11] || an1 > k) && (an1 < m || an1 > n))
                                    {
                                        alm[an2] = -1;
                                        g++;
                                        break;
                                    }
                                }
                                else if (alm[j] != -1)
                                {
                                    alm[j] = -1;
                                    g++;
                                    break;
                                }
                            }
                        }
                        else if (alm[j - 1] != 2)
                        {
                            if ((h < alm[dat + 11] || h > k) && (h < m || h > n))
                            {
                                rnext[(tds[27] + i) * 2] = -1;
                                g++;
                            }
                            else if (alm[j] != -1)
                            {
                                alm[j] = -1;
                                g++;
                            }
                        }
                        else if (alm[j] != -1)
                        {
                            alm[j] = -1;
                            g++;
                        }
                    }
                    else
                    {
                        rnext[(tds[27] + i) * 2] = -1;
                        g++;
                    }
                }
                if (g > 0)
                {
                    if (minitxt.Text == "")
                    {
                        minitxt.Text = "Fixed " + g + " External Data.";
                    }
                    else
                    {
                        TextBox textBox = minitxt;
                        textBox.Text = textBox.Text + " Fixed " + g + " External Data.";
                    }
                }
            }
            Fixam();
            m = an3;
            if (m > 0)
            {
                string[] array = new string[m];
                if (m == 1)
                {
                    array[0] = rd1;
                }
                else
                {
                    for (i = 0; i < m; i++)
                    {
                        array[i] = rd1.Substring(i * 23, 23);
                    }
                    Array.Sort(array);
                }
                if (EvSubaCbList.Items.Count < 4)
                {
                    for (i = 0; i < m; i++)
                    {
                        if (array[i][0] == '0')
                        {
                            rd2 = array[i].Substring(14);
                            if (rd2[0] == 'Z' && rd2[1] == '1')
                            {
                                rd4 = "Error Event Sub Routine (FADEF00D)\r\nFADEF00D";
                                if (rd2[4] == '0')
                                {
                                    rd3 = "Sub Routine - Offset:" + rd2.Substring(5);
                                }
                                else
                                {
                                    rd3 = "Sub Routine - Offset:" + rd2.Substring(4);
                                }
                            }
                            else
                            {
                                rd4 = "Found Error Event (FADEF00D)\r\nFADEF00D";
                                GenUsingDtCommon();
                            }
                            array[i] = rd4 + "\r\n" + rd3;
                        }
                        else
                        {
                            if (array[i][0] == '1')
                            {
                                rd2 = array[i].Substring(6, 8);
                                if (rd2[0] == '0')
                                {
                                    rd4 = "Found Error Event (" + rd2 + ")\r\n" + rd2;
                                }
                                else
                                {
                                    rd4 = "Found Error Event? (" + rd2 + ")\r\n" + rd2;
                                }
                            }
                            else if (array[i][0] == '5')
                            {
                                rd4 = "Loop Block Error\r\n";
                            }
                            else if (array[i][0] == '8')
                            {
                                rd4 = "Offset Error\r\n";
                            }
                            else
                            {
                                rd3 = array[i].Substring(6, 8);
                                h = 0;
                                n = -1;
                                while (EveEtxd[h] != null)
                                {
                                    if (rd3 == EveEtxd[h])
                                    {
                                        n = h;
                                        break;
                                    }
                                    h += 4;
                                    if (h > 2000)
                                    {
                                        break;
                                    }
                                }
                                if (n != -1)
                                {
                                    rd3 = EveEtxd[n + 1];
                                }
                                else if (ViewEvPlus.Checked)
                                {
                                    j = Convert.ToInt32(rd3, 16);
                                    h = 0;
                                    an5 = 16777216;
                                    an2 = (j | 0xFFFF) - 65535;
                                    while (EveEtid[h] != 0)
                                    {
                                        if (EveEtid[h] >= an2 && EveEtid[h] < j)
                                        {
                                            an2 = EveEtid[h] + 1;
                                            an5 = h;
                                        }
                                        h++;
                                        if (h >= 500)
                                        {
                                            break;
                                        }
                                    }
                                    if (an5 < 16777216)
                                    {
                                        rd3 = EveEtxd[an5 * 4 + 1] + "(+" + (j - EveEtid[an5]).ToString("X") + ")";
                                    }
                                }
                                if (array[i][0] == '2')
                                {
                                    rd4 = "Event Parameter Error (Type Error)\r\n" + rd3;
                                }
                                else if (array[i][0] == '3')
                                {
                                    rd4 = "Event Parameter Error (Value Error)\r\n" + rd3;
                                }
                                else if (array[i][0] == '4')
                                {
                                    rd4 = "Event Block Error\r\n" + rd3;
                                }
                                else if (array[i][0] == '7')
                                {
                                    rd4 = "Offset Error(Event)\r\n" + rd3;
                                }
                                else if (array[i][0] == '9')
                                {
                                    rd4 = "Unreadable Event was Found\r\n" + rd3;
                                }
                            }
                            rd2 = array[i].Substring(14);
                            GenUsingDtCommon();
                            array[i] = rd4 + "\r\n" + rd3;
                        }
                    }
                }
                else
                {
                    for (i = 0; i < m; i++)
                    {
                        if (array[i][0] == 'A')
                        {
                            rd3 = array[i].Substring(15);
                            g = Convert.ToInt32(rd3, 16);
                            if (array[i][14] == 'V')
                            {
                                n = alm[dat + 20] / 4;
                                array[i] = "Override Action ID Error(Entry)\r\n\r\nOverride Entry " + alm[n + g].ToString("X") + " (No." + g / 2 + ")";
                            }
                            else
                            {
                                n = alm[dat + 21] / 4;
                                array[i] = "Override Action ID Error(Exit)\r\n\r\nOverride Exit " + alm[n + g].ToString("X") + " (No." + g / 2 + ")";
                            }
                        }
                        else if (array[i][0] == '8')
                        {
                            rd3 = array[i].Substring(18);
                            if (rd3 != "00000")
                            {
                                n = Convert.ToInt32(rd3, 16);
                                rd2 = array[i].Substring(14, 1);
                                g = Convert.ToInt32(rd2, 16);
                                rd3 = array[i].Substring(16, 2);
                                array[i] = "Offset Error\r\n\r\nArticle" + ArticleIDCb.Items[g + 1].ToString() + " " + CharPar[n].Substring(4) + " ";
                                if (rd3[0] == '0')
                                {
                                    string[] array2;
                                    string[] array3 = array2 = array;
                                    int num2 = i;
                                    IntPtr intPtr = (IntPtr)num2;
                                    array3[num2] = array2[(long)intPtr] + rd3.Substring(1);
                                }
                                else
                                {
                                    string[] array2;
                                    string[] array4 = array2 = array;
                                    int num3 = i;
                                    IntPtr intPtr = (IntPtr)num3;
                                    array4[num3] = array2[(long)intPtr] + rd3;
                                }
                            }
                            else
                            {
                                rd2 = array[i].Substring(14);
                                GenUsingDtNF();
                                array[i] = "Offset Error\r\n\r\n" + rd3;
                            }
                        }
                        else if (array[i][0] == '0')
                        {
                            rd2 = array[i].Substring(14);
                            if (rd2[0] == 'Z' && rd2[1] == '1')
                            {
                                rd4 = "Found Error Sub Routine\r\nFADEF00D";
                                if (rd2[4] == '0')
                                {
                                    rd3 = "Sub Routine - Offset:" + rd2.Substring(5);
                                }
                                else
                                {
                                    rd3 = "Sub Routine - Offset:" + rd2.Substring(4);
                                }
                            }
                            else
                            {
                                rd4 = "Found Error Event (FADEF00D)\r\nFADEF00D";
                                GenUsingDtNF();
                            }
                            array[i] = rd4 + "\r\n" + rd3;
                        }
                        else
                        {
                            if (array[i][0] == '1')
                            {
                                rd3 = array[i].Substring(6, 8);
                                if (rd3[0] == '0')
                                {
                                    rd4 = "Found Error Event (" + rd3 + ")\r\n" + rd3;
                                }
                                else
                                {
                                    rd4 = "Found Error Event? (" + rd3 + ")\r\n" + rd3;
                                }
                            }
                            else if (array[i][0] == '5')
                            {
                                rd4 = "Loop Block Error\r\n";
                            }
                            else
                            {
                                rd3 = array[i].Substring(6, 8);
                                h = 0;
                                n = -1;
                                while (EveEtxd[h] != null)
                                {
                                    if (rd3 == EveEtxd[h])
                                    {
                                        n = h;
                                        break;
                                    }
                                    h += 4;
                                    if (h > 2000)
                                    {
                                        break;
                                    }
                                }
                                if (n != -1)
                                {
                                    rd3 = EveEtxd[n + 1];
                                }
                                else if (ViewEvPlus.Checked)
                                {
                                    j = Convert.ToInt32(rd3, 16);
                                    h = 0;
                                    an5 = 16777216;
                                    an2 = (j | 0xFFFF) - 65535;
                                    while (EveEtid[h] != 0)
                                    {
                                        if (EveEtid[h] >= an2 && EveEtid[h] < j)
                                        {
                                            an2 = EveEtid[h] + 1;
                                            an5 = h;
                                        }
                                        h++;
                                        if (h >= 500)
                                        {
                                            break;
                                        }
                                    }
                                    if (an5 < 16777216)
                                    {
                                        rd3 = EveEtxd[an5 * 4 + 1] + "(+" + (j - EveEtid[an5]).ToString("X") + ")";
                                    }
                                }
                                if (array[i][0] == '2')
                                {
                                    rd4 = "Event Parameter Error (Type Error)\r\n" + rd3;
                                }
                                else if (array[i][0] == '3')
                                {
                                    rd4 = "Event Parameter Error (Value Error)\r\n" + rd3;
                                }
                                else if (array[i][0] == '4')
                                {
                                    rd4 = "Event Block Error\r\n" + rd3;
                                }
                                else if (array[i][0] == '7')
                                {
                                    rd4 = "Offset Error(Event)\r\n" + rd3;
                                }
                                else if (array[i][0] == '9')
                                {
                                    rd4 = "Unreadable Event was Found\r\n" + rd3;
                                }
                            }
                            rd2 = array[i].Substring(14);
                            GenUsingDtNF();
                            array[i] = rd4 + "\r\n" + rd3;
                        }
                    }
                }
                DataForm dataForm = new DataForm();
                dataForm.dstr = array;
                dataForm.Show(this);
            }
            else if (minitxt.Text == "")
            {
                minitxt.Text = "Error Data Not Found.";
            }
        }

        private void DMiscList_AfterSelect(object sender, TreeViewEventArgs e)
        {
            DMiscPtxt.Visible = false;
            DMiscDone.Visible = false;
            DMiscCb.Visible = false;
            DMiscParam.Items.Clear();
            if (DMiscList.SelectedNode == null)
            {
                return;
            }
            rd1 = DMiscList.SelectedNode.FullPath;
            rd2 = DMiscList.SelectedNode.Text;
            string[] array = new string[2];
            DMiscOffset.Text = "";
            if (rd1 == rd2)
            {
                if (rd1 == "DataFlags")
                {
                    DMiscOffset.Text = "0x" + (dat * 4 + 108).ToString("X");
                    for (i = 0; i < 4; i++)
                    {
                        array[0] = "Flags" + i;
                        array[1] = alm[dat + 27 + i].ToString("X8");
                        DMiscParam.Items.Add(new ListViewItem(array));
                    }
                }
                else if (rd1 == "ModelVisibility")
                {
                    if (alm[dat + 1] >= 8096 && alm[dat + 1] < tds[25])
                    {
                        DMiscOffset.Text = "0x" + alm[dat + 1].ToString("X");
                        k = alm[dat + 1] / 4;
                        array[0] = "Entry Offset";
                        array[1] = "0x" + alm[k].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "BoneSwitch Count";
                        array[1] = alm[k + 1].ToString();
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Data Offset";
                        array[1] = "0x" + alm[k + 2].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Data Count";
                        array[1] = alm[k + 3].ToString();
                        DMiscParam.Items.Add(new ListViewItem(array));
                    }
                }
                else if (rd1 == "MiscSection")
                {
                    if (alm[dat + 4] >= 8096 && alm[dat + 4] < tds[25])
                    {
                        DMiscOffset.Text = "0x" + alm[dat + 4].ToString("X");
                        k = alm[dat + 4] / 4;
                        array[0] = "Misc Section1 Offset";
                        array[1] = "0x" + alm[k].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Final Smash Aura Offset";
                        array[1] = "0x" + alm[k + 1].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Final Smash Aura Count";
                        array[1] = alm[k + 2].ToString();
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Hurt Box Offset";
                        array[1] = "0x" + alm[k + 3].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Hurt Box Count";
                        array[1] = alm[k + 4].ToString();
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Ledge Grab Offset";
                        array[1] = "0x" + alm[k + 5].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Ledge Grab Count";
                        array[1] = alm[k + 6].ToString();
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Misc Section2 Offset";
                        array[1] = "0x" + alm[k + 7].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Misc Section2 Count";
                        array[1] = alm[k + 8].ToString();
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Bone References Offset";
                        array[1] = "0x" + alm[k + 9].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Item Bones Offset";
                        array[1] = "0x" + alm[k + 10].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Sound Data Offset";
                        array[1] = "0x" + alm[k + 11].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Misc Section5 Offset";
                        array[1] = "0x" + alm[k + 12].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Multi Jump Offset";
                        array[1] = "0x" + alm[k + 13].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Glide Offset";
                        array[1] = "0x" + alm[k + 14].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Crawl Offset";
                        array[1] = "0x" + alm[k + 15].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Collision Data Offset";
                        array[1] = "0x" + alm[k + 16].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Tether Offset";
                        array[1] = "0x" + alm[k + 17].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Misc Section 12 Offset";
                        array[1] = "0x" + alm[k + 18].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                    }
                }
                else if (rd1 == "ActionInterrupts")
                {
                    if (alm[dat + 8] < 8096 || alm[dat + 8] >= tds[25])
                    {
                        return;
                    }
                    k = alm[dat + 8] / 4;
                    array[0] = "ActionInterrupts Offset";
                    array[1] = "0x" + alm[dat + 8].ToString("X");
                    DMiscParam.Items.Add(new ListViewItem(array));
                    array[0] = "Data Offset";
                    array[1] = "0x" + alm[k].ToString("X");
                    DMiscParam.Items.Add(new ListViewItem(array));
                    array[0] = "Data Count";
                    array[1] = alm[k + 1].ToString();
                    DMiscParam.Items.Add(new ListViewItem(array));
                    g = alm[k + 1];
                    if (alm[k] < 8096 || alm[k] >= tds[25] || g <= 0 || g >= 100)
                    {
                        return;
                    }
                    array[0] = "";
                    array[1] = "";
                    DMiscParam.Items.Add(new ListViewItem(array));
                    for (j = 0; j < g; j++)
                    {
                        n = alm[k] + j * 4;
                        for (i = 0; i < tds[28]; i++)
                        {
                            m = rnext[(tds[27] + i) * 2];
                            if (m >= 8096 && m < tds[25])
                            {
                                if (n == m)
                                {
                                    rd1 = "External:" + DataExrnList.Items[i].ToString();
                                    break;
                                }
                                if (m >= 8096 && m < tds[25])
                                {
                                    an5 = 0;
                                    while (an5 < 100)
                                    {
                                        h = m / 4;
                                        m = alm[h];
                                        if (m >= 8096 && m < tds[25])
                                        {
                                            if (n == m)
                                            {
                                                rd1 = rd1 + "External:" + DataExrnList.Items[i].ToString();
                                                break;
                                            }
                                            an5++;
                                            continue;
                                        }
                                        break;
                                    }
                                    if (n == m)
                                    {
                                        break;
                                    }
                                }
                            }
                        }
                        array[0] = "No." + j;
                        if (n == m)
                        {
                            array[1] = rd1;
                        }
                        else
                        {
                            h = alm[k] / 4;
                            array[1] = "0x" + alm[h + j].ToString("X");
                        }
                        DMiscParam.Items.Add(new ListViewItem(array));
                    }
                }
                else if (rd1 == "BoneReferences")
                {
                    if (alm[dat + 18] < 8096 || alm[dat + 18] >= tds[25])
                    {
                        return;
                    }
                    fnt = 1;
                    j = alm[dat + 18] / 4;
                    DMiscOffset.Text = "0x" + alm[dat + 18].ToString("X");
                    if (alm[dat + 4] >= 8096 && alm[dat + 4] < tds[25])
                    {
                        h = alm[dat + 4] / 4;
                        if (alm[h + 9] >= 8096 && alm[h + 9] < tds[25])
                        {
                            k = alm[h + 9] - alm[dat + 18];
                            if (k > 3 && k < 400)
                            {
                                g = k / 4;
                                fnt = 0;
                                for (i = 0; i < g; i++)
                                {
                                    array[0] = "Data" + i;
                                    array[1] = "0x" + alm[j + i].ToString("X");
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                }
                            }
                        }
                    }
                    if (fnt == 1)
                    {
                        array[0] = "Data0";
                        array[1] = "0x" + alm[j].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                    }
                }
                else if (rd1[0] == 'B')
                {
                    k = 0;
                    g = DMiscList.SelectedNode.GetNodeCount(includeSubTrees: false);
                    if (rd1[10] == '1')
                    {
                        if (alm[dat + 16] >= 8096 && alm[dat + 16] < tds[25])
                        {
                            k = alm[dat + 16] / 4;
                        }
                    }
                    else if (rd1[10] == '2')
                    {
                        if (alm[dat + 17] >= 8096 && alm[dat + 17] < tds[25])
                        {
                            k = alm[dat + 17] / 4;
                        }
                    }
                    else if (alm[dat + 23] >= 8096 && alm[dat + 23] < tds[25])
                    {
                        k = alm[dat + 23] / 4;
                    }
                    if (k > 0)
                    {
                        DMiscOffset.Text = "0x" + (k * 4).ToString("X");
                        for (i = 0; i < g; i++)
                        {
                            array[0] = "Data" + i + " Bone";
                            array[1] = "0x" + alm[k + i * 7].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                        }
                    }
                }
                else if (rd1 == "HandBones")
                {
                    if (alm[dat + 19] >= 8096 && alm[dat + 19] < tds[25])
                    {
                        DMiscOffset.Text = "0x" + alm[dat + 19].ToString("X");
                        k = alm[dat + 19] / 4;
                        for (i = 0; i < 4; i++)
                        {
                            array[0] = "HandNBoneIndex" + i;
                            array[1] = "0x" + alm[k + i].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                        }
                        array[0] = "DataCount";
                        array[1] = alm[k + 4].ToString();
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "DataOffset";
                        array[1] = "0x" + alm[k + 5].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                    }
                }
                else if (rd1 == "ExtraActionInterrupts")
                {
                    if (alm[dat + 22] >= 8096 && alm[dat + 22] < tds[25])
                    {
                        DMiscOffset.Text = "0x" + alm[dat + 22].ToString("X");
                        k = alm[dat + 22] / 4;
                        array[0] = "Unknown0";
                        array[1] = "0x" + alm[k].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Unknown1";
                        array[1] = "0x" + alm[k + 1].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "DataOffset";
                        array[1] = "0x" + alm[k + 2].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                    }
                }
                else if (rd1 == "Unknown24")
                {
                    if (alm[dat + 24] >= 8096 && alm[dat + 24] < tds[25])
                    {
                        DMiscOffset.Text = "0x" + alm[dat + 24].ToString("X");
                        k = alm[dat + 24] / 4;
                        array[0] = "DataOffset";
                        array[1] = "0x" + alm[k].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "DataCount";
                        array[1] = alm[k + 1].ToString();
                        DMiscParam.Items.Add(new ListViewItem(array));
                    }
                }
                else if (rd1 == "StaticArticles")
                {
                    if (alm[dat + 25] >= 8096 && alm[dat + 25] < tds[25])
                    {
                        DMiscOffset.Text = "0x" + alm[dat + 25].ToString("X");
                        k = alm[dat + 25] / 4;
                        array[0] = "ArticleListOffset";
                        array[1] = "0x" + alm[k].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "ArticleCount";
                        array[1] = alm[k + 1].ToString();
                        DMiscParam.Items.Add(new ListViewItem(array));
                    }
                }
                else if (rd1 == "EntryArticle" && alm[dat + 26] >= 8096 && alm[dat + 26] < tds[25])
                {
                    DMiscOffset.Text = "0x" + alm[dat + 26].ToString("X");
                    k = alm[dat + 26] / 4;
                    array[0] = "ArticleGroupID";
                    array[1] = alm[k].ToString();
                    DMiscParam.Items.Add(new ListViewItem(array));
                    array[0] = "ARCEntryGroup";
                    array[1] = alm[k + 1].ToString();
                    DMiscParam.Items.Add(new ListViewItem(array));
                    array[0] = "Bone";
                    array[1] = "0x" + alm[k + 2].ToString("X");
                    DMiscParam.Items.Add(new ListViewItem(array));
                    array[0] = "ActionFlags";
                    array[1] = "0x" + alm[k + 3].ToString("X");
                    DMiscParam.Items.Add(new ListViewItem(array));
                    array[0] = "SubActionFlags";
                    array[1] = "0x" + alm[k + 4].ToString("X");
                    DMiscParam.Items.Add(new ListViewItem(array));
                    array[0] = "Actions";
                    array[1] = "0x" + alm[k + 5].ToString("X");
                    DMiscParam.Items.Add(new ListViewItem(array));
                    array[0] = "SubActionMain";
                    array[1] = "0x" + alm[k + 6].ToString("X");
                    DMiscParam.Items.Add(new ListViewItem(array));
                    array[0] = "SubActionGFX";
                    array[1] = "0x" + alm[k + 7].ToString("X");
                    DMiscParam.Items.Add(new ListViewItem(array));
                    array[0] = "SubActionSFX";
                    array[1] = "0x" + alm[k + 8].ToString("X");
                    DMiscParam.Items.Add(new ListViewItem(array));
                    array[0] = "ModelVisibility";
                    array[1] = "0x" + alm[k + 9].ToString("X");
                    DMiscParam.Items.Add(new ListViewItem(array));
                    array[0] = "CollisionData";
                    array[1] = "0x" + alm[k + 10].ToString("X");
                    DMiscParam.Items.Add(new ListViewItem(array));
                    array[0] = "Data2";
                    array[1] = "0x" + alm[k + 11].ToString("X");
                    DMiscParam.Items.Add(new ListViewItem(array));
                    array[0] = "Data3";
                    array[1] = "0x" + alm[k + 12].ToString("X");
                    DMiscParam.Items.Add(new ListViewItem(array));
                    array[0] = "SubAction Count";
                    array[1] = "0x" + alm[k + 13].ToString("X");
                    DMiscParam.Items.Add(new ListViewItem(array));
                }
            }
            else if (rd1[0] == 'M')
            {
                if (rd1[1] == 'o')
                {
                    if (alm[dat + 1] < 8096 || alm[dat + 1] >= tds[25])
                    {
                        return;
                    }
                    k = alm[dat + 1] / 4;
                    if (rd2 == "Hidden" || rd2 == "Visible")
                    {
                        if (alm[k] >= 8096 && alm[k] < tds[25])
                        {
                            h = alm[k] / 4;
                            if (rd2 == "Hidden")
                            {
                                DMiscOffset.Text = "0x" + alm[k].ToString("X");
                                array[0] = "DataOffset";
                                array[1] = "0x" + alm[h].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                            }
                            else
                            {
                                DMiscOffset.Text = "0x" + (alm[k] + 4).ToString("X");
                                array[0] = "DataOffset";
                                array[1] = "0x" + alm[h + 1].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                            }
                        }
                    }
                    else if (rd1[16] == 'D')
                    {
                        g = int.Parse(rd2.Substring(4));
                        if (alm[k + 2] >= 8096 && alm[k + 2] < tds[25])
                        {
                            DMiscOffset.Text = "0x" + (alm[k + 2] + g * 8).ToString("X");
                            h = alm[k + 2] / 4 + g * 2;
                            array[0] = "Value0";
                            array[1] = "0x" + alm[h].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "Value1";
                            array[1] = "0x" + alm[h + 1].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                        }
                    }
                    else
                    {
                        if (alm[k] < 8096 || alm[k] >= tds[25])
                        {
                            return;
                        }
                        if (rd1[16] == 'H')
                        {
                            h = alm[k] / 4;
                        }
                        else
                        {
                            h = alm[k] / 4 + 1;
                        }
                        if (alm[h] < 8096 || alm[h] >= tds[25])
                        {
                            return;
                        }
                        if (rd2 == "List")
                        {
                            m = DMiscList.SelectedNode.Parent.Parent.Index;
                            n = DMiscList.SelectedNode.Parent.Index;
                            g = alm[h] / 4 + m * 2;
                            if (alm[g] < 8096 || alm[g] >= tds[25])
                            {
                                return;
                            }
                            k = alm[g] / 4 + n * 2;
                            if (alm[k] < 8096 || alm[k] >= tds[25])
                            {
                                return;
                            }
                            DMiscOffset.Text = "0x" + alm[k].ToString("X");
                            g = alm[k + 1];
                            h = alm[k] / 4;
                            if (g > 0 && g < 150)
                            {
                                for (j = 0; j < g; j++)
                                {
                                    array[0] = "Data" + j;
                                    array[1] = "0x" + alm[h + j].ToString("X");
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                }
                            }
                        }
                        else if (rd2[4] == 'S')
                        {
                            m = DMiscList.SelectedNode.Index;
                            DMiscOffset.Text = "0x" + (alm[h] + m * 8).ToString("X");
                            j = alm[h] / 4 + m * 2;
                            array[0] = "DataOffset";
                            array[1] = "0x" + alm[j].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "Count";
                            array[1] = alm[j + 1].ToString();
                            DMiscParam.Items.Add(new ListViewItem(array));
                        }
                        else
                        {
                            m = DMiscList.SelectedNode.Parent.Index;
                            n = DMiscList.SelectedNode.Index;
                            g = alm[h] / 4 + m * 2;
                            if (alm[g] >= 8096 && alm[g] < tds[25])
                            {
                                j = alm[g] / 4 + n * 2;
                                DMiscOffset.Text = "0x" + (alm[g] + n * 8).ToString("X");
                                array[0] = "DataOffset";
                                array[1] = "0x" + alm[j].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                                array[0] = "Count";
                                array[1] = alm[j + 1].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                            }
                        }
                    }
                }
                else
                {
                    if (alm[dat + 4] < 8096 || alm[dat + 4] >= tds[25])
                    {
                        return;
                    }
                    h = alm[dat + 4] / 4;
                    if (rd1[12] == 'M')
                    {
                        if (rd1[13] == 'u')
                        {
                            if (alm[h + 13] < 8096 || alm[h + 13] >= tds[25])
                            {
                                return;
                            }
                            k = alm[h + 13] / 4;
                            if (rd2 == "Multi Jump")
                            {
                                DMiscOffset.Text = "0x" + alm[h + 13].ToString("X");
                                for (i = 0; i < 3; i++)
                                {
                                    bitf = BitConverter.GetBytes(alm[k + i]);
                                    rdfr = BitConverter.ToSingle(bitf, 0);
                                    array[0] = "Unknown" + i;
                                    array[1] = rdfr.ToString();
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                }
                                bitf = BitConverter.GetBytes(alm[k + 3]);
                                rdfr = BitConverter.ToSingle(bitf, 0);
                                array[0] = "Horizontal Boost";
                                array[1] = rdfr.ToString();
                                DMiscParam.Items.Add(new ListViewItem(array));
                                array[0] = "Hops Offset";
                                array[1] = "0x" + alm[k + 4].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                                array[0] = "Unknown Datas Offset";
                                array[1] = "0x" + alm[k + 5].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                                array[0] = "Turn Frames";
                                array[1] = alm[k + 6].ToString();
                                DMiscParam.Items.Add(new ListViewItem(array));
                            }
                            else if (rd2 == "Hops")
                            {
                                if (alm[k + 4] >= 8096 && alm[k + 4] < tds[25])
                                {
                                    DMiscOffset.Text = "0x" + alm[k + 4].ToString("X");
                                    j = alm[k + 4] / 4;
                                    n = alm[h + 13] - alm[k + 4];
                                    g = n / 4;
                                    if (g > 5 || g < 2)
                                    {
                                        g = 2;
                                    }
                                    bitf = BitConverter.GetBytes(alm[j]);
                                    rdfr = BitConverter.ToSingle(bitf, 0);
                                    array[0] = "JumpAerialF";
                                    array[1] = rdfr.ToString();
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                    for (i = 1; i < g; i++)
                                    {
                                        bitf = BitConverter.GetBytes(alm[j + i]);
                                        rdfr = BitConverter.ToSingle(bitf, 0);
                                        array[0] = "JumpAerialF" + (i + 1);
                                        array[1] = rdfr.ToString();
                                        DMiscParam.Items.Add(new ListViewItem(array));
                                    }
                                }
                            }
                            else if (alm[k + 5] >= 8096 && alm[k + 5] < tds[25])
                            {
                                DMiscOffset.Text = "0x" + alm[k + 5].ToString("X");
                                j = alm[k + 5] / 4;
                                for (i = 0; i < 12; i++)
                                {
                                    bitf = BitConverter.GetBytes(alm[j + i]);
                                    rdfr = BitConverter.ToSingle(bitf, 0);
                                    array[0] = "Unknown" + i;
                                    array[1] = rdfr.ToString();
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                }
                            }
                        }
                        else if (rd1[25] == '2')
                        {
                            if (rd1.Length > 27 && alm[h + 7] >= 8096 && alm[h + 7] < tds[25])
                            {
                                m = DMiscList.SelectedNode.Index;
                                k = alm[h + 7] + m * 32;
                                DMiscOffset.Text = "0x" + k.ToString("X");
                                j = k / 4;
                                for (i = 0; i < 8; i++)
                                {
                                    array[0] = "Unknown" + i;
                                    array[1] = alm[j + i].ToString("X8");
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                }
                            }
                        }
                        else if (rd1[25] == '5')
                        {
                            if (alm[h + 12] < 8096 || alm[h + 12] >= tds[25])
                            {
                                return;
                            }
                            if (alm[h + 11] >= 8096 && alm[h + 11] < tds[25])
                            {
                                j = alm[h + 11] / 4;
                                if (alm[h + 12] + 16 == alm[j])
                                {
                                    g = 4;
                                }
                                else
                                {
                                    g = 6;
                                }
                            }
                            else
                            {
                                g = 4;
                            }
                            DMiscOffset.Text = "0x" + alm[h + 12].ToString("X");
                            j = alm[h + 12] / 4;
                            for (i = 0; i < g; i++)
                            {
                                array[0] = "Unknown" + i;
                                array[1] = "0x" + alm[j + i].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                            }
                        }
                        else if (rd2 == "Misc Section 1")
                        {
                            if (alm[h] < 8096 || alm[h] >= tds[25])
                            {
                                return;
                            }
                            DMiscOffset.Text = "0x" + alm[h].ToString("X");
                            m = alm[h] + 3;
                            n = alm[h] + 80;
                            if (n > tds[25])
                            {
                                n = tds[25];
                            }
                            for (i = stf; i < md; i++)
                            {
                                if (alm[i] > m && alm[i] < n)
                                {
                                    rmv = i * 4;
                                    for (mov = 0; mov < par; mov++)
                                    {
                                        if (asc[mov] == rmv)
                                        {
                                            n = alm[i];
                                            break;
                                        }
                                    }
                                }
                            }
                            g = (n - alm[h]) / 4;
                            j = alm[h] / 4;
                            for (i = 0; i < g; i++)
                            {
                                array[0] = "Data" + i;
                                array[1] = "0x" + alm[j + i].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                            }
                        }
                        else if (rd2 == "List")
                        {
                            if (alm[h + 18] < 8096 || alm[h + 18] >= tds[25])
                            {
                                return;
                            }
                            k = alm[h + 18] / 4;
                            if (alm[k] < 8096 || alm[k] >= tds[25])
                            {
                                return;
                            }
                            g = alm[k + 1];
                            if (g > 0 && g < 100)
                            {
                                DMiscOffset.Text = "0x" + alm[k].ToString("X");
                                j = alm[k] / 4;
                                for (i = 0; i < g; i++)
                                {
                                    array[0] = "Item Index" + i;
                                    array[1] = "0x" + alm[j + i].ToString("X");
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                }
                            }
                        }
                        else if (alm[h + 18] >= 8096 && alm[h + 18] < tds[25])
                        {
                            DMiscOffset.Text = "0x" + alm[h + 18].ToString("X");
                            j = alm[h + 18] / 4;
                            array[0] = "Data Offset";
                            array[1] = "0x" + alm[j].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "Data Count";
                            array[1] = alm[j + 1].ToString();
                            DMiscParam.Items.Add(new ListViewItem(array));
                        }
                    }
                    else if (rd1[12] == 'F')
                    {
                        if (alm[h + 1] < 8096 || alm[h + 1] >= tds[25])
                        {
                            return;
                        }
                        if (rd1.Length > 29)
                        {
                            m = DMiscList.SelectedNode.Index;
                            k = alm[h + 1] + m * 20;
                            DMiscOffset.Text = "0x" + k.ToString("X");
                            j = k / 4;
                            array[0] = "Bone";
                            array[1] = "0x" + alm[j].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            bitf = BitConverter.GetBytes(alm[j + 1]);
                            rdfr = BitConverter.ToSingle(bitf, 0);
                            array[0] = "X";
                            array[1] = rdfr.ToString();
                            DMiscParam.Items.Add(new ListViewItem(array));
                            bitf = BitConverter.GetBytes(alm[j + 2]);
                            rdfr = BitConverter.ToSingle(bitf, 0);
                            array[0] = "Y";
                            array[1] = rdfr.ToString();
                            DMiscParam.Items.Add(new ListViewItem(array));
                            bitf = BitConverter.GetBytes(alm[j + 3]);
                            rdfr = BitConverter.ToSingle(bitf, 0);
                            array[0] = "Width";
                            array[1] = rdfr.ToString();
                            DMiscParam.Items.Add(new ListViewItem(array));
                            bitf = BitConverter.GetBytes(alm[j + 4]);
                            rdfr = BitConverter.ToSingle(bitf, 0);
                            array[0] = "Height";
                            array[1] = rdfr.ToString();
                            DMiscParam.Items.Add(new ListViewItem(array));
                            return;
                        }
                        g = DMiscList.SelectedNode.GetNodeCount(includeSubTrees: false);
                        if (g > 0)
                        {
                            k = alm[h + 1] / 4;
                            DMiscOffset.Text = "0x" + alm[h + 1].ToString("X");
                            for (i = 0; i < g; i++)
                            {
                                array[0] = "Data" + i + " Bone";
                                array[1] = "0x" + alm[k + i * 5].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                            }
                        }
                    }
                    else if (rd1[12] == 'H')
                    {
                        if (alm[h + 3] < 8096 || alm[h + 3] >= tds[25])
                        {
                            return;
                        }
                        if (rd1.Length > 23)
                        {
                            m = DMiscList.SelectedNode.Index;
                            k = alm[h + 3] + m * 32;
                            DMiscOffset.Text = "0x" + k.ToString("X");
                            j = k / 4;
                            bitf = BitConverter.GetBytes(alm[j]);
                            rdfr = BitConverter.ToSingle(bitf, 0);
                            array[0] = "X Offset";
                            array[1] = rdfr.ToString();
                            DMiscParam.Items.Add(new ListViewItem(array));
                            bitf = BitConverter.GetBytes(alm[j + 1]);
                            rdfr = BitConverter.ToSingle(bitf, 0);
                            array[0] = "Y Offset";
                            array[1] = rdfr.ToString();
                            DMiscParam.Items.Add(new ListViewItem(array));
                            bitf = BitConverter.GetBytes(alm[j + 2]);
                            rdfr = BitConverter.ToSingle(bitf, 0);
                            array[0] = "Z Offset";
                            array[1] = rdfr.ToString();
                            DMiscParam.Items.Add(new ListViewItem(array));
                            bitf = BitConverter.GetBytes(alm[j + 3]);
                            rdfr = BitConverter.ToSingle(bitf, 0);
                            array[0] = "X Stretch";
                            array[1] = rdfr.ToString();
                            DMiscParam.Items.Add(new ListViewItem(array));
                            bitf = BitConverter.GetBytes(alm[j + 4]);
                            rdfr = BitConverter.ToSingle(bitf, 0);
                            array[0] = "Y Stretch";
                            array[1] = rdfr.ToString();
                            DMiscParam.Items.Add(new ListViewItem(array));
                            bitf = BitConverter.GetBytes(alm[j + 5]);
                            rdfr = BitConverter.ToSingle(bitf, 0);
                            array[0] = "Z Stretch";
                            array[1] = rdfr.ToString();
                            DMiscParam.Items.Add(new ListViewItem(array));
                            bitf = BitConverter.GetBytes(alm[j + 6]);
                            rdfr = BitConverter.ToSingle(bitf, 0);
                            array[0] = "Radius";
                            array[1] = rdfr.ToString();
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "Data";
                            array[1] = alm[j + 7].ToString("X8");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "";
                            array[1] = "";
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "Bone";
                            array[1] = "0x" + ((alm[j + 7] >> 23) & 0x1FF).ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "Enabled";
                            if (((alm[j + 7] >> 16) & 1) == 1)
                            {
                                array[1] = "True";
                            }
                            else
                            {
                                array[1] = "False";
                            }
                            DMiscParam.Items.Add(new ListViewItem(array));
                            an1 = ((alm[j + 7] >> 19) & 3);
                            array[0] = "Zone";
                            if (an1 == 0)
                            {
                                array[1] = "Low";
                            }
                            else if (an1 == 1)
                            {
                                array[1] = "Middle";
                            }
                            else if (an1 == 2)
                            {
                                array[1] = "High";
                            }
                            else
                            {
                                array[1] = "Unknown";
                            }
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "Region";
                            array[1] = ((alm[j + 7] >> 21) & 3).ToString();
                            DMiscParam.Items.Add(new ListViewItem(array));
                            return;
                        }
                        g = DMiscList.SelectedNode.GetNodeCount(includeSubTrees: false);
                        if (g > 0)
                        {
                            k = alm[h + 3] / 4 + 7;
                            DMiscOffset.Text = "0x" + alm[h + 3].ToString("X");
                            for (i = 0; i < g; i++)
                            {
                                array[0] = "Data" + i + " Bone";
                                array[1] = "0x" + ((alm[k + i * 8] >> 23) & 0x1FF).ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                            }
                        }
                    }
                    else if (rd1[12] == 'L')
                    {
                        if (rd1.Length > 23)
                        {
                            m = DMiscList.SelectedNode.Index;
                            k = alm[h + 5] + m * 16;
                            DMiscOffset.Text = "0x" + k.ToString("X");
                            j = k / 4;
                            bitf = BitConverter.GetBytes(alm[j]);
                            rdfr = BitConverter.ToSingle(bitf, 0);
                            array[0] = "X";
                            array[1] = rdfr.ToString();
                            DMiscParam.Items.Add(new ListViewItem(array));
                            bitf = BitConverter.GetBytes(alm[j + 1]);
                            rdfr = BitConverter.ToSingle(bitf, 0);
                            array[0] = "Y";
                            array[1] = rdfr.ToString();
                            DMiscParam.Items.Add(new ListViewItem(array));
                            bitf = BitConverter.GetBytes(alm[j + 2]);
                            rdfr = BitConverter.ToSingle(bitf, 0);
                            array[0] = "Width";
                            array[1] = rdfr.ToString();
                            DMiscParam.Items.Add(new ListViewItem(array));
                            bitf = BitConverter.GetBytes(alm[j + 3]);
                            rdfr = BitConverter.ToSingle(bitf, 0);
                            array[0] = "Height";
                            array[1] = rdfr.ToString();
                            DMiscParam.Items.Add(new ListViewItem(array));
                        }
                    }
                    else if (rd1[12] == 'B')
                    {
                        if (alm[h + 9] >= 8096 && alm[h + 9] < tds[25])
                        {
                            DMiscOffset.Text = "0x" + alm[h + 9].ToString("X");
                            j = alm[h + 9] / 4;
                            for (i = 0; i < 10; i++)
                            {
                                array[0] = "Data" + i;
                                array[1] = "0x" + alm[j + i].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                            }
                        }
                    }
                    else if (rd1[12] == 'I')
                    {
                        if (alm[h + 10] < 8096 || alm[h + 10] >= tds[25])
                        {
                            return;
                        }
                        if (rd1.Length > 23)
                        {
                            k = alm[h + 10] / 4 + 4;
                            if (alm[h + 10] >= 8096 && alm[h + 10] < tds[25])
                            {
                                m = DMiscList.SelectedNode.Index;
                                n = alm[k] + m * 16;
                                DMiscOffset.Text = "0x" + n.ToString("X");
                                j = n / 4;
                                array[0] = "Unknown0";
                                array[1] = "0x" + alm[j].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                                array[0] = "Unknown1";
                                array[1] = "0x" + alm[j + 1].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                                array[0] = "Pad0";
                                array[1] = "0x" + alm[j + 2].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                                array[0] = "Pad1";
                                array[1] = "0x" + alm[j + 3].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                            }
                        }
                        else
                        {
                            DMiscOffset.Text = "0x" + alm[h + 10].ToString("X");
                            j = alm[h + 10] / 4;
                            array[0] = "HaveNBoneIndex0";
                            array[1] = "0x" + alm[j].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "HaveNBoneIndex1";
                            array[1] = "0x" + alm[j + 1].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "ThrowNBoneIndex";
                            array[1] = "0x" + alm[j + 2].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "Data Count";
                            array[1] = alm[j + 3].ToString();
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "Data Offset";
                            array[1] = "0x" + alm[j + 4].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "Pad";
                            array[1] = "0x" + alm[j + 5].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                        }
                    }
                    else if (rd1[12] == 'S')
                    {
                        if (alm[h + 11] < 8096 || alm[h + 11] >= tds[25])
                        {
                            return;
                        }
                        k = alm[h + 11] / 4;
                        if (rd1.Length < 24)
                        {
                            DMiscOffset.Text = "0x" + alm[h + 11].ToString("X");
                            array[0] = "Sound List Offset";
                            array[1] = "0x" + alm[k].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "Sound List Count";
                            array[1] = "0x" + alm[k + 1].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                        }
                        else if (rd1.Length < 37)
                        {
                            if (alm[k] >= 8096 && alm[k] < tds[25])
                            {
                                i = DMiscList.SelectedNode.Index;
                                DMiscOffset.Text = "0x" + (alm[k] + i * 8).ToString("X");
                                j = alm[k] / 4 + i * 2;
                                array[0] = "Sound List Offset";
                                array[1] = "0x" + alm[j].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                                array[0] = "Sound List Count";
                                array[1] = "0x" + alm[j + 1].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                            }
                        }
                        else
                        {
                            if (alm[k] < 8096 || alm[k] >= tds[25])
                            {
                                return;
                            }
                            m = DMiscList.SelectedNode.Parent.Index;
                            g = alm[k] / 4 + m * 2;
                            if (alm[g] < 8096 || alm[g] >= tds[25])
                            {
                                return;
                            }
                            j = alm[g] / 4;
                            n = alm[g + 1];
                            if (n > 0 && n < 128)
                            {
                                DMiscOffset.Text = "0x" + alm[g].ToString("X");
                                for (i = 0; i < n; i++)
                                {
                                    array[0] = "SFX ID";
                                    array[1] = "0x" + alm[j + i].ToString("X");
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                }
                            }
                        }
                    }
                    else if (rd1[12] == 'G')
                    {
                        if (alm[h + 14] >= 8096 && alm[h + 14] < tds[25])
                        {
                            j = alm[h + 14] / 4;
                            DMiscOffset.Text = "0x" + alm[h + 14].ToString("X");
                            for (i = 0; i < 20; i++)
                            {
                                bitf = BitConverter.GetBytes(alm[j + i]);
                                rdfr = BitConverter.ToSingle(bitf, 0);
                                array[0] = "Data" + i;
                                array[1] = rdfr.ToString();
                                DMiscParam.Items.Add(new ListViewItem(array));
                            }
                            array[0] = "Data20";
                            array[1] = "0x" + alm[j + i].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                        }
                    }
                    else if (rd1[12] == 'C')
                    {
                        if (rd1[13] == 'r')
                        {
                            if (alm[h + 15] >= 8096 && alm[h + 15] < tds[25])
                            {
                                j = alm[h + 15] / 4;
                                DMiscOffset.Text = "0x" + alm[h + 15].ToString("X");
                                bitf = BitConverter.GetBytes(alm[j]);
                                rdfr = BitConverter.ToSingle(bitf, 0);
                                array[0] = "Forward";
                                array[1] = rdfr.ToString();
                                DMiscParam.Items.Add(new ListViewItem(array));
                                bitf = BitConverter.GetBytes(alm[j + 1]);
                                rdfr = BitConverter.ToSingle(bitf, 0);
                                array[0] = "Backward";
                                array[1] = rdfr.ToString();
                                DMiscParam.Items.Add(new ListViewItem(array));
                            }
                        }
                        else
                        {
                            if (alm[h + 16] < 8096 || alm[h + 16] >= tds[25])
                            {
                                return;
                            }
                            k = alm[h + 16] / 4;
                            if (rd1.Length <= 27)
                            {
                                array[0] = "CollisionData Offset";
                                array[1] = "0x" + alm[h + 16].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                                array[0] = "Entry Offset";
                                array[1] = "0x" + alm[k].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                                array[0] = "Count";
                                array[1] = alm[k + 1].ToString();
                                DMiscParam.Items.Add(new ListViewItem(array));
                                if (alm[k] >= 8096 && alm[k] < tds[25])
                                {
                                    array[0] = "";
                                    array[1] = "";
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                    n = alm[k] / 4;
                                    array[0] = "Data Offset";
                                    array[1] = "0x" + alm[n].ToString("X");
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                }
                            }
                            else
                            {
                                if (alm[k] < 8096 || alm[k] >= tds[25])
                                {
                                    return;
                                }
                                n = alm[k] / 4;
                                if (alm[n] < 8096 || alm[n] >= tds[25])
                                {
                                    return;
                                }
                                j = alm[n] / 4;
                                if (rd1.Length < 33)
                                {
                                    DMiscOffset.Text = "0x" + alm[n].ToString("X");
                                    array[0] = "Type";
                                    array[1] = "0x" + alm[j].ToString("X");
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                    if (alm[n] + 16 == alm[k])
                                    {
                                        i = 1;
                                        g = 4;
                                    }
                                    else
                                    {
                                        array[0] = "Bone Data Offset";
                                        array[1] = "0x" + alm[j + 1].ToString("X");
                                        DMiscParam.Items.Add(new ListViewItem(array));
                                        array[0] = "Count";
                                        array[1] = alm[j + 2].ToString();
                                        DMiscParam.Items.Add(new ListViewItem(array));
                                        i = 3;
                                        g = 6;
                                    }
                                    while (i < g)
                                    {
                                        bitf = BitConverter.GetBytes(alm[j + i]);
                                        rdfr = BitConverter.ToSingle(bitf, 0);
                                        array[0] = "Unknown" + i;
                                        array[1] = rdfr.ToString();
                                        DMiscParam.Items.Add(new ListViewItem(array));
                                        i++;
                                    }
                                }
                                else
                                {
                                    if (alm[j + 1] < 8096 || alm[j + 1] >= tds[25])
                                    {
                                        return;
                                    }
                                    DMiscOffset.Text = "0x" + alm[j + 1].ToString("X");
                                    n = alm[j + 1] / 4;
                                    g = alm[j + 2];
                                    if (g > 0 && g < 128)
                                    {
                                        for (i = 0; i < g; i++)
                                        {
                                            array[0] = "BoneData" + i;
                                            array[1] = "0x" + alm[n + i].ToString("X");
                                            DMiscParam.Items.Add(new ListViewItem(array));
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else if (rd1[12] == 'T' && alm[h + 17] >= 8096 && alm[h + 17] < tds[25])
                    {
                        DMiscOffset.Text = "0x" + alm[h + 17].ToString("X");
                        k = alm[h + 17] / 4;
                        array[0] = "Hang Frame Count";
                        array[1] = alm[k].ToString();
                        DMiscParam.Items.Add(new ListViewItem(array));
                        bitf = BitConverter.GetBytes(alm[k + 1]);
                        rdfr = BitConverter.ToSingle(bitf, 0);
                        array[0] = "Unknown";
                        array[1] = rdfr.ToString();
                        DMiscParam.Items.Add(new ListViewItem(array));
                    }
                }
            }
            else if (rd1[0] == 'C' || rd1[0] == 'S')
            {
                if (rd1[1] == 't')
                {
                    if (alm[dat + 25] < 8096 || alm[dat + 25] >= tds[25])
                    {
                        return;
                    }
                    h = alm[dat + 25] / 4;
                    if (alm[h] < 8096 || alm[h] >= tds[25])
                    {
                        return;
                    }
                    if (rd2[0] == 'A')
                    {
                        i = DMiscList.SelectedNode.Index;
                        k = alm[h] / 4 + i * 14;
                        DMiscOffset.Text = "0x" + (k * 4).ToString("X");
                        array[0] = "ArticleGroupID";
                        array[1] = alm[k].ToString();
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "ARCEntryGroup";
                        array[1] = alm[k + 1].ToString();
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Bone";
                        array[1] = "0x" + alm[k + 2].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "ActionFlags";
                        array[1] = "0x" + alm[k + 3].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "SubActionFlags";
                        array[1] = "0x" + alm[k + 4].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Actions";
                        array[1] = "0x" + alm[k + 5].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "SubActionMain";
                        array[1] = "0x" + alm[k + 6].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "SubActionGFX";
                        array[1] = "0x" + alm[k + 7].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "SubActionSFX";
                        array[1] = "0x" + alm[k + 8].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "ModelVisibility";
                        array[1] = "0x" + alm[k + 9].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "CollisionData";
                        array[1] = "0x" + alm[k + 10].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Data2";
                        array[1] = "0x" + alm[k + 11].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Data3";
                        array[1] = "0x" + alm[k + 12].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "SubAction Count";
                        array[1] = "0x" + alm[k + 13].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        return;
                    }
                    i = DMiscList.SelectedNode.Parent.Index;
                    if (rd2[0] == 'D')
                    {
                        k = alm[h] / 4 + i * 14 + 12;
                        if (alm[k] < 8096 || alm[k] >= tds[25])
                        {
                            return;
                        }
                        an2 = alm[k];
                        m = an2 + 3;
                        n = an2 + 160;
                        if (n > tds[25])
                        {
                            n = tds[25];
                        }
                        for (j = stf; j < md; j++)
                        {
                            if (alm[j] > m && alm[j] < n)
                            {
                                rmv = j * 4;
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == rmv)
                                    {
                                        n = alm[j];
                                        break;
                                    }
                                }
                            }
                        }
                        g = (n - an2) / 4;
                        k = an2 / 4;
                        if (g > 1)
                        {
                            for (j = 1; j < g; j++)
                            {
                                if (alm[k + j] == -86052851)
                                {
                                    g = j;
                                    break;
                                }
                            }
                        }
                        DMiscOffset.Text = "0x" + an2.ToString("X");
                        for (i = 0; i < g; i++)
                        {
                            array[0] = "Data" + i;
                            array[1] = "0x" + alm[k + i].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                        }
                        return;
                    }
                    k = alm[h] / 4 + i * 14 + 4;
                    if (alm[k] < 8096 || alm[k] >= tds[25])
                    {
                        return;
                    }
                    if (alm[k + 9] > 0 && alm[k + 9] < 11)
                    {
                        g = alm[k + 9];
                    }
                    else
                    {
                        g = 1;
                    }
                    n = alm[k] / 4 + 1;
                    if (alm[k + 3] >= 8096 && alm[k + 3] < tds[25])
                    {
                        m = alm[k + 3] / 4;
                        for (h = 0; h < g; h++)
                        {
                            if (alm[n] == 0)
                            {
                                rd1 = "<null>";
                            }
                            else
                            {
                                j = alm[n] / 4;
                                rd1 = "";
                                if (j >= stf && j < md)
                                {
                                    i = 0;
                                    while (i < 47)
                                    {
                                        if (i % 4 == 0)
                                        {
                                            fntb[0] = (byte)((alm[j] >> 24) & 0xFF);
                                        }
                                        else if (i % 4 == 1)
                                        {
                                            fntb[0] = (byte)((alm[j] >> 16) & 0xFF);
                                        }
                                        else if (i % 4 == 2)
                                        {
                                            fntb[0] = (byte)((alm[j] >> 8) & 0xFF);
                                        }
                                        else
                                        {
                                            fntb[0] = (byte)(alm[j] & 0xFF);
                                            j++;
                                        }
                                        if (fntb[0] != 0)
                                        {
                                            rd1 += Encoding.UTF8.GetString(fntb);
                                            i++;
                                            continue;
                                        }
                                        break;
                                    }
                                }
                                else
                                {
                                    rd1 = "<ERROR>";
                                }
                            }
                            array[0] = rd1;
                            array[1] = "GFX" + h + " Offset:0x" + alm[m + h].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            n += 2;
                        }
                        return;
                    }
                    for (h = 0; h < g; h++)
                    {
                        if (alm[n] == 0)
                        {
                            rd1 = "<null>";
                        }
                        else
                        {
                            j = alm[n] / 4;
                            rd1 = "";
                            if (j >= stf && j < md)
                            {
                                i = 0;
                                while (i < 47)
                                {
                                    if (i % 4 == 0)
                                    {
                                        fntb[0] = (byte)((alm[j] >> 24) & 0xFF);
                                    }
                                    else if (i % 4 == 1)
                                    {
                                        fntb[0] = (byte)((alm[j] >> 16) & 0xFF);
                                    }
                                    else if (i % 4 == 2)
                                    {
                                        fntb[0] = (byte)((alm[j] >> 8) & 0xFF);
                                    }
                                    else
                                    {
                                        fntb[0] = (byte)(alm[j] & 0xFF);
                                        j++;
                                    }
                                    if (fntb[0] != 0)
                                    {
                                        rd1 += Encoding.UTF8.GetString(fntb);
                                        i++;
                                        continue;
                                    }
                                    break;
                                }
                            }
                            else
                            {
                                rd1 = "<ERROR>";
                            }
                        }
                        array[0] = "SubAction " + h;
                        array[1] = rd1;
                        DMiscParam.Items.Add(new ListViewItem(array));
                        n += 2;
                    }
                    return;
                }
                m = DMiscList.SelectedNode.Index;
                if (rd1[0] == 'C')
                {
                    g = alm[dat + 5] + m * 16;
                }
                else
                {
                    g = alm[dat + 6] + m * 16;
                }
                if (g > 1479 && g < tds[25])
                {
                    DMiscOffset.Text = "0x" + g.ToString("X");
                    j = g / 4;
                    for (i = 0; i < 4; i++)
                    {
                        array[0] = "Flags" + i;
                        array[1] = alm[j + i].ToString("X8");
                        DMiscParam.Items.Add(new ListViewItem(array));
                    }
                }
            }
            else if (rd1[0] == 'A')
            {
                if (!(rd2 != "ActionFlags"))
                {
                    return;
                }
                rd3 = DMiscList.SelectedNode.Parent.Text;
                if (!(rd3 != "ArticleExtraDatas") || rd1[18] != 'A')
                {
                    return;
                }
                m = rd1.Length - 1;
                i = 26;
                while (true)
                {
                    if (i < m)
                    {
                        if (rd1[i] == '\\')
                        {
                            break;
                        }
                        i++;
                        continue;
                    }
                    return;
                }
                rd4 = "Art" + rd1.Substring(25, i - 25);
                rd3 = rd1.Substring(i + 1);
                i = 1;
                while (true)
                {
                    if (CharPar[i].Length >= 7)
                    {
                        if (CharPar[i].Substring(4) == rd4)
                        {
                            break;
                        }
                        i++;
                        continue;
                    }
                    return;
                }
                rd4 = CharPar[i].Substring(0, 3);
                g = Convert.ToInt32(rd4, 16);
                m = alm[dat + g / 4] / 4;
                if (rd3[0] == 'A')
                {
                    j = alm[m + 3] / 4;
                    if (j >= stf && j < md)
                    {
                        i = DMiscList.SelectedNode.Index;
                        j += i * 4;
                        DMiscOffset.Text = "0x" + (j * 4).ToString("X");
                        for (i = 0; i < 4; i++)
                        {
                            array[0] = "Flags" + i;
                            array[1] = alm[j + i].ToString("X8");
                            DMiscParam.Items.Add(new ListViewItem(array));
                        }
                    }
                    return;
                }
                if (rd3[0] == 'C')
                {
                    g = alm[m + 10] / 4;
                    if (g < stf || g >= md)
                    {
                        return;
                    }
                    if (rd2 == "CollisionData")
                    {
                        array[0] = "CollisionData Offset";
                        array[1] = "0x" + (g * 4).ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Entry Offset";
                        array[1] = "0x" + alm[g].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        k = alm[g] / 4;
                        if (k >= stf && k < md)
                        {
                            array[0] = "";
                            array[1] = "";
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "Data Offset";
                            array[1] = "0x" + alm[k].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                        }
                        return;
                    }
                    h = alm[g] / 4;
                    if (h < stf || h >= md)
                    {
                        return;
                    }
                    DMiscOffset.Text = "0x" + alm[h].ToString("X");
                    m = alm[h] + 3;
                    n = alm[h] + 32;
                    for (i = stf; i < md; i++)
                    {
                        if (alm[i] > m && alm[i] < n)
                        {
                            rmv = i * 4;
                            for (mov = 0; mov < par; mov++)
                            {
                                if (asc[mov] == rmv)
                                {
                                    n = alm[i];
                                    break;
                                }
                            }
                        }
                    }
                    g = (n - alm[h]) / 4;
                    j = alm[h] / 4;
                    array[0] = "Type";
                    array[1] = "0x" + alm[j].ToString("X");
                    DMiscParam.Items.Add(new ListViewItem(array));
                    i = 1;
                    if (alm[j] == 33554432)
                    {
                        if (g > 4)
                        {
                            array[0] = "Data1";
                            array[1] = "0x" + alm[j + 1].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            i = 2;
                        }
                    }
                    else if (alm[j] == 0 && g > 5)
                    {
                        array[0] = "Data1";
                        array[1] = "0x" + alm[j + 1].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Data2";
                        array[1] = "0x" + alm[j + 2].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        i = 3;
                    }
                    while (i < g)
                    {
                        bitf = BitConverter.GetBytes(alm[j + i]);
                        rdfr = BitConverter.ToSingle(bitf, 0);
                        array[0] = "Unknown" + i;
                        array[1] = rdfr.ToString();
                        DMiscParam.Items.Add(new ListViewItem(array));
                        i++;
                    }
                    return;
                }
                if (rd3[0] == 'D')
                {
                    k = alm[m + 11] / 4;
                    if (k < stf || k >= md)
                    {
                        return;
                    }
                    if (rd2 == "Data2")
                    {
                        DMiscOffset.Text = "0x" + (k * 4).ToString("X");
                        array[0] = "Data Offset";
                        array[1] = alm[k].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Count";
                        array[1] = alm[k + 1].ToString();
                        DMiscParam.Items.Add(new ListViewItem(array));
                        return;
                    }
                    g = alm[k] / 4;
                    if (g >= stf && g < md)
                    {
                        i = DMiscList.SelectedNode.Index;
                        g += i * 8;
                        DMiscOffset.Text = "0x" + (g * 4).ToString("X");
                        array[0] = "Unknown Flags0";
                        array[1] = alm[g].ToString("X8");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Unknown Flags1";
                        array[1] = alm[g + 1].ToString("X8");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        for (i = 2; i < 8; i++)
                        {
                            bitf = BitConverter.GetBytes(alm[g + i]);
                            rdfr = BitConverter.ToSingle(bitf, 0);
                            array[0] = "Unknown" + i;
                            array[1] = rdfr.ToString();
                            DMiscParam.Items.Add(new ListViewItem(array));
                        }
                    }
                    return;
                }
                k = alm[m + 9] / 4;
                if (k < stf || k >= md)
                {
                    return;
                }
                if (rd2[0] == 'M')
                {
                    DMiscOffset.Text = "0x" + (k * 4).ToString("X");
                    array[0] = "Entry Offset";
                    array[1] = "0x" + alm[k].ToString("X");
                    DMiscParam.Items.Add(new ListViewItem(array));
                    array[0] = "BoneSwitch Count";
                    array[1] = alm[k + 1].ToString();
                    DMiscParam.Items.Add(new ListViewItem(array));
                    array[0] = "Data Offset";
                    array[1] = "0x" + alm[k + 2].ToString("X");
                    DMiscParam.Items.Add(new ListViewItem(array));
                    array[0] = "Data Count";
                    array[1] = alm[k + 3].ToString();
                    DMiscParam.Items.Add(new ListViewItem(array));
                    return;
                }
                if (rd2 == "Data")
                {
                    h = alm[k + 2] / 4;
                    g = alm[k + 3];
                    if (h < stf || h >= md || g <= 0 || g >= 51)
                    {
                        return;
                    }
                    DMiscOffset.Text = "0x" + (h * 4).ToString("X");
                    if (g == 0)
                    {
                        array[0] = "Value0";
                        array[1] = "0x" + alm[h].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Value1";
                        array[1] = "0x" + alm[h + 1].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        return;
                    }
                    for (j = 0; j < g; j++)
                    {
                        array[0] = "Data" + j + "-0";
                        array[1] = "0x" + alm[h].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Data" + j + "-1";
                        array[1] = "0x" + alm[h + 1].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        h += 2;
                    }
                    return;
                }
                if (rd2 == "Hidden")
                {
                    h = alm[k] / 4;
                    if (h >= stf && h < md)
                    {
                        DMiscOffset.Text = "0x" + (h * 4).ToString("X");
                        array[0] = "DataOffset";
                        array[1] = "0x" + alm[h].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                    }
                    return;
                }
                if (rd2 == "Visible")
                {
                    h = alm[k] / 4 + 1;
                    if (h >= stf && h < md)
                    {
                        DMiscOffset.Text = "0x" + (h * 4).ToString("X");
                        array[0] = "DataOffset";
                        array[1] = "0x" + alm[h].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                    }
                    return;
                }
                if (rd3[16] == 'H')
                {
                    h = alm[k] / 4;
                }
                else
                {
                    h = alm[k] / 4 + 1;
                }
                if (h < stf || h >= md || alm[h] < 8096 || alm[h] >= alm[25])
                {
                    return;
                }
                if (rd2 == "List")
                {
                    i = DMiscList.SelectedNode.Parent.Parent.Index;
                    k = alm[h] / 4 + i * 2;
                    if (alm[k] < 8096 || alm[k] >= alm[25])
                    {
                        return;
                    }
                    n = DMiscList.SelectedNode.Parent.Index;
                    j = alm[k] / 4 + n * 2;
                    if (alm[j] < 8096 || alm[j] >= tds[25])
                    {
                        return;
                    }
                    DMiscOffset.Text = "0x" + alm[j].ToString("X");
                    g = alm[j + 1];
                    h = alm[j] / 4;
                    if (g > 0 && g < 150)
                    {
                        for (j = 0; j < g; j++)
                        {
                            array[0] = "Data" + j;
                            array[1] = "0x" + alm[h + j].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                        }
                    }
                }
                else if (rd2[4] == 'S')
                {
                    i = DMiscList.SelectedNode.Index;
                    k = alm[h] / 4 + i * 2;
                    DMiscOffset.Text = "0x" + (k * 4).ToString("X");
                    array[0] = "DataOffset";
                    array[1] = "0x" + alm[k].ToString("X");
                    DMiscParam.Items.Add(new ListViewItem(array));
                    array[0] = "Count";
                    array[1] = alm[k + 1].ToString();
                    DMiscParam.Items.Add(new ListViewItem(array));
                }
                else
                {
                    i = DMiscList.SelectedNode.Parent.Index;
                    k = alm[h] / 4 + i * 2;
                    if (alm[k] >= 8096 && alm[k] < alm[25])
                    {
                        n = DMiscList.SelectedNode.Index;
                        j = alm[k] / 4 + n * 2;
                        DMiscOffset.Text = "0x" + (j * 4).ToString("X");
                        array[0] = "DataOffset";
                        array[1] = "0x" + alm[j].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Count";
                        array[1] = alm[j + 1].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                    }
                }
            }
            else if (rd1[0] == 'E')
            {
                if (rd1[5] == 'D')
                {
                    h = DMiscList.SelectedNode.Level;
                    j = 0;
                    if (h == 1)
                    {
                        g = DMiscList.SelectedNode.Index;
                    }
                    else if (h == 2)
                    {
                        g = DMiscList.SelectedNode.Parent.Index;
                    }
                    else if (h == 3)
                    {
                        g = DMiscList.SelectedNode.Parent.Parent.Index;
                    }
                    else if (h == 4)
                    {
                        g = DMiscList.SelectedNode.Parent.Parent.Parent.Index;
                    }
                    else if (h == 5)
                    {
                        g = DMiscList.SelectedNode.Parent.Parent.Parent.Parent.Index;
                    }
                    else if (h == 6)
                    {
                        g = DMiscList.SelectedNode.Parent.Parent.Parent.Parent.Parent.Index;
                    }
                    i = 1;
                    while (true)
                    {
                        if (CharPar[i].Length < 7)
                        {
                            return;
                        }
                        if (CharPar[i][0] == 'X' && !Uri.IsHexDigit(CharPar[i][1]))
                        {
                            if (j == g)
                            {
                                break;
                            }
                            j++;
                        }
                        i++;
                    }
                    rd4 = CharPar[i].Substring(4);
                    n = rd4.Length;
                    an2 = dat;
                    j = 2;
                    while (j < n && rd4[j] == '-')
                    {
                        j += 3;
                    }
                    rd1 = CharPar[i].Substring(0, 3);
                    if (h == 1 && rd1 == "XNS")
                    {
                        an3 = 0;
                        for (k = 0; k < j; k += 3)
                        {
                            rd3 = rd4.Substring(k, 2);
                            g = Convert.ToInt32(rd3, 16);
                            an3 = an2 + g;
                            an4 = alm[an3];
                            an2 = an4 / 4;
                            if (an2 < stf || an2 >= md)
                            {
                                break;
                            }
                        }
                    }
                    else
                    {
                        for (k = 0; k < j; k += 3)
                        {
                            rd3 = rd4.Substring(k, 2);
                            g = Convert.ToInt32(rd3, 16);
                            an4 = alm[an2 + g];
                            an2 = an4 / 4;
                            if (an2 < stf || an2 >= md)
                            {
                                break;
                            }
                        }
                    }
                    if (k <= j)
                    {
                        return;
                    }
                    rd3 = DMiscList.SelectedNode.Parent.Text;
                    if (rd1 == "XNS")
                    {
                        if (h == 1)
                        {
                            rd3 = DMiscList.SelectedNode.Text;
                            DMiscOffset.Text = "0x" + (an3 * 4).ToString("X");
                            array[0] = rd3 + " Offset";
                            array[1] = "0x" + alm[an3].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = rd3 + " Count";
                            array[1] = "0x" + alm[an3 + 1];
                            DMiscParam.Items.Add(new ListViewItem(array));
                            return;
                        }
                        if (h == 2)
                        {
                            an2 += DMiscList.SelectedNode.Index * 2;
                            DMiscOffset.Text = "0x" + (an2 * 4).ToString("X");
                            array[0] = "Sound List Offset";
                            array[1] = "0x" + alm[an2].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "Sound List Count";
                            array[1] = "0x" + alm[an2 + 1];
                            DMiscParam.Items.Add(new ListViewItem(array));
                            return;
                        }
                        an2 += DMiscList.SelectedNode.Parent.Index * 2;
                        j = alm[an2] / 4;
                        g = alm[an2 + 1];
                        if (j >= stf && j < md)
                        {
                            DMiscOffset.Text = "0x" + alm[an2].ToString("X");
                            for (i = 0; i < g; i++)
                            {
                                array[0] = "SFX ID";
                                array[1] = "0x" + alm[j + i].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                            }
                        }
                    }
                    else if (rd1 == "XKV")
                    {
                        if (h == 1)
                        {
                            DMiscOffset.Text = "0x" + (an2 * 4).ToString("X");
                            array[0] = "Offset0";
                            array[1] = "0x" + alm[an2].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "Offset1";
                            array[1] = "0x" + alm[an2 + 1].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "Offset2";
                            array[1] = "0x" + alm[an2 + 2].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "Offset3";
                            array[1] = "0x" + alm[an2 + 3].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "Offset4";
                            array[1] = "0x" + alm[an2 + 4].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "Offset5";
                            array[1] = "0x" + alm[an2 + 5].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            return;
                        }
                        if (h == 2)
                        {
                            an2 += DMiscList.SelectedNode.Index;
                            j = alm[an2] / 4;
                            if (j >= stf && j < md)
                            {
                                DMiscOffset.Text = "0x" + alm[an2].ToString("X");
                                array[0] = "Entry Offset";
                                array[1] = "0x" + alm[j].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                                array[0] = "BoneSwitch Count";
                                array[1] = alm[j + 1].ToString();
                                DMiscParam.Items.Add(new ListViewItem(array));
                                array[0] = "Data Offset";
                                array[1] = "0x" + alm[j + 2].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                                array[0] = "Data Count";
                                array[1] = alm[j + 3].ToString();
                                DMiscParam.Items.Add(new ListViewItem(array));
                            }
                            return;
                        }
                        if (h == 3)
                        {
                            an2 += DMiscList.SelectedNode.Parent.Index;
                            i = alm[an2] / 4;
                            if (i >= stf && i < md)
                            {
                                j = alm[i] / 4;
                                if (j >= stf && j < md)
                                {
                                    j += DMiscList.SelectedNode.Index;
                                    DMiscOffset.Text = "0x" + (j * 4).ToString("X");
                                    array[0] = "DataOffset";
                                    array[1] = "0x" + alm[j].ToString("X");
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                }
                            }
                            return;
                        }
                        if (h == 4)
                        {
                            an2 += DMiscList.SelectedNode.Parent.Parent.Index;
                            i = alm[an2] / 4;
                            if (i < stf || i >= md)
                            {
                                return;
                            }
                            j = alm[i] / 4;
                            if (j >= stf && j < md)
                            {
                                j += DMiscList.SelectedNode.Parent.Index;
                                i = alm[j] / 4;
                                if (i >= stf && i < md)
                                {
                                    i += DMiscList.SelectedNode.Index * 2;
                                    DMiscOffset.Text = "0x" + (i * 4).ToString("X");
                                    array[0] = "DataOffset";
                                    array[1] = "0x" + alm[i].ToString("X");
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                    array[0] = "Count";
                                    array[1] = alm[i + 1].ToString();
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                }
                            }
                            return;
                        }
                        if (h == 5)
                        {
                            an2 += DMiscList.SelectedNode.Parent.Parent.Parent.Index;
                            i = alm[an2] / 4;
                            if (i < stf || i >= md)
                            {
                                return;
                            }
                            j = alm[i] / 4;
                            if (j < stf || j >= md)
                            {
                                return;
                            }
                            j += DMiscList.SelectedNode.Parent.Parent.Index;
                            i = alm[j] / 4;
                            if (i >= stf && i < md)
                            {
                                i += DMiscList.SelectedNode.Parent.Index * 2;
                                j = alm[i] / 4;
                                if (j >= stf && j < md)
                                {
                                    j += DMiscList.SelectedNode.Index * 2;
                                    DMiscOffset.Text = "0x" + (j * 4).ToString("X");
                                    array[0] = "DataOffset";
                                    array[1] = "0x" + alm[j].ToString("X");
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                    array[0] = "Count";
                                    array[1] = alm[j + 1].ToString();
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                }
                            }
                            return;
                        }
                        an2 += DMiscList.SelectedNode.Parent.Parent.Parent.Parent.Index;
                        i = alm[an2] / 4;
                        if (i < stf || i >= md)
                        {
                            return;
                        }
                        j = alm[i] / 4;
                        if (j < stf || j >= md)
                        {
                            return;
                        }
                        j += DMiscList.SelectedNode.Parent.Parent.Parent.Index;
                        i = alm[j] / 4;
                        if (i < stf || i >= md)
                        {
                            return;
                        }
                        i += DMiscList.SelectedNode.Parent.Parent.Index * 2;
                        j = alm[i] / 4;
                        if (j < stf || j >= md)
                        {
                            return;
                        }
                        j += DMiscList.SelectedNode.Parent.Index * 2;
                        i = alm[j] / 4;
                        g = alm[j + 1];
                        if (i >= stf && i < md && g > 0 && g < 50)
                        {
                            DMiscOffset.Text = "0x" + (i * 4).ToString("X");
                            for (j = 0; j < g; j++)
                            {
                                array[0] = "Data" + j;
                                array[1] = "0x" + alm[i + j].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                            }
                        }
                    }
                    else
                    {
                        if (!(rd1 == "XKA"))
                        {
                            return;
                        }
                        if (h == 1)
                        {
                            rd3 = DMiscList.SelectedNode.Text;
                            DMiscOffset.Text = "0x" + (an2 * 4).ToString("X");
                            array[0] = "DataOffset";
                            array[1] = "0x" + alm[an2].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "Data1";
                            array[1] = alm[an2 + 1].ToString();
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "Data2";
                            array[1] = alm[an2 + 2].ToString();
                            DMiscParam.Items.Add(new ListViewItem(array));
                            array[0] = "Params Offset";
                            array[1] = "0x" + alm[an2 + 3].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            return;
                        }
                        if (h == 2)
                        {
                            if (rd2 == "ExtraData")
                            {
                                i = alm[an2] / 4;
                                if (i < stf || i >= md)
                                {
                                    return;
                                }
                                array[0] = "List Offset";
                                array[1] = "0x" + alm[an2].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                                array[0] = "DataOffset1";
                                array[1] = "0x" + alm[i].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                                array[0] = "Count1";
                                array[1] = "0x" + alm[i + 1].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                                array[0] = "DataOffset2";
                                array[1] = "0x" + alm[i + 2].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                                array[0] = "Count2";
                                array[1] = "0x" + alm[i + 3].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                                j = alm[i + 2] / 4;
                                if (j >= stf && j < md)
                                {
                                    array[0] = "";
                                    array[1] = "";
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                    array[0] = "DataOffset2";
                                    array[1] = "0x" + alm[i + 2].ToString("X");
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                    array[0] = "DataOffset2-0";
                                    array[1] = "0x" + alm[j].ToString("X");
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                }
                                j = alm[i] / 4;
                                if (j < stf || j >= md)
                                {
                                    return;
                                }
                                array[0] = "";
                                array[1] = "";
                                DMiscParam.Items.Add(new ListViewItem(array));
                                array[0] = "DataOffset1";
                                array[1] = "0x" + alm[i].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                                array[0] = "DataOffset1-0";
                                array[1] = "0x" + alm[j].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                                i = alm[j] / 4;
                                if (i >= stf && i < md)
                                {
                                    array[0] = "";
                                    array[1] = "";
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                    array[0] = "DataOffset1-0";
                                    array[1] = "0x" + alm[j].ToString("X");
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                    array[0] = "DataOffset1-0-0";
                                    array[1] = "0x" + alm[i].ToString("X");
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                    array[0] = "Count";
                                    array[1] = "0x" + alm[i + 1].ToString("X");
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                    j = alm[i] / 4;
                                    if (j >= stf && j < md)
                                    {
                                        array[0] = "";
                                        array[1] = "";
                                        DMiscParam.Items.Add(new ListViewItem(array));
                                        array[0] = "DataOffset1-0-0";
                                        array[1] = "0x" + alm[i].ToString("X");
                                        DMiscParam.Items.Add(new ListViewItem(array));
                                        array[0] = "DataOffset";
                                        array[1] = "0x" + alm[j].ToString("X");
                                        DMiscParam.Items.Add(new ListViewItem(array));
                                        array[0] = "Count";
                                        array[1] = "0x" + alm[j + 1].ToString("X");
                                        DMiscParam.Items.Add(new ListViewItem(array));
                                    }
                                }
                                return;
                            }
                            i = alm[an2 + 3] / 4;
                            if (i >= stf && i < md)
                            {
                                DMiscOffset.Text = "0x" + (i * 4).ToString("X");
                                for (j = 0; j < 3; j++)
                                {
                                    array[0] = "Data" + j;
                                    array[1] = "0x" + alm[i + j].ToString("X");
                                    DMiscParam.Items.Add(new ListViewItem(array));
                                }
                            }
                            return;
                        }
                        i = alm[an2] / 4;
                        if (i < stf || i >= md)
                        {
                            return;
                        }
                        j = alm[i] / 4;
                        if (j < stf || j >= md)
                        {
                            return;
                        }
                        i = alm[j] / 4;
                        if (i < stf || i >= md)
                        {
                            return;
                        }
                        j = alm[i] / 4;
                        if (j < stf || j >= md)
                        {
                            return;
                        }
                        n = alm[j] / 4;
                        g = alm[j + 1];
                        if (n >= stf && n < md && g > 0 && g < 10)
                        {
                            DMiscOffset.Text = "0x" + (n * 4).ToString("X");
                            for (i = 0; i < g; i++)
                            {
                                array[0] = "Data" + i;
                                array[1] = "0x" + alm[n + i].ToString("X");
                                DMiscParam.Items.Add(new ListViewItem(array));
                            }
                        }
                    }
                    return;
                }
                if (rd1[1] == 'n')
                {
                    if (alm[dat + 26] < 8096 || alm[dat + 26] >= tds[25])
                    {
                        return;
                    }
                    if (rd2[0] == 'A')
                    {
                        k = alm[dat + 26] / 4;
                        DMiscOffset.Text = "0x" + (k * 4).ToString("X");
                        array[0] = "ArticleGroupID";
                        array[1] = alm[k].ToString();
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "ARCEntryGroup";
                        array[1] = alm[k + 1].ToString();
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Bone";
                        array[1] = "0x" + alm[k + 2].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "ActionFlags";
                        array[1] = "0x" + alm[k + 3].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "SubActionFlags";
                        array[1] = "0x" + alm[k + 4].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Actions";
                        array[1] = "0x" + alm[k + 5].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "SubActionMain";
                        array[1] = "0x" + alm[k + 6].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "SubActionGFX";
                        array[1] = "0x" + alm[k + 7].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "SubActionSFX";
                        array[1] = "0x" + alm[k + 8].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "ModelVisibility";
                        array[1] = "0x" + alm[k + 9].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "CollisionData";
                        array[1] = "0x" + alm[k + 10].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Data2";
                        array[1] = "0x" + alm[k + 11].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "Data3";
                        array[1] = "0x" + alm[k + 12].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        array[0] = "SubAction Count";
                        array[1] = "0x" + alm[k + 13].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                        return;
                    }
                    if (rd2[0] == 'D')
                    {
                        k = alm[dat + 26] / 4 + 12;
                        if (alm[k] < 8096 || alm[k] >= tds[25])
                        {
                            return;
                        }
                        an2 = alm[k];
                        m = an2 + 3;
                        n = an2 + 40;
                        if (n > tds[25])
                        {
                            n = tds[25];
                        }
                        for (j = stf; j < md; j++)
                        {
                            if (alm[j] > m && alm[j] < n)
                            {
                                rmv = j * 4;
                                for (mov = 0; mov < par; mov++)
                                {
                                    if (asc[mov] == rmv)
                                    {
                                        n = alm[j];
                                        break;
                                    }
                                }
                            }
                        }
                        g = (n - an2) / 4;
                        k = an2 / 4;
                        if (g > 1)
                        {
                            for (j = 1; j < g; j++)
                            {
                                if (alm[k + j] == -86052851)
                                {
                                    g = j;
                                    break;
                                }
                            }
                        }
                        DMiscOffset.Text = "0x" + an2.ToString("X");
                        for (i = 0; i < g; i++)
                        {
                            array[0] = "Data" + i;
                            array[1] = "0x" + alm[k + i].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                        }
                        return;
                    }
                    k = alm[dat + 26] / 4 + 4;
                    if (alm[k] < 8096 || alm[k] >= tds[25])
                    {
                        return;
                    }
                    n = alm[k] / 4 + 1;
                    if (alm[k + 3] >= 8096 && alm[k + 3] < tds[25])
                    {
                        m = alm[k + 3] / 4;
                        for (h = 0; h < 2; h++)
                        {
                            if (alm[n] == 0)
                            {
                                rd1 = "<null>";
                            }
                            else
                            {
                                j = alm[n] / 4;
                                rd1 = "";
                                if (j >= stf && j < md)
                                {
                                    i = 0;
                                    while (i < 47)
                                    {
                                        if (i % 4 == 0)
                                        {
                                            fntb[0] = (byte)((alm[j] >> 24) & 0xFF);
                                        }
                                        else if (i % 4 == 1)
                                        {
                                            fntb[0] = (byte)((alm[j] >> 16) & 0xFF);
                                        }
                                        else if (i % 4 == 2)
                                        {
                                            fntb[0] = (byte)((alm[j] >> 8) & 0xFF);
                                        }
                                        else
                                        {
                                            fntb[0] = (byte)(alm[j] & 0xFF);
                                            j++;
                                        }
                                        if (fntb[0] != 0)
                                        {
                                            rd1 += Encoding.UTF8.GetString(fntb);
                                            i++;
                                            continue;
                                        }
                                        break;
                                    }
                                }
                                else
                                {
                                    rd1 = "<ERROR>";
                                }
                            }
                            array[0] = rd1;
                            array[1] = "GFX" + h + " Offset:0x" + alm[m + h].ToString("X");
                            DMiscParam.Items.Add(new ListViewItem(array));
                            n += 2;
                        }
                        return;
                    }
                    for (h = 0; h < 2; h++)
                    {
                        if (alm[n] == 0)
                        {
                            rd1 = "<null>";
                        }
                        else
                        {
                            j = alm[n] / 4;
                            rd1 = "";
                            if (j >= stf && j < md)
                            {
                                i = 0;
                                while (i < 47)
                                {
                                    if (i % 4 == 0)
                                    {
                                        fntb[0] = (byte)((alm[j] >> 24) & 0xFF);
                                    }
                                    else if (i % 4 == 1)
                                    {
                                        fntb[0] = (byte)((alm[j] >> 16) & 0xFF);
                                    }
                                    else if (i % 4 == 2)
                                    {
                                        fntb[0] = (byte)((alm[j] >> 8) & 0xFF);
                                    }
                                    else
                                    {
                                        fntb[0] = (byte)(alm[j] & 0xFF);
                                        j++;
                                    }
                                    if (fntb[0] != 0)
                                    {
                                        rd1 += Encoding.UTF8.GetString(fntb);
                                        i++;
                                        continue;
                                    }
                                    break;
                                }
                            }
                            else
                            {
                                rd1 = "<ERROR>";
                            }
                        }
                        array[0] = "SubAction " + h;
                        array[1] = rd1;
                        DMiscParam.Items.Add(new ListViewItem(array));
                        n += 2;
                    }
                    return;
                }
                m = DMiscList.SelectedNode.Index;
                g = alm[dat + 7] + m * 8;
                if (g > 1479 && g < tds[25])
                {
                    DMiscOffset.Text = "0x" + g.ToString("X");
                    j = g / 4;
                    for (i = 0; i < 2; i++)
                    {
                        array[0] = "Flags" + i;
                        array[1] = alm[j + i].ToString("X8");
                        DMiscParam.Items.Add(new ListViewItem(array));
                    }
                }
            }
            else if (rd1[0] == 'B')
            {
                n = DMiscList.SelectedNode.Index;
                fnt = 1;
                if (rd1[10] == '1')
                {
                    if (alm[dat + 16] >= 8096 && alm[dat + 16] < tds[25])
                    {
                        k = alm[dat + 16] + n * 28;
                        fnt = 0;
                    }
                }
                else if (rd1[10] == '2')
                {
                    if (alm[dat + 17] >= 8096 && alm[dat + 17] < tds[25])
                    {
                        k = alm[dat + 17] + n * 28;
                        fnt = 0;
                    }
                }
                else if (alm[dat + 23] >= 8096 && alm[dat + 23] < tds[25])
                {
                    k = alm[dat + 23] + n * 28;
                    fnt = 0;
                }
                if (fnt == 0)
                {
                    DMiscOffset.Text = "0x" + k.ToString("X");
                    j = k / 4;
                    array[0] = "Bone";
                    array[1] = "0x" + alm[j].ToString("X");
                    DMiscParam.Items.Add(new ListViewItem(array));
                    for (i = 1; i < 7; i++)
                    {
                        bitf = BitConverter.GetBytes(alm[j + i]);
                        rdfr = BitConverter.ToSingle(bitf, 0);
                        array[0] = "Data" + (i - 1);
                        array[1] = rdfr.ToString();
                        DMiscParam.Items.Add(new ListViewItem(array));
                    }
                }
            }
            else if (rd1[0] == 'H')
            {
                if (alm[dat + 19] < 8096 || alm[dat + 19] >= tds[25])
                {
                    return;
                }
                k = alm[dat + 19] / 4;
                if (alm[k + 5] >= 8096 && alm[k + 5] < tds[25] && alm[k + 4] > 0 && alm[k + 4] < 80)
                {
                    j = alm[k + 5] / 4;
                    g = alm[k + 4];
                    DMiscOffset.Text = "0x" + alm[k + 5].ToString("X");
                    for (i = 0; i < g; i++)
                    {
                        array[0] = "Bone Index" + i;
                        array[1] = "0x" + alm[j + i].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                    }
                }
            }
            else
            {
                if (rd1[0] != 'U' || alm[dat + 24] < 8096 || alm[dat + 24] >= tds[25])
                {
                    return;
                }
                k = alm[dat + 24] / 4;
                if (alm[k] >= 8096 && alm[k] < tds[25] && alm[k + 1] > 0 && alm[k + 1] < 80)
                {
                    j = alm[k] / 4;
                    g = alm[k + 1];
                    DMiscOffset.Text = "0x" + alm[k].ToString("X");
                    for (i = 0; i < g; i++)
                    {
                        array[0] = "Data" + i;
                        array[1] = "0x" + alm[j + i].ToString("X");
                        DMiscParam.Items.Add(new ListViewItem(array));
                    }
                }
            }
        }

        private void DMiscParam_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (DMiscList.SelectedNode == null || !(DMiscOffset.Text != "") || DMiscParam.SelectedItems.Count <= 0)
            {
                return;
            }
            if (DMiscCb.Items.Count != 3)
            {
                DMiscCb.Items.Clear();
                DMiscCb.Items.Add("Int");
                DMiscCb.Items.Add("Float");
                DMiscCb.Items.Add("HexValue");
            }
            rd1 = DMiscList.SelectedNode.FullPath;
            rd2 = DMiscList.SelectedNode.Text;
            if (rd1 == rd2)
            {
                if (rd1 == "BoneReferences")
                {
                    i = DMiscParam.SelectedItems[0].Index;
                    rd3 = DMiscOffset.Text.Substring(2);
                    h = Convert.ToInt32(rd3, 16);
                    j = h / 4 + i;
                    DMiscPtxt.Visible = true;
                    DMiscDone.Visible = true;
                    DMiscCb.Visible = true;
                    DMiscPtxt.Text = alm[j].ToString("X");
                    DMiscCb.SelectedIndex = 2;
                    DMiscPtxt.MaxLength = 8;
                }
                else if (rd1 == "HandBones")
                {
                    i = DMiscParam.SelectedItems[0].Index;
                    if (i < 4)
                    {
                        rd3 = DMiscOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd3, 16);
                        j = h / 4 + i;
                        DMiscPtxt.Visible = true;
                        DMiscDone.Visible = true;
                        DMiscCb.Visible = true;
                        DMiscPtxt.Text = alm[j].ToString("X");
                        DMiscCb.SelectedIndex = 2;
                        DMiscPtxt.MaxLength = 8;
                    }
                    else
                    {
                        DMiscPtxt.Visible = false;
                        DMiscDone.Visible = false;
                        DMiscCb.Visible = false;
                    }
                }
                else if (rd1 == "ExtraActionInterrupts")
                {
                    i = DMiscParam.SelectedItems[0].Index;
                    if (i < 2)
                    {
                        rd1 = DMiscOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                        j = h / 4 + i;
                        DMiscPtxt.Visible = true;
                        DMiscDone.Visible = true;
                        DMiscCb.Visible = true;
                        DMiscPtxt.Text = alm[j].ToString("X");
                        DMiscCb.SelectedIndex = 2;
                        DMiscPtxt.MaxLength = 8;
                    }
                    else
                    {
                        DMiscPtxt.Visible = false;
                        DMiscDone.Visible = false;
                        DMiscCb.Visible = false;
                    }
                }
                else if (rd1 == "DataFlags")
                {
                    i = DMiscParam.SelectedItems[0].Index;
                    rd1 = DMiscOffset.Text.Substring(2);
                    h = Convert.ToInt32(rd1, 16);
                    j = h / 4 + i;
                    DMiscPtxt.Visible = true;
                    DMiscDone.Visible = true;
                    DMiscCb.Visible = false;
                    DMiscPtxt.Text = alm[j].ToString("X8");
                    DMiscCb.SelectedIndex = 2;
                    DMiscPtxt.MaxLength = 8;
                }
            }
            else if (rd1[0] == 'M')
            {
                if (rd1[1] == 'o')
                {
                    if (rd1.Length > 19)
                    {
                        if (rd2 == "List")
                        {
                            i = DMiscParam.SelectedItems[0].Index;
                            rd1 = DMiscOffset.Text.Substring(2);
                            h = Convert.ToInt32(rd1, 16);
                            j = h / 4 + i;
                            DMiscPtxt.Visible = true;
                            DMiscDone.Visible = true;
                            DMiscCb.Visible = true;
                            DMiscPtxt.Text = alm[j].ToString("X");
                            DMiscCb.SelectedIndex = 2;
                            DMiscPtxt.MaxLength = 8;
                        }
                        else if (rd2[0] == 'D')
                        {
                            i = DMiscParam.SelectedItems[0].Index;
                            rd1 = DMiscOffset.Text.Substring(2);
                            h = Convert.ToInt32(rd1, 16);
                            j = h / 4 + i;
                            DMiscPtxt.Visible = true;
                            DMiscDone.Visible = true;
                            DMiscCb.Visible = true;
                            DMiscPtxt.Text = alm[j].ToString("X");
                            DMiscCb.SelectedIndex = 2;
                            DMiscPtxt.MaxLength = 8;
                        }
                    }
                }
                else if (rd1[12] == 'M')
                {
                    if (rd1[13] == 'u')
                    {
                        if (rd2 == "Multi Jump")
                        {
                            i = DMiscParam.SelectedItems[0].Index;
                            if (i < 4)
                            {
                                rd1 = DMiscOffset.Text.Substring(2);
                                h = Convert.ToInt32(rd1, 16);
                                j = h / 4 + i;
                                DMiscPtxt.Visible = true;
                                DMiscDone.Visible = true;
                                DMiscCb.Visible = true;
                                bitf = BitConverter.GetBytes(alm[j]);
                                rdfr = BitConverter.ToSingle(bitf, 0);
                                DMiscPtxt.Text = rdfr.ToString();
                                DMiscCb.SelectedIndex = 1;
                                DMiscPtxt.MaxLength = 25;
                            }
                            else if (i == 6)
                            {
                                rd1 = DMiscOffset.Text.Substring(2);
                                h = Convert.ToInt32(rd1, 16);
                                j = h / 4 + 6;
                                DMiscPtxt.Visible = true;
                                DMiscDone.Visible = true;
                                DMiscCb.Visible = true;
                                DMiscPtxt.Text = alm[j].ToString();
                                DMiscCb.SelectedIndex = 0;
                                DMiscPtxt.MaxLength = 10;
                            }
                            else
                            {
                                DMiscPtxt.Visible = false;
                                DMiscDone.Visible = false;
                                DMiscCb.Visible = false;
                            }
                        }
                        else
                        {
                            i = DMiscParam.SelectedItems[0].Index;
                            rd1 = DMiscOffset.Text.Substring(2);
                            h = Convert.ToInt32(rd1, 16);
                            j = h / 4 + i;
                            DMiscPtxt.Visible = true;
                            DMiscDone.Visible = true;
                            DMiscCb.Visible = true;
                            bitf = BitConverter.GetBytes(alm[j]);
                            rdfr = BitConverter.ToSingle(bitf, 0);
                            DMiscPtxt.Text = rdfr.ToString();
                            DMiscCb.SelectedIndex = 1;
                            DMiscPtxt.MaxLength = 25;
                        }
                    }
                    else if (rd1[25] == '2')
                    {
                        i = DMiscParam.SelectedItems[0].Index;
                        rd1 = DMiscOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                        j = h / 4 + i;
                        DMiscPtxt.Visible = true;
                        DMiscDone.Visible = true;
                        DMiscCb.Visible = false;
                        DMiscPtxt.Text = alm[j].ToString("X8");
                        DMiscPtxt.MaxLength = 8;
                    }
                    else if (rd1[25] == '5')
                    {
                        i = DMiscParam.SelectedItems[0].Index;
                        rd1 = DMiscOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                        j = h / 4 + i;
                        DMiscPtxt.Visible = true;
                        DMiscDone.Visible = true;
                        DMiscCb.Visible = true;
                        DMiscPtxt.Text = alm[j].ToString("X");
                        DMiscCb.SelectedIndex = 2;
                        DMiscPtxt.MaxLength = 8;
                    }
                    else if (rd2 == "Misc Section 1" || rd2 == "List")
                    {
                        i = DMiscParam.SelectedItems[0].Index;
                        rd1 = DMiscOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                        j = h / 4 + i;
                        DMiscPtxt.Visible = true;
                        DMiscDone.Visible = true;
                        DMiscCb.Visible = true;
                        DMiscPtxt.Text = alm[j].ToString("X");
                        DMiscCb.SelectedIndex = 2;
                        DMiscPtxt.MaxLength = 8;
                    }
                }
                else if (rd1[12] == 'F')
                {
                    if (rd1.Length > 29)
                    {
                        i = DMiscParam.SelectedItems[0].Index;
                        rd1 = DMiscOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                        j = h / 4 + i;
                        DMiscPtxt.Visible = true;
                        DMiscDone.Visible = true;
                        if (i == 0)
                        {
                            DMiscPtxt.Text = alm[j].ToString("X");
                            DMiscCb.SelectedIndex = 2;
                            DMiscPtxt.MaxLength = 8;
                            return;
                        }
                        DMiscCb.Visible = true;
                        bitf = BitConverter.GetBytes(alm[j]);
                        rdfr = BitConverter.ToSingle(bitf, 0);
                        DMiscPtxt.Text = rdfr.ToString();
                        DMiscCb.SelectedIndex = 1;
                        DMiscPtxt.MaxLength = 25;
                    }
                }
                else if (rd1[12] == 'H')
                {
                    if (rd1.Length <= 23)
                    {
                        return;
                    }
                    i = DMiscParam.SelectedItems[0].Index;
                    if (i == 8)
                    {
                        DMiscPtxt.Visible = false;
                        DMiscDone.Visible = false;
                        DMiscCb.Visible = false;
                        return;
                    }
                    rd3 = DMiscOffset.Text.Substring(2);
                    h = Convert.ToInt32(rd3, 16);
                    j = h / 4;
                    if (i == 7)
                    {
                        DMiscPtxt.Visible = true;
                        DMiscDone.Visible = true;
                        DMiscCb.Visible = false;
                        DMiscPtxt.Text = alm[j + 7].ToString("X8");
                        DMiscPtxt.MaxLength = 8;
                        return;
                    }
                    if (i < 7)
                    {
                        DMiscPtxt.Visible = true;
                        DMiscDone.Visible = true;
                        DMiscCb.Visible = true;
                        bitf = BitConverter.GetBytes(alm[j + i]);
                        rdfr = BitConverter.ToSingle(bitf, 0);
                        DMiscPtxt.Text = rdfr.ToString();
                        DMiscCb.SelectedIndex = 1;
                        DMiscPtxt.MaxLength = 25;
                        return;
                    }
                    if (i == 9)
                    {
                        DMiscPtxt.Visible = true;
                        DMiscDone.Visible = true;
                        DMiscCb.Visible = true;
                        DMiscPtxt.Text = ((alm[j + 7] >> 23) & 0x1FF).ToString("X");
                        DMiscCb.Items.Clear();
                        DMiscCb.Items.Add("Int");
                        DMiscCb.Items.Add("HexValue");
                        DMiscCb.SelectedIndex = 1;
                        DMiscPtxt.MaxLength = 3;
                        return;
                    }
                    DMiscPtxt.Visible = false;
                    DMiscDone.Visible = false;
                    DMiscCb.Visible = false;
                    if (i == 10)
                    {
                        DMiscCb.Items.Clear();
                        DMiscCb.Items.Add("False");
                        DMiscCb.Items.Add("True");
                        DMiscCb.SelectedIndex = ((alm[j + 7] >> 16) & 1);
                        DMiscCb.Visible = true;
                    }
                    else if (i == 11)
                    {
                        DMiscCb.Items.Clear();
                        DMiscCb.Items.Add("Low");
                        DMiscCb.Items.Add("Middle");
                        DMiscCb.Items.Add("High");
                        DMiscCb.Items.Add("Unknown");
                        DMiscCb.SelectedIndex = ((alm[j + 7] >> 19) & 3);
                        DMiscCb.Visible = true;
                    }
                    else if (i == 12)
                    {
                        DMiscCb.Items.Clear();
                        DMiscCb.Items.Add("0");
                        DMiscCb.Items.Add("1");
                        DMiscCb.Items.Add("2");
                        DMiscCb.Items.Add("3");
                        DMiscCb.SelectedIndex = ((alm[j + 7] >> 21) & 3);
                        DMiscCb.Visible = true;
                    }
                }
                else if (rd1[12] == 'L')
                {
                    if (rd1.Length > 23)
                    {
                        i = DMiscParam.SelectedItems[0].Index;
                        rd1 = DMiscOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                        j = h / 4 + i;
                        bitf = BitConverter.GetBytes(alm[j]);
                        rdfr = BitConverter.ToSingle(bitf, 0);
                        DMiscPtxt.Visible = true;
                        DMiscDone.Visible = true;
                        DMiscCb.Visible = true;
                        DMiscPtxt.Text = rdfr.ToString();
                        DMiscCb.SelectedIndex = 1;
                        DMiscPtxt.MaxLength = 25;
                    }
                }
                else if (rd1[12] == 'B')
                {
                    i = DMiscParam.SelectedItems[0].Index;
                    rd1 = DMiscOffset.Text.Substring(2);
                    h = Convert.ToInt32(rd1, 16);
                    j = h / 4 + i;
                    DMiscPtxt.Visible = true;
                    DMiscDone.Visible = true;
                    DMiscCb.Visible = true;
                    DMiscPtxt.Text = alm[j].ToString("X");
                    DMiscCb.SelectedIndex = 2;
                    DMiscPtxt.MaxLength = 8;
                }
                else if (rd1[12] == 'I')
                {
                    if (rd2 == "Item Bones")
                    {
                        i = DMiscParam.SelectedItems[0].Index;
                        if (i <= 2 || i == 5)
                        {
                            rd1 = DMiscOffset.Text.Substring(2);
                            h = Convert.ToInt32(rd1, 16);
                            j = h / 4 + i;
                            DMiscPtxt.Visible = true;
                            DMiscDone.Visible = true;
                            DMiscCb.Visible = true;
                            DMiscPtxt.Text = alm[j].ToString("X");
                            DMiscCb.SelectedIndex = 2;
                            DMiscPtxt.MaxLength = 8;
                        }
                        else
                        {
                            DMiscPtxt.Visible = false;
                            DMiscDone.Visible = false;
                            DMiscCb.Visible = false;
                        }
                    }
                    else
                    {
                        i = DMiscParam.SelectedItems[0].Index;
                        rd1 = DMiscOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                        j = h / 4 + i;
                        DMiscPtxt.Visible = true;
                        DMiscDone.Visible = true;
                        DMiscCb.Visible = true;
                        DMiscPtxt.Text = alm[j].ToString("X");
                        DMiscCb.SelectedIndex = 2;
                        DMiscPtxt.MaxLength = 8;
                    }
                }
                else if (rd1[12] == 'S')
                {
                    if (rd2 == "List")
                    {
                        i = DMiscParam.SelectedItems[0].Index;
                        rd1 = DMiscOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                        j = h / 4 + i;
                        DMiscPtxt.Visible = true;
                        DMiscDone.Visible = true;
                        DMiscCb.Visible = true;
                        DMiscPtxt.Text = alm[j].ToString("X");
                        DMiscCb.SelectedIndex = 2;
                        DMiscPtxt.MaxLength = 8;
                    }
                }
                else if (rd1[12] == 'G')
                {
                    i = DMiscParam.SelectedItems[0].Index;
                    rd1 = DMiscOffset.Text.Substring(2);
                    h = Convert.ToInt32(rd1, 16);
                    j = h / 4 + i;
                    DMiscPtxt.Visible = true;
                    DMiscDone.Visible = true;
                    DMiscCb.Visible = true;
                    if (i == 20)
                    {
                        DMiscPtxt.Text = alm[j].ToString("X");
                        DMiscCb.SelectedIndex = 2;
                        DMiscPtxt.MaxLength = 8;
                    }
                    else
                    {
                        bitf = BitConverter.GetBytes(alm[j]);
                        rdfr = BitConverter.ToSingle(bitf, 0);
                        DMiscPtxt.Text = rdfr.ToString();
                        DMiscCb.SelectedIndex = 1;
                        DMiscPtxt.MaxLength = 25;
                    }
                }
                else if (rd1[12] == 'C')
                {
                    if (rd1[13] == 'r')
                    {
                        i = DMiscParam.SelectedItems[0].Index;
                        rd1 = DMiscOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                        j = h / 4 + i;
                        bitf = BitConverter.GetBytes(alm[j]);
                        rdfr = BitConverter.ToSingle(bitf, 0);
                        DMiscPtxt.Visible = true;
                        DMiscDone.Visible = true;
                        DMiscCb.Visible = true;
                        DMiscPtxt.Text = rdfr.ToString();
                        DMiscCb.SelectedIndex = 1;
                        DMiscPtxt.MaxLength = 25;
                    }
                    else if (rd2 == "Data")
                    {
                        i = DMiscParam.SelectedItems[0].Index;
                        if (i == 0)
                        {
                            rd1 = DMiscOffset.Text.Substring(2);
                            h = Convert.ToInt32(rd1, 16);
                            j = h / 4;
                            DMiscPtxt.Visible = true;
                            DMiscDone.Visible = true;
                            DMiscCb.Visible = true;
                            DMiscPtxt.Text = alm[j].ToString("X");
                            DMiscCb.SelectedIndex = 2;
                            DMiscPtxt.MaxLength = 8;
                        }
                        else if (i < 3 && DMiscParam.Items.Count == 6)
                        {
                            DMiscPtxt.Visible = false;
                            DMiscDone.Visible = false;
                            DMiscCb.Visible = false;
                        }
                        else
                        {
                            rd1 = DMiscOffset.Text.Substring(2);
                            h = Convert.ToInt32(rd1, 16);
                            j = h / 4 + i;
                            bitf = BitConverter.GetBytes(alm[j]);
                            rdfr = BitConverter.ToSingle(bitf, 0);
                            DMiscPtxt.Visible = true;
                            DMiscDone.Visible = true;
                            DMiscCb.Visible = true;
                            DMiscPtxt.Text = rdfr.ToString();
                            DMiscCb.SelectedIndex = 1;
                            DMiscPtxt.MaxLength = 25;
                        }
                    }
                    else if (rd2 == "List")
                    {
                        i = DMiscParam.SelectedItems[0].Index;
                        rd1 = DMiscOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                        j = h / 4 + i;
                        DMiscPtxt.Visible = true;
                        DMiscDone.Visible = true;
                        DMiscCb.Visible = true;
                        DMiscPtxt.Text = alm[j].ToString("X");
                        DMiscCb.SelectedIndex = 2;
                        DMiscPtxt.MaxLength = 8;
                    }
                }
                else if (rd1[12] == 'T')
                {
                    i = DMiscParam.SelectedItems[0].Index;
                    rd1 = DMiscOffset.Text.Substring(2);
                    h = Convert.ToInt32(rd1, 16);
                    j = h / 4 + i;
                    DMiscPtxt.Visible = true;
                    DMiscDone.Visible = true;
                    DMiscCb.Visible = true;
                    if (i == 0)
                    {
                        DMiscPtxt.Text = alm[j].ToString();
                        DMiscCb.SelectedIndex = 0;
                        DMiscPtxt.MaxLength = 10;
                    }
                    else
                    {
                        bitf = BitConverter.GetBytes(alm[j]);
                        rdfr = BitConverter.ToSingle(bitf, 0);
                        DMiscPtxt.Text = rdfr.ToString();
                        DMiscCb.SelectedIndex = 1;
                        DMiscPtxt.MaxLength = 25;
                    }
                }
            }
            else if (rd1[0] == 'A')
            {
                rd3 = DMiscList.SelectedNode.Parent.Text;
                if (rd3 == "ActionFlags")
                {
                    i = DMiscParam.SelectedItems[0].Index;
                    rd1 = DMiscOffset.Text.Substring(2);
                    h = Convert.ToInt32(rd1, 16);
                    j = h / 4 + i;
                    DMiscPtxt.Visible = true;
                    DMiscDone.Visible = true;
                    DMiscCb.Visible = false;
                    DMiscPtxt.Text = alm[j].ToString("X8");
                    DMiscPtxt.MaxLength = 8;
                }
                else if (rd3 == "CollisionData")
                {
                    i = DMiscParam.SelectedItems[0].Index;
                    rd3 = DMiscOffset.Text.Substring(2);
                    h = Convert.ToInt32(rd3, 16);
                    j = h / 4;
                    DMiscPtxt.Visible = true;
                    DMiscDone.Visible = true;
                    DMiscCb.Visible = true;
                    if (i == 0)
                    {
                        DMiscPtxt.Text = alm[j].ToString("X");
                        DMiscCb.SelectedIndex = 2;
                        DMiscPtxt.MaxLength = 8;
                        return;
                    }
                    rd3 = DMiscParam.Items[i].SubItems[0].Text;
                    if (rd3[0] == 'D')
                    {
                        DMiscPtxt.Text = alm[j + i].ToString("X");
                        DMiscCb.SelectedIndex = 2;
                        DMiscPtxt.MaxLength = 8;
                    }
                    else
                    {
                        bitf = BitConverter.GetBytes(alm[j + i]);
                        rdfr = BitConverter.ToSingle(bitf, 0);
                        DMiscPtxt.Text = rdfr.ToString();
                        DMiscCb.SelectedIndex = 1;
                        DMiscPtxt.MaxLength = 25;
                    }
                }
                else if (rd3 == "Data2")
                {
                    i = DMiscParam.SelectedItems[0].Index;
                    rd1 = DMiscOffset.Text.Substring(2);
                    h = Convert.ToInt32(rd1, 16);
                    j = h / 4 + i;
                    if (i < 2)
                    {
                        DMiscPtxt.Visible = true;
                        DMiscDone.Visible = true;
                        DMiscCb.Visible = false;
                        DMiscPtxt.Text = alm[j].ToString("X8");
                        DMiscPtxt.MaxLength = 8;
                    }
                    else
                    {
                        DMiscPtxt.Visible = true;
                        DMiscDone.Visible = true;
                        DMiscCb.Visible = true;
                        bitf = BitConverter.GetBytes(alm[j]);
                        rdfr = BitConverter.ToSingle(bitf, 0);
                        DMiscPtxt.Text = rdfr.ToString();
                        DMiscCb.SelectedIndex = 1;
                        DMiscPtxt.MaxLength = 25;
                    }
                }
                else if (rd3 == "ModelVisibility")
                {
                    if (rd2[0] == 'D')
                    {
                        i = DMiscParam.SelectedItems[0].Index;
                        rd1 = DMiscOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                        j = h / 4 + i;
                        DMiscPtxt.Visible = true;
                        DMiscDone.Visible = true;
                        DMiscCb.Visible = true;
                        DMiscPtxt.Text = alm[j].ToString("X");
                        DMiscCb.SelectedIndex = 2;
                        DMiscPtxt.MaxLength = 8;
                    }
                }
                else if (rd2 == "List")
                {
                    i = DMiscParam.SelectedItems[0].Index;
                    rd1 = DMiscOffset.Text.Substring(2);
                    h = Convert.ToInt32(rd1, 16);
                    j = h / 4 + i;
                    DMiscPtxt.Visible = true;
                    DMiscDone.Visible = true;
                    DMiscCb.Visible = true;
                    DMiscPtxt.Text = alm[j].ToString("X");
                    DMiscCb.SelectedIndex = 2;
                    DMiscPtxt.MaxLength = 8;
                }
            }
            else if (rd1[0] == 'E')
            {
                if (rd1[5] == 'D')
                {
                    if (rd2 == "List")
                    {
                        i = DMiscParam.SelectedItems[0].Index;
                        rd1 = DMiscOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                        j = h / 4 + i;
                        DMiscPtxt.Visible = true;
                        DMiscDone.Visible = true;
                        DMiscCb.Visible = true;
                        DMiscPtxt.Text = alm[j].ToString("X");
                        DMiscCb.SelectedIndex = 2;
                        DMiscPtxt.MaxLength = 8;
                        return;
                    }
                    if (rd2 == "Params2")
                    {
                        i = DMiscParam.SelectedItems[0].Index;
                        rd1 = DMiscOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                        j = h / 4 + i;
                        DMiscPtxt.Visible = true;
                        DMiscDone.Visible = true;
                        DMiscCb.Visible = true;
                        DMiscPtxt.Text = alm[j].ToString("X");
                        DMiscCb.SelectedIndex = 2;
                        DMiscPtxt.MaxLength = 8;
                        return;
                    }
                    if (rd2 == "Index")
                    {
                        i = DMiscParam.SelectedItems[0].Index;
                        rd1 = DMiscOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                        j = h / 4 + i;
                        DMiscPtxt.Visible = true;
                        DMiscDone.Visible = true;
                        DMiscCb.Visible = true;
                        DMiscPtxt.Text = alm[j].ToString("X");
                        DMiscCb.SelectedIndex = 2;
                        DMiscPtxt.MaxLength = 8;
                        return;
                    }
                    h = DMiscList.SelectedNode.Level;
                    if (h != 1)
                    {
                        return;
                    }
                    g = DMiscParam.Items.Count;
                    if (g == 4)
                    {
                        i = DMiscParam.SelectedItems[0].Index;
                        if (i == 1 || i == 2)
                        {
                            rd1 = DMiscOffset.Text.Substring(2);
                            h = Convert.ToInt32(rd1, 16);
                            j = h / 4 + i;
                            DMiscPtxt.Visible = true;
                            DMiscDone.Visible = true;
                            DMiscCb.Visible = true;
                            DMiscPtxt.Text = alm[j].ToString();
                            DMiscCb.SelectedIndex = 0;
                            DMiscPtxt.MaxLength = 10;
                        }
                        else
                        {
                            DMiscPtxt.Visible = false;
                            DMiscDone.Visible = false;
                            DMiscCb.Visible = false;
                        }
                    }
                }
                else if (rd1[1] == 'n')
                {
                    if (rd2 == "Data3")
                    {
                        i = DMiscParam.SelectedItems[0].Index;
                        rd1 = DMiscOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                        j = h / 4 + i;
                        DMiscPtxt.Visible = true;
                        DMiscDone.Visible = true;
                        DMiscCb.Visible = true;
                        DMiscPtxt.Text = alm[j].ToString("X");
                        DMiscCb.SelectedIndex = 2;
                        DMiscPtxt.MaxLength = 8;
                    }
                }
                else
                {
                    i = DMiscParam.SelectedItems[0].Index;
                    rd1 = DMiscOffset.Text.Substring(2);
                    h = Convert.ToInt32(rd1, 16);
                    j = h / 4 + i;
                    DMiscPtxt.Visible = true;
                    DMiscDone.Visible = true;
                    DMiscCb.Visible = false;
                    DMiscPtxt.Text = alm[j].ToString("X8");
                    DMiscPtxt.MaxLength = 8;
                }
            }
            else if (rd1[0] == 'C' || rd1[0] == 'S')
            {
                if (rd1[1] == 't')
                {
                    if (rd2 == "Data3")
                    {
                        i = DMiscParam.SelectedItems[0].Index;
                        rd1 = DMiscOffset.Text.Substring(2);
                        h = Convert.ToInt32(rd1, 16);
                        j = h / 4 + i;
                        DMiscPtxt.Visible = true;
                        DMiscDone.Visible = true;
                        DMiscCb.Visible = true;
                        DMiscPtxt.Text = alm[j].ToString("X");
                        DMiscCb.SelectedIndex = 2;
                        DMiscPtxt.MaxLength = 8;
                    }
                }
                else
                {
                    i = DMiscParam.SelectedItems[0].Index;
                    rd1 = DMiscOffset.Text.Substring(2);
                    h = Convert.ToInt32(rd1, 16);
                    j = h / 4 + i;
                    DMiscPtxt.Visible = true;
                    DMiscDone.Visible = true;
                    DMiscCb.Visible = false;
                    DMiscPtxt.Text = alm[j].ToString("X8");
                    DMiscPtxt.MaxLength = 8;
                }
            }
            else if (rd1[0] == 'B')
            {
                i = DMiscParam.SelectedItems[0].Index;
                rd3 = DMiscOffset.Text.Substring(2);
                h = Convert.ToInt32(rd3, 16);
                j = h / 4;
                DMiscPtxt.Visible = true;
                DMiscDone.Visible = true;
                DMiscCb.Visible = true;
                if (i == 0)
                {
                    DMiscPtxt.Text = alm[j].ToString("X");
                    DMiscCb.SelectedIndex = 2;
                    DMiscPtxt.MaxLength = 8;
                }
                else
                {
                    bitf = BitConverter.GetBytes(alm[j + i]);
                    rdfr = BitConverter.ToSingle(bitf, 0);
                    DMiscPtxt.Text = rdfr.ToString();
                    DMiscCb.SelectedIndex = 1;
                    DMiscPtxt.MaxLength = 25;
                }
            }
            else if (rd1[0] == 'H' || rd1[0] == 'U')
            {
                i = DMiscParam.SelectedItems[0].Index;
                rd1 = DMiscOffset.Text.Substring(2);
                h = Convert.ToInt32(rd1, 16);
                j = h / 4 + i;
                DMiscPtxt.Visible = true;
                DMiscDone.Visible = true;
                DMiscCb.Visible = true;
                DMiscPtxt.Text = alm[j].ToString("X");
                DMiscCb.SelectedIndex = 2;
                DMiscPtxt.MaxLength = 8;
            }
        }

        private void DMiscDone_Click(object sender, EventArgs e)
        {
            if (DMiscList.SelectedNode == null || !(DMiscOffset.Text != "") || !(DMiscPtxt.Text != "") || DMiscParam.SelectedItems.Count <= 0)
            {
                return;
            }
            fnt = 1;
            rd1 = DMiscPtxt.Text;
            if (DMiscCb.Items.Count == 3)
            {
                if (!DMiscCb.Visible || DMiscCb.SelectedIndex == 2)
                {
                    g = rd1.Length;
                    if (g < 9)
                    {
                        for (i = 0; i < g; i++)
                        {
                            if (!Uri.IsHexDigit(rd1[i]))
                            {
                                i = 10000;
                            }
                        }
                        if (i < 100)
                        {
                            k = Convert.ToInt32(rd1, 16);
                            fnt = 0;
                        }
                    }
                }
                else if (DMiscCb.SelectedIndex == 0)
                {
                    if (int.TryParse(rd1, out k))
                    {
                        fnt = 0;
                    }
                }
                else if (float.TryParse(rd1, out rdfr))
                {
                    bitf = BitConverter.GetBytes(rdfr);
                    if (BitConverter.IsLittleEndian)
                    {
                        k = bitf[0] + bitf[1] * 256 + bitf[2] * 65536 + bitf[3] * 16777216;
                    }
                    else
                    {
                        k = bitf[3] + bitf[2] * 256 + bitf[1] * 65536 + bitf[0] * 16777216;
                    }
                    fnt = 0;
                }
                if (fnt != 0)
                {
                    return;
                }
                i = DMiscParam.SelectedItems[0].Index;
                rd1 = DMiscOffset.Text.Substring(2);
                h = Convert.ToInt32(rd1, 16);
                j = h / 4;
                alm[j + i] = k;
                if (!DMiscCb.Visible)
                {
                    DMiscParam.Items[i].SubItems[1].Text = k.ToString("X8");
                    rd1 = DMiscList.SelectedNode.FullPath;
                    if (rd1.Length > 27)
                    {
                        rd2 = rd1.Substring(0, 27);
                        if (rd2 == "MiscSection\\Hurt Boxes\\Data")
                        {
                            DMiscParam.Items[9].SubItems[1].Text = "0x" + ((alm[j + 7] >> 23) & 0x1FF).ToString("X");
                            if (((alm[j + 7] >> 16) & 1) == 1)
                            {
                                rd3 = "True";
                            }
                            else
                            {
                                rd3 = "False";
                            }
                            DMiscParam.Items[10].SubItems[1].Text = rd3;
                            an1 = ((alm[j + 7] >> 19) & 3);
                            if (an1 == 0)
                            {
                                rd3 = "Low";
                            }
                            else if (an1 == 1)
                            {
                                rd3 = "Middle";
                            }
                            else if (an1 == 2)
                            {
                                rd3 = "High";
                            }
                            else
                            {
                                rd3 = "Unknown";
                            }
                            DMiscParam.Items[11].SubItems[1].Text = rd3;
                            DMiscParam.Items[12].SubItems[1].Text = ((alm[j + 7] >> 21) & 3).ToString();
                        }
                    }
                }
                else if (DMiscCb.SelectedIndex == 2)
                {
                    DMiscParam.Items[i].SubItems[1].Text = "0x" + k.ToString("X");
                }
                else if (DMiscCb.SelectedIndex == 0)
                {
                    DMiscParam.Items[i].SubItems[1].Text = k.ToString();
                }
                else
                {
                    DMiscParam.Items[i].SubItems[1].Text = rdfr.ToString();
                }
                if (qe)
                {
                    Qsave.Enabled = true;
                }
                return;
            }
            k = 65535;
            if (DMiscCb.SelectedIndex == 1)
            {
                g = rd1.Length;
                if (g < 4)
                {
                    for (i = 0; i < g; i++)
                    {
                        if (!Uri.IsHexDigit(rd1[i]))
                        {
                            i = 10000;
                        }
                    }
                    if (i < 100)
                    {
                        k = Convert.ToInt32(rd1, 16);
                    }
                }
            }
            else if (int.TryParse(rd1, out k) && k < 0)
            {
                k = 65535;
            }
            if (k < 512)
            {
                rd1 = DMiscOffset.Text.Substring(2);
                h = Convert.ToInt32(rd1, 16);
                j = h / 4 + 7;
                n = (alm[j] & 0x7FFFFF);
                alm[j] = k * 8388608 + n;
                DMiscParam.Items[7].SubItems[1].Text = alm[j].ToString("X8");
                DMiscParam.Items[9].SubItems[1].Text = "0x" + k.ToString("X");
                if (qe)
                {
                    Qsave.Enabled = true;
                }
            }
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing && components != null)
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MainForm));
            this.MainStrip = new System.Windows.Forms.MenuStrip();
            this.Filemenu = new System.Windows.Forms.ToolStripMenuItem();
            this.Fopen = new System.Windows.Forms.ToolStripMenuItem();
            this.Fsave = new System.Windows.Forms.ToolStripMenuItem();
            this.Qsave = new System.Windows.Forms.ToolStripMenuItem();
            this.Filemenubar1 = new System.Windows.Forms.ToolStripSeparator();
            this.Exitapps = new System.Windows.Forms.ToolStripMenuItem();
            this.Settingmenu = new System.Windows.Forms.ToolStripMenuItem();
            this.Settingdatasave = new System.Windows.Forms.ToolStripMenuItem();
            this.Settingmenubar1 = new System.Windows.Forms.ToolStripSeparator();
            this.SettingSaveImportfilename = new System.Windows.Forms.ToolStripMenuItem();
            this.SettingSaveImportlocation = new System.Windows.Forms.ToolStripMenuItem();
            this.SettingQS = new System.Windows.Forms.ToolStripMenuItem();
            this.NQS = new System.Windows.Forms.ToolStripMenuItem();
            this.EQS = new System.Windows.Forms.ToolStripMenuItem();
            this.OWS = new System.Windows.Forms.ToolStripMenuItem();
            this.SettingEvTab = new System.Windows.Forms.ToolStripMenuItem();
            this.SettingReadMisc = new System.Windows.Forms.ToolStripMenuItem();
            this.Viewmenu = new System.Windows.Forms.ToolStripMenuItem();
            this.ViewEvPlus = new System.Windows.Forms.ToolStripMenuItem();
            this.Viewmenubar1 = new System.Windows.Forms.ToolStripSeparator();
            this.GenUsingUnkEvDt = new System.Windows.Forms.ToolStripMenuItem();
            this.GenUsingVarDt = new System.Windows.Forms.ToolStripMenuItem();
            this.GenBugDatas = new System.Windows.Forms.ToolStripMenuItem();
            this.Helpmenu = new System.Windows.Forms.ToolStripMenuItem();
            this.AboutVersion = new System.Windows.Forms.ToolStripMenuItem();
            this.CurrentSize = new System.Windows.Forms.ToolStripMenuItem();
            this.EstiMinSize = new System.Windows.Forms.ToolStripMenuItem();
            this.ModeChange = new System.Windows.Forms.TabControl();
            this.CmpressMode = new System.Windows.Forms.TabPage();
            this.CmpRnData = new System.Windows.Forms.CheckBox();
            this.SameDataCmp = new System.Windows.Forms.CheckBox();
            this.EmptyCmp = new System.Windows.Forms.CheckBox();
            this.ExternalCmp = new System.Windows.Forms.CheckBox();
            this.NoEventCmp = new System.Windows.Forms.CheckBox();
            this.CmpInRn = new System.Windows.Forms.CheckBox();
            this.DelPSAData = new System.Windows.Forms.CheckBox();
            this.SpAllEvCmp = new System.Windows.Forms.CheckBox();
            this.SubaAllEvCmp = new System.Windows.Forms.CheckBox();
            this.SSEAtrAs = new System.Windows.Forms.CheckBox();
            this.CmpStart = new System.Windows.Forms.Button();
            this.SubaAsnameCmp = new System.Windows.Forms.CheckBox();
            this.NameNoneCmp = new System.Windows.Forms.CheckBox();
            this.CmpText = new System.Windows.Forms.TextBox();
            this.EventEditMode = new System.Windows.Forms.TabPage();
            this.EvPaste = new System.Windows.Forms.Button();
            this.EvPasteStrip = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.EvMultiPaste = new System.Windows.Forms.ToolStripMenuItem();
            this.EvCopy = new System.Windows.Forms.Button();
            this.EvCopyStrip = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.EvCopyOffsetRn = new System.Windows.Forms.ToolStripMenuItem();
            this.EvSeleParamEqualize = new System.Windows.Forms.ToolStripMenuItem();
            this.EvDown = new System.Windows.Forms.Button();
            this.EvUp = new System.Windows.Forms.Button();
            this.EvRemove = new System.Windows.Forms.Button();
            this.EvModify = new System.Windows.Forms.Button();
            this.EvAdd = new System.Windows.Forms.Button();
            this.EvList = new System.Windows.Forms.ListBox();
            this.EvStrip = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.EvNoSelect = new System.Windows.Forms.ToolStripMenuItem();
            this.EvAllSelect = new System.Windows.Forms.ToolStripMenuItem();
            this.EvOffsetView = new System.Windows.Forms.ToolStripMenuItem();
            this.EvOpenSubRoutine = new System.Windows.Forms.ToolStripMenuItem();
            this.EvRefresh = new System.Windows.Forms.ToolStripMenuItem();
            this.EvCopytxt = new System.Windows.Forms.ToolStripMenuItem();
            this.EvMoveOffset = new System.Windows.Forms.ToolStripMenuItem();
            this.EvListMoveF = new System.Windows.Forms.ToolStripMenuItem();
            this.EvListMoveB = new System.Windows.Forms.ToolStripMenuItem();
            this.EvParMoveF = new System.Windows.Forms.ToolStripMenuItem();
            this.EvParMoveB = new System.Windows.Forms.ToolStripMenuItem();
            this.EvSeleExrn = new System.Windows.Forms.ToolStripMenuItem();
            this.EvOffsetInterlock = new System.Windows.Forms.ToolStripMenuItem();
            this.EvDesText = new System.Windows.Forms.TextBox();
            this.EventTab = new System.Windows.Forms.TabControl();
            this.EvSp = new System.Windows.Forms.TabPage();
            this.EvSpOffsetLabel = new System.Windows.Forms.Label();
            this.EvSpOffset = new System.Windows.Forms.TextBox();
            this.EvSpCbList = new System.Windows.Forms.ComboBox();
            this.EvSpListLabel = new System.Windows.Forms.Label();
            this.EvSpCbID = new System.Windows.Forms.ComboBox();
            this.EvSpIDLabel = new System.Windows.Forms.Label();
            this.EvSuba = new System.Windows.Forms.TabPage();
            this.EvSubaOffsetLabel = new System.Windows.Forms.Label();
            this.EvSubaAnim = new System.Windows.Forms.TextBox();
            this.EvSubaAnimLabel = new System.Windows.Forms.Label();
            this.AnimStrip = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.AnimFlagTxtView = new System.Windows.Forms.ToolStripMenuItem();
            this.AllSameAnim = new System.Windows.Forms.ToolStripMenuItem();
            this.AnimAutoSave = new System.Windows.Forms.ToolStripMenuItem();
            this.EvSubaOffset = new System.Windows.Forms.TextBox();
            this.EvSubaAnimFlag = new System.Windows.Forms.Button();
            this.EvSubaCbList = new System.Windows.Forms.ComboBox();
            this.EvSubaListLabel = new System.Windows.Forms.Label();
            this.EvSubaIDLabel = new System.Windows.Forms.Label();
            this.EvSubaCbID = new System.Windows.Forms.ComboBox();
            this.EvRn = new System.Windows.Forms.TabPage();
            this.EvRnOffTrace = new System.Windows.Forms.ComboBox();
            this.EvRnStrip = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.EvRnGenDat = new System.Windows.Forms.ToolStripMenuItem();
            this.EvRnGenDatCbList = new System.Windows.Forms.ToolStripComboBox();
            this.EvRnItmCount = new System.Windows.Forms.ToolStripMenuItem();
            this.EvRnSortDat = new System.Windows.Forms.ToolStripMenuItem();
            this.EvRnTraceDat = new System.Windows.Forms.ToolStripMenuItem();
            this.EvRnFullItemTrace = new System.Windows.Forms.ToolStripMenuItem();
            this.EvRnCpy = new System.Windows.Forms.ToolStripMenuItem();
            this.RnTraceCpy = new System.Windows.Forms.ToolStripMenuItem();
            this.SearchSameDataNotFullRoutine = new System.Windows.Forms.ToolStripMenuItem();
            this.SearchSameDataRoutine = new System.Windows.Forms.ToolStripMenuItem();
            this.SearchPerfectMatchingDataRoutine = new System.Windows.Forms.ToolStripMenuItem();
            this.EvRnCmpSameData = new System.Windows.Forms.ToolStripMenuItem();
            this.EvRnOffCbList = new System.Windows.Forms.ComboBox();
            this.EvRnOfSeleLabel = new System.Windows.Forms.Label();
            this.EvRnOffsetLabel = new System.Windows.Forms.Label();
            this.EvRnOffset = new System.Windows.Forms.TextBox();
            this.EvRnCreate = new System.Windows.Forms.Button();
            this.EvRnOpen = new System.Windows.Forms.Button();
            this.EvRnOfSele = new System.Windows.Forms.TextBox();
            this.EvOvr = new System.Windows.Forms.TabPage();
            this.EvPreSelExternal = new System.Windows.Forms.Button();
            this.EvOvrOffsetLabel = new System.Windows.Forms.Label();
            this.EvOvrOffset = new System.Windows.Forms.TextBox();
            this.EvOvrCbList = new System.Windows.Forms.ComboBox();
            this.EvOvrStrip = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.EvOvrEdit = new System.Windows.Forms.ToolStripMenuItem();
            this.EvOvrRemove = new System.Windows.Forms.ToolStripMenuItem();
            this.EvOvrUp = new System.Windows.Forms.ToolStripMenuItem();
            this.EvOvrDown = new System.Windows.Forms.ToolStripMenuItem();
            this.EvOvrListMoveOffset = new System.Windows.Forms.ToolStripMenuItem();
            this.EvOvrListMoveB = new System.Windows.Forms.ToolStripMenuItem();
            this.EvOvrListCount = new System.Windows.Forms.ToolStripMenuItem();
            this.EvOvrListSort = new System.Windows.Forms.ToolStripMenuItem();
            this.EvOvrListLabel = new System.Windows.Forms.Label();
            this.EvOvrId = new System.Windows.Forms.ComboBox();
            this.EvOvrIdLabel = new System.Windows.Forms.Label();
            this.AtrEditMode = new System.Windows.Forms.TabPage();
            this.AtrEdList = new System.Windows.Forms.DataGridView();
            this.AtrEdListParam = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.AtrEdListAtr = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.AtrEdListSSE = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.AtrEdStrip = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.AtrIntFloat = new System.Windows.Forms.ToolStripMenuItem();
            this.AtrHexView = new System.Windows.Forms.ToolStripMenuItem();
            this.AtrEdText = new System.Windows.Forms.TextBox();
            this.AtrEdListLabel = new System.Windows.Forms.Label();
            this.ArticleEditMode = new System.Windows.Forms.TabPage();
            this.ArticleIDLabel = new System.Windows.Forms.Label();
            this.ArticleIDCb = new System.Windows.Forms.ComboBox();
            this.ArticleTab = new System.Windows.Forms.TabControl();
            this.ArtAction = new System.Windows.Forms.TabPage();
            this.ArtActPaste = new System.Windows.Forms.Button();
            this.ArtActCopy = new System.Windows.Forms.Button();
            this.ArtActDown = new System.Windows.Forms.Button();
            this.ArtActUp = new System.Windows.Forms.Button();
            this.ArtActRemove = new System.Windows.Forms.Button();
            this.ArtActModify = new System.Windows.Forms.Button();
            this.ArtActAdd = new System.Windows.Forms.Button();
            this.ArtActList = new System.Windows.Forms.ListBox();
            this.ArtActText = new System.Windows.Forms.TextBox();
            this.ArtActOffsetLabel = new System.Windows.Forms.Label();
            this.ArtActOffset = new System.Windows.Forms.TextBox();
            this.ArtActCbList = new System.Windows.Forms.ComboBox();
            this.ArtActId = new System.Windows.Forms.ComboBox();
            this.ArtActIdLabel = new System.Windows.Forms.Label();
            this.ArtSuba = new System.Windows.Forms.TabPage();
            this.ArtSubaOffsetLabel = new System.Windows.Forms.Label();
            this.ArtSubaAnim = new System.Windows.Forms.TextBox();
            this.ArtSubaAnimLabel = new System.Windows.Forms.Label();
            this.ArtSubaOffset = new System.Windows.Forms.TextBox();
            this.ArtSubaAnimFlag = new System.Windows.Forms.Button();
            this.ArtSubaCbList = new System.Windows.Forms.ComboBox();
            this.ArtSubaListLabel = new System.Windows.Forms.Label();
            this.ArtSubaIdLabel = new System.Windows.Forms.Label();
            this.ArtSubaId = new System.Windows.Forms.ComboBox();
            this.ArtSubaPaste = new System.Windows.Forms.Button();
            this.ArtSubaCopy = new System.Windows.Forms.Button();
            this.ArtSubaDown = new System.Windows.Forms.Button();
            this.ArtSubaUp = new System.Windows.Forms.Button();
            this.ArtSubaRemove = new System.Windows.Forms.Button();
            this.ArtSubaModify = new System.Windows.Forms.Button();
            this.ArtSubaAdd = new System.Windows.Forms.Button();
            this.ArtSubaList = new System.Windows.Forms.ListBox();
            this.ArtSubaText = new System.Windows.Forms.TextBox();
            this.ArtParam = new System.Windows.Forms.TabPage();
            this.ArtParText = new System.Windows.Forms.TextBox();
            this.ArtParList = new System.Windows.Forms.DataGridView();
            this.AtrParListDataLabel = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.AtrParListParam = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.ArtParStrip = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.ArtIntFloat = new System.Windows.Forms.ToolStripMenuItem();
            this.ArtHexView = new System.Windows.Forms.ToolStripMenuItem();
            this.OpenArtParOff = new System.Windows.Forms.ToolStripMenuItem();
            this.ArtParValuetxt = new System.Windows.Forms.ToolStripTextBox();
            this.ArtParAddressOpen = new System.Windows.Forms.ToolStripMenuItem();
            this.ArtParOffsetOpen = new System.Windows.Forms.ToolStripMenuItem();
            this.ArtParOffOpenSize = new System.Windows.Forms.ToolStripComboBox();
            this.ArtParOffsetLabel = new System.Windows.Forms.Label();
            this.ArtParOffset = new System.Windows.Forms.TextBox();
            this.ArtParCbList = new System.Windows.Forms.ComboBox();
            this.ArtParListLabel = new System.Windows.Forms.Label();
            this.ArtData = new System.Windows.Forms.TabPage();
            this.ArtOfflabel = new System.Windows.Forms.Label();
            this.ArtOffset = new System.Windows.Forms.TextBox();
            this.ArtDataList = new System.Windows.Forms.ListBox();
            this.DataDTStrip = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.DataDTOffsetView = new System.Windows.Forms.ToolStripMenuItem();
            this.DataDTCopytxt = new System.Windows.Forms.ToolStripMenuItem();
            this.ArtCompress = new System.Windows.Forms.TabPage();
            this.ArtCmpStart = new System.Windows.Forms.Button();
            this.ArtCmpInRn = new System.Windows.Forms.CheckBox();
            this.ArtAllEvCmp = new System.Windows.Forms.CheckBox();
            this.ArtNoEventCmp = new System.Windows.Forms.CheckBox();
            this.ArtEmptyCmp = new System.Windows.Forms.CheckBox();
            this.DataViewMode = new System.Windows.Forms.TabPage();
            this.DataTab = new System.Windows.Forms.TabControl();
            this.DataOffset = new System.Windows.Forms.TabPage();
            this.DataOffsetList = new System.Windows.Forms.ListBox();
            this.DataTable = new System.Windows.Forms.TabPage();
            this.DataDTList = new System.Windows.Forms.ListBox();
            this.DataExRn = new System.Windows.Forms.TabPage();
            this.DataExrnList = new System.Windows.Forms.ListBox();
            this.DataExrnStrip = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.DataExrnAdd = new System.Windows.Forms.ToolStripMenuItem();
            this.DataExrnRemove = new System.Windows.Forms.ToolStripMenuItem();
            this.DataExrnRename = new System.Windows.Forms.ToolStripMenuItem();
            this.DataExrnUp = new System.Windows.Forms.ToolStripMenuItem();
            this.DataExrnDown = new System.Windows.Forms.ToolStripMenuItem();
            this.DataExrnOffsetView = new System.Windows.Forms.ToolStripMenuItem();
            this.DataExrnCopytxt = new System.Windows.Forms.ToolStripMenuItem();
            this.DMisc = new System.Windows.Forms.TabPage();
            this.DMiscSplit = new System.Windows.Forms.SplitContainer();
            this.DMiscList = new System.Windows.Forms.TreeView();
            this.DMiscCb = new System.Windows.Forms.ComboBox();
            this.DMiscDone = new System.Windows.Forms.Button();
            this.DMiscPtxt = new System.Windows.Forms.TextBox();
            this.DMiscParam = new System.Windows.Forms.ListView();
            this.DMiscOffset = new System.Windows.Forms.TextBox();
            this.DMiscOffsetLabel = new System.Windows.Forms.Label();
            this.pacname = new System.Windows.Forms.TextBox();
            this.minitxt = new System.Windows.Forms.TextBox();
            this.OpenpacFile = new System.Windows.Forms.OpenFileDialog();
            this.SavepacFile = new System.Windows.Forms.SaveFileDialog();
            this.MainStrip.SuspendLayout();
            this.ModeChange.SuspendLayout();
            this.CmpressMode.SuspendLayout();
            this.EventEditMode.SuspendLayout();
            this.EvPasteStrip.SuspendLayout();
            this.EvCopyStrip.SuspendLayout();
            this.EvStrip.SuspendLayout();
            this.EventTab.SuspendLayout();
            this.EvSp.SuspendLayout();
            this.EvSuba.SuspendLayout();
            this.AnimStrip.SuspendLayout();
            this.EvRn.SuspendLayout();
            this.EvRnStrip.SuspendLayout();
            this.EvOvr.SuspendLayout();
            this.EvOvrStrip.SuspendLayout();
            this.AtrEditMode.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.AtrEdList)).BeginInit();
            this.AtrEdStrip.SuspendLayout();
            this.ArticleEditMode.SuspendLayout();
            this.ArticleTab.SuspendLayout();
            this.ArtAction.SuspendLayout();
            this.ArtSuba.SuspendLayout();
            this.ArtParam.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.ArtParList)).BeginInit();
            this.ArtParStrip.SuspendLayout();
            this.ArtData.SuspendLayout();
            this.DataDTStrip.SuspendLayout();
            this.ArtCompress.SuspendLayout();
            this.DataViewMode.SuspendLayout();
            this.DataTab.SuspendLayout();
            this.DataOffset.SuspendLayout();
            this.DataTable.SuspendLayout();
            this.DataExRn.SuspendLayout();
            this.DataExrnStrip.SuspendLayout();
            this.DMisc.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.DMiscSplit)).BeginInit();
            this.DMiscSplit.Panel1.SuspendLayout();
            this.DMiscSplit.Panel2.SuspendLayout();
            this.DMiscSplit.SuspendLayout();
            this.SuspendLayout();
            // 
            // MainStrip
            // 
            this.MainStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.Filemenu,
            this.Settingmenu,
            this.Viewmenu,
            this.Helpmenu});
            this.MainStrip.Location = new System.Drawing.Point(0, 0);
            this.MainStrip.Name = "MainStrip";
            this.MainStrip.Size = new System.Drawing.Size(379, 24);
            this.MainStrip.TabIndex = 0;
            this.MainStrip.Text = "MainmenuStrip1";
            // 
            // Filemenu
            // 
            this.Filemenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.Fopen,
            this.Fsave,
            this.Qsave,
            this.Filemenubar1,
            this.Exitapps});
            this.Filemenu.Name = "Filemenu";
            this.Filemenu.Size = new System.Drawing.Size(37, 20);
            this.Filemenu.Text = "File";
            // 
            // Fopen
            // 
            this.Fopen.Name = "Fopen";
            this.Fopen.Size = new System.Drawing.Size(103, 22);
            this.Fopen.Text = "Open";
            this.Fopen.Click += new System.EventHandler(this.Fopen_Click);
            // 
            // Fsave
            // 
            this.Fsave.Name = "Fsave";
            this.Fsave.Size = new System.Drawing.Size(103, 22);
            this.Fsave.Text = "Save";
            this.Fsave.Click += new System.EventHandler(this.Fsave_Click);
            // 
            // Qsave
            // 
            this.Qsave.Name = "Qsave";
            this.Qsave.Size = new System.Drawing.Size(103, 22);
            this.Qsave.Text = "QS";
            this.Qsave.Click += new System.EventHandler(this.Qsave_Click);
            // 
            // Filemenubar1
            // 
            this.Filemenubar1.Name = "Filemenubar1";
            this.Filemenubar1.Size = new System.Drawing.Size(100, 6);
            // 
            // Exitapps
            // 
            this.Exitapps.Name = "Exitapps";
            this.Exitapps.Size = new System.Drawing.Size(103, 22);
            this.Exitapps.Text = "Exit";
            this.Exitapps.Click += new System.EventHandler(this.Exitapps_Click);
            // 
            // Settingmenu
            // 
            this.Settingmenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.Settingdatasave,
            this.Settingmenubar1,
            this.SettingSaveImportfilename,
            this.SettingSaveImportlocation,
            this.SettingQS,
            this.SettingEvTab,
            this.SettingReadMisc});
            this.Settingmenu.Name = "Settingmenu";
            this.Settingmenu.Size = new System.Drawing.Size(56, 20);
            this.Settingmenu.Text = "Setting";
            // 
            // Settingdatasave
            // 
            this.Settingdatasave.Name = "Settingdatasave";
            this.Settingdatasave.Size = new System.Drawing.Size(217, 22);
            this.Settingdatasave.Text = "Save";
            this.Settingdatasave.Click += new System.EventHandler(this.Settingdatasave_Click);
            // 
            // Settingmenubar1
            // 
            this.Settingmenubar1.Name = "Settingmenubar1";
            this.Settingmenubar1.Size = new System.Drawing.Size(214, 6);
            // 
            // SettingSaveImportfilename
            // 
            this.SettingSaveImportfilename.CheckOnClick = true;
            this.SettingSaveImportfilename.Name = "SettingSaveImportfilename";
            this.SettingSaveImportfilename.Size = new System.Drawing.Size(217, 22);
            this.SettingSaveImportfilename.Text = "Save as imported file name";
            // 
            // SettingSaveImportlocation
            // 
            this.SettingSaveImportlocation.CheckOnClick = true;
            this.SettingSaveImportlocation.Name = "SettingSaveImportlocation";
            this.SettingSaveImportlocation.Size = new System.Drawing.Size(217, 22);
            this.SettingSaveImportlocation.Text = "Save to the loaded location";
            // 
            // SettingQS
            // 
            this.SettingQS.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.NQS,
            this.EQS,
            this.OWS});
            this.SettingQS.Name = "SettingQS";
            this.SettingQS.Size = new System.Drawing.Size(217, 22);
            this.SettingQS.Text = "Enable Quick Save";
            // 
            // NQS
            // 
            this.NQS.Name = "NQS";
            this.NQS.Size = new System.Drawing.Size(302, 22);
            this.NQS.Text = "Enable Quick Save(Save to read directory)";
            this.NQS.Click += new System.EventHandler(this.NQS_Click);
            // 
            // EQS
            // 
            this.EQS.Name = "EQS";
            this.EQS.Size = new System.Drawing.Size(302, 22);
            this.EQS.Text = "Enable Quick Save(Save to Export directory)";
            this.EQS.Click += new System.EventHandler(this.EQS_Click);
            // 
            // OWS
            // 
            this.OWS.Name = "OWS";
            this.OWS.Size = new System.Drawing.Size(302, 22);
            this.OWS.Text = "Enable Overwrite Save";
            this.OWS.Click += new System.EventHandler(this.OWS_Click);
            // 
            // SettingEvTab
            // 
            this.SettingEvTab.CheckOnClick = true;
            this.SettingEvTab.Name = "SettingEvTab";
            this.SettingEvTab.Size = new System.Drawing.Size(217, 22);
            this.SettingEvTab.Text = "Set the First Tab to Events";
            // 
            // SettingReadMisc
            // 
            this.SettingReadMisc.CheckOnClick = true;
            this.SettingReadMisc.Name = "SettingReadMisc";
            this.SettingReadMisc.Size = new System.Drawing.Size(217, 22);
            this.SettingReadMisc.Text = "Read Misc Data";
            // 
            // Viewmenu
            // 
            this.Viewmenu.CheckOnClick = true;
            this.Viewmenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.ViewEvPlus,
            this.Viewmenubar1,
            this.GenUsingUnkEvDt,
            this.GenUsingVarDt,
            this.GenBugDatas});
            this.Viewmenu.Name = "Viewmenu";
            this.Viewmenu.Size = new System.Drawing.Size(44, 20);
            this.Viewmenu.Text = "View";
            // 
            // ViewEvPlus
            // 
            this.ViewEvPlus.CheckOnClick = true;
            this.ViewEvPlus.Name = "ViewEvPlus";
            this.ViewEvPlus.Size = new System.Drawing.Size(195, 22);
            this.ViewEvPlus.Text = "Event ID+1";
            // 
            // Viewmenubar1
            // 
            this.Viewmenubar1.Name = "Viewmenubar1";
            this.Viewmenubar1.Size = new System.Drawing.Size(192, 6);
            // 
            // GenUsingUnkEvDt
            // 
            this.GenUsingUnkEvDt.Name = "GenUsingUnkEvDt";
            this.GenUsingUnkEvDt.Size = new System.Drawing.Size(195, 22);
            this.GenUsingUnkEvDt.Text = "Extract Unknown Event";
            this.GenUsingUnkEvDt.Click += new System.EventHandler(this.GenUsingUnkEvDt_Click);
            // 
            // GenUsingVarDt
            // 
            this.GenUsingVarDt.Name = "GenUsingVarDt";
            this.GenUsingVarDt.Size = new System.Drawing.Size(195, 22);
            this.GenUsingVarDt.Text = "Extract Variable";
            this.GenUsingVarDt.Click += new System.EventHandler(this.GenUsingVarDt_Click);
            // 
            // GenBugDatas
            // 
            this.GenBugDatas.Name = "GenBugDatas";
            this.GenBugDatas.Size = new System.Drawing.Size(195, 22);
            this.GenBugDatas.Text = "Extract Error Data";
            this.GenBugDatas.Click += new System.EventHandler(this.GenBugDatas_Click);
            // 
            // Helpmenu
            // 
            this.Helpmenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.AboutVersion,
            this.CurrentSize,
            this.EstiMinSize});
            this.Helpmenu.Name = "Helpmenu";
            this.Helpmenu.Size = new System.Drawing.Size(44, 20);
            this.Helpmenu.Text = "Help";
            // 
            // AboutVersion
            // 
            this.AboutVersion.Name = "AboutVersion";
            this.AboutVersion.Size = new System.Drawing.Size(219, 22);
            this.AboutVersion.Text = "About";
            this.AboutVersion.Click += new System.EventHandler(this.AboutVersion_Click);
            // 
            // CurrentSize
            // 
            this.CurrentSize.Name = "CurrentSize";
            this.CurrentSize.Size = new System.Drawing.Size(219, 22);
            this.CurrentSize.Text = "Current Size";
            this.CurrentSize.Click += new System.EventHandler(this.CurrentSize_Click);
            // 
            // EstiMinSize
            // 
            this.EstiMinSize.Name = "EstiMinSize";
            this.EstiMinSize.Size = new System.Drawing.Size(219, 22);
            this.EstiMinSize.Text = "Compressed Minimum Size";
            this.EstiMinSize.Click += new System.EventHandler(this.EstiMinSize_Click);
            // 
            // ModeChange
            // 
            this.ModeChange.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
            | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.ModeChange.Controls.Add(this.CmpressMode);
            this.ModeChange.Controls.Add(this.EventEditMode);
            this.ModeChange.Controls.Add(this.AtrEditMode);
            this.ModeChange.Controls.Add(this.ArticleEditMode);
            this.ModeChange.Controls.Add(this.DataViewMode);
            this.ModeChange.Location = new System.Drawing.Point(3, 53);
            this.ModeChange.Name = "ModeChange";
            this.ModeChange.SelectedIndex = 0;
            this.ModeChange.Size = new System.Drawing.Size(373, 268);
            this.ModeChange.TabIndex = 1;
            this.ModeChange.SelectedIndexChanged += new System.EventHandler(this.ModeChange_SelectedIndexChanged);
            // 
            // CmpressMode
            // 
            this.CmpressMode.Controls.Add(this.CmpRnData);
            this.CmpressMode.Controls.Add(this.SameDataCmp);
            this.CmpressMode.Controls.Add(this.EmptyCmp);
            this.CmpressMode.Controls.Add(this.ExternalCmp);
            this.CmpressMode.Controls.Add(this.NoEventCmp);
            this.CmpressMode.Controls.Add(this.CmpInRn);
            this.CmpressMode.Controls.Add(this.DelPSAData);
            this.CmpressMode.Controls.Add(this.SpAllEvCmp);
            this.CmpressMode.Controls.Add(this.SubaAllEvCmp);
            this.CmpressMode.Controls.Add(this.SSEAtrAs);
            this.CmpressMode.Controls.Add(this.CmpStart);
            this.CmpressMode.Controls.Add(this.SubaAsnameCmp);
            this.CmpressMode.Controls.Add(this.NameNoneCmp);
            this.CmpressMode.Controls.Add(this.CmpText);
            this.CmpressMode.Location = new System.Drawing.Point(4, 22);
            this.CmpressMode.Name = "CmpressMode";
            this.CmpressMode.Padding = new System.Windows.Forms.Padding(3);
            this.CmpressMode.Size = new System.Drawing.Size(365, 242);
            this.CmpressMode.TabIndex = 0;
            this.CmpressMode.Text = "Compress";
            this.CmpressMode.UseVisualStyleBackColor = true;
            // 
            // CmpRnData
            // 
            this.CmpRnData.AutoSize = true;
            this.CmpRnData.Location = new System.Drawing.Point(3, 69);
            this.CmpRnData.Name = "CmpRnData";
            this.CmpRnData.Size = new System.Drawing.Size(160, 17);
            this.CmpRnData.TabIndex = 8;
            this.CmpRnData.TabStop = false;
            this.CmpRnData.Text = "Sub Routine Data Compress";
            this.CmpRnData.UseVisualStyleBackColor = true;
            // 
            // SameDataCmp
            // 
            this.SameDataCmp.AutoSize = true;
            this.SameDataCmp.Location = new System.Drawing.Point(3, 102);
            this.SameDataCmp.Name = "SameDataCmp";
            this.SameDataCmp.Size = new System.Drawing.Size(128, 17);
            this.SameDataCmp.TabIndex = 10;
            this.SameDataCmp.TabStop = false;
            this.SameDataCmp.Text = "Same Data Compress";
            this.SameDataCmp.UseVisualStyleBackColor = true;
            // 
            // EmptyCmp
            // 
            this.EmptyCmp.AutoSize = true;
            this.EmptyCmp.Location = new System.Drawing.Point(3, 37);
            this.EmptyCmp.Name = "EmptyCmp";
            this.EmptyCmp.Size = new System.Drawing.Size(144, 17);
            this.EmptyCmp.TabIndex = 5;
            this.EmptyCmp.TabStop = false;
            this.EmptyCmp.Text = "Delete Empty Event Lists";
            this.EmptyCmp.UseVisualStyleBackColor = true;
            // 
            // ExternalCmp
            // 
            this.ExternalCmp.AutoSize = true;
            this.ExternalCmp.Location = new System.Drawing.Point(3, 167);
            this.ExternalCmp.Name = "ExternalCmp";
            this.ExternalCmp.Size = new System.Drawing.Size(143, 17);
            this.ExternalCmp.TabIndex = 14;
            this.ExternalCmp.TabStop = false;
            this.ExternalCmp.Text = "Delete Unused Externals";
            this.ExternalCmp.UseVisualStyleBackColor = true;
            // 
            // NoEventCmp
            // 
            this.NoEventCmp.AutoSize = true;
            this.NoEventCmp.Location = new System.Drawing.Point(3, 86);
            this.NoEventCmp.Name = "NoEventCmp";
            this.NoEventCmp.Size = new System.Drawing.Size(105, 17);
            this.NoEventCmp.TabIndex = 9;
            this.NoEventCmp.TabStop = false;
            this.NoEventCmp.Text = "Delete No Event";
            this.NoEventCmp.UseVisualStyleBackColor = true;
            // 
            // CmpInRn
            // 
            this.CmpInRn.AutoSize = true;
            this.CmpInRn.Location = new System.Drawing.Point(3, 151);
            this.CmpInRn.Name = "CmpInRn";
            this.CmpInRn.Size = new System.Drawing.Size(167, 17);
            this.CmpInRn.TabIndex = 13;
            this.CmpInRn.TabStop = false;
            this.CmpInRn.Text = "Move Offsets in Sub Routines";
            this.CmpInRn.UseVisualStyleBackColor = true;
            // 
            // DelPSAData
            // 
            this.DelPSAData.AutoSize = true;
            this.DelPSAData.Location = new System.Drawing.Point(3, 183);
            this.DelPSAData.Name = "DelPSAData";
            this.DelPSAData.Size = new System.Drawing.Size(166, 17);
            this.DelPSAData.TabIndex = 15;
            this.DelPSAData.TabStop = false;
            this.DelPSAData.Text = "Delete PSA Auto Create Data";
            this.DelPSAData.UseVisualStyleBackColor = true;
            // 
            // SpAllEvCmp
            // 
            this.SpAllEvCmp.AutoSize = true;
            this.SpAllEvCmp.Location = new System.Drawing.Point(3, 134);
            this.SpAllEvCmp.Name = "SpAllEvCmp";
            this.SpAllEvCmp.Size = new System.Drawing.Size(157, 17);
            this.SpAllEvCmp.TabIndex = 12;
            this.SpAllEvCmp.TabStop = false;
            this.SpAllEvCmp.Text = "Move All Offsets in Specials";
            this.SpAllEvCmp.UseVisualStyleBackColor = true;
            // 
            // SubaAllEvCmp
            // 
            this.SubaAllEvCmp.AutoSize = true;
            this.SubaAllEvCmp.Location = new System.Drawing.Point(3, 118);
            this.SubaAllEvCmp.Name = "SubaAllEvCmp";
            this.SubaAllEvCmp.Size = new System.Drawing.Size(174, 17);
            this.SubaAllEvCmp.TabIndex = 11;
            this.SubaAllEvCmp.TabStop = false;
            this.SubaAllEvCmp.Text = "Move All Offsets in Sub Actions";
            this.SubaAllEvCmp.UseVisualStyleBackColor = true;
            // 
            // SSEAtrAs
            // 
            this.SSEAtrAs.AutoSize = true;
            this.SSEAtrAs.Location = new System.Drawing.Point(3, 4);
            this.SSEAtrAs.Name = "SSEAtrAs";
            this.SSEAtrAs.Size = new System.Drawing.Size(149, 17);
            this.SSEAtrAs.TabIndex = 3;
            this.SSEAtrAs.TabStop = false;
            this.SSEAtrAs.Text = "Equalize SSE to Attributes";
            this.SSEAtrAs.UseVisualStyleBackColor = true;
            // 
            // CmpStart
            // 
            this.CmpStart.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.CmpStart.Enabled = false;
            this.CmpStart.Location = new System.Drawing.Point(6, 208);
            this.CmpStart.Name = "CmpStart";
            this.CmpStart.Size = new System.Drawing.Size(75, 25);
            this.CmpStart.TabIndex = 18;
            this.CmpStart.TabStop = false;
            this.CmpStart.Text = "Compress";
            this.CmpStart.UseVisualStyleBackColor = true;
            this.CmpStart.Click += new System.EventHandler(this.CmpStart_Click);
            // 
            // SubaAsnameCmp
            // 
            this.SubaAsnameCmp.AutoSize = true;
            this.SubaAsnameCmp.Location = new System.Drawing.Point(3, 53);
            this.SubaAsnameCmp.Name = "SubaAsnameCmp";
            this.SubaAsnameCmp.Size = new System.Drawing.Size(152, 17);
            this.SubaAsnameCmp.TabIndex = 7;
            this.SubaAsnameCmp.TabStop = false;
            this.SubaAsnameCmp.Text = "Animation Name Compress";
            this.SubaAsnameCmp.UseVisualStyleBackColor = true;
            // 
            // NameNoneCmp
            // 
            this.NameNoneCmp.AutoSize = true;
            this.NameNoneCmp.Location = new System.Drawing.Point(3, 21);
            this.NameNoneCmp.Name = "NameNoneCmp";
            this.NameNoneCmp.Size = new System.Drawing.Size(171, 17);
            this.NameNoneCmp.TabIndex = 4;
            this.NameNoneCmp.TabStop = false;
            this.NameNoneCmp.Text = "Delete Animation Name NONE";
            this.NameNoneCmp.UseVisualStyleBackColor = true;
            // 
            // CmpText
            // 
            this.CmpText.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
            | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.CmpText.Location = new System.Drawing.Point(194, 2);
            this.CmpText.Multiline = true;
            this.CmpText.Name = "CmpText";
            this.CmpText.ReadOnly = true;
            this.CmpText.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.CmpText.Size = new System.Drawing.Size(169, 235);
            this.CmpText.TabIndex = 2;
            this.CmpText.TabStop = false;
            // 
            // EventEditMode
            // 
            this.EventEditMode.Controls.Add(this.EvPaste);
            this.EventEditMode.Controls.Add(this.EvCopy);
            this.EventEditMode.Controls.Add(this.EvDown);
            this.EventEditMode.Controls.Add(this.EvUp);
            this.EventEditMode.Controls.Add(this.EvRemove);
            this.EventEditMode.Controls.Add(this.EvModify);
            this.EventEditMode.Controls.Add(this.EvAdd);
            this.EventEditMode.Controls.Add(this.EvList);
            this.EventEditMode.Controls.Add(this.EvDesText);
            this.EventEditMode.Controls.Add(this.EventTab);
            this.EventEditMode.Location = new System.Drawing.Point(4, 22);
            this.EventEditMode.Name = "EventEditMode";
            this.EventEditMode.Padding = new System.Windows.Forms.Padding(3);
            this.EventEditMode.Size = new System.Drawing.Size(365, 242);
            this.EventEditMode.TabIndex = 1;
            this.EventEditMode.Text = "Events";
            this.EventEditMode.UseVisualStyleBackColor = true;
            // 
            // EvPaste
            // 
            this.EvPaste.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.EvPaste.ContextMenuStrip = this.EvPasteStrip;
            this.EvPaste.Enabled = false;
            this.EvPaste.Location = new System.Drawing.Point(317, 164);
            this.EvPaste.Name = "EvPaste";
            this.EvPaste.Size = new System.Drawing.Size(45, 25);
            this.EvPaste.TabIndex = 9;
            this.EvPaste.TabStop = false;
            this.EvPaste.Text = "Paste";
            this.EvPaste.UseVisualStyleBackColor = true;
            this.EvPaste.Click += new System.EventHandler(this.EvPaste_Click);
            // 
            // EvPasteStrip
            // 
            this.EvPasteStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.EvMultiPaste});
            this.EvPasteStrip.Name = "EvPasteStrip";
            this.EvPasteStrip.Size = new System.Drawing.Size(231, 26);
            // 
            // EvMultiPaste
            // 
            this.EvMultiPaste.Name = "EvMultiPaste";
            this.EvMultiPaste.Size = new System.Drawing.Size(230, 22);
            this.EvMultiPaste.Text = "Paste to Multiple Sub Routine";
            this.EvMultiPaste.Click += new System.EventHandler(this.EvMultiPaste_Click);
            // 
            // EvCopy
            // 
            this.EvCopy.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.EvCopy.ContextMenuStrip = this.EvCopyStrip;
            this.EvCopy.Enabled = false;
            this.EvCopy.Location = new System.Drawing.Point(271, 164);
            this.EvCopy.Name = "EvCopy";
            this.EvCopy.Size = new System.Drawing.Size(45, 25);
            this.EvCopy.TabIndex = 8;
            this.EvCopy.TabStop = false;
            this.EvCopy.Text = "Copy";
            this.EvCopy.UseVisualStyleBackColor = true;
            this.EvCopy.Click += new System.EventHandler(this.EvCopy_Click);
            // 
            // EvCopyStrip
            // 
            this.EvCopyStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.EvCopyOffsetRn,
            this.EvSeleParamEqualize});
            this.EvCopyStrip.Name = "EvCopyStrip";
            this.EvCopyStrip.Size = new System.Drawing.Size(222, 48);
            // 
            // EvCopyOffsetRn
            // 
            this.EvCopyOffsetRn.Name = "EvCopyOffsetRn";
            this.EvCopyOffsetRn.Size = new System.Drawing.Size(221, 22);
            this.EvCopyOffsetRn.Text = "Copy Routine";
            this.EvCopyOffsetRn.Click += new System.EventHandler(this.EvCopyOffsetRn_Click);
            // 
            // EvSeleParamEqualize
            // 
            this.EvSeleParamEqualize.Name = "EvSeleParamEqualize";
            this.EvSeleParamEqualize.Size = new System.Drawing.Size(221, 22);
            this.EvSeleParamEqualize.Text = "Selected Parameter Equalize";
            this.EvSeleParamEqualize.Click += new System.EventHandler(this.EvSeleParamEqualize_Click);
            // 
            // EvDown
            // 
            this.EvDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.EvDown.Enabled = false;
            this.EvDown.Location = new System.Drawing.Point(215, 164);
            this.EvDown.Name = "EvDown";
            this.EvDown.Size = new System.Drawing.Size(40, 25);
            this.EvDown.TabIndex = 7;
            this.EvDown.TabStop = false;
            this.EvDown.Text = "▼";
            this.EvDown.UseVisualStyleBackColor = true;
            this.EvDown.Click += new System.EventHandler(this.EvDown_Click);
            // 
            // EvUp
            // 
            this.EvUp.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.EvUp.Enabled = false;
            this.EvUp.Location = new System.Drawing.Point(174, 164);
            this.EvUp.Name = "EvUp";
            this.EvUp.Size = new System.Drawing.Size(40, 25);
            this.EvUp.TabIndex = 6;
            this.EvUp.TabStop = false;
            this.EvUp.Text = "▲";
            this.EvUp.UseVisualStyleBackColor = true;
            this.EvUp.Click += new System.EventHandler(this.EvUp_Click);
            // 
            // EvRemove
            // 
            this.EvRemove.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.EvRemove.Enabled = false;
            this.EvRemove.Location = new System.Drawing.Point(114, 164);
            this.EvRemove.Name = "EvRemove";
            this.EvRemove.Size = new System.Drawing.Size(55, 25);
            this.EvRemove.TabIndex = 5;
            this.EvRemove.TabStop = false;
            this.EvRemove.Text = "Remove";
            this.EvRemove.UseVisualStyleBackColor = true;
            this.EvRemove.Click += new System.EventHandler(this.EvRemove_Click);
            // 
            // EvModify
            // 
            this.EvModify.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.EvModify.Enabled = false;
            this.EvModify.Location = new System.Drawing.Point(58, 164);
            this.EvModify.Name = "EvModify";
            this.EvModify.Size = new System.Drawing.Size(55, 25);
            this.EvModify.TabIndex = 4;
            this.EvModify.TabStop = false;
            this.EvModify.Text = "Modify";
            this.EvModify.UseVisualStyleBackColor = true;
            this.EvModify.Click += new System.EventHandler(this.EvModify_Click);
            // 
            // EvAdd
            // 
            this.EvAdd.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.EvAdd.Enabled = false;
            this.EvAdd.Location = new System.Drawing.Point(2, 164);
            this.EvAdd.Name = "EvAdd";
            this.EvAdd.Size = new System.Drawing.Size(55, 25);
            this.EvAdd.TabIndex = 3;
            this.EvAdd.TabStop = false;
            this.EvAdd.Text = "Add";
            this.EvAdd.UseVisualStyleBackColor = true;
            this.EvAdd.Click += new System.EventHandler(this.EvAdd_Click);
            // 
            // EvList
            // 
            this.EvList.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
            | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.EvList.ContextMenuStrip = this.EvStrip;
            this.EvList.Enabled = false;
            this.EvList.FormattingEnabled = true;
            this.EvList.HorizontalScrollbar = true;
            this.EvList.Location = new System.Drawing.Point(3, 92);
            this.EvList.Name = "EvList";
            this.EvList.SelectionMode = System.Windows.Forms.SelectionMode.MultiExtended;
            this.EvList.Size = new System.Drawing.Size(358, 69);
            this.EvList.TabIndex = 2;
            this.EvList.TabStop = false;
            this.EvList.SelectedIndexChanged += new System.EventHandler(this.EvList_SelectedIndexChanged);
            this.EvList.DoubleClick += new System.EventHandler(this.EvList_DoubleClick);
            // 
            // EvStrip
            // 
            this.EvStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.EvNoSelect,
            this.EvAllSelect,
            this.EvOffsetView,
            this.EvOpenSubRoutine,
            this.EvRefresh,
            this.EvCopytxt,
            this.EvMoveOffset,
            this.EvSeleExrn,
            this.EvOffsetInterlock});
            this.EvStrip.Name = "EvStrip";
            this.EvStrip.Size = new System.Drawing.Size(171, 202);
            // 
            // EvNoSelect
            // 
            this.EvNoSelect.Name = "EvNoSelect";
            this.EvNoSelect.Size = new System.Drawing.Size(170, 22);
            this.EvNoSelect.Text = "No Select";
            this.EvNoSelect.Click += new System.EventHandler(this.EvNoSelect_Click);
            // 
            // EvAllSelect
            // 
            this.EvAllSelect.Name = "EvAllSelect";
            this.EvAllSelect.Size = new System.Drawing.Size(170, 22);
            this.EvAllSelect.Text = "Select All";
            this.EvAllSelect.Click += new System.EventHandler(this.EvAllSelect_Click);
            // 
            // EvOffsetView
            // 
            this.EvOffsetView.Name = "EvOffsetView";
            this.EvOffsetView.Size = new System.Drawing.Size(170, 22);
            this.EvOffsetView.Text = "Offset View";
            this.EvOffsetView.Click += new System.EventHandler(this.EvOffsetView_Click);
            // 
            // EvOpenSubRoutine
            // 
            this.EvOpenSubRoutine.Name = "EvOpenSubRoutine";
            this.EvOpenSubRoutine.Size = new System.Drawing.Size(170, 22);
            this.EvOpenSubRoutine.Text = "Open Sub Routine";
            this.EvOpenSubRoutine.Click += new System.EventHandler(this.EvOpenSubRoutine_Click);
            // 
            // EvRefresh
            // 
            this.EvRefresh.Name = "EvRefresh";
            this.EvRefresh.Size = new System.Drawing.Size(170, 22);
            this.EvRefresh.Text = "Refresh";
            this.EvRefresh.Click += new System.EventHandler(this.EvRefresh_Click);
            // 
            // EvCopytxt
            // 
            this.EvCopytxt.Name = "EvCopytxt";
            this.EvCopytxt.Size = new System.Drawing.Size(170, 22);
            this.EvCopytxt.Text = "Copy Text";
            this.EvCopytxt.Click += new System.EventHandler(this.EvCopytxt_Click);
            // 
            // EvMoveOffset
            // 
            this.EvMoveOffset.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.EvListMoveF,
            this.EvListMoveB,
            this.EvParMoveF,
            this.EvParMoveB});
            this.EvMoveOffset.Name = "EvMoveOffset";
            this.EvMoveOffset.Size = new System.Drawing.Size(170, 22);
            this.EvMoveOffset.Text = "Move Offset";
            this.EvMoveOffset.Click += new System.EventHandler(this.EvMoveOffset_Click);
            // 
            // EvListMoveF
            // 
            this.EvListMoveF.Name = "EvListMoveF";
            this.EvListMoveF.Size = new System.Drawing.Size(203, 22);
            this.EvListMoveF.Text = "Move F(Event List)";
            this.EvListMoveF.Click += new System.EventHandler(this.EvListMoveF_Click);
            // 
            // EvListMoveB
            // 
            this.EvListMoveB.Name = "EvListMoveB";
            this.EvListMoveB.Size = new System.Drawing.Size(203, 22);
            this.EvListMoveB.Text = "Move B(Event List)";
            this.EvListMoveB.Click += new System.EventHandler(this.EvListMoveB_Click);
            // 
            // EvParMoveF
            // 
            this.EvParMoveF.Name = "EvParMoveF";
            this.EvParMoveF.Size = new System.Drawing.Size(203, 22);
            this.EvParMoveF.Text = "Move F(Selected Events)";
            this.EvParMoveF.Click += new System.EventHandler(this.EvParMoveF_Click);
            // 
            // EvParMoveB
            // 
            this.EvParMoveB.Name = "EvParMoveB";
            this.EvParMoveB.Size = new System.Drawing.Size(203, 22);
            this.EvParMoveB.Text = "Move B(Selected Events)";
            this.EvParMoveB.Click += new System.EventHandler(this.EvParMoveB_Click);
            // 
            // EvSeleExrn
            // 
            this.EvSeleExrn.Name = "EvSeleExrn";
            this.EvSeleExrn.Size = new System.Drawing.Size(170, 22);
            this.EvSeleExrn.Text = "Set External";
            this.EvSeleExrn.Click += new System.EventHandler(this.EvSeleExrn_Click);
            // 
            // EvOffsetInterlock
            // 
            this.EvOffsetInterlock.CheckOnClick = true;
            this.EvOffsetInterlock.Name = "EvOffsetInterlock";
            this.EvOffsetInterlock.Size = new System.Drawing.Size(170, 22);
            this.EvOffsetInterlock.Text = "Offset Interlock";
            // 
            // EvDesText
            // 
            this.EvDesText.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.EvDesText.Location = new System.Drawing.Point(3, 194);
            this.EvDesText.Multiline = true;
            this.EvDesText.Name = "EvDesText";
            this.EvDesText.ReadOnly = true;
            this.EvDesText.Size = new System.Drawing.Size(359, 45);
            this.EvDesText.TabIndex = 1;
            this.EvDesText.TabStop = false;
            // 
            // EventTab
            // 
            this.EventTab.Controls.Add(this.EvSp);
            this.EventTab.Controls.Add(this.EvSuba);
            this.EventTab.Controls.Add(this.EvRn);
            this.EventTab.Controls.Add(this.EvOvr);
            this.EventTab.Dock = System.Windows.Forms.DockStyle.Top;
            this.EventTab.Enabled = false;
            this.EventTab.Location = new System.Drawing.Point(3, 3);
            this.EventTab.Name = "EventTab";
            this.EventTab.SelectedIndex = 0;
            this.EventTab.Size = new System.Drawing.Size(359, 87);
            this.EventTab.TabIndex = 0;
            this.EventTab.SelectedIndexChanged += new System.EventHandler(this.EventTab_SelectedIndexChanged);
            // 
            // EvSp
            // 
            this.EvSp.Controls.Add(this.EvSpOffsetLabel);
            this.EvSp.Controls.Add(this.EvSpOffset);
            this.EvSp.Controls.Add(this.EvSpCbList);
            this.EvSp.Controls.Add(this.EvSpListLabel);
            this.EvSp.Controls.Add(this.EvSpCbID);
            this.EvSp.Controls.Add(this.EvSpIDLabel);
            this.EvSp.Location = new System.Drawing.Point(4, 22);
            this.EvSp.Name = "EvSp";
            this.EvSp.Padding = new System.Windows.Forms.Padding(3);
            this.EvSp.Size = new System.Drawing.Size(351, 61);
            this.EvSp.TabIndex = 0;
            this.EvSp.Text = "Specials";
            this.EvSp.UseVisualStyleBackColor = true;
            // 
            // EvSpOffsetLabel
            // 
            this.EvSpOffsetLabel.AutoSize = true;
            this.EvSpOffsetLabel.Location = new System.Drawing.Point(6, 36);
            this.EvSpOffsetLabel.Name = "EvSpOffsetLabel";
            this.EvSpOffsetLabel.Size = new System.Drawing.Size(35, 13);
            this.EvSpOffsetLabel.TabIndex = 6;
            this.EvSpOffsetLabel.Text = "Offset";
            // 
            // EvSpOffset
            // 
            this.EvSpOffset.Location = new System.Drawing.Point(45, 33);
            this.EvSpOffset.MaxLength = 10;
            this.EvSpOffset.Name = "EvSpOffset";
            this.EvSpOffset.ReadOnly = true;
            this.EvSpOffset.Size = new System.Drawing.Size(100, 20);
            this.EvSpOffset.TabIndex = 5;
            this.EvSpOffset.TabStop = false;
            // 
            // EvSpCbList
            // 
            this.EvSpCbList.FormattingEnabled = true;
            this.EvSpCbList.Items.AddRange(new object[] {
            "Entry",
            "Exit"});
            this.EvSpCbList.Location = new System.Drawing.Point(135, 7);
            this.EvSpCbList.Name = "EvSpCbList";
            this.EvSpCbList.Size = new System.Drawing.Size(58, 21);
            this.EvSpCbList.TabIndex = 3;
            this.EvSpCbList.TabStop = false;
            this.EvSpCbList.SelectedIndexChanged += new System.EventHandler(this.EvSpCbList_SelectedIndexChanged);
            // 
            // EvSpListLabel
            // 
            this.EvSpListLabel.AutoSize = true;
            this.EvSpListLabel.Location = new System.Drawing.Point(106, 10);
            this.EvSpListLabel.Name = "EvSpListLabel";
            this.EvSpListLabel.Size = new System.Drawing.Size(23, 13);
            this.EvSpListLabel.TabIndex = 2;
            this.EvSpListLabel.Text = "List";
            // 
            // EvSpCbID
            // 
            this.EvSpCbID.FormattingEnabled = true;
            this.EvSpCbID.Location = new System.Drawing.Point(49, 7);
            this.EvSpCbID.Name = "EvSpCbID";
            this.EvSpCbID.Size = new System.Drawing.Size(50, 21);
            this.EvSpCbID.TabIndex = 1;
            this.EvSpCbID.TabStop = false;
            this.EvSpCbID.SelectedIndexChanged += new System.EventHandler(this.EvSpCbID_SelectedIndexChanged);
            // 
            // EvSpIDLabel
            // 
            this.EvSpIDLabel.AutoSize = true;
            this.EvSpIDLabel.Location = new System.Drawing.Point(6, 10);
            this.EvSpIDLabel.Name = "EvSpIDLabel";
            this.EvSpIDLabel.Size = new System.Drawing.Size(37, 13);
            this.EvSpIDLabel.TabIndex = 0;
            this.EvSpIDLabel.Text = "Action";
            // 
            // EvSuba
            // 
            this.EvSuba.Controls.Add(this.EvSubaOffsetLabel);
            this.EvSuba.Controls.Add(this.EvSubaAnim);
            this.EvSuba.Controls.Add(this.EvSubaAnimLabel);
            this.EvSuba.Controls.Add(this.EvSubaOffset);
            this.EvSuba.Controls.Add(this.EvSubaAnimFlag);
            this.EvSuba.Controls.Add(this.EvSubaCbList);
            this.EvSuba.Controls.Add(this.EvSubaListLabel);
            this.EvSuba.Controls.Add(this.EvSubaIDLabel);
            this.EvSuba.Controls.Add(this.EvSubaCbID);
            this.EvSuba.Location = new System.Drawing.Point(4, 22);
            this.EvSuba.Name = "EvSuba";
            this.EvSuba.Padding = new System.Windows.Forms.Padding(3);
            this.EvSuba.Size = new System.Drawing.Size(351, 61);
            this.EvSuba.TabIndex = 1;
            this.EvSuba.Text = "Sub Actions";
            this.EvSuba.UseVisualStyleBackColor = true;
            // 
            // EvSubaOffsetLabel
            // 
            this.EvSubaOffsetLabel.AutoSize = true;
            this.EvSubaOffsetLabel.Location = new System.Drawing.Point(6, 36);
            this.EvSubaOffsetLabel.Name = "EvSubaOffsetLabel";
            this.EvSubaOffsetLabel.Size = new System.Drawing.Size(35, 13);
            this.EvSubaOffsetLabel.TabIndex = 9;
            this.EvSubaOffsetLabel.Text = "Offset";
            // 
            // EvSubaAnim
            // 
            this.EvSubaAnim.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.EvSubaAnim.Location = new System.Drawing.Point(228, 33);
            this.EvSubaAnim.MaxLength = 31;
            this.EvSubaAnim.Name = "EvSubaAnim";
            this.EvSubaAnim.Size = new System.Drawing.Size(120, 20);
            this.EvSubaAnim.TabIndex = 8;
            this.EvSubaAnim.TabStop = false;
            this.EvSubaAnim.KeyDown += new System.Windows.Forms.KeyEventHandler(this.EvSubaAnim_KeyDown);
            // 
            // EvSubaAnimLabel
            // 
            this.EvSubaAnimLabel.AutoSize = true;
            this.EvSubaAnimLabel.ContextMenuStrip = this.AnimStrip;
            this.EvSubaAnimLabel.Location = new System.Drawing.Point(170, 36);
            this.EvSubaAnimLabel.Name = "EvSubaAnimLabel";
            this.EvSubaAnimLabel.Size = new System.Drawing.Size(53, 13);
            this.EvSubaAnimLabel.TabIndex = 7;
            this.EvSubaAnimLabel.Text = "Animation";
            // 
            // AnimStrip
            // 
            this.AnimStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.AnimFlagTxtView,
            this.AllSameAnim,
            this.AnimAutoSave});
            this.AnimStrip.Name = "AnimStrip";
            this.AnimStrip.Size = new System.Drawing.Size(307, 70);
            // 
            // AnimFlagTxtView
            // 
            this.AnimFlagTxtView.CheckOnClick = true;
            this.AnimFlagTxtView.Name = "AnimFlagTxtView";
            this.AnimFlagTxtView.Size = new System.Drawing.Size(306, 22);
            this.AnimFlagTxtView.Text = "Show Name when Editing Animation Flags";
            // 
            // AllSameAnim
            // 
            this.AllSameAnim.CheckOnClick = true;
            this.AllSameAnim.Name = "AllSameAnim";
            this.AllSameAnim.Size = new System.Drawing.Size(306, 22);
            this.AllSameAnim.Text = "Change All Animations with the same name";
            // 
            // AnimAutoSave
            // 
            this.AnimAutoSave.CheckOnClick = true;
            this.AnimAutoSave.Name = "AnimAutoSave";
            this.AnimAutoSave.Size = new System.Drawing.Size(306, 22);
            this.AnimAutoSave.Text = "Save Animation Name Automatically";
            // 
            // EvSubaOffset
            // 
            this.EvSubaOffset.Location = new System.Drawing.Point(45, 33);
            this.EvSubaOffset.MaxLength = 10;
            this.EvSubaOffset.Name = "EvSubaOffset";
            this.EvSubaOffset.ReadOnly = true;
            this.EvSubaOffset.Size = new System.Drawing.Size(100, 20);
            this.EvSubaOffset.TabIndex = 6;
            this.EvSubaOffset.TabStop = false;
            // 
            // EvSubaAnimFlag
            // 
            this.EvSubaAnimFlag.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.EvSubaAnimFlag.ContextMenuStrip = this.AnimStrip;
            this.EvSubaAnimFlag.Location = new System.Drawing.Point(227, 4);
            this.EvSubaAnimFlag.Name = "EvSubaAnimFlag";
            this.EvSubaAnimFlag.Size = new System.Drawing.Size(122, 25);
            this.EvSubaAnimFlag.TabIndex = 4;
            this.EvSubaAnimFlag.TabStop = false;
            this.EvSubaAnimFlag.Text = "Animation Flags";
            this.EvSubaAnimFlag.UseVisualStyleBackColor = true;
            this.EvSubaAnimFlag.Click += new System.EventHandler(this.EvSubaAnimFlag_Click);
            // 
            // EvSubaCbList
            // 
            this.EvSubaCbList.FormattingEnabled = true;
            this.EvSubaCbList.Location = new System.Drawing.Point(156, 7);
            this.EvSubaCbList.Name = "EvSubaCbList";
            this.EvSubaCbList.Size = new System.Drawing.Size(67, 21);
            this.EvSubaCbList.TabIndex = 3;
            this.EvSubaCbList.TabStop = false;
            this.EvSubaCbList.SelectedIndexChanged += new System.EventHandler(this.EvSubaCbList_SelectedIndexChanged);
            // 
            // EvSubaListLabel
            // 
            this.EvSubaListLabel.AutoSize = true;
            this.EvSubaListLabel.Location = new System.Drawing.Point(128, 10);
            this.EvSubaListLabel.Name = "EvSubaListLabel";
            this.EvSubaListLabel.Size = new System.Drawing.Size(23, 13);
            this.EvSubaListLabel.TabIndex = 2;
            this.EvSubaListLabel.Text = "List";
            // 
            // EvSubaIDLabel
            // 
            this.EvSubaIDLabel.AutoSize = true;
            this.EvSubaIDLabel.Location = new System.Drawing.Point(5, 10);
            this.EvSubaIDLabel.Name = "EvSubaIDLabel";
            this.EvSubaIDLabel.Size = new System.Drawing.Size(59, 13);
            this.EvSubaIDLabel.TabIndex = 1;
            this.EvSubaIDLabel.Text = "Sub Action";
            // 
            // EvSubaCbID
            // 
            this.EvSubaCbID.FormattingEnabled = true;
            this.EvSubaCbID.Location = new System.Drawing.Point(70, 7);
            this.EvSubaCbID.Name = "EvSubaCbID";
            this.EvSubaCbID.Size = new System.Drawing.Size(52, 21);
            this.EvSubaCbID.TabIndex = 0;
            this.EvSubaCbID.TabStop = false;
            this.EvSubaCbID.SelectedIndexChanged += new System.EventHandler(this.EvSubaCbID_SelectedIndexChanged);
            // 
            // EvRn
            // 
            this.EvRn.Controls.Add(this.EvRnOffTrace);
            this.EvRn.Controls.Add(this.EvRnOffCbList);
            this.EvRn.Controls.Add(this.EvRnOfSeleLabel);
            this.EvRn.Controls.Add(this.EvRnOffsetLabel);
            this.EvRn.Controls.Add(this.EvRnOffset);
            this.EvRn.Controls.Add(this.EvRnCreate);
            this.EvRn.Controls.Add(this.EvRnOpen);
            this.EvRn.Controls.Add(this.EvRnOfSele);
            this.EvRn.Location = new System.Drawing.Point(4, 22);
            this.EvRn.Name = "EvRn";
            this.EvRn.Padding = new System.Windows.Forms.Padding(3);
            this.EvRn.Size = new System.Drawing.Size(351, 61);
            this.EvRn.TabIndex = 2;
            this.EvRn.Text = "Sub Routines";
            this.EvRn.UseVisualStyleBackColor = true;
            // 
            // EvRnOffTrace
            // 
            this.EvRnOffTrace.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.EvRnOffTrace.ContextMenuStrip = this.EvRnStrip;
            this.EvRnOffTrace.FormattingEnabled = true;
            this.EvRnOffTrace.Location = new System.Drawing.Point(224, 33);
            this.EvRnOffTrace.Name = "EvRnOffTrace";
            this.EvRnOffTrace.Size = new System.Drawing.Size(125, 21);
            this.EvRnOffTrace.TabIndex = 9;
            this.EvRnOffTrace.TabStop = false;
            this.EvRnOffTrace.SelectedIndexChanged += new System.EventHandler(this.EvRnOffTrace_SelectedIndexChanged);
            // 
            // EvRnStrip
            // 
            this.EvRnStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.EvRnGenDat,
            this.EvRnGenDatCbList,
            this.EvRnItmCount,
            this.EvRnSortDat,
            this.EvRnTraceDat,
            this.EvRnFullItemTrace,
            this.EvRnCpy,
            this.RnTraceCpy,
            this.SearchSameDataNotFullRoutine,
            this.SearchSameDataRoutine,
            this.SearchPerfectMatchingDataRoutine,
            this.EvRnCmpSameData});
            this.EvRnStrip.Name = "EvRnStrip";
            this.EvRnStrip.Size = new System.Drawing.Size(293, 273);
            // 
            // EvRnGenDat
            // 
            this.EvRnGenDat.Name = "EvRnGenDat";
            this.EvRnGenDat.Size = new System.Drawing.Size(292, 22);
            this.EvRnGenDat.Text = "Reset / Generate Sub Routine Data";
            this.EvRnGenDat.Click += new System.EventHandler(this.EvRnGenDat_Click);
            // 
            // EvRnGenDatCbList
            // 
            this.EvRnGenDatCbList.Name = "EvRnGenDatCbList";
            this.EvRnGenDatCbList.Size = new System.Drawing.Size(232, 23);
            // 
            // EvRnItmCount
            // 
            this.EvRnItmCount.Name = "EvRnItmCount";
            this.EvRnItmCount.Size = new System.Drawing.Size(292, 22);
            this.EvRnItmCount.Text = "Sub Routine List Count View";
            this.EvRnItmCount.Click += new System.EventHandler(this.EvRnItmCount_Click);
            // 
            // EvRnSortDat
            // 
            this.EvRnSortDat.Name = "EvRnSortDat";
            this.EvRnSortDat.Size = new System.Drawing.Size(292, 22);
            this.EvRnSortDat.Text = "Sub Routine List Sort";
            this.EvRnSortDat.Click += new System.EventHandler(this.EvRnSortDat_Click);
            // 
            // EvRnTraceDat
            // 
            this.EvRnTraceDat.Name = "EvRnTraceDat";
            this.EvRnTraceDat.Size = new System.Drawing.Size(292, 22);
            this.EvRnTraceDat.Text = "Event List Trace";
            this.EvRnTraceDat.Click += new System.EventHandler(this.EvRnTraceDat_Click);
            // 
            // EvRnFullItemTrace
            // 
            this.EvRnFullItemTrace.Name = "EvRnFullItemTrace";
            this.EvRnFullItemTrace.Size = new System.Drawing.Size(292, 22);
            this.EvRnFullItemTrace.Text = "Full Data View";
            this.EvRnFullItemTrace.Click += new System.EventHandler(this.EvRnFullItemTrace_Click);
            // 
            // EvRnCpy
            // 
            this.EvRnCpy.Name = "EvRnCpy";
            this.EvRnCpy.Size = new System.Drawing.Size(292, 22);
            this.EvRnCpy.Text = "Copy Sub Routine List";
            this.EvRnCpy.Click += new System.EventHandler(this.EvRnCpy_Click);
            // 
            // RnTraceCpy
            // 
            this.RnTraceCpy.Name = "RnTraceCpy";
            this.RnTraceCpy.Size = new System.Drawing.Size(292, 22);
            this.RnTraceCpy.Text = "Copy Trace List";
            this.RnTraceCpy.Click += new System.EventHandler(this.RnTraceCpy_Click);
            // 
            // SearchSameDataNotFullRoutine
            // 
            this.SearchSameDataNotFullRoutine.Name = "SearchSameDataNotFullRoutine";
            this.SearchSameDataNotFullRoutine.Size = new System.Drawing.Size(292, 22);
            this.SearchSameDataNotFullRoutine.Text = "Search Same Data (Target=Top)";
            this.SearchSameDataNotFullRoutine.Click += new System.EventHandler(this.SearchSameDataNotFullRoutine_Click);
            // 
            // SearchSameDataRoutine
            // 
            this.SearchSameDataRoutine.Name = "SearchSameDataRoutine";
            this.SearchSameDataRoutine.Size = new System.Drawing.Size(292, 22);
            this.SearchSameDataRoutine.Text = "Search Same Data (List=Full)";
            this.SearchSameDataRoutine.Click += new System.EventHandler(this.SearchSameDataRoutine_Click);
            // 
            // SearchPerfectMatchingDataRoutine
            // 
            this.SearchPerfectMatchingDataRoutine.Name = "SearchPerfectMatchingDataRoutine";
            this.SearchPerfectMatchingDataRoutine.Size = new System.Drawing.Size(292, 22);
            this.SearchPerfectMatchingDataRoutine.Text = "Search Perfect Matching Data";
            this.SearchPerfectMatchingDataRoutine.Click += new System.EventHandler(this.SearchPerfectMatchingDataRoutine_Click);
            // 
            // EvRnCmpSameData
            // 
            this.EvRnCmpSameData.Name = "EvRnCmpSameData";
            this.EvRnCmpSameData.Size = new System.Drawing.Size(292, 22);
            this.EvRnCmpSameData.Text = "Compress Same Data";
            this.EvRnCmpSameData.Click += new System.EventHandler(this.EvRnCmpSameData_Click);
            // 
            // EvRnOffCbList
            // 
            this.EvRnOffCbList.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.EvRnOffCbList.ContextMenuStrip = this.EvRnStrip;
            this.EvRnOffCbList.FormattingEnabled = true;
            this.EvRnOffCbList.Location = new System.Drawing.Point(224, 7);
            this.EvRnOffCbList.Name = "EvRnOffCbList";
            this.EvRnOffCbList.Size = new System.Drawing.Size(125, 21);
            this.EvRnOffCbList.TabIndex = 8;
            this.EvRnOffCbList.TabStop = false;
            this.EvRnOffCbList.SelectedIndexChanged += new System.EventHandler(this.EvRnOffCbList_SelectedIndexChanged);
            // 
            // EvRnOfSeleLabel
            // 
            this.EvRnOfSeleLabel.AutoSize = true;
            this.EvRnOfSeleLabel.Location = new System.Drawing.Point(6, 10);
            this.EvRnOfSeleLabel.Name = "EvRnOfSeleLabel";
            this.EvRnOfSeleLabel.Size = new System.Drawing.Size(35, 13);
            this.EvRnOfSeleLabel.TabIndex = 7;
            this.EvRnOfSeleLabel.Text = "Offset";
            // 
            // EvRnOffsetLabel
            // 
            this.EvRnOffsetLabel.AutoSize = true;
            this.EvRnOffsetLabel.Location = new System.Drawing.Point(6, 36);
            this.EvRnOffsetLabel.Name = "EvRnOffsetLabel";
            this.EvRnOffsetLabel.Size = new System.Drawing.Size(35, 13);
            this.EvRnOffsetLabel.TabIndex = 6;
            this.EvRnOffsetLabel.Text = "Offset";
            // 
            // EvRnOffset
            // 
            this.EvRnOffset.Location = new System.Drawing.Point(45, 33);
            this.EvRnOffset.Name = "EvRnOffset";
            this.EvRnOffset.ReadOnly = true;
            this.EvRnOffset.Size = new System.Drawing.Size(100, 20);
            this.EvRnOffset.TabIndex = 5;
            this.EvRnOffset.TabStop = false;
            // 
            // EvRnCreate
            // 
            this.EvRnCreate.Location = new System.Drawing.Point(173, 4);
            this.EvRnCreate.Name = "EvRnCreate";
            this.EvRnCreate.Size = new System.Drawing.Size(50, 25);
            this.EvRnCreate.TabIndex = 3;
            this.EvRnCreate.TabStop = false;
            this.EvRnCreate.Text = "Create";
            this.EvRnCreate.UseVisualStyleBackColor = true;
            this.EvRnCreate.Click += new System.EventHandler(this.EvRnCreate_Click);
            // 
            // EvRnOpen
            // 
            this.EvRnOpen.Location = new System.Drawing.Point(128, 4);
            this.EvRnOpen.Name = "EvRnOpen";
            this.EvRnOpen.Size = new System.Drawing.Size(40, 25);
            this.EvRnOpen.TabIndex = 2;
            this.EvRnOpen.TabStop = false;
            this.EvRnOpen.Text = "Go";
            this.EvRnOpen.UseVisualStyleBackColor = true;
            this.EvRnOpen.Click += new System.EventHandler(this.EvRnOpen_Click);
            // 
            // EvRnOfSele
            // 
            this.EvRnOfSele.Location = new System.Drawing.Point(45, 7);
            this.EvRnOfSele.MaxLength = 8;
            this.EvRnOfSele.Name = "EvRnOfSele";
            this.EvRnOfSele.Size = new System.Drawing.Size(81, 20);
            this.EvRnOfSele.TabIndex = 1;
            this.EvRnOfSele.TabStop = false;
            // 
            // EvOvr
            // 
            this.EvOvr.Controls.Add(this.EvPreSelExternal);
            this.EvOvr.Controls.Add(this.EvOvrOffsetLabel);
            this.EvOvr.Controls.Add(this.EvOvrOffset);
            this.EvOvr.Controls.Add(this.EvOvrCbList);
            this.EvOvr.Controls.Add(this.EvOvrListLabel);
            this.EvOvr.Controls.Add(this.EvOvrId);
            this.EvOvr.Controls.Add(this.EvOvrIdLabel);
            this.EvOvr.Location = new System.Drawing.Point(4, 22);
            this.EvOvr.Name = "EvOvr";
            this.EvOvr.Padding = new System.Windows.Forms.Padding(3);
            this.EvOvr.Size = new System.Drawing.Size(351, 61);
            this.EvOvr.TabIndex = 3;
            this.EvOvr.Text = "Override";
            this.EvOvr.UseVisualStyleBackColor = true;
            // 
            // EvPreSelExternal
            // 
            this.EvPreSelExternal.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.EvPreSelExternal.Location = new System.Drawing.Point(146, 30);
            this.EvPreSelExternal.Name = "EvPreSelExternal";
            this.EvPreSelExternal.Size = new System.Drawing.Size(203, 25);
            this.EvPreSelExternal.TabIndex = 13;
            this.EvPreSelExternal.TabStop = false;
            this.EvPreSelExternal.Text = "External";
            this.EvPreSelExternal.UseVisualStyleBackColor = true;
            this.EvPreSelExternal.Click += new System.EventHandler(this.EvPreSelExternal_Click);
            // 
            // EvOvrOffsetLabel
            // 
            this.EvOvrOffsetLabel.AutoSize = true;
            this.EvOvrOffsetLabel.Location = new System.Drawing.Point(6, 36);
            this.EvOvrOffsetLabel.Name = "EvOvrOffsetLabel";
            this.EvOvrOffsetLabel.Size = new System.Drawing.Size(35, 13);
            this.EvOvrOffsetLabel.TabIndex = 12;
            this.EvOvrOffsetLabel.Text = "Offset";
            // 
            // EvOvrOffset
            // 
            this.EvOvrOffset.Location = new System.Drawing.Point(45, 33);
            this.EvOvrOffset.MaxLength = 10;
            this.EvOvrOffset.Name = "EvOvrOffset";
            this.EvOvrOffset.ReadOnly = true;
            this.EvOvrOffset.Size = new System.Drawing.Size(100, 20);
            this.EvOvrOffset.TabIndex = 11;
            this.EvOvrOffset.TabStop = false;
            // 
            // EvOvrCbList
            // 
            this.EvOvrCbList.ContextMenuStrip = this.EvOvrStrip;
            this.EvOvrCbList.FormattingEnabled = true;
            this.EvOvrCbList.Location = new System.Drawing.Point(152, 7);
            this.EvOvrCbList.Name = "EvOvrCbList";
            this.EvOvrCbList.Size = new System.Drawing.Size(58, 21);
            this.EvOvrCbList.TabIndex = 10;
            this.EvOvrCbList.TabStop = false;
            this.EvOvrCbList.SelectedIndexChanged += new System.EventHandler(this.EvOvrCbList_SelectedIndexChanged);
            // 
            // EvOvrStrip
            // 
            this.EvOvrStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.EvOvrEdit,
            this.EvOvrRemove,
            this.EvOvrUp,
            this.EvOvrDown,
            this.EvOvrListMoveOffset,
            this.EvOvrListMoveB,
            this.EvOvrListCount,
            this.EvOvrListSort});
            this.EvOvrStrip.Name = "EvOvrStrip";
            this.EvOvrStrip.Size = new System.Drawing.Size(150, 180);
            this.EvOvrStrip.Opening += new System.ComponentModel.CancelEventHandler(this.EvOvrStrip_Opening);
            // 
            // EvOvrEdit
            // 
            this.EvOvrEdit.Name = "EvOvrEdit";
            this.EvOvrEdit.Size = new System.Drawing.Size(149, 22);
            this.EvOvrEdit.Text = "Edit, Add";
            this.EvOvrEdit.Click += new System.EventHandler(this.EvOvrEdit_Click);
            // 
            // EvOvrRemove
            // 
            this.EvOvrRemove.Name = "EvOvrRemove";
            this.EvOvrRemove.Size = new System.Drawing.Size(149, 22);
            this.EvOvrRemove.Text = "Remove";
            this.EvOvrRemove.Click += new System.EventHandler(this.EvOvrRemove_Click);
            // 
            // EvOvrUp
            // 
            this.EvOvrUp.Name = "EvOvrUp";
            this.EvOvrUp.Size = new System.Drawing.Size(149, 22);
            this.EvOvrUp.Text = "Move Up";
            this.EvOvrUp.Click += new System.EventHandler(this.EvOvrUp_Click);
            // 
            // EvOvrDown
            // 
            this.EvOvrDown.Name = "EvOvrDown";
            this.EvOvrDown.Size = new System.Drawing.Size(149, 22);
            this.EvOvrDown.Text = "Move Down";
            this.EvOvrDown.Click += new System.EventHandler(this.EvOvrDown_Click);
            // 
            // EvOvrListMoveOffset
            // 
            this.EvOvrListMoveOffset.Name = "EvOvrListMoveOffset";
            this.EvOvrListMoveOffset.Size = new System.Drawing.Size(149, 22);
            this.EvOvrListMoveOffset.Text = "Move F Offset";
            this.EvOvrListMoveOffset.Click += new System.EventHandler(this.EvOvrListMoveOffset_Click);
            // 
            // EvOvrListMoveB
            // 
            this.EvOvrListMoveB.Name = "EvOvrListMoveB";
            this.EvOvrListMoveB.Size = new System.Drawing.Size(149, 22);
            this.EvOvrListMoveB.Text = "Move B Offset";
            this.EvOvrListMoveB.Click += new System.EventHandler(this.EvOvrListMoveB_Click);
            // 
            // EvOvrListCount
            // 
            this.EvOvrListCount.Name = "EvOvrListCount";
            this.EvOvrListCount.Size = new System.Drawing.Size(149, 22);
            this.EvOvrListCount.Text = "Count View";
            this.EvOvrListCount.Click += new System.EventHandler(this.EvOvrListCount_Click);
            // 
            // EvOvrListSort
            // 
            this.EvOvrListSort.Name = "EvOvrListSort";
            this.EvOvrListSort.Size = new System.Drawing.Size(149, 22);
            this.EvOvrListSort.Text = "ID Sort";
            this.EvOvrListSort.Click += new System.EventHandler(this.EvOvrListSort_Click);
            // 
            // EvOvrListLabel
            // 
            this.EvOvrListLabel.AutoSize = true;
            this.EvOvrListLabel.Location = new System.Drawing.Point(123, 10);
            this.EvOvrListLabel.Name = "EvOvrListLabel";
            this.EvOvrListLabel.Size = new System.Drawing.Size(23, 13);
            this.EvOvrListLabel.TabIndex = 9;
            this.EvOvrListLabel.Text = "List";
            // 
            // EvOvrId
            // 
            this.EvOvrId.ContextMenuStrip = this.EvOvrStrip;
            this.EvOvrId.FormattingEnabled = true;
            this.EvOvrId.Location = new System.Drawing.Point(64, 7);
            this.EvOvrId.Name = "EvOvrId";
            this.EvOvrId.Size = new System.Drawing.Size(50, 21);
            this.EvOvrId.TabIndex = 8;
            this.EvOvrId.TabStop = false;
            this.EvOvrId.SelectedIndexChanged += new System.EventHandler(this.EvOvrId_SelectedIndexChanged);
            // 
            // EvOvrIdLabel
            // 
            this.EvOvrIdLabel.AutoSize = true;
            this.EvOvrIdLabel.Location = new System.Drawing.Point(6, 10);
            this.EvOvrIdLabel.Name = "EvOvrIdLabel";
            this.EvOvrIdLabel.Size = new System.Drawing.Size(51, 13);
            this.EvOvrIdLabel.TabIndex = 7;
            this.EvOvrIdLabel.Text = "Action ID";
            // 
            // AtrEditMode
            // 
            this.AtrEditMode.Controls.Add(this.AtrEdList);
            this.AtrEditMode.Controls.Add(this.AtrEdText);
            this.AtrEditMode.Controls.Add(this.AtrEdListLabel);
            this.AtrEditMode.Location = new System.Drawing.Point(4, 22);
            this.AtrEditMode.Name = "AtrEditMode";
            this.AtrEditMode.Padding = new System.Windows.Forms.Padding(3);
            this.AtrEditMode.Size = new System.Drawing.Size(365, 242);
            this.AtrEditMode.TabIndex = 2;
            this.AtrEditMode.Text = "Attributes";
            this.AtrEditMode.UseVisualStyleBackColor = true;
            // 
            // AtrEdList
            // 
            this.AtrEdList.AllowUserToAddRows = false;
            this.AtrEdList.AllowUserToDeleteRows = false;
            this.AtrEdList.AllowUserToResizeRows = false;
            this.AtrEdList.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.AtrEdList.ColumnHeadersVisible = false;
            this.AtrEdList.Columns.AddRange(new System.Windows.Forms.DataGridViewColumn[] {
            this.AtrEdListParam,
            this.AtrEdListAtr,
            this.AtrEdListSSE});
            this.AtrEdList.ContextMenuStrip = this.AtrEdStrip;
            this.AtrEdList.Dock = System.Windows.Forms.DockStyle.Fill;
            this.AtrEdList.Enabled = false;
            this.AtrEdList.Location = new System.Drawing.Point(3, 16);
            this.AtrEdList.MultiSelect = false;
            this.AtrEdList.Name = "AtrEdList";
            this.AtrEdList.RowHeadersVisible = false;
            this.AtrEdList.RowTemplate.Height = 21;
            this.AtrEdList.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.AtrEdList.Size = new System.Drawing.Size(359, 178);
            this.AtrEdList.TabIndex = 2;
            this.AtrEdList.TabStop = false;
            this.AtrEdList.CellValueChanged += new System.Windows.Forms.DataGridViewCellEventHandler(this.AtrEdList_CellValueChanged);
            this.AtrEdList.SelectionChanged += new System.EventHandler(this.AtrEdList_SelectionChanged);
            // 
            // AtrEdListParam
            // 
            this.AtrEdListParam.Frozen = true;
            this.AtrEdListParam.HeaderText = "Parameter";
            this.AtrEdListParam.MaxInputLength = 300;
            this.AtrEdListParam.Name = "AtrEdListParam";
            this.AtrEdListParam.ReadOnly = true;
            this.AtrEdListParam.Resizable = System.Windows.Forms.DataGridViewTriState.True;
            this.AtrEdListParam.Width = 220;
            // 
            // AtrEdListAtr
            // 
            this.AtrEdListAtr.Frozen = true;
            this.AtrEdListAtr.HeaderText = "Attributes";
            this.AtrEdListAtr.MaxInputLength = 50;
            this.AtrEdListAtr.Name = "AtrEdListAtr";
            this.AtrEdListAtr.Resizable = System.Windows.Forms.DataGridViewTriState.True;
            this.AtrEdListAtr.Width = 80;
            // 
            // AtrEdListSSE
            // 
            this.AtrEdListSSE.Frozen = true;
            this.AtrEdListSSE.HeaderText = "SSE Attributes";
            this.AtrEdListSSE.MaxInputLength = 50;
            this.AtrEdListSSE.Name = "AtrEdListSSE";
            this.AtrEdListSSE.Resizable = System.Windows.Forms.DataGridViewTriState.False;
            this.AtrEdListSSE.Width = 5000;
            // 
            // AtrEdStrip
            // 
            this.AtrEdStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.AtrIntFloat,
            this.AtrHexView});
            this.AtrEdStrip.Name = "AtrEdStrip";
            this.AtrEdStrip.Size = new System.Drawing.Size(164, 48);
            // 
            // AtrIntFloat
            // 
            this.AtrIntFloat.Name = "AtrIntFloat";
            this.AtrIntFloat.Size = new System.Drawing.Size(163, 22);
            this.AtrIntFloat.Text = "Change Int-Float";
            this.AtrIntFloat.Click += new System.EventHandler(this.AtrIntFloat_Click);
            // 
            // AtrHexView
            // 
            this.AtrHexView.Name = "AtrHexView";
            this.AtrHexView.Size = new System.Drawing.Size(163, 22);
            this.AtrHexView.Text = "Hex View";
            this.AtrHexView.Click += new System.EventHandler(this.AtrHexView_Click);
            // 
            // AtrEdText
            // 
            this.AtrEdText.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.AtrEdText.Location = new System.Drawing.Point(3, 194);
            this.AtrEdText.Multiline = true;
            this.AtrEdText.Name = "AtrEdText";
            this.AtrEdText.ReadOnly = true;
            this.AtrEdText.Size = new System.Drawing.Size(359, 45);
            this.AtrEdText.TabIndex = 1;
            this.AtrEdText.TabStop = false;
            // 
            // AtrEdListLabel
            // 
            this.AtrEdListLabel.AutoSize = true;
            this.AtrEdListLabel.Dock = System.Windows.Forms.DockStyle.Top;
            this.AtrEdListLabel.Location = new System.Drawing.Point(3, 3);
            this.AtrEdListLabel.Name = "AtrEdListLabel";
            this.AtrEdListLabel.Size = new System.Drawing.Size(189, 13);
            this.AtrEdListLabel.TabIndex = 0;
            this.AtrEdListLabel.Text = "Parameter / Attributes / SSE Attributes";
            // 
            // ArticleEditMode
            // 
            this.ArticleEditMode.Controls.Add(this.ArticleIDLabel);
            this.ArticleEditMode.Controls.Add(this.ArticleIDCb);
            this.ArticleEditMode.Controls.Add(this.ArticleTab);
            this.ArticleEditMode.Location = new System.Drawing.Point(4, 22);
            this.ArticleEditMode.Name = "ArticleEditMode";
            this.ArticleEditMode.Padding = new System.Windows.Forms.Padding(3);
            this.ArticleEditMode.Size = new System.Drawing.Size(365, 242);
            this.ArticleEditMode.TabIndex = 3;
            this.ArticleEditMode.Text = "Articles";
            this.ArticleEditMode.UseVisualStyleBackColor = true;
            // 
            // ArticleIDLabel
            // 
            this.ArticleIDLabel.AutoSize = true;
            this.ArticleIDLabel.Location = new System.Drawing.Point(3, 9);
            this.ArticleIDLabel.Name = "ArticleIDLabel";
            this.ArticleIDLabel.Size = new System.Drawing.Size(36, 13);
            this.ArticleIDLabel.TabIndex = 2;
            this.ArticleIDLabel.Text = "Article";
            // 
            // ArticleIDCb
            // 
            this.ArticleIDCb.Enabled = false;
            this.ArticleIDCb.FormattingEnabled = true;
            this.ArticleIDCb.Location = new System.Drawing.Point(44, 4);
            this.ArticleIDCb.Name = "ArticleIDCb";
            this.ArticleIDCb.Size = new System.Drawing.Size(121, 21);
            this.ArticleIDCb.TabIndex = 2;
            this.ArticleIDCb.TabStop = false;
            this.ArticleIDCb.SelectedIndexChanged += new System.EventHandler(this.ArticleIDCb_SelectedIndexChanged);
            // 
            // ArticleTab
            // 
            this.ArticleTab.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
            | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.ArticleTab.Controls.Add(this.ArtAction);
            this.ArticleTab.Controls.Add(this.ArtSuba);
            this.ArticleTab.Controls.Add(this.ArtParam);
            this.ArticleTab.Controls.Add(this.ArtData);
            this.ArticleTab.Controls.Add(this.ArtCompress);
            this.ArticleTab.Enabled = false;
            this.ArticleTab.Location = new System.Drawing.Point(3, 29);
            this.ArticleTab.Name = "ArticleTab";
            this.ArticleTab.SelectedIndex = 0;
            this.ArticleTab.Size = new System.Drawing.Size(359, 207);
            this.ArticleTab.TabIndex = 3;
            // 
            // ArtAction
            // 
            this.ArtAction.Controls.Add(this.ArtActPaste);
            this.ArtAction.Controls.Add(this.ArtActCopy);
            this.ArtAction.Controls.Add(this.ArtActDown);
            this.ArtAction.Controls.Add(this.ArtActUp);
            this.ArtAction.Controls.Add(this.ArtActRemove);
            this.ArtAction.Controls.Add(this.ArtActModify);
            this.ArtAction.Controls.Add(this.ArtActAdd);
            this.ArtAction.Controls.Add(this.ArtActList);
            this.ArtAction.Controls.Add(this.ArtActText);
            this.ArtAction.Controls.Add(this.ArtActOffsetLabel);
            this.ArtAction.Controls.Add(this.ArtActOffset);
            this.ArtAction.Controls.Add(this.ArtActCbList);
            this.ArtAction.Controls.Add(this.ArtActId);
            this.ArtAction.Controls.Add(this.ArtActIdLabel);
            this.ArtAction.Location = new System.Drawing.Point(4, 22);
            this.ArtAction.Name = "ArtAction";
            this.ArtAction.Padding = new System.Windows.Forms.Padding(3);
            this.ArtAction.Size = new System.Drawing.Size(351, 181);
            this.ArtAction.TabIndex = 0;
            this.ArtAction.Text = "Actions";
            this.ArtAction.UseVisualStyleBackColor = true;
            // 
            // ArtActPaste
            // 
            this.ArtActPaste.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.ArtActPaste.Location = new System.Drawing.Point(306, 103);
            this.ArtActPaste.Name = "ArtActPaste";
            this.ArtActPaste.Size = new System.Drawing.Size(43, 25);
            this.ArtActPaste.TabIndex = 18;
            this.ArtActPaste.TabStop = false;
            this.ArtActPaste.Text = "Paste";
            this.ArtActPaste.UseVisualStyleBackColor = true;
            this.ArtActPaste.Click += new System.EventHandler(this.ArtActPaste_Click);
            // 
            // ArtActCopy
            // 
            this.ArtActCopy.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.ArtActCopy.ContextMenuStrip = this.EvCopyStrip;
            this.ArtActCopy.Location = new System.Drawing.Point(262, 103);
            this.ArtActCopy.Name = "ArtActCopy";
            this.ArtActCopy.Size = new System.Drawing.Size(43, 25);
            this.ArtActCopy.TabIndex = 17;
            this.ArtActCopy.TabStop = false;
            this.ArtActCopy.Text = "Copy";
            this.ArtActCopy.UseVisualStyleBackColor = true;
            this.ArtActCopy.Click += new System.EventHandler(this.ArtActCopy_Click);
            // 
            // ArtActDown
            // 
            this.ArtActDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.ArtActDown.Location = new System.Drawing.Point(215, 103);
            this.ArtActDown.Name = "ArtActDown";
            this.ArtActDown.Size = new System.Drawing.Size(40, 25);
            this.ArtActDown.TabIndex = 16;
            this.ArtActDown.TabStop = false;
            this.ArtActDown.Text = "▼";
            this.ArtActDown.UseVisualStyleBackColor = true;
            this.ArtActDown.Click += new System.EventHandler(this.ArtActDown_Click);
            // 
            // ArtActUp
            // 
            this.ArtActUp.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.ArtActUp.Location = new System.Drawing.Point(174, 103);
            this.ArtActUp.Name = "ArtActUp";
            this.ArtActUp.Size = new System.Drawing.Size(40, 25);
            this.ArtActUp.TabIndex = 15;
            this.ArtActUp.TabStop = false;
            this.ArtActUp.Text = "▲";
            this.ArtActUp.UseVisualStyleBackColor = true;
            this.ArtActUp.Click += new System.EventHandler(this.ArtActUp_Click);
            // 
            // ArtActRemove
            // 
            this.ArtActRemove.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.ArtActRemove.Location = new System.Drawing.Point(114, 103);
            this.ArtActRemove.Name = "ArtActRemove";
            this.ArtActRemove.Size = new System.Drawing.Size(55, 25);
            this.ArtActRemove.TabIndex = 14;
            this.ArtActRemove.TabStop = false;
            this.ArtActRemove.Text = "Remove";
            this.ArtActRemove.UseVisualStyleBackColor = true;
            this.ArtActRemove.Click += new System.EventHandler(this.ArtActRemove_Click);
            // 
            // ArtActModify
            // 
            this.ArtActModify.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.ArtActModify.Location = new System.Drawing.Point(58, 103);
            this.ArtActModify.Name = "ArtActModify";
            this.ArtActModify.Size = new System.Drawing.Size(55, 25);
            this.ArtActModify.TabIndex = 13;
            this.ArtActModify.TabStop = false;
            this.ArtActModify.Text = "Modify";
            this.ArtActModify.UseVisualStyleBackColor = true;
            this.ArtActModify.Click += new System.EventHandler(this.ArtActModify_Click);
            // 
            // ArtActAdd
            // 
            this.ArtActAdd.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.ArtActAdd.Location = new System.Drawing.Point(2, 103);
            this.ArtActAdd.Name = "ArtActAdd";
            this.ArtActAdd.Size = new System.Drawing.Size(55, 25);
            this.ArtActAdd.TabIndex = 12;
            this.ArtActAdd.TabStop = false;
            this.ArtActAdd.Text = "Add";
            this.ArtActAdd.UseVisualStyleBackColor = true;
            this.ArtActAdd.Click += new System.EventHandler(this.ArtActAdd_Click);
            // 
            // ArtActList
            // 
            this.ArtActList.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
            | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.ArtActList.ContextMenuStrip = this.EvStrip;
            this.ArtActList.FormattingEnabled = true;
            this.ArtActList.HorizontalScrollbar = true;
            this.ArtActList.Location = new System.Drawing.Point(3, 31);
            this.ArtActList.Name = "ArtActList";
            this.ArtActList.SelectionMode = System.Windows.Forms.SelectionMode.MultiExtended;
            this.ArtActList.Size = new System.Drawing.Size(345, 69);
            this.ArtActList.TabIndex = 11;
            this.ArtActList.TabStop = false;
            this.ArtActList.SelectedIndexChanged += new System.EventHandler(this.ArtActList_SelectedIndexChanged);
            this.ArtActList.DoubleClick += new System.EventHandler(this.ArtActList_DoubleClick);
            // 
            // ArtActText
            // 
            this.ArtActText.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.ArtActText.Location = new System.Drawing.Point(3, 133);
            this.ArtActText.Multiline = true;
            this.ArtActText.Name = "ArtActText";
            this.ArtActText.ReadOnly = true;
            this.ArtActText.Size = new System.Drawing.Size(345, 45);
            this.ArtActText.TabIndex = 10;
            this.ArtActText.TabStop = false;
            // 
            // ArtActOffsetLabel
            // 
            this.ArtActOffsetLabel.AutoSize = true;
            this.ArtActOffsetLabel.Location = new System.Drawing.Point(198, 10);
            this.ArtActOffsetLabel.Name = "ArtActOffsetLabel";
            this.ArtActOffsetLabel.Size = new System.Drawing.Size(35, 13);
            this.ArtActOffsetLabel.TabIndex = 8;
            this.ArtActOffsetLabel.Text = "Offset";
            // 
            // ArtActOffset
            // 
            this.ArtActOffset.Location = new System.Drawing.Point(237, 7);
            this.ArtActOffset.MaxLength = 10;
            this.ArtActOffset.Name = "ArtActOffset";
            this.ArtActOffset.ReadOnly = true;
            this.ArtActOffset.Size = new System.Drawing.Size(100, 20);
            this.ArtActOffset.TabIndex = 7;
            this.ArtActOffset.TabStop = false;
            // 
            // ArtActCbList
            // 
            this.ArtActCbList.FormattingEnabled = true;
            this.ArtActCbList.Items.AddRange(new object[] {
            "Entry",
            "Exit"});
            this.ArtActCbList.Location = new System.Drawing.Point(128, 7);
            this.ArtActCbList.Name = "ArtActCbList";
            this.ArtActCbList.Size = new System.Drawing.Size(59, 21);
            this.ArtActCbList.TabIndex = 4;
            this.ArtActCbList.TabStop = false;
            this.ArtActCbList.Visible = false;
            this.ArtActCbList.SelectedIndexChanged += new System.EventHandler(this.ArtActCbList_SelectedIndexChanged);
            // 
            // ArtActId
            // 
            this.ArtActId.FormattingEnabled = true;
            this.ArtActId.Location = new System.Drawing.Point(50, 7);
            this.ArtActId.Name = "ArtActId";
            this.ArtActId.Size = new System.Drawing.Size(50, 21);
            this.ArtActId.TabIndex = 3;
            this.ArtActId.TabStop = false;
            this.ArtActId.SelectedIndexChanged += new System.EventHandler(this.ArtActId_SelectedIndexChanged);
            // 
            // ArtActIdLabel
            // 
            this.ArtActIdLabel.AutoSize = true;
            this.ArtActIdLabel.Location = new System.Drawing.Point(6, 10);
            this.ArtActIdLabel.Name = "ArtActIdLabel";
            this.ArtActIdLabel.Size = new System.Drawing.Size(37, 13);
            this.ArtActIdLabel.TabIndex = 2;
            this.ArtActIdLabel.Text = "Action";
            // 
            // ArtSuba
            // 
            this.ArtSuba.Controls.Add(this.ArtSubaOffsetLabel);
            this.ArtSuba.Controls.Add(this.ArtSubaAnim);
            this.ArtSuba.Controls.Add(this.ArtSubaAnimLabel);
            this.ArtSuba.Controls.Add(this.ArtSubaOffset);
            this.ArtSuba.Controls.Add(this.ArtSubaAnimFlag);
            this.ArtSuba.Controls.Add(this.ArtSubaCbList);
            this.ArtSuba.Controls.Add(this.ArtSubaListLabel);
            this.ArtSuba.Controls.Add(this.ArtSubaIdLabel);
            this.ArtSuba.Controls.Add(this.ArtSubaId);
            this.ArtSuba.Controls.Add(this.ArtSubaPaste);
            this.ArtSuba.Controls.Add(this.ArtSubaCopy);
            this.ArtSuba.Controls.Add(this.ArtSubaDown);
            this.ArtSuba.Controls.Add(this.ArtSubaUp);
            this.ArtSuba.Controls.Add(this.ArtSubaRemove);
            this.ArtSuba.Controls.Add(this.ArtSubaModify);
            this.ArtSuba.Controls.Add(this.ArtSubaAdd);
            this.ArtSuba.Controls.Add(this.ArtSubaList);
            this.ArtSuba.Controls.Add(this.ArtSubaText);
            this.ArtSuba.Location = new System.Drawing.Point(4, 22);
            this.ArtSuba.Name = "ArtSuba";
            this.ArtSuba.Padding = new System.Windows.Forms.Padding(3);
            this.ArtSuba.Size = new System.Drawing.Size(351, 181);
            this.ArtSuba.TabIndex = 1;
            this.ArtSuba.Text = "Sub Actions";
            this.ArtSuba.UseVisualStyleBackColor = true;
            // 
            // ArtSubaOffsetLabel
            // 
            this.ArtSubaOffsetLabel.AutoSize = true;
            this.ArtSubaOffsetLabel.Location = new System.Drawing.Point(6, 36);
            this.ArtSubaOffsetLabel.Name = "ArtSubaOffsetLabel";
            this.ArtSubaOffsetLabel.Size = new System.Drawing.Size(35, 13);
            this.ArtSubaOffsetLabel.TabIndex = 36;
            this.ArtSubaOffsetLabel.Text = "Offset";
            // 
            // ArtSubaAnim
            // 
            this.ArtSubaAnim.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.ArtSubaAnim.Location = new System.Drawing.Point(238, 33);
            this.ArtSubaAnim.MaxLength = 31;
            this.ArtSubaAnim.Name = "ArtSubaAnim";
            this.ArtSubaAnim.Size = new System.Drawing.Size(110, 20);
            this.ArtSubaAnim.TabIndex = 35;
            this.ArtSubaAnim.TabStop = false;
            this.ArtSubaAnim.KeyDown += new System.Windows.Forms.KeyEventHandler(this.ArtSubaAnim_KeyDown);
            // 
            // ArtSubaAnimLabel
            // 
            this.ArtSubaAnimLabel.AutoSize = true;
            this.ArtSubaAnimLabel.Location = new System.Drawing.Point(180, 36);
            this.ArtSubaAnimLabel.Name = "ArtSubaAnimLabel";
            this.ArtSubaAnimLabel.Size = new System.Drawing.Size(53, 13);
            this.ArtSubaAnimLabel.TabIndex = 34;
            this.ArtSubaAnimLabel.Text = "Animation";
            // 
            // ArtSubaOffset
            // 
            this.ArtSubaOffset.Location = new System.Drawing.Point(45, 33);
            this.ArtSubaOffset.MaxLength = 10;
            this.ArtSubaOffset.Name = "ArtSubaOffset";
            this.ArtSubaOffset.ReadOnly = true;
            this.ArtSubaOffset.Size = new System.Drawing.Size(100, 20);
            this.ArtSubaOffset.TabIndex = 33;
            this.ArtSubaOffset.TabStop = false;
            // 
            // ArtSubaAnimFlag
            // 
            this.ArtSubaAnimFlag.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.ArtSubaAnimFlag.Location = new System.Drawing.Point(237, 4);
            this.ArtSubaAnimFlag.Name = "ArtSubaAnimFlag";
            this.ArtSubaAnimFlag.Size = new System.Drawing.Size(112, 25);
            this.ArtSubaAnimFlag.TabIndex = 32;
            this.ArtSubaAnimFlag.TabStop = false;
            this.ArtSubaAnimFlag.Text = "Animation Flags";
            this.ArtSubaAnimFlag.UseVisualStyleBackColor = true;
            this.ArtSubaAnimFlag.Click += new System.EventHandler(this.ArtSubaAnimFlag_Click);
            // 
            // ArtSubaCbList
            // 
            this.ArtSubaCbList.FormattingEnabled = true;
            this.ArtSubaCbList.Location = new System.Drawing.Point(157, 7);
            this.ArtSubaCbList.Name = "ArtSubaCbList";
            this.ArtSubaCbList.Size = new System.Drawing.Size(78, 21);
            this.ArtSubaCbList.TabIndex = 31;
            this.ArtSubaCbList.TabStop = false;
            this.ArtSubaCbList.SelectedIndexChanged += new System.EventHandler(this.ArtSubaCbList_SelectedIndexChanged);
            // 
            // ArtSubaListLabel
            // 
            this.ArtSubaListLabel.AutoSize = true;
            this.ArtSubaListLabel.Location = new System.Drawing.Point(129, 10);
            this.ArtSubaListLabel.Name = "ArtSubaListLabel";
            this.ArtSubaListLabel.Size = new System.Drawing.Size(23, 13);
            this.ArtSubaListLabel.TabIndex = 30;
            this.ArtSubaListLabel.Text = "List";
            // 
            // ArtSubaIdLabel
            // 
            this.ArtSubaIdLabel.AutoSize = true;
            this.ArtSubaIdLabel.Location = new System.Drawing.Point(6, 10);
            this.ArtSubaIdLabel.Name = "ArtSubaIdLabel";
            this.ArtSubaIdLabel.Size = new System.Drawing.Size(59, 13);
            this.ArtSubaIdLabel.TabIndex = 29;
            this.ArtSubaIdLabel.Text = "Sub Action";
            // 
            // ArtSubaId
            // 
            this.ArtSubaId.FormattingEnabled = true;
            this.ArtSubaId.Location = new System.Drawing.Point(71, 7);
            this.ArtSubaId.Name = "ArtSubaId";
            this.ArtSubaId.Size = new System.Drawing.Size(52, 21);
            this.ArtSubaId.TabIndex = 28;
            this.ArtSubaId.TabStop = false;
            this.ArtSubaId.SelectedIndexChanged += new System.EventHandler(this.ArtSubaId_SelectedIndexChanged);
            // 
            // ArtSubaPaste
            // 
            this.ArtSubaPaste.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.ArtSubaPaste.Location = new System.Drawing.Point(306, 103);
            this.ArtSubaPaste.Name = "ArtSubaPaste";
            this.ArtSubaPaste.Size = new System.Drawing.Size(43, 25);
            this.ArtSubaPaste.TabIndex = 27;
            this.ArtSubaPaste.TabStop = false;
            this.ArtSubaPaste.Text = "Paste";
            this.ArtSubaPaste.UseVisualStyleBackColor = true;
            this.ArtSubaPaste.Click += new System.EventHandler(this.ArtSubaPaste_Click);
            // 
            // ArtSubaCopy
            // 
            this.ArtSubaCopy.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.ArtSubaCopy.ContextMenuStrip = this.EvCopyStrip;
            this.ArtSubaCopy.Location = new System.Drawing.Point(262, 103);
            this.ArtSubaCopy.Name = "ArtSubaCopy";
            this.ArtSubaCopy.Size = new System.Drawing.Size(43, 25);
            this.ArtSubaCopy.TabIndex = 26;
            this.ArtSubaCopy.TabStop = false;
            this.ArtSubaCopy.Text = "Copy";
            this.ArtSubaCopy.UseVisualStyleBackColor = true;
            this.ArtSubaCopy.Click += new System.EventHandler(this.ArtSubaCopy_Click);
            // 
            // ArtSubaDown
            // 
            this.ArtSubaDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.ArtSubaDown.Location = new System.Drawing.Point(215, 103);
            this.ArtSubaDown.Name = "ArtSubaDown";
            this.ArtSubaDown.Size = new System.Drawing.Size(40, 25);
            this.ArtSubaDown.TabIndex = 25;
            this.ArtSubaDown.TabStop = false;
            this.ArtSubaDown.Text = "▼";
            this.ArtSubaDown.UseVisualStyleBackColor = true;
            this.ArtSubaDown.Click += new System.EventHandler(this.ArtSubaDown_Click);
            // 
            // ArtSubaUp
            // 
            this.ArtSubaUp.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.ArtSubaUp.Location = new System.Drawing.Point(174, 103);
            this.ArtSubaUp.Name = "ArtSubaUp";
            this.ArtSubaUp.Size = new System.Drawing.Size(40, 25);
            this.ArtSubaUp.TabIndex = 24;
            this.ArtSubaUp.TabStop = false;
            this.ArtSubaUp.Text = "▲";
            this.ArtSubaUp.UseVisualStyleBackColor = true;
            this.ArtSubaUp.Click += new System.EventHandler(this.ArtSubaUp_Click);
            // 
            // ArtSubaRemove
            // 
            this.ArtSubaRemove.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.ArtSubaRemove.Location = new System.Drawing.Point(114, 103);
            this.ArtSubaRemove.Name = "ArtSubaRemove";
            this.ArtSubaRemove.Size = new System.Drawing.Size(55, 25);
            this.ArtSubaRemove.TabIndex = 23;
            this.ArtSubaRemove.TabStop = false;
            this.ArtSubaRemove.Text = "Remove";
            this.ArtSubaRemove.UseVisualStyleBackColor = true;
            this.ArtSubaRemove.Click += new System.EventHandler(this.ArtSubaRemove_Click);
            // 
            // ArtSubaModify
            // 
            this.ArtSubaModify.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.ArtSubaModify.Location = new System.Drawing.Point(58, 103);
            this.ArtSubaModify.Name = "ArtSubaModify";
            this.ArtSubaModify.Size = new System.Drawing.Size(55, 25);
            this.ArtSubaModify.TabIndex = 22;
            this.ArtSubaModify.TabStop = false;
            this.ArtSubaModify.Text = "Modify";
            this.ArtSubaModify.UseVisualStyleBackColor = true;
            this.ArtSubaModify.Click += new System.EventHandler(this.ArtSubaModify_Click);
            // 
            // ArtSubaAdd
            // 
            this.ArtSubaAdd.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.ArtSubaAdd.Location = new System.Drawing.Point(2, 103);
            this.ArtSubaAdd.Name = "ArtSubaAdd";
            this.ArtSubaAdd.Size = new System.Drawing.Size(55, 25);
            this.ArtSubaAdd.TabIndex = 21;
            this.ArtSubaAdd.TabStop = false;
            this.ArtSubaAdd.Text = "Add";
            this.ArtSubaAdd.UseVisualStyleBackColor = true;
            this.ArtSubaAdd.Click += new System.EventHandler(this.ArtSubaAdd_Click);
            // 
            // ArtSubaList
            // 
            this.ArtSubaList.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
            | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.ArtSubaList.ContextMenuStrip = this.EvStrip;
            this.ArtSubaList.FormattingEnabled = true;
            this.ArtSubaList.HorizontalScrollbar = true;
            this.ArtSubaList.Location = new System.Drawing.Point(3, 57);
            this.ArtSubaList.Name = "ArtSubaList";
            this.ArtSubaList.SelectionMode = System.Windows.Forms.SelectionMode.MultiExtended;
            this.ArtSubaList.Size = new System.Drawing.Size(345, 43);
            this.ArtSubaList.TabIndex = 20;
            this.ArtSubaList.TabStop = false;
            this.ArtSubaList.SelectedIndexChanged += new System.EventHandler(this.ArtSubaList_SelectedIndexChanged);
            this.ArtSubaList.DoubleClick += new System.EventHandler(this.ArtSubaList_DoubleClick);
            // 
            // ArtSubaText
            // 
            this.ArtSubaText.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.ArtSubaText.Location = new System.Drawing.Point(3, 133);
            this.ArtSubaText.Multiline = true;
            this.ArtSubaText.Name = "ArtSubaText";
            this.ArtSubaText.ReadOnly = true;
            this.ArtSubaText.Size = new System.Drawing.Size(345, 45);
            this.ArtSubaText.TabIndex = 19;
            this.ArtSubaText.TabStop = false;
            // 
            // ArtParam
            // 
            this.ArtParam.Controls.Add(this.ArtParText);
            this.ArtParam.Controls.Add(this.ArtParList);
            this.ArtParam.Controls.Add(this.ArtParOffsetLabel);
            this.ArtParam.Controls.Add(this.ArtParOffset);
            this.ArtParam.Controls.Add(this.ArtParCbList);
            this.ArtParam.Controls.Add(this.ArtParListLabel);
            this.ArtParam.Location = new System.Drawing.Point(4, 22);
            this.ArtParam.Name = "ArtParam";
            this.ArtParam.Padding = new System.Windows.Forms.Padding(3);
            this.ArtParam.Size = new System.Drawing.Size(351, 181);
            this.ArtParam.TabIndex = 2;
            this.ArtParam.Text = "Parameters";
            this.ArtParam.UseVisualStyleBackColor = true;
            // 
            // ArtParText
            // 
            this.ArtParText.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.ArtParText.Location = new System.Drawing.Point(3, 133);
            this.ArtParText.Multiline = true;
            this.ArtParText.Name = "ArtParText";
            this.ArtParText.ReadOnly = true;
            this.ArtParText.Size = new System.Drawing.Size(345, 45);
            this.ArtParText.TabIndex = 8;
            this.ArtParText.TabStop = false;
            // 
            // ArtParList
            // 
            this.ArtParList.AllowUserToAddRows = false;
            this.ArtParList.AllowUserToDeleteRows = false;
            this.ArtParList.AllowUserToResizeRows = false;
            this.ArtParList.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
            | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.ArtParList.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.ArtParList.ColumnHeadersVisible = false;
            this.ArtParList.Columns.AddRange(new System.Windows.Forms.DataGridViewColumn[] {
            this.AtrParListDataLabel,
            this.AtrParListParam});
            this.ArtParList.ContextMenuStrip = this.ArtParStrip;
            this.ArtParList.Enabled = false;
            this.ArtParList.Location = new System.Drawing.Point(3, 30);
            this.ArtParList.MultiSelect = false;
            this.ArtParList.Name = "ArtParList";
            this.ArtParList.RowHeadersVisible = false;
            this.ArtParList.RowTemplate.Height = 21;
            this.ArtParList.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.ArtParList.Size = new System.Drawing.Size(345, 96);
            this.ArtParList.TabIndex = 5;
            this.ArtParList.TabStop = false;
            this.ArtParList.CellValueChanged += new System.Windows.Forms.DataGridViewCellEventHandler(this.ArtParList_CellValueChanged);
            this.ArtParList.SelectionChanged += new System.EventHandler(this.ArtParList_SelectionChanged);
            // 
            // AtrParListDataLabel
            // 
            this.AtrParListDataLabel.Frozen = true;
            this.AtrParListDataLabel.HeaderText = "List";
            this.AtrParListDataLabel.MaxInputLength = 200;
            this.AtrParListDataLabel.Name = "AtrParListDataLabel";
            this.AtrParListDataLabel.ReadOnly = true;
            // 
            // AtrParListParam
            // 
            this.AtrParListParam.Frozen = true;
            this.AtrParListParam.HeaderText = "Parameter";
            this.AtrParListParam.MaxInputLength = 50;
            this.AtrParListParam.Name = "AtrParListParam";
            this.AtrParListParam.Width = 5000;
            // 
            // ArtParStrip
            // 
            this.ArtParStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.ArtIntFloat,
            this.ArtHexView,
            this.OpenArtParOff});
            this.ArtParStrip.Name = "ArtParStrip";
            this.ArtParStrip.Size = new System.Drawing.Size(181, 70);
            // 
            // ArtIntFloat
            // 
            this.ArtIntFloat.Name = "ArtIntFloat";
            this.ArtIntFloat.Size = new System.Drawing.Size(180, 22);
            this.ArtIntFloat.Text = "Change Int-Float";
            this.ArtIntFloat.Click += new System.EventHandler(this.ArtIntFloat_Click);
            // 
            // ArtHexView
            // 
            this.ArtHexView.Name = "ArtHexView";
            this.ArtHexView.Size = new System.Drawing.Size(180, 22);
            this.ArtHexView.Text = "Hex View";
            this.ArtHexView.Click += new System.EventHandler(this.ArtHexView_Click);
            // 
            // OpenArtParOff
            // 
            this.OpenArtParOff.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.ArtParValuetxt,
            this.ArtParAddressOpen,
            this.ArtParOffsetOpen,
            this.ArtParOffOpenSize});
            this.OpenArtParOff.Name = "OpenArtParOff";
            this.OpenArtParOff.Size = new System.Drawing.Size(180, 22);
            this.OpenArtParOff.Text = "Open Params Offset";
            // 
            // ArtParValuetxt
            // 
            this.ArtParValuetxt.MaxLength = 8;
            this.ArtParValuetxt.Name = "ArtParValuetxt";
            this.ArtParValuetxt.Size = new System.Drawing.Size(100, 23);
            // 
            // ArtParAddressOpen
            // 
            this.ArtParAddressOpen.Name = "ArtParAddressOpen";
            this.ArtParAddressOpen.Size = new System.Drawing.Size(181, 22);
            this.ArtParAddressOpen.Text = "Open Address";
            this.ArtParAddressOpen.Click += new System.EventHandler(this.ArtParAddressOpen_Click);
            // 
            // ArtParOffsetOpen
            // 
            this.ArtParOffsetOpen.Name = "ArtParOffsetOpen";
            this.ArtParOffsetOpen.Size = new System.Drawing.Size(181, 22);
            this.ArtParOffsetOpen.Text = "Open Offset";
            this.ArtParOffsetOpen.Click += new System.EventHandler(this.ArtParOffsetOpen_Click);
            // 
            // ArtParOffOpenSize
            // 
            this.ArtParOffOpenSize.Name = "ArtParOffOpenSize";
            this.ArtParOffOpenSize.Size = new System.Drawing.Size(121, 23);
            // 
            // ArtParOffsetLabel
            // 
            this.ArtParOffsetLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.ArtParOffsetLabel.AutoSize = true;
            this.ArtParOffsetLabel.ContextMenuStrip = this.ArtParStrip;
            this.ArtParOffsetLabel.Location = new System.Drawing.Point(208, 9);
            this.ArtParOffsetLabel.Name = "ArtParOffsetLabel";
            this.ArtParOffsetLabel.Size = new System.Drawing.Size(35, 13);
            this.ArtParOffsetLabel.TabIndex = 38;
            this.ArtParOffsetLabel.Text = "Offset";
            // 
            // ArtParOffset
            // 
            this.ArtParOffset.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.ArtParOffset.ContextMenuStrip = this.ArtParStrip;
            this.ArtParOffset.Location = new System.Drawing.Point(247, 5);
            this.ArtParOffset.MaxLength = 10;
            this.ArtParOffset.Name = "ArtParOffset";
            this.ArtParOffset.ReadOnly = true;
            this.ArtParOffset.Size = new System.Drawing.Size(100, 20);
            this.ArtParOffset.TabIndex = 7;
            this.ArtParOffset.TabStop = false;
            // 
            // ArtParCbList
            // 
            this.ArtParCbList.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.ArtParCbList.FormattingEnabled = true;
            this.ArtParCbList.Location = new System.Drawing.Point(64, 5);
            this.ArtParCbList.Name = "ArtParCbList";
            this.ArtParCbList.Size = new System.Drawing.Size(140, 21);
            this.ArtParCbList.TabIndex = 4;
            this.ArtParCbList.TabStop = false;
            this.ArtParCbList.SelectedIndexChanged += new System.EventHandler(this.ArtParCbList_SelectedIndexChanged);
            // 
            // ArtParListLabel
            // 
            this.ArtParListLabel.AutoSize = true;
            this.ArtParListLabel.Location = new System.Drawing.Point(5, 9);
            this.ArtParListLabel.Name = "ArtParListLabel";
            this.ArtParListLabel.Size = new System.Drawing.Size(55, 13);
            this.ArtParListLabel.TabIndex = 0;
            this.ArtParListLabel.Text = "Parameter";
            // 
            // ArtData
            // 
            this.ArtData.Controls.Add(this.ArtOfflabel);
            this.ArtData.Controls.Add(this.ArtOffset);
            this.ArtData.Controls.Add(this.ArtDataList);
            this.ArtData.Location = new System.Drawing.Point(4, 22);
            this.ArtData.Name = "ArtData";
            this.ArtData.Padding = new System.Windows.Forms.Padding(3);
            this.ArtData.Size = new System.Drawing.Size(351, 181);
            this.ArtData.TabIndex = 3;
            this.ArtData.Text = "Data Offset";
            this.ArtData.UseVisualStyleBackColor = true;
            // 
            // ArtOfflabel
            // 
            this.ArtOfflabel.AutoSize = true;
            this.ArtOfflabel.Location = new System.Drawing.Point(6, 7);
            this.ArtOfflabel.Name = "ArtOfflabel";
            this.ArtOfflabel.Size = new System.Drawing.Size(35, 13);
            this.ArtOfflabel.TabIndex = 10;
            this.ArtOfflabel.Text = "Offset";
            // 
            // ArtOffset
            // 
            this.ArtOffset.Location = new System.Drawing.Point(45, 3);
            this.ArtOffset.MaxLength = 10;
            this.ArtOffset.Name = "ArtOffset";
            this.ArtOffset.ReadOnly = true;
            this.ArtOffset.Size = new System.Drawing.Size(100, 20);
            this.ArtOffset.TabIndex = 9;
            this.ArtOffset.TabStop = false;
            // 
            // ArtDataList
            // 
            this.ArtDataList.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
            | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.ArtDataList.ContextMenuStrip = this.DataDTStrip;
            this.ArtDataList.FormattingEnabled = true;
            this.ArtDataList.HorizontalScrollbar = true;
            this.ArtDataList.Location = new System.Drawing.Point(3, 27);
            this.ArtDataList.Name = "ArtDataList";
            this.ArtDataList.Size = new System.Drawing.Size(345, 147);
            this.ArtDataList.TabIndex = 4;
            this.ArtDataList.TabStop = false;
            // 
            // DataDTStrip
            // 
            this.DataDTStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.DataDTOffsetView,
            this.DataDTCopytxt});
            this.DataDTStrip.Name = "DataDTStrip";
            this.DataDTStrip.Size = new System.Drawing.Size(135, 48);
            this.DataDTStrip.Opening += new System.ComponentModel.CancelEventHandler(this.DataDTStrip_Opening);
            // 
            // DataDTOffsetView
            // 
            this.DataDTOffsetView.Name = "DataDTOffsetView";
            this.DataDTOffsetView.Size = new System.Drawing.Size(134, 22);
            this.DataDTOffsetView.Text = "Offset View";
            this.DataDTOffsetView.Click += new System.EventHandler(this.DataDTOffsetView_Click);
            // 
            // DataDTCopytxt
            // 
            this.DataDTCopytxt.Name = "DataDTCopytxt";
            this.DataDTCopytxt.Size = new System.Drawing.Size(134, 22);
            this.DataDTCopytxt.Text = "Copy Text";
            this.DataDTCopytxt.Click += new System.EventHandler(this.DataDTCopytxt_Click);
            // 
            // ArtCompress
            // 
            this.ArtCompress.Controls.Add(this.ArtCmpStart);
            this.ArtCompress.Controls.Add(this.ArtCmpInRn);
            this.ArtCompress.Controls.Add(this.ArtAllEvCmp);
            this.ArtCompress.Controls.Add(this.ArtNoEventCmp);
            this.ArtCompress.Controls.Add(this.ArtEmptyCmp);
            this.ArtCompress.Location = new System.Drawing.Point(4, 22);
            this.ArtCompress.Name = "ArtCompress";
            this.ArtCompress.Padding = new System.Windows.Forms.Padding(3);
            this.ArtCompress.Size = new System.Drawing.Size(351, 181);
            this.ArtCompress.TabIndex = 4;
            this.ArtCompress.Text = "Compress";
            this.ArtCompress.UseVisualStyleBackColor = true;
            // 
            // ArtCmpStart
            // 
            this.ArtCmpStart.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.ArtCmpStart.Location = new System.Drawing.Point(6, 147);
            this.ArtCmpStart.Name = "ArtCmpStart";
            this.ArtCmpStart.Size = new System.Drawing.Size(75, 25);
            this.ArtCmpStart.TabIndex = 12;
            this.ArtCmpStart.TabStop = false;
            this.ArtCmpStart.Text = "Compress";
            this.ArtCmpStart.UseVisualStyleBackColor = true;
            this.ArtCmpStart.Click += new System.EventHandler(this.ArtCmpStart_Click);
            // 
            // ArtCmpInRn
            // 
            this.ArtCmpInRn.AutoSize = true;
            this.ArtCmpInRn.Location = new System.Drawing.Point(6, 60);
            this.ArtCmpInRn.Name = "ArtCmpInRn";
            this.ArtCmpInRn.Size = new System.Drawing.Size(182, 17);
            this.ArtCmpInRn.TabIndex = 8;
            this.ArtCmpInRn.TabStop = false;
            this.ArtCmpInRn.Text = "Move Offsets for in Sub Routines";
            this.ArtCmpInRn.UseVisualStyleBackColor = true;
            // 
            // ArtAllEvCmp
            // 
            this.ArtAllEvCmp.AutoSize = true;
            this.ArtAllEvCmp.Location = new System.Drawing.Point(6, 41);
            this.ArtAllEvCmp.Name = "ArtAllEvCmp";
            this.ArtAllEvCmp.Size = new System.Drawing.Size(103, 17);
            this.ArtAllEvCmp.TabIndex = 7;
            this.ArtAllEvCmp.TabStop = false;
            this.ArtAllEvCmp.Text = "Move All Offsets";
            this.ArtAllEvCmp.UseVisualStyleBackColor = true;
            // 
            // ArtNoEventCmp
            // 
            this.ArtNoEventCmp.AutoSize = true;
            this.ArtNoEventCmp.Location = new System.Drawing.Point(6, 23);
            this.ArtNoEventCmp.Name = "ArtNoEventCmp";
            this.ArtNoEventCmp.Size = new System.Drawing.Size(105, 17);
            this.ArtNoEventCmp.TabIndex = 5;
            this.ArtNoEventCmp.TabStop = false;
            this.ArtNoEventCmp.Text = "Delete No Event";
            this.ArtNoEventCmp.UseVisualStyleBackColor = true;
            // 
            // ArtEmptyCmp
            // 
            this.ArtEmptyCmp.AutoSize = true;
            this.ArtEmptyCmp.Location = new System.Drawing.Point(6, 4);
            this.ArtEmptyCmp.Name = "ArtEmptyCmp";
            this.ArtEmptyCmp.Size = new System.Drawing.Size(144, 17);
            this.ArtEmptyCmp.TabIndex = 4;
            this.ArtEmptyCmp.TabStop = false;
            this.ArtEmptyCmp.Text = "Delete Empty Event Lists";
            this.ArtEmptyCmp.UseVisualStyleBackColor = true;
            // 
            // DataViewMode
            // 
            this.DataViewMode.Controls.Add(this.DataTab);
            this.DataViewMode.Location = new System.Drawing.Point(4, 22);
            this.DataViewMode.Name = "DataViewMode";
            this.DataViewMode.Padding = new System.Windows.Forms.Padding(3);
            this.DataViewMode.Size = new System.Drawing.Size(365, 242);
            this.DataViewMode.TabIndex = 4;
            this.DataViewMode.Text = "Data";
            this.DataViewMode.UseVisualStyleBackColor = true;
            // 
            // DataTab
            // 
            this.DataTab.Controls.Add(this.DataOffset);
            this.DataTab.Controls.Add(this.DataTable);
            this.DataTab.Controls.Add(this.DataExRn);
            this.DataTab.Controls.Add(this.DMisc);
            this.DataTab.Dock = System.Windows.Forms.DockStyle.Fill;
            this.DataTab.Enabled = false;
            this.DataTab.Location = new System.Drawing.Point(3, 3);
            this.DataTab.Name = "DataTab";
            this.DataTab.SelectedIndex = 0;
            this.DataTab.Size = new System.Drawing.Size(359, 236);
            this.DataTab.TabIndex = 2;
            // 
            // DataOffset
            // 
            this.DataOffset.Controls.Add(this.DataOffsetList);
            this.DataOffset.Location = new System.Drawing.Point(4, 22);
            this.DataOffset.Name = "DataOffset";
            this.DataOffset.Padding = new System.Windows.Forms.Padding(3);
            this.DataOffset.Size = new System.Drawing.Size(351, 210);
            this.DataOffset.TabIndex = 0;
            this.DataOffset.Text = "Data Offset";
            this.DataOffset.UseVisualStyleBackColor = true;
            // 
            // DataOffsetList
            // 
            this.DataOffsetList.ContextMenuStrip = this.DataDTStrip;
            this.DataOffsetList.Dock = System.Windows.Forms.DockStyle.Fill;
            this.DataOffsetList.FormattingEnabled = true;
            this.DataOffsetList.Location = new System.Drawing.Point(3, 3);
            this.DataOffsetList.Name = "DataOffsetList";
            this.DataOffsetList.Size = new System.Drawing.Size(345, 204);
            this.DataOffsetList.TabIndex = 3;
            this.DataOffsetList.TabStop = false;
            this.DataOffsetList.DoubleClick += new System.EventHandler(this.DataOffsetList_DoubleClick);
            // 
            // DataTable
            // 
            this.DataTable.Controls.Add(this.DataDTList);
            this.DataTable.Location = new System.Drawing.Point(4, 22);
            this.DataTable.Name = "DataTable";
            this.DataTable.Padding = new System.Windows.Forms.Padding(3);
            this.DataTable.Size = new System.Drawing.Size(351, 210);
            this.DataTable.TabIndex = 1;
            this.DataTable.Text = "Data Table";
            this.DataTable.UseVisualStyleBackColor = true;
            // 
            // DataDTList
            // 
            this.DataDTList.ContextMenuStrip = this.DataDTStrip;
            this.DataDTList.Dock = System.Windows.Forms.DockStyle.Fill;
            this.DataDTList.FormattingEnabled = true;
            this.DataDTList.Location = new System.Drawing.Point(3, 3);
            this.DataDTList.Name = "DataDTList";
            this.DataDTList.Size = new System.Drawing.Size(345, 204);
            this.DataDTList.TabIndex = 3;
            this.DataDTList.TabStop = false;
            // 
            // DataExRn
            // 
            this.DataExRn.Controls.Add(this.DataExrnList);
            this.DataExRn.Location = new System.Drawing.Point(4, 22);
            this.DataExRn.Name = "DataExRn";
            this.DataExRn.Padding = new System.Windows.Forms.Padding(3);
            this.DataExRn.Size = new System.Drawing.Size(351, 210);
            this.DataExRn.TabIndex = 2;
            this.DataExRn.Text = "External Sub Routines";
            this.DataExRn.UseVisualStyleBackColor = true;
            // 
            // DataExrnList
            // 
            this.DataExrnList.ContextMenuStrip = this.DataExrnStrip;
            this.DataExrnList.Dock = System.Windows.Forms.DockStyle.Fill;
            this.DataExrnList.FormattingEnabled = true;
            this.DataExrnList.Location = new System.Drawing.Point(3, 3);
            this.DataExrnList.Name = "DataExrnList";
            this.DataExrnList.Size = new System.Drawing.Size(345, 204);
            this.DataExrnList.TabIndex = 3;
            this.DataExrnList.TabStop = false;
            // 
            // DataExrnStrip
            // 
            this.DataExrnStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.DataExrnAdd,
            this.DataExrnRemove,
            this.DataExrnRename,
            this.DataExrnUp,
            this.DataExrnDown,
            this.DataExrnOffsetView,
            this.DataExrnCopytxt});
            this.DataExrnStrip.Name = "DataExrnStrip";
            this.DataExrnStrip.Size = new System.Drawing.Size(139, 158);
            this.DataExrnStrip.Opening += new System.ComponentModel.CancelEventHandler(this.DataExrnStrip_Opening);
            // 
            // DataExrnAdd
            // 
            this.DataExrnAdd.Name = "DataExrnAdd";
            this.DataExrnAdd.Size = new System.Drawing.Size(138, 22);
            this.DataExrnAdd.Text = "Add";
            this.DataExrnAdd.Click += new System.EventHandler(this.DataExrnAdd_Click);
            // 
            // DataExrnRemove
            // 
            this.DataExrnRemove.Name = "DataExrnRemove";
            this.DataExrnRemove.Size = new System.Drawing.Size(138, 22);
            this.DataExrnRemove.Text = "Remove";
            this.DataExrnRemove.Click += new System.EventHandler(this.DataExrnRemove_Click);
            // 
            // DataExrnRename
            // 
            this.DataExrnRename.Name = "DataExrnRename";
            this.DataExrnRename.Size = new System.Drawing.Size(138, 22);
            this.DataExrnRename.Text = "Rename";
            this.DataExrnRename.Click += new System.EventHandler(this.DataExrnRename_Click);
            // 
            // DataExrnUp
            // 
            this.DataExrnUp.Name = "DataExrnUp";
            this.DataExrnUp.Size = new System.Drawing.Size(138, 22);
            this.DataExrnUp.Text = "Move Up";
            this.DataExrnUp.Click += new System.EventHandler(this.DataExrnUp_Click);
            // 
            // DataExrnDown
            // 
            this.DataExrnDown.Name = "DataExrnDown";
            this.DataExrnDown.Size = new System.Drawing.Size(138, 22);
            this.DataExrnDown.Text = "Move Down";
            this.DataExrnDown.Click += new System.EventHandler(this.DataExrnDown_Click);
            // 
            // DataExrnOffsetView
            // 
            this.DataExrnOffsetView.Name = "DataExrnOffsetView";
            this.DataExrnOffsetView.Size = new System.Drawing.Size(138, 22);
            this.DataExrnOffsetView.Text = "Offset View";
            this.DataExrnOffsetView.Click += new System.EventHandler(this.DataExrnOffsetView_Click);
            // 
            // DataExrnCopytxt
            // 
            this.DataExrnCopytxt.Name = "DataExrnCopytxt";
            this.DataExrnCopytxt.Size = new System.Drawing.Size(138, 22);
            this.DataExrnCopytxt.Text = "Copy Text";
            this.DataExrnCopytxt.Click += new System.EventHandler(this.DataExrnCopytxt_Click);
            // 
            // DMisc
            // 
            this.DMisc.Controls.Add(this.DMiscSplit);
            this.DMisc.Location = new System.Drawing.Point(4, 22);
            this.DMisc.Name = "DMisc";
            this.DMisc.Padding = new System.Windows.Forms.Padding(3);
            this.DMisc.Size = new System.Drawing.Size(351, 210);
            this.DMisc.TabIndex = 3;
            this.DMisc.Text = "Misc";
            this.DMisc.UseVisualStyleBackColor = true;
            // 
            // DMiscSplit
            // 
            this.DMiscSplit.Dock = System.Windows.Forms.DockStyle.Fill;
            this.DMiscSplit.Location = new System.Drawing.Point(3, 3);
            this.DMiscSplit.Name = "DMiscSplit";
            // 
            // DMiscSplit.Panel1
            // 
            this.DMiscSplit.Panel1.Controls.Add(this.DMiscList);
            this.DMiscSplit.Panel1MinSize = 50;
            // 
            // DMiscSplit.Panel2
            // 
            this.DMiscSplit.Panel2.Controls.Add(this.DMiscCb);
            this.DMiscSplit.Panel2.Controls.Add(this.DMiscDone);
            this.DMiscSplit.Panel2.Controls.Add(this.DMiscPtxt);
            this.DMiscSplit.Panel2.Controls.Add(this.DMiscParam);
            this.DMiscSplit.Panel2.Controls.Add(this.DMiscOffset);
            this.DMiscSplit.Panel2.Controls.Add(this.DMiscOffsetLabel);
            this.DMiscSplit.Panel2MinSize = 125;
            this.DMiscSplit.Size = new System.Drawing.Size(345, 204);
            this.DMiscSplit.SplitterDistance = 115;
            this.DMiscSplit.TabIndex = 0;
            // 
            // DMiscList
            // 
            this.DMiscList.ContextMenuStrip = this.DataExrnStrip;
            this.DMiscList.Dock = System.Windows.Forms.DockStyle.Fill;
            this.DMiscList.HideSelection = false;
            this.DMiscList.Location = new System.Drawing.Point(0, 0);
            this.DMiscList.Name = "DMiscList";
            this.DMiscList.Size = new System.Drawing.Size(115, 204);
            this.DMiscList.TabIndex = 0;
            this.DMiscList.TabStop = false;
            this.DMiscList.AfterSelect += new System.Windows.Forms.TreeViewEventHandler(this.DMiscList_AfterSelect);
            // 
            // DMiscCb
            // 
            this.DMiscCb.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.DMiscCb.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.DMiscCb.FormattingEnabled = true;
            this.DMiscCb.Location = new System.Drawing.Point(155, 182);
            this.DMiscCb.Name = "DMiscCb";
            this.DMiscCb.Size = new System.Drawing.Size(71, 21);
            this.DMiscCb.TabIndex = 5;
            this.DMiscCb.TabStop = false;
            this.DMiscCb.SelectedIndexChanged += new System.EventHandler(this.DMiscCb_SelectedIndexChanged);
            // 
            // DMiscDone
            // 
            this.DMiscDone.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.DMiscDone.Location = new System.Drawing.Point(100, 180);
            this.DMiscDone.Name = "DMiscDone";
            this.DMiscDone.Size = new System.Drawing.Size(55, 25);
            this.DMiscDone.TabIndex = 4;
            this.DMiscDone.TabStop = false;
            this.DMiscDone.Text = "Done";
            this.DMiscDone.UseVisualStyleBackColor = true;
            this.DMiscDone.Click += new System.EventHandler(this.DMiscDone_Click);
            // 
            // DMiscPtxt
            // 
            this.DMiscPtxt.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.DMiscPtxt.Location = new System.Drawing.Point(0, 183);
            this.DMiscPtxt.MaxLength = 8;
            this.DMiscPtxt.Name = "DMiscPtxt";
            this.DMiscPtxt.Size = new System.Drawing.Size(100, 20);
            this.DMiscPtxt.TabIndex = 3;
            this.DMiscPtxt.TabStop = false;
            // 
            // DMiscParam
            // 
            this.DMiscParam.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
            | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.DMiscParam.ContextMenuStrip = this.DataDTStrip;
            this.DMiscParam.FullRowSelect = true;
            this.DMiscParam.HideSelection = false;
            this.DMiscParam.Location = new System.Drawing.Point(0, 22);
            this.DMiscParam.MultiSelect = false;
            this.DMiscParam.Name = "DMiscParam";
            this.DMiscParam.Size = new System.Drawing.Size(226, 158);
            this.DMiscParam.TabIndex = 2;
            this.DMiscParam.TabStop = false;
            this.DMiscParam.UseCompatibleStateImageBehavior = false;
            this.DMiscParam.View = System.Windows.Forms.View.Details;
            this.DMiscParam.SelectedIndexChanged += new System.EventHandler(this.DMiscParam_SelectedIndexChanged);
            // 
            // DMiscOffset
            // 
            this.DMiscOffset.Location = new System.Drawing.Point(42, 0);
            this.DMiscOffset.MaxLength = 10;
            this.DMiscOffset.Name = "DMiscOffset";
            this.DMiscOffset.ReadOnly = true;
            this.DMiscOffset.Size = new System.Drawing.Size(100, 20);
            this.DMiscOffset.TabIndex = 1;
            this.DMiscOffset.TabStop = false;
            // 
            // DMiscOffsetLabel
            // 
            this.DMiscOffsetLabel.AutoSize = true;
            this.DMiscOffsetLabel.Location = new System.Drawing.Point(3, 3);
            this.DMiscOffsetLabel.Name = "DMiscOffsetLabel";
            this.DMiscOffsetLabel.Size = new System.Drawing.Size(35, 13);
            this.DMiscOffsetLabel.TabIndex = 0;
            this.DMiscOffsetLabel.Text = "Offset";
            // 
            // pacname
            // 
            this.pacname.Location = new System.Drawing.Point(0, 29);
            this.pacname.MaxLength = 48;
            this.pacname.Name = "pacname";
            this.pacname.ReadOnly = true;
            this.pacname.Size = new System.Drawing.Size(100, 20);
            this.pacname.TabIndex = 2;
            this.pacname.TabStop = false;
            // 
            // minitxt
            // 
            this.minitxt.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.minitxt.Location = new System.Drawing.Point(99, 29);
            this.minitxt.Name = "minitxt";
            this.minitxt.ReadOnly = true;
            this.minitxt.Size = new System.Drawing.Size(280, 20);
            this.minitxt.TabIndex = 3;
            this.minitxt.TabStop = false;
            // 
            // OpenpacFile
            // 
            this.OpenpacFile.Filter = "PAC File (*.pac)|*.pac|All File (*.*)|*.*";
            this.OpenpacFile.FileOk += new System.ComponentModel.CancelEventHandler(this.OpenpacFile_FileOk);
            // 
            // SavepacFile
            // 
            this.SavepacFile.Filter = "PAC File (*.pac)|*.pac|All File (*.*)|*.*";
            this.SavepacFile.FileOk += new System.ComponentModel.CancelEventHandler(this.SavepacFile_FileOk);
            // 
            // MainForm
            // 
            this.AllowDrop = true;
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(379, 324);
            this.Controls.Add(this.minitxt);
            this.Controls.Add(this.pacname);
            this.Controls.Add(this.ModeChange);
            this.Controls.Add(this.MainStrip);
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.MainMenuStrip = this.MainStrip;
            this.MinimumSize = new System.Drawing.Size(395, 363);
            this.Name = "MainForm";
            this.Text = "PSA Compressor";
            this.DragDrop += new System.Windows.Forms.DragEventHandler(this.MainForm_DragDrop);
            this.DragEnter += new System.Windows.Forms.DragEventHandler(this.MainForm_DragEnter);
            this.MainStrip.ResumeLayout(false);
            this.MainStrip.PerformLayout();
            this.ModeChange.ResumeLayout(false);
            this.CmpressMode.ResumeLayout(false);
            this.CmpressMode.PerformLayout();
            this.EventEditMode.ResumeLayout(false);
            this.EventEditMode.PerformLayout();
            this.EvPasteStrip.ResumeLayout(false);
            this.EvCopyStrip.ResumeLayout(false);
            this.EvStrip.ResumeLayout(false);
            this.EventTab.ResumeLayout(false);
            this.EvSp.ResumeLayout(false);
            this.EvSp.PerformLayout();
            this.EvSuba.ResumeLayout(false);
            this.EvSuba.PerformLayout();
            this.AnimStrip.ResumeLayout(false);
            this.EvRn.ResumeLayout(false);
            this.EvRn.PerformLayout();
            this.EvRnStrip.ResumeLayout(false);
            this.EvOvr.ResumeLayout(false);
            this.EvOvr.PerformLayout();
            this.EvOvrStrip.ResumeLayout(false);
            this.AtrEditMode.ResumeLayout(false);
            this.AtrEditMode.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.AtrEdList)).EndInit();
            this.AtrEdStrip.ResumeLayout(false);
            this.ArticleEditMode.ResumeLayout(false);
            this.ArticleEditMode.PerformLayout();
            this.ArticleTab.ResumeLayout(false);
            this.ArtAction.ResumeLayout(false);
            this.ArtAction.PerformLayout();
            this.ArtSuba.ResumeLayout(false);
            this.ArtSuba.PerformLayout();
            this.ArtParam.ResumeLayout(false);
            this.ArtParam.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.ArtParList)).EndInit();
            this.ArtParStrip.ResumeLayout(false);
            this.ArtData.ResumeLayout(false);
            this.ArtData.PerformLayout();
            this.DataDTStrip.ResumeLayout(false);
            this.ArtCompress.ResumeLayout(false);
            this.ArtCompress.PerformLayout();
            this.DataViewMode.ResumeLayout(false);
            this.DataTab.ResumeLayout(false);
            this.DataOffset.ResumeLayout(false);
            this.DataTable.ResumeLayout(false);
            this.DataExRn.ResumeLayout(false);
            this.DataExrnStrip.ResumeLayout(false);
            this.DMisc.ResumeLayout(false);
            this.DMiscSplit.Panel1.ResumeLayout(false);
            this.DMiscSplit.Panel2.ResumeLayout(false);
            this.DMiscSplit.Panel2.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.DMiscSplit)).EndInit();
            this.DMiscSplit.ResumeLayout(false);
            this.ResumeLayout(false);
            this.PerformLayout();

        }
    }
}
